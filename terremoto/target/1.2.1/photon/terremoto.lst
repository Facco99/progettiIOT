
c:/IOT/progetti/terremoto/target/1.2.1/photon/terremoto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001668  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a1680  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000068  20000300  080a1684  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000594  20000368  20000368  00030368  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a16ec  080a16ec  000216ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a1714  080a1714  00021714  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00098917  00000000  00000000  00021718  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000e5dd  00000000  00000000  000ba02f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ef9f  00000000  00000000  000c860c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001b18  00000000  00000000  000d75ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000028b8  00000000  00000000  000d90c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00024312  00000000  00000000  000db97b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002071f  00000000  00000000  000ffc8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009f060  00000000  00000000  001203ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000aab0  00000000  00000000  001bf40c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	a4 13 0a 08                                         ....

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f967 	bl	80a1300 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f96c 	bl	80a1316 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a1684 	.word	0x080a1684
 80a004c:	20000368 	.word	0x20000368
 80a0050:	20000368 	.word	0x20000368
 80a0054:	200008fc 	.word	0x200008fc
 80a0058:	200008fc 	.word	0x200008fc

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fc47 	bl	80a08f0 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1640 	.word	0x080a1640
 80a0084:	080a1678 	.word	0x080a1678

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b812 	b.w	80a00b0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f81d 	bl	80a00cc <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bbed 	b.w	80a0874 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 bab7 	b.w	80a060c <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:
 * Author:
 * Date:
 */

// setup() runs once, when the device is first turned on.
void setup() {
 80a00b0:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
 80a00b2:	f000 fd1d 	bl	80a0af0 <_Z16_fetch_usbserialv>
 80a00b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00ba:	f000 fcff 	bl	80a0abc <_ZN9USBSerial5beginEl>
  leds.init();
}
 80a00be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
  leds.init();
 80a00c2:	4801      	ldr	r0, [pc, #4]	; (80a00c8 <setup+0x18>)
 80a00c4:	f000 b8ee 	b.w	80a02a4 <_ZN12ChainableLED4initEv>
 80a00c8:	2000036c 	.word	0x2000036c

080a00cc <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a00cc:	b513      	push	{r0, r1, r4, lr}
  // The core of your code will likely live here.
  int sensorState = digitalRead(D5);
 80a00ce:	2005      	movs	r0, #5
 80a00d0:	f000 ff42 	bl	80a0f58 <digitalRead>
 80a00d4:	4604      	mov	r4, r0
  Serial.println(sensorState);
 80a00d6:	f000 fd0b 	bl	80a0af0 <_Z16_fetch_usbserialv>
 80a00da:	4621      	mov	r1, r4
 80a00dc:	220a      	movs	r2, #10
 80a00de:	f000 fb54 	bl	80a078a <_ZN5Print7printlnEii>
  delay(100);
 80a00e2:	2064      	movs	r0, #100	; 0x64
 80a00e4:	f000 fb74 	bl	80a07d0 <delay>
    if(sensorState == HIGH){
 80a00e8:	2c01      	cmp	r4, #1
 80a00ea:	f04f 0200 	mov.w	r2, #0
        leds.setColorRGB(0, 255, 0, 0);
 80a00ee:	bf08      	it	eq
 80a00f0:	4613      	moveq	r3, r2
 80a00f2:	9200      	str	r2, [sp, #0]
 80a00f4:	bf07      	ittee	eq
 80a00f6:	4619      	moveq	r1, r3
 80a00f8:	22ff      	moveq	r2, #255	; 0xff
    }
    else{
        leds.setColorRGB(0, 0, 255, 0);
 80a00fa:	23ff      	movne	r3, #255	; 0xff
 80a00fc:	4611      	movne	r1, r2
 80a00fe:	4802      	ldr	r0, [pc, #8]	; (80a0108 <loop+0x3c>)
 80a0100:	f000 f887 	bl	80a0212 <_ZN12ChainableLED11setColorRGBEhhhh>
    }


 80a0104:	b002      	add	sp, #8
 80a0106:	bd10      	pop	{r4, pc}
 80a0108:	2000036c 	.word	0x2000036c

080a010c <_GLOBAL__sub_I_leds>:
 80a010c:	b510      	push	{r4, lr}
#include <Grove_ChainableLED.h>
 
#define NUM_LEDS  1

ChainableLED leds(D2, D3, NUM_LEDS);
 80a010e:	4c08      	ldr	r4, [pc, #32]	; (80a0130 <_GLOBAL__sub_I_leds+0x24>)
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0110:	f000 f8e6 	bl	80a02e0 <HAL_Pin_Map>
 80a0114:	2203      	movs	r2, #3
 80a0116:	2102      	movs	r1, #2
 80a0118:	4620      	mov	r0, r4
 80a011a:	2301      	movs	r3, #1
 80a011c:	f000 f80e 	bl	80a013c <_ZN12ChainableLEDC1Ehhh>
 80a0120:	4620      	mov	r0, r4
    else{
        leds.setColorRGB(0, 0, 255, 0);
    }


 80a0122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include <Grove_ChainableLED.h>
 
#define NUM_LEDS  1

ChainableLED leds(D2, D3, NUM_LEDS);
 80a0126:	4a03      	ldr	r2, [pc, #12]	; (80a0134 <_GLOBAL__sub_I_leds+0x28>)
 80a0128:	4903      	ldr	r1, [pc, #12]	; (80a0138 <_GLOBAL__sub_I_leds+0x2c>)
 80a012a:	f000 bf83 	b.w	80a1034 <__aeabi_atexit>
 80a012e:	bf00      	nop
 80a0130:	2000036c 	.word	0x2000036c
 80a0134:	20000368 	.word	0x20000368
 80a0138:	080a0157 	.word	0x080a0157

080a013c <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
 80a013c:	b510      	push	{r4, lr}
 80a013e:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
 80a0140:	7001      	strb	r1, [r0, #0]
 80a0142:	7042      	strb	r2, [r0, #1]
 80a0144:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
 80a0146:	2101      	movs	r1, #1
 80a0148:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80a014c:	f001 f8c2 	bl	80a12d4 <calloc>
 80a0150:	6060      	str	r0, [r4, #4]
}
 80a0152:	4620      	mov	r0, r4
 80a0154:	bd10      	pop	{r4, pc}

080a0156 <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
 80a0156:	b510      	push	{r4, lr}
 80a0158:	4604      	mov	r4, r0
{
    free(_led_state);
 80a015a:	6840      	ldr	r0, [r0, #4]
 80a015c:	f000 fa56 	bl	80a060c <free>
}
 80a0160:	4620      	mov	r0, r4
 80a0162:	bd10      	pop	{r4, pc}

080a0164 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
 80a0164:	b510      	push	{r4, lr}
 80a0166:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
 80a0168:	2100      	movs	r1, #0
 80a016a:	7800      	ldrb	r0, [r0, #0]
 80a016c:	f000 fedb 	bl	80a0f26 <digitalWrite>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0170:	2014      	movs	r0, #20
 80a0172:	f000 f8f5 	bl	80a0360 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
 80a0176:	7820      	ldrb	r0, [r4, #0]
 80a0178:	2101      	movs	r1, #1
 80a017a:	f000 fed4 	bl	80a0f26 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
 80a017e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0182:	2014      	movs	r0, #20
 80a0184:	f000 b8ec 	b.w	80a0360 <HAL_Delay_Microseconds>

080a0188 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
 80a0188:	b570      	push	{r4, r5, r6, lr}
 80a018a:	4606      	mov	r6, r0
 80a018c:	460d      	mov	r5, r1
 80a018e:	2408      	movs	r4, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
 80a0190:	f015 0f80 	tst.w	r5, #128	; 0x80
            digitalWrite(_data_pin, HIGH);
 80a0194:	bf14      	ite	ne
 80a0196:	2101      	movne	r1, #1
        else
            digitalWrite(_data_pin, LOW);
 80a0198:	2100      	moveq	r1, #0
 80a019a:	7870      	ldrb	r0, [r6, #1]
 80a019c:	f000 fec3 	bl	80a0f26 <digitalWrite>
 80a01a0:	3c01      	subs	r4, #1
        clk();
 80a01a2:	4630      	mov	r0, r6
 80a01a4:	f7ff ffde 	bl	80a0164 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
 80a01a8:	006d      	lsls	r5, r5, #1
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
 80a01aa:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
        else
            digitalWrite(_data_pin, LOW);
        clk();

        // Advance to the next bit to send
        b <<= 1;
 80a01ae:	b2ed      	uxtb	r5, r5
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
 80a01b0:	d1ee      	bne.n	80a0190 <_ZN12ChainableLED8sendByteEh+0x8>
        clk();

        // Advance to the next bit to send
        b <<= 1;
    }
}
 80a01b2:	bd70      	pop	{r4, r5, r6, pc}

080a01b4 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
 80a01b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a01b6:	4616      	mov	r6, r2
 80a01b8:	460d      	mov	r5, r1
 80a01ba:	4604      	mov	r4, r0
 80a01bc:	461f      	mov	r7, r3
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
 80a01be:	f013 0f80 	tst.w	r3, #128	; 0x80
 80a01c2:	bf14      	ite	ne
 80a01c4:	21c0      	movne	r1, #192	; 0xc0
 80a01c6:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
 80a01c8:	065a      	lsls	r2, r3, #25
 80a01ca:	bf58      	it	pl
 80a01cc:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
 80a01d0:	0633      	lsls	r3, r6, #24
 80a01d2:	bf58      	it	pl
 80a01d4:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
 80a01d8:	0670      	lsls	r0, r6, #25
 80a01da:	bf58      	it	pl
 80a01dc:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
 80a01e0:	062a      	lsls	r2, r5, #24
 80a01e2:	bf58      	it	pl
 80a01e4:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
 80a01e8:	066b      	lsls	r3, r5, #25
 80a01ea:	bf58      	it	pl
 80a01ec:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
 80a01f0:	4620      	mov	r0, r4
 80a01f2:	f7ff ffc9 	bl	80a0188 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
 80a01f6:	4639      	mov	r1, r7
 80a01f8:	4620      	mov	r0, r4
 80a01fa:	f7ff ffc5 	bl	80a0188 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
 80a01fe:	4631      	mov	r1, r6
 80a0200:	4620      	mov	r0, r4
 80a0202:	f7ff ffc1 	bl	80a0188 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
 80a0206:	4629      	mov	r1, r5
 80a0208:	4620      	mov	r0, r4
}
 80a020a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    sendByte(prefix);

    // Now must send the 3 colors
    sendByte(blue);
    sendByte(green);
    sendByte(red);
 80a020e:	f7ff bfbb 	b.w	80a0188 <_ZN12ChainableLED8sendByteEh>

080a0212 <_ZN12ChainableLED11setColorRGBEhhhh>:
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
 80a0212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0216:	4604      	mov	r4, r0
 80a0218:	460e      	mov	r6, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
 80a021a:	2100      	movs	r1, #0
    sendByte(green);
    sendByte(red);
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
 80a021c:	4690      	mov	r8, r2
 80a021e:	4699      	mov	r9, r3
 80a0220:	f89d a020 	ldrb.w	sl, [sp, #32]
    // Send data frame prefix (32x "0")
    sendByte(0x00);
 80a0224:	f7ff ffb0 	bl	80a0188 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0228:	2100      	movs	r1, #0
 80a022a:	4620      	mov	r0, r4
 80a022c:	f7ff ffac 	bl	80a0188 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0230:	2100      	movs	r1, #0
 80a0232:	4620      	mov	r0, r4
 80a0234:	f7ff ffa8 	bl	80a0188 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0238:	2100      	movs	r1, #0
 80a023a:	4620      	mov	r0, r4
 80a023c:	f7ff ffa4 	bl	80a0188 <_ZN12ChainableLED8sendByteEh>
 80a0240:	2500      	movs	r5, #0
    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
 80a0242:	eb06 0746 	add.w	r7, r6, r6, lsl #1
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
 80a0246:	78a2      	ldrb	r2, [r4, #2]
 80a0248:	b2eb      	uxtb	r3, r5
 80a024a:	429a      	cmp	r2, r3
 80a024c:	d918      	bls.n	80a0280 <_ZN12ChainableLED11setColorRGBEhhhh+0x6e>
    {
        if (i == led)
 80a024e:	42b3      	cmp	r3, r6
 80a0250:	d10a      	bne.n	80a0268 <_ZN12ChainableLED11setColorRGBEhhhh+0x56>
        {
            _led_state[i*3 + _CL_RED] = red;
 80a0252:	6862      	ldr	r2, [r4, #4]
 80a0254:	f802 8007 	strb.w	r8, [r2, r7]
            _led_state[i*3 + _CL_GREEN] = green;
 80a0258:	6862      	ldr	r2, [r4, #4]
 80a025a:	443a      	add	r2, r7
 80a025c:	f882 9001 	strb.w	r9, [r2, #1]
            _led_state[i*3 + _CL_BLUE] = blue;
 80a0260:	6862      	ldr	r2, [r4, #4]
 80a0262:	443a      	add	r2, r7
 80a0264:	f882 a002 	strb.w	sl, [r2, #2]
        }

        sendColor(_led_state[i*3 + _CL_RED],
 80a0268:	6860      	ldr	r0, [r4, #4]
 80a026a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80a026e:	1842      	adds	r2, r0, r1
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
 80a0270:	7893      	ldrb	r3, [r2, #2]
 80a0272:	5c41      	ldrb	r1, [r0, r1]
 80a0274:	7852      	ldrb	r2, [r2, #1]
 80a0276:	4620      	mov	r0, r4
 80a0278:	f7ff ff9c 	bl	80a01b4 <_ZN12ChainableLED9sendColorEhhh>
 80a027c:	3501      	adds	r5, #1
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
 80a027e:	e7e2      	b.n	80a0246 <_ZN12ChainableLED11setColorRGBEhhhh+0x34>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
 80a0280:	4620      	mov	r0, r4
 80a0282:	2100      	movs	r1, #0
 80a0284:	f7ff ff80 	bl	80a0188 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0288:	4620      	mov	r0, r4
 80a028a:	2100      	movs	r1, #0
 80a028c:	f7ff ff7c 	bl	80a0188 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0290:	4620      	mov	r0, r4
 80a0292:	2100      	movs	r1, #0
 80a0294:	f7ff ff78 	bl	80a0188 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0298:	4620      	mov	r0, r4
}
 80a029a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    // Terminate data frame (32x "0")
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
 80a029e:	2100      	movs	r1, #0
 80a02a0:	f7ff bf72 	b.w	80a0188 <_ZN12ChainableLED8sendByteEh>

080a02a4 <_ZN12ChainableLED4initEv>:
}

// --------------------------------------------------------------------------------------

void ChainableLED::init()
{
 80a02a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a02a6:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
 80a02a8:	2101      	movs	r1, #1
 80a02aa:	7800      	ldrb	r0, [r0, #0]
 80a02ac:	f000 fe2a 	bl	80a0f04 <pinMode>
    pinMode(_data_pin, OUTPUT);
 80a02b0:	2500      	movs	r5, #0
 80a02b2:	2101      	movs	r1, #1
 80a02b4:	7860      	ldrb	r0, [r4, #1]
 80a02b6:	f000 fe25 	bl	80a0f04 <pinMode>

    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
 80a02ba:	462e      	mov	r6, r5
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
 80a02bc:	78a3      	ldrb	r3, [r4, #2]
 80a02be:	b2e9      	uxtb	r1, r5
 80a02c0:	428b      	cmp	r3, r1
 80a02c2:	f105 0501 	add.w	r5, r5, #1
 80a02c6:	d906      	bls.n	80a02d6 <_ZN12ChainableLED4initEv+0x32>
        setColorRGB(i, 0, 0, 0);
 80a02c8:	2300      	movs	r3, #0
 80a02ca:	9600      	str	r6, [sp, #0]
 80a02cc:	461a      	mov	r2, r3
 80a02ce:	4620      	mov	r0, r4
 80a02d0:	f7ff ff9f 	bl	80a0212 <_ZN12ChainableLED11setColorRGBEhhhh>
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
 80a02d4:	e7f2      	b.n	80a02bc <_ZN12ChainableLED4initEv+0x18>
        setColorRGB(i, 0, 0, 0);
}
 80a02d6:	b002      	add	sp, #8
 80a02d8:	bd70      	pop	{r4, r5, r6, pc}

080a02da <_GLOBAL__sub_I__ZN12ChainableLEDC2Ehhh>:
 80a02da:	f000 b801 	b.w	80a02e0 <HAL_Pin_Map>
	...

080a02e0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a02e0:	b508      	push	{r3, lr}
 80a02e2:	4b02      	ldr	r3, [pc, #8]	; (80a02ec <HAL_Pin_Map+0xc>)
 80a02e4:	681b      	ldr	r3, [r3, #0]
 80a02e6:	681b      	ldr	r3, [r3, #0]
 80a02e8:	9301      	str	r3, [sp, #4]
 80a02ea:	bd08      	pop	{r3, pc}
 80a02ec:	080601b0 	.word	0x080601b0

080a02f0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a02f0:	b508      	push	{r3, lr}
 80a02f2:	4b02      	ldr	r3, [pc, #8]	; (80a02fc <HAL_Pin_Mode+0xc>)
 80a02f4:	681b      	ldr	r3, [r3, #0]
 80a02f6:	689b      	ldr	r3, [r3, #8]
 80a02f8:	9301      	str	r3, [sp, #4]
 80a02fa:	bd08      	pop	{r3, pc}
 80a02fc:	080601b0 	.word	0x080601b0

080a0300 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0300:	b508      	push	{r3, lr}
 80a0302:	4b02      	ldr	r3, [pc, #8]	; (80a030c <HAL_Get_Pin_Mode+0xc>)
 80a0304:	681b      	ldr	r3, [r3, #0]
 80a0306:	68db      	ldr	r3, [r3, #12]
 80a0308:	9301      	str	r3, [sp, #4]
 80a030a:	bd08      	pop	{r3, pc}
 80a030c:	080601b0 	.word	0x080601b0

080a0310 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0310:	b508      	push	{r3, lr}
 80a0312:	4b02      	ldr	r3, [pc, #8]	; (80a031c <HAL_GPIO_Write+0xc>)
 80a0314:	681b      	ldr	r3, [r3, #0]
 80a0316:	691b      	ldr	r3, [r3, #16]
 80a0318:	9301      	str	r3, [sp, #4]
 80a031a:	bd08      	pop	{r3, pc}
 80a031c:	080601b0 	.word	0x080601b0

080a0320 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0320:	b508      	push	{r3, lr}
 80a0322:	4b02      	ldr	r3, [pc, #8]	; (80a032c <HAL_GPIO_Read+0xc>)
 80a0324:	681b      	ldr	r3, [r3, #0]
 80a0326:	695b      	ldr	r3, [r3, #20]
 80a0328:	9301      	str	r3, [sp, #4]
 80a032a:	bd08      	pop	{r3, pc}
 80a032c:	080601b0 	.word	0x080601b0

080a0330 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0330:	b508      	push	{r3, lr}
 80a0332:	4b02      	ldr	r3, [pc, #8]	; (80a033c <HAL_SPI_Init+0xc>)
 80a0334:	681b      	ldr	r3, [r3, #0]
 80a0336:	69db      	ldr	r3, [r3, #28]
 80a0338:	9301      	str	r3, [sp, #4]
 80a033a:	bd08      	pop	{r3, pc}
 80a033c:	080601b4 	.word	0x080601b4

080a0340 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0340:	b508      	push	{r3, lr}
 80a0342:	4b02      	ldr	r3, [pc, #8]	; (80a034c <HAL_SPI_Is_Enabled+0xc>)
 80a0344:	681b      	ldr	r3, [r3, #0]
 80a0346:	6a1b      	ldr	r3, [r3, #32]
 80a0348:	9301      	str	r3, [sp, #4]
 80a034a:	bd08      	pop	{r3, pc}
 80a034c:	080601b4 	.word	0x080601b4

080a0350 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0350:	b508      	push	{r3, lr}
 80a0352:	4b02      	ldr	r3, [pc, #8]	; (80a035c <HAL_RNG_GetRandomNumber+0xc>)
 80a0354:	681b      	ldr	r3, [r3, #0]
 80a0356:	685b      	ldr	r3, [r3, #4]
 80a0358:	9301      	str	r3, [sp, #4]
 80a035a:	bd08      	pop	{r3, pc}
 80a035c:	0806019c 	.word	0x0806019c

080a0360 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0360:	b508      	push	{r3, lr}
 80a0362:	4b02      	ldr	r3, [pc, #8]	; (80a036c <HAL_Delay_Microseconds+0xc>)
 80a0364:	681b      	ldr	r3, [r3, #0]
 80a0366:	68db      	ldr	r3, [r3, #12]
 80a0368:	9301      	str	r3, [sp, #4]
 80a036a:	bd08      	pop	{r3, pc}
 80a036c:	0806019c 	.word	0x0806019c

080a0370 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0370:	b508      	push	{r3, lr}
 80a0372:	4b02      	ldr	r3, [pc, #8]	; (80a037c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0374:	681b      	ldr	r3, [r3, #0]
 80a0376:	695b      	ldr	r3, [r3, #20]
 80a0378:	9301      	str	r3, [sp, #4]
 80a037a:	bd08      	pop	{r3, pc}
 80a037c:	0806019c 	.word	0x0806019c

080a0380 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0380:	b508      	push	{r3, lr}
 80a0382:	4b02      	ldr	r3, [pc, #8]	; (80a038c <os_mutex_create+0xc>)
 80a0384:	681b      	ldr	r3, [r3, #0]
 80a0386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0388:	9301      	str	r3, [sp, #4]
 80a038a:	bd08      	pop	{r3, pc}
 80a038c:	080601d0 	.word	0x080601d0

080a0390 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0390:	b508      	push	{r3, lr}
 80a0392:	4b02      	ldr	r3, [pc, #8]	; (80a039c <HAL_USART_Init+0xc>)
 80a0394:	681b      	ldr	r3, [r3, #0]
 80a0396:	699b      	ldr	r3, [r3, #24]
 80a0398:	9301      	str	r3, [sp, #4]
 80a039a:	bd08      	pop	{r3, pc}
 80a039c:	080601c4 	.word	0x080601c4

080a03a0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a03a0:	b508      	push	{r3, lr}
 80a03a2:	4b02      	ldr	r3, [pc, #8]	; (80a03ac <HAL_USART_Write_Data+0xc>)
 80a03a4:	681b      	ldr	r3, [r3, #0]
 80a03a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a03a8:	9301      	str	r3, [sp, #4]
 80a03aa:	bd08      	pop	{r3, pc}
 80a03ac:	080601c4 	.word	0x080601c4

080a03b0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a03b0:	b508      	push	{r3, lr}
 80a03b2:	4b02      	ldr	r3, [pc, #8]	; (80a03bc <HAL_USART_Available_Data+0xc>)
 80a03b4:	681b      	ldr	r3, [r3, #0]
 80a03b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a03b8:	9301      	str	r3, [sp, #4]
 80a03ba:	bd08      	pop	{r3, pc}
 80a03bc:	080601c4 	.word	0x080601c4

080a03c0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a03c0:	b508      	push	{r3, lr}
 80a03c2:	4b02      	ldr	r3, [pc, #8]	; (80a03cc <HAL_USART_Read_Data+0xc>)
 80a03c4:	681b      	ldr	r3, [r3, #0]
 80a03c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a03c8:	9301      	str	r3, [sp, #4]
 80a03ca:	bd08      	pop	{r3, pc}
 80a03cc:	080601c4 	.word	0x080601c4

080a03d0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a03d0:	b508      	push	{r3, lr}
 80a03d2:	4b02      	ldr	r3, [pc, #8]	; (80a03dc <HAL_USART_Peek_Data+0xc>)
 80a03d4:	681b      	ldr	r3, [r3, #0]
 80a03d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a03d8:	9301      	str	r3, [sp, #4]
 80a03da:	bd08      	pop	{r3, pc}
 80a03dc:	080601c4 	.word	0x080601c4

080a03e0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a03e0:	b508      	push	{r3, lr}
 80a03e2:	4b02      	ldr	r3, [pc, #8]	; (80a03ec <HAL_USART_Flush_Data+0xc>)
 80a03e4:	681b      	ldr	r3, [r3, #0]
 80a03e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a03e8:	9301      	str	r3, [sp, #4]
 80a03ea:	bd08      	pop	{r3, pc}
 80a03ec:	080601c4 	.word	0x080601c4

080a03f0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a03f0:	b508      	push	{r3, lr}
 80a03f2:	4b02      	ldr	r3, [pc, #8]	; (80a03fc <HAL_USART_Is_Enabled+0xc>)
 80a03f4:	681b      	ldr	r3, [r3, #0]
 80a03f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a03f8:	9301      	str	r3, [sp, #4]
 80a03fa:	bd08      	pop	{r3, pc}
 80a03fc:	080601c4 	.word	0x080601c4

080a0400 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0400:	b508      	push	{r3, lr}
 80a0402:	4b02      	ldr	r3, [pc, #8]	; (80a040c <HAL_USART_Available_Data_For_Write+0xc>)
 80a0404:	681b      	ldr	r3, [r3, #0]
 80a0406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0408:	9301      	str	r3, [sp, #4]
 80a040a:	bd08      	pop	{r3, pc}
 80a040c:	080601c4 	.word	0x080601c4

080a0410 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0410:	b508      	push	{r3, lr}
 80a0412:	4b02      	ldr	r3, [pc, #8]	; (80a041c <HAL_I2C_Write_Data+0xc>)
 80a0414:	681b      	ldr	r3, [r3, #0]
 80a0416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0418:	9301      	str	r3, [sp, #4]
 80a041a:	bd08      	pop	{r3, pc}
 80a041c:	080601ac 	.word	0x080601ac

080a0420 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0420:	b508      	push	{r3, lr}
 80a0422:	4b02      	ldr	r3, [pc, #8]	; (80a042c <HAL_I2C_Available_Data+0xc>)
 80a0424:	681b      	ldr	r3, [r3, #0]
 80a0426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0428:	9301      	str	r3, [sp, #4]
 80a042a:	bd08      	pop	{r3, pc}
 80a042c:	080601ac 	.word	0x080601ac

080a0430 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0430:	b508      	push	{r3, lr}
 80a0432:	4b02      	ldr	r3, [pc, #8]	; (80a043c <HAL_I2C_Read_Data+0xc>)
 80a0434:	681b      	ldr	r3, [r3, #0]
 80a0436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0438:	9301      	str	r3, [sp, #4]
 80a043a:	bd08      	pop	{r3, pc}
 80a043c:	080601ac 	.word	0x080601ac

080a0440 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0440:	b508      	push	{r3, lr}
 80a0442:	4b02      	ldr	r3, [pc, #8]	; (80a044c <HAL_I2C_Peek_Data+0xc>)
 80a0444:	681b      	ldr	r3, [r3, #0]
 80a0446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0448:	9301      	str	r3, [sp, #4]
 80a044a:	bd08      	pop	{r3, pc}
 80a044c:	080601ac 	.word	0x080601ac

080a0450 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0450:	b508      	push	{r3, lr}
 80a0452:	4b02      	ldr	r3, [pc, #8]	; (80a045c <HAL_I2C_Flush_Data+0xc>)
 80a0454:	681b      	ldr	r3, [r3, #0]
 80a0456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0458:	9301      	str	r3, [sp, #4]
 80a045a:	bd08      	pop	{r3, pc}
 80a045c:	080601ac 	.word	0x080601ac

080a0460 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0460:	b508      	push	{r3, lr}
 80a0462:	4b02      	ldr	r3, [pc, #8]	; (80a046c <HAL_I2C_Is_Enabled+0xc>)
 80a0464:	681b      	ldr	r3, [r3, #0]
 80a0466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0468:	9301      	str	r3, [sp, #4]
 80a046a:	bd08      	pop	{r3, pc}
 80a046c:	080601ac 	.word	0x080601ac

080a0470 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0470:	b508      	push	{r3, lr}
 80a0472:	4b03      	ldr	r3, [pc, #12]	; (80a0480 <HAL_I2C_Init+0x10>)
 80a0474:	681b      	ldr	r3, [r3, #0]
 80a0476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a047a:	9301      	str	r3, [sp, #4]
 80a047c:	bd08      	pop	{r3, pc}
 80a047e:	0000      	.short	0x0000
 80a0480:	080601ac 	.word	0x080601ac

080a0484 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0484:	b508      	push	{r3, lr}
 80a0486:	4b02      	ldr	r3, [pc, #8]	; (80a0490 <HAL_USB_USART_Init+0xc>)
 80a0488:	681b      	ldr	r3, [r3, #0]
 80a048a:	681b      	ldr	r3, [r3, #0]
 80a048c:	9301      	str	r3, [sp, #4]
 80a048e:	bd08      	pop	{r3, pc}
 80a0490:	080601d8 	.word	0x080601d8

080a0494 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0494:	b508      	push	{r3, lr}
 80a0496:	4b02      	ldr	r3, [pc, #8]	; (80a04a0 <HAL_USB_USART_Begin+0xc>)
 80a0498:	681b      	ldr	r3, [r3, #0]
 80a049a:	685b      	ldr	r3, [r3, #4]
 80a049c:	9301      	str	r3, [sp, #4]
 80a049e:	bd08      	pop	{r3, pc}
 80a04a0:	080601d8 	.word	0x080601d8

080a04a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a04a4:	b508      	push	{r3, lr}
 80a04a6:	4b02      	ldr	r3, [pc, #8]	; (80a04b0 <HAL_USB_USART_Available_Data+0xc>)
 80a04a8:	681b      	ldr	r3, [r3, #0]
 80a04aa:	691b      	ldr	r3, [r3, #16]
 80a04ac:	9301      	str	r3, [sp, #4]
 80a04ae:	bd08      	pop	{r3, pc}
 80a04b0:	080601d8 	.word	0x080601d8

080a04b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a04b4:	b508      	push	{r3, lr}
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a04b8:	681b      	ldr	r3, [r3, #0]
 80a04ba:	695b      	ldr	r3, [r3, #20]
 80a04bc:	9301      	str	r3, [sp, #4]
 80a04be:	bd08      	pop	{r3, pc}
 80a04c0:	080601d8 	.word	0x080601d8

080a04c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a04c4:	b508      	push	{r3, lr}
 80a04c6:	4b02      	ldr	r3, [pc, #8]	; (80a04d0 <HAL_USB_USART_Receive_Data+0xc>)
 80a04c8:	681b      	ldr	r3, [r3, #0]
 80a04ca:	699b      	ldr	r3, [r3, #24]
 80a04cc:	9301      	str	r3, [sp, #4]
 80a04ce:	bd08      	pop	{r3, pc}
 80a04d0:	080601d8 	.word	0x080601d8

080a04d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a04d4:	b508      	push	{r3, lr}
 80a04d6:	4b02      	ldr	r3, [pc, #8]	; (80a04e0 <HAL_USB_USART_Send_Data+0xc>)
 80a04d8:	681b      	ldr	r3, [r3, #0]
 80a04da:	69db      	ldr	r3, [r3, #28]
 80a04dc:	9301      	str	r3, [sp, #4]
 80a04de:	bd08      	pop	{r3, pc}
 80a04e0:	080601d8 	.word	0x080601d8

080a04e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a04e4:	b508      	push	{r3, lr}
 80a04e6:	4b02      	ldr	r3, [pc, #8]	; (80a04f0 <HAL_USB_USART_Flush_Data+0xc>)
 80a04e8:	681b      	ldr	r3, [r3, #0]
 80a04ea:	6a1b      	ldr	r3, [r3, #32]
 80a04ec:	9301      	str	r3, [sp, #4]
 80a04ee:	bd08      	pop	{r3, pc}
 80a04f0:	080601d8 	.word	0x080601d8

080a04f4 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a04f4:	b508      	push	{r3, lr}
 80a04f6:	4b02      	ldr	r3, [pc, #8]	; (80a0500 <inet_gethostbyname+0xc>)
 80a04f8:	681b      	ldr	r3, [r3, #0]
 80a04fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a04fc:	9301      	str	r3, [sp, #4]
 80a04fe:	bd08      	pop	{r3, pc}
 80a0500:	080601c0 	.word	0x080601c0

080a0504 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0504:	b508      	push	{r3, lr}
 80a0506:	4b02      	ldr	r3, [pc, #8]	; (80a0510 <set_system_mode+0xc>)
 80a0508:	681b      	ldr	r3, [r3, #0]
 80a050a:	685b      	ldr	r3, [r3, #4]
 80a050c:	9301      	str	r3, [sp, #4]
 80a050e:	bd08      	pop	{r3, pc}
 80a0510:	080601a4 	.word	0x080601a4

080a0514 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0514:	b508      	push	{r3, lr}
 80a0516:	4b02      	ldr	r3, [pc, #8]	; (80a0520 <system_delay_ms+0xc>)
 80a0518:	681b      	ldr	r3, [r3, #0]
 80a051a:	695b      	ldr	r3, [r3, #20]
 80a051c:	9301      	str	r3, [sp, #4]
 80a051e:	bd08      	pop	{r3, pc}
 80a0520:	080601a4 	.word	0x080601a4

080a0524 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0524:	b508      	push	{r3, lr}
 80a0526:	4b03      	ldr	r3, [pc, #12]	; (80a0534 <system_ctrl_set_app_request_handler+0x10>)
 80a0528:	681b      	ldr	r3, [r3, #0]
 80a052a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a052e:	9301      	str	r3, [sp, #4]
 80a0530:	bd08      	pop	{r3, pc}
 80a0532:	0000      	.short	0x0000
 80a0534:	080601a4 	.word	0x080601a4

080a0538 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0538:	b508      	push	{r3, lr}
 80a053a:	4b03      	ldr	r3, [pc, #12]	; (80a0548 <system_ctrl_set_result+0x10>)
 80a053c:	681b      	ldr	r3, [r3, #0]
 80a053e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0542:	9301      	str	r3, [sp, #4]
 80a0544:	bd08      	pop	{r3, pc}
 80a0546:	0000      	.short	0x0000
 80a0548:	080601a4 	.word	0x080601a4

080a054c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a054c:	b508      	push	{r3, lr}
 80a054e:	4b02      	ldr	r3, [pc, #8]	; (80a0558 <network_connect+0xc>)
 80a0550:	681b      	ldr	r3, [r3, #0]
 80a0552:	685b      	ldr	r3, [r3, #4]
 80a0554:	9301      	str	r3, [sp, #4]
 80a0556:	bd08      	pop	{r3, pc}
 80a0558:	080601c8 	.word	0x080601c8

080a055c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a055c:	b508      	push	{r3, lr}
 80a055e:	4b02      	ldr	r3, [pc, #8]	; (80a0568 <network_connecting+0xc>)
 80a0560:	681b      	ldr	r3, [r3, #0]
 80a0562:	689b      	ldr	r3, [r3, #8]
 80a0564:	9301      	str	r3, [sp, #4]
 80a0566:	bd08      	pop	{r3, pc}
 80a0568:	080601c8 	.word	0x080601c8

080a056c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a056c:	b508      	push	{r3, lr}
 80a056e:	4b02      	ldr	r3, [pc, #8]	; (80a0578 <network_disconnect+0xc>)
 80a0570:	681b      	ldr	r3, [r3, #0]
 80a0572:	68db      	ldr	r3, [r3, #12]
 80a0574:	9301      	str	r3, [sp, #4]
 80a0576:	bd08      	pop	{r3, pc}
 80a0578:	080601c8 	.word	0x080601c8

080a057c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a057c:	b508      	push	{r3, lr}
 80a057e:	4b02      	ldr	r3, [pc, #8]	; (80a0588 <network_ready+0xc>)
 80a0580:	681b      	ldr	r3, [r3, #0]
 80a0582:	691b      	ldr	r3, [r3, #16]
 80a0584:	9301      	str	r3, [sp, #4]
 80a0586:	bd08      	pop	{r3, pc}
 80a0588:	080601c8 	.word	0x080601c8

080a058c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a058c:	b508      	push	{r3, lr}
 80a058e:	4b02      	ldr	r3, [pc, #8]	; (80a0598 <network_on+0xc>)
 80a0590:	681b      	ldr	r3, [r3, #0]
 80a0592:	695b      	ldr	r3, [r3, #20]
 80a0594:	9301      	str	r3, [sp, #4]
 80a0596:	bd08      	pop	{r3, pc}
 80a0598:	080601c8 	.word	0x080601c8

080a059c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a059c:	b508      	push	{r3, lr}
 80a059e:	4b02      	ldr	r3, [pc, #8]	; (80a05a8 <network_off+0xc>)
 80a05a0:	681b      	ldr	r3, [r3, #0]
 80a05a2:	699b      	ldr	r3, [r3, #24]
 80a05a4:	9301      	str	r3, [sp, #4]
 80a05a6:	bd08      	pop	{r3, pc}
 80a05a8:	080601c8 	.word	0x080601c8

080a05ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a05ac:	b508      	push	{r3, lr}
 80a05ae:	4b02      	ldr	r3, [pc, #8]	; (80a05b8 <network_listen+0xc>)
 80a05b0:	681b      	ldr	r3, [r3, #0]
 80a05b2:	69db      	ldr	r3, [r3, #28]
 80a05b4:	9301      	str	r3, [sp, #4]
 80a05b6:	bd08      	pop	{r3, pc}
 80a05b8:	080601c8 	.word	0x080601c8

080a05bc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a05bc:	b508      	push	{r3, lr}
 80a05be:	4b02      	ldr	r3, [pc, #8]	; (80a05c8 <network_listening+0xc>)
 80a05c0:	681b      	ldr	r3, [r3, #0]
 80a05c2:	6a1b      	ldr	r3, [r3, #32]
 80a05c4:	9301      	str	r3, [sp, #4]
 80a05c6:	bd08      	pop	{r3, pc}
 80a05c8:	080601c8 	.word	0x080601c8

080a05cc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a05cc:	b508      	push	{r3, lr}
 80a05ce:	4b02      	ldr	r3, [pc, #8]	; (80a05d8 <network_set_listen_timeout+0xc>)
 80a05d0:	681b      	ldr	r3, [r3, #0]
 80a05d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a05d4:	9301      	str	r3, [sp, #4]
 80a05d6:	bd08      	pop	{r3, pc}
 80a05d8:	080601c8 	.word	0x080601c8

080a05dc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a05dc:	b508      	push	{r3, lr}
 80a05de:	4b02      	ldr	r3, [pc, #8]	; (80a05e8 <network_get_listen_timeout+0xc>)
 80a05e0:	681b      	ldr	r3, [r3, #0]
 80a05e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a05e4:	9301      	str	r3, [sp, #4]
 80a05e6:	bd08      	pop	{r3, pc}
 80a05e8:	080601c8 	.word	0x080601c8

080a05ec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a05ec:	b508      	push	{r3, lr}
 80a05ee:	4b02      	ldr	r3, [pc, #8]	; (80a05f8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a05f0:	681b      	ldr	r3, [r3, #0]
 80a05f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a05f4:	9301      	str	r3, [sp, #4]
 80a05f6:	bd08      	pop	{r3, pc}
 80a05f8:	080601cc 	.word	0x080601cc

080a05fc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a05fc:	b508      	push	{r3, lr}
 80a05fe:	4b02      	ldr	r3, [pc, #8]	; (80a0608 <malloc+0xc>)
 80a0600:	681b      	ldr	r3, [r3, #0]
 80a0602:	681b      	ldr	r3, [r3, #0]
 80a0604:	9301      	str	r3, [sp, #4]
 80a0606:	bd08      	pop	{r3, pc}
 80a0608:	080601a0 	.word	0x080601a0

080a060c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a060c:	b508      	push	{r3, lr}
 80a060e:	4b02      	ldr	r3, [pc, #8]	; (80a0618 <free+0xc>)
 80a0610:	681b      	ldr	r3, [r3, #0]
 80a0612:	685b      	ldr	r3, [r3, #4]
 80a0614:	9301      	str	r3, [sp, #4]
 80a0616:	bd08      	pop	{r3, pc}
 80a0618:	080601a0 	.word	0x080601a0

080a061c <_malloc_r>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a061c:	b508      	push	{r3, lr}
 80a061e:	4b02      	ldr	r3, [pc, #8]	; (80a0628 <_malloc_r+0xc>)
 80a0620:	681b      	ldr	r3, [r3, #0]
 80a0622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0624:	9301      	str	r3, [sp, #4]
 80a0626:	bd08      	pop	{r3, pc}
 80a0628:	080601a0 	.word	0x080601a0

080a062c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a062c:	4770      	bx	lr

080a062e <_ZN8SPIClassD0Ev>:
 80a062e:	b510      	push	{r4, lr}
 80a0630:	4604      	mov	r4, r0
 80a0632:	2110      	movs	r1, #16
 80a0634:	f000 fd03 	bl	80a103e <_ZdlPvj>
 80a0638:	4620      	mov	r0, r4
 80a063a:	bd10      	pop	{r4, pc}

080a063c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a063c:	b570      	push	{r4, r5, r6, lr}
 80a063e:	4604      	mov	r4, r0
 80a0640:	460e      	mov	r6, r1
 80a0642:	4b07      	ldr	r3, [pc, #28]	; (80a0660 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0644:	2500      	movs	r5, #0
 80a0646:	6003      	str	r3, [r0, #0]
 80a0648:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a064c:	f7ff fe98 	bl	80a0380 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0650:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0652:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0654:	f7ff fe6c 	bl	80a0330 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0658:	60a5      	str	r5, [r4, #8]
}
 80a065a:	4620      	mov	r0, r4
 80a065c:	bd70      	pop	{r4, r5, r6, pc}
 80a065e:	bf00      	nop
 80a0660:	080a13c0 	.word	0x080a13c0

080a0664 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0664:	7900      	ldrb	r0, [r0, #4]
 80a0666:	f7ff be6b 	b.w	80a0340 <HAL_SPI_Is_Enabled>
	...

080a066c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a066c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0670:	4b03      	ldr	r3, [pc, #12]	; (80a0680 <_GLOBAL__sub_I_System+0x14>)
 80a0672:	2000      	movs	r0, #0
 80a0674:	7018      	strb	r0, [r3, #0]
 80a0676:	8058      	strh	r0, [r3, #2]
 80a0678:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a067a:	f7ff bf43 	b.w	80a0504 <set_system_mode>
 80a067e:	bf00      	nop
 80a0680:	20000374 	.word	0x20000374

080a0684 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0686:	4606      	mov	r6, r0
 80a0688:	460d      	mov	r5, r1
 80a068a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a068c:	2400      	movs	r4, #0
  while (size--) {
 80a068e:	42bd      	cmp	r5, r7
 80a0690:	d00c      	beq.n	80a06ac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0692:	6833      	ldr	r3, [r6, #0]
 80a0694:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0698:	689b      	ldr	r3, [r3, #8]
 80a069a:	4630      	mov	r0, r6
 80a069c:	4798      	blx	r3
     if (chunk>=0)
 80a069e:	2800      	cmp	r0, #0
 80a06a0:	db01      	blt.n	80a06a6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a06a2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a06a4:	e7f3      	b.n	80a068e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a06a6:	2c00      	cmp	r4, #0
 80a06a8:	bf08      	it	eq
 80a06aa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a06ac:	4620      	mov	r0, r4
 80a06ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a06b0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a06b0:	b570      	push	{r4, r5, r6, lr}
 80a06b2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a06b4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a06b6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a06b8:	b149      	cbz	r1, 80a06ce <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a06ba:	f000 fe6b 	bl	80a1394 <strlen>
 80a06be:	682b      	ldr	r3, [r5, #0]
 80a06c0:	4602      	mov	r2, r0
 80a06c2:	4621      	mov	r1, r4
 80a06c4:	4628      	mov	r0, r5
    }
 80a06c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a06ca:	68db      	ldr	r3, [r3, #12]
 80a06cc:	4718      	bx	r3
    }
 80a06ce:	bd70      	pop	{r4, r5, r6, pc}

080a06d0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a06d0:	6803      	ldr	r3, [r0, #0]
 80a06d2:	689b      	ldr	r3, [r3, #8]
 80a06d4:	4718      	bx	r3

080a06d6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a06d6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a06d8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a06da:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a06dc:	f7ff fff8 	bl	80a06d0 <_ZN5Print5printEc>
  n += print('\n');
 80a06e0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a06e2:	4604      	mov	r4, r0
  n += print('\n');
 80a06e4:	4628      	mov	r0, r5
 80a06e6:	f7ff fff3 	bl	80a06d0 <_ZN5Print5printEc>
  return n;
}
 80a06ea:	4420      	add	r0, r4
 80a06ec:	bd38      	pop	{r3, r4, r5, pc}

080a06ee <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a06ee:	2a01      	cmp	r2, #1
 80a06f0:	bf98      	it	ls
 80a06f2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a06f4:	b530      	push	{r4, r5, lr}
 80a06f6:	460b      	mov	r3, r1
 80a06f8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a06fa:	2100      	movs	r1, #0
 80a06fc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0700:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0704:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0708:	fb05 3312 	mls	r3, r5, r2, r3
 80a070c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a070e:	2b09      	cmp	r3, #9
 80a0710:	bf94      	ite	ls
 80a0712:	3330      	addls	r3, #48	; 0x30
 80a0714:	3337      	addhi	r3, #55	; 0x37
 80a0716:	b2db      	uxtb	r3, r3
 80a0718:	4621      	mov	r1, r4
 80a071a:	f804 3901 	strb.w	r3, [r4], #-1
 80a071e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0720:	2d00      	cmp	r5, #0
 80a0722:	d1ef      	bne.n	80a0704 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0724:	f7ff ffc4 	bl	80a06b0 <_ZN5Print5writeEPKc>
}
 80a0728:	b00b      	add	sp, #44	; 0x2c
 80a072a:	bd30      	pop	{r4, r5, pc}

080a072c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a072c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a072e:	b922      	cbnz	r2, 80a073a <_ZN5Print5printEmi+0xe>
 80a0730:	6803      	ldr	r3, [r0, #0]
 80a0732:	b2c9      	uxtb	r1, r1
 80a0734:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0736:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0738:	4718      	bx	r3
  else return printNumber(n, base);
 80a073a:	b2d2      	uxtb	r2, r2
}
 80a073c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a073e:	f7ff bfd6 	b.w	80a06ee <_ZN5Print11printNumberEmh>

080a0742 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0742:	f7ff bff3 	b.w	80a072c <_ZN5Print5printEmi>

080a0746 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a0746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a074a:	4607      	mov	r7, r0
 80a074c:	460e      	mov	r6, r1
  if (base == 0) {
 80a074e:	4615      	mov	r5, r2
 80a0750:	b92a      	cbnz	r2, 80a075e <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a0752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a0756:	6803      	ldr	r3, [r0, #0]
 80a0758:	b2c9      	uxtb	r1, r1
 80a075a:	689b      	ldr	r3, [r3, #8]
 80a075c:	4718      	bx	r3
  } else if (base == 10) {
 80a075e:	2a0a      	cmp	r2, #10
 80a0760:	d102      	bne.n	80a0768 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a0762:	2900      	cmp	r1, #0
 80a0764:	da01      	bge.n	80a076a <_ZN5Print5printEli+0x24>
 80a0766:	e004      	b.n	80a0772 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0768:	b2d2      	uxtb	r2, r2
  }
}
 80a076a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a076e:	f7ff bfbe 	b.w	80a06ee <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a0772:	212d      	movs	r1, #45	; 0x2d
 80a0774:	f7ff ffac 	bl	80a06d0 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a0778:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a077a:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a077c:	4271      	negs	r1, r6
 80a077e:	4638      	mov	r0, r7
 80a0780:	f7ff ffb5 	bl	80a06ee <_ZN5Print11printNumberEmh>
 80a0784:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a0786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a078a <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a078a:	b538      	push	{r3, r4, r5, lr}
 80a078c:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a078e:	f7ff ffda 	bl	80a0746 <_ZN5Print5printEli>
 80a0792:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a0794:	4628      	mov	r0, r5
 80a0796:	f7ff ff9e 	bl	80a06d6 <_ZN5Print7printlnEv>
  return n;
}
 80a079a:	4420      	add	r0, r4
 80a079c:	bd38      	pop	{r3, r4, r5, pc}

080a079e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a079e:	2300      	movs	r3, #0
 80a07a0:	461a      	mov	r2, r3
 80a07a2:	4619      	mov	r1, r3
 80a07a4:	6840      	ldr	r0, [r0, #4]
 80a07a6:	f7ff bef1 	b.w	80a058c <network_on>
	...

080a07ac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a07ac:	4a01      	ldr	r2, [pc, #4]	; (80a07b4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a07ae:	4b02      	ldr	r3, [pc, #8]	; (80a07b8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a07b0:	601a      	str	r2, [r3, #0]
 80a07b2:	4770      	bx	lr
 80a07b4:	080a1483 	.word	0x080a1483
 80a07b8:	2000037c 	.word	0x2000037c

080a07bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a07bc:	4b02      	ldr	r3, [pc, #8]	; (80a07c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a07be:	681a      	ldr	r2, [r3, #0]
 80a07c0:	4b02      	ldr	r3, [pc, #8]	; (80a07cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a07c2:	601a      	str	r2, [r3, #0]
 80a07c4:	4770      	bx	lr
 80a07c6:	bf00      	nop
 80a07c8:	20000300 	.word	0x20000300
 80a07cc:	20000380 	.word	0x20000380

080a07d0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a07d0:	2100      	movs	r1, #0
 80a07d2:	f7ff be9f 	b.w	80a0514 <system_delay_ms>

080a07d6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a07d6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a07d8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a07da:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a07dc:	b113      	cbz	r3, 80a07e4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a07de:	2203      	movs	r2, #3
 80a07e0:	4601      	mov	r1, r0
 80a07e2:	4798      	blx	r3
    }
 80a07e4:	4620      	mov	r0, r4
 80a07e6:	bd10      	pop	{r4, pc}

080a07e8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a07e8:	b510      	push	{r4, lr}
 80a07ea:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a07ec:	f7ff fff3 	bl	80a07d6 <_ZNSt14_Function_baseD1Ev>
 80a07f0:	4620      	mov	r0, r4
 80a07f2:	bd10      	pop	{r4, pc}

080a07f4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a07f4:	4803      	ldr	r0, [pc, #12]	; (80a0804 <_GLOBAL__sub_I_RGB+0x10>)
 80a07f6:	2300      	movs	r3, #0
 80a07f8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a07fa:	4a03      	ldr	r2, [pc, #12]	; (80a0808 <_GLOBAL__sub_I_RGB+0x14>)
 80a07fc:	4903      	ldr	r1, [pc, #12]	; (80a080c <_GLOBAL__sub_I_RGB+0x18>)
 80a07fe:	f000 bc19 	b.w	80a1034 <__aeabi_atexit>
 80a0802:	bf00      	nop
 80a0804:	20000384 	.word	0x20000384
 80a0808:	20000368 	.word	0x20000368
 80a080c:	080a07e9 	.word	0x080a07e9

080a0810 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0810:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0812:	4b14      	ldr	r3, [pc, #80]	; (80a0864 <serialEventRun+0x54>)
 80a0814:	b133      	cbz	r3, 80a0824 <serialEventRun+0x14>
 80a0816:	f000 f96b 	bl	80a0af0 <_Z16_fetch_usbserialv>
 80a081a:	6803      	ldr	r3, [r0, #0]
 80a081c:	691b      	ldr	r3, [r3, #16]
 80a081e:	4798      	blx	r3
 80a0820:	2800      	cmp	r0, #0
 80a0822:	dc16      	bgt.n	80a0852 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0824:	4b10      	ldr	r3, [pc, #64]	; (80a0868 <serialEventRun+0x58>)
 80a0826:	b133      	cbz	r3, 80a0836 <serialEventRun+0x26>
 80a0828:	f000 fa20 	bl	80a0c6c <_Z22__fetch_global_Serial1v>
 80a082c:	6803      	ldr	r3, [r0, #0]
 80a082e:	691b      	ldr	r3, [r3, #16]
 80a0830:	4798      	blx	r3
 80a0832:	2800      	cmp	r0, #0
 80a0834:	dc10      	bgt.n	80a0858 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0836:	4b0d      	ldr	r3, [pc, #52]	; (80a086c <serialEventRun+0x5c>)
 80a0838:	b10b      	cbz	r3, 80a083e <serialEventRun+0x2e>
 80a083a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a083e:	4b0c      	ldr	r3, [pc, #48]	; (80a0870 <serialEventRun+0x60>)
 80a0840:	b17b      	cbz	r3, 80a0862 <serialEventRun+0x52>
 80a0842:	f000 f991 	bl	80a0b68 <_Z17_fetch_usbserial1v>
 80a0846:	6803      	ldr	r3, [r0, #0]
 80a0848:	691b      	ldr	r3, [r3, #16]
 80a084a:	4798      	blx	r3
 80a084c:	2800      	cmp	r0, #0
 80a084e:	dc06      	bgt.n	80a085e <serialEventRun+0x4e>
 80a0850:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0852:	f3af 8000 	nop.w
 80a0856:	e7e5      	b.n	80a0824 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0858:	f3af 8000 	nop.w
 80a085c:	e7eb      	b.n	80a0836 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a085e:	f3af 8000 	nop.w
 80a0862:	bd08      	pop	{r3, pc}
	...

080a0874 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0874:	b508      	push	{r3, lr}
	serialEventRun();
 80a0876:	f7ff ffcb 	bl	80a0810 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a087a:	f7ff fd79 	bl	80a0370 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a087e:	4b01      	ldr	r3, [pc, #4]	; (80a0884 <_post_loop+0x10>)
 80a0880:	6018      	str	r0, [r3, #0]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	20000828 	.word	0x20000828

080a0888 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0888:	4802      	ldr	r0, [pc, #8]	; (80a0894 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a088a:	4a03      	ldr	r2, [pc, #12]	; (80a0898 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a088c:	4903      	ldr	r1, [pc, #12]	; (80a089c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a088e:	1a12      	subs	r2, r2, r0
 80a0890:	f000 bd36 	b.w	80a1300 <memcpy>
 80a0894:	40024000 	.word	0x40024000
 80a0898:	40024004 	.word	0x40024004
 80a089c:	080a1680 	.word	0x080a1680

080a08a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a08a0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a08a2:	2300      	movs	r3, #0
 80a08a4:	9300      	str	r3, [sp, #0]
 80a08a6:	461a      	mov	r2, r3
 80a08a8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a08ac:	f7ff fe44 	bl	80a0538 <system_ctrl_set_result>
}
 80a08b0:	b003      	add	sp, #12
 80a08b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a08b8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a08b8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a08ba:	8843      	ldrh	r3, [r0, #2]
 80a08bc:	2b0a      	cmp	r3, #10
 80a08be:	d008      	beq.n	80a08d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a08c0:	2b50      	cmp	r3, #80	; 0x50
 80a08c2:	d109      	bne.n	80a08d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a08c4:	4b09      	ldr	r3, [pc, #36]	; (80a08ec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a08c6:	681b      	ldr	r3, [r3, #0]
 80a08c8:	b13b      	cbz	r3, 80a08da <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a08ca:	b003      	add	sp, #12
 80a08cc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a08d0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a08d2:	f7ff ffe5 	bl	80a08a0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a08d6:	e006      	b.n	80a08e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a08d8:	2300      	movs	r3, #0
 80a08da:	9300      	str	r3, [sp, #0]
 80a08dc:	461a      	mov	r2, r3
 80a08de:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a08e2:	f7ff fe29 	bl	80a0538 <system_ctrl_set_result>
        break;
    }
}
 80a08e6:	b003      	add	sp, #12
 80a08e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a08ec:	20000394 	.word	0x20000394

080a08f0 <module_user_init_hook>:

void module_user_init_hook()
{
 80a08f0:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a08f2:	4c10      	ldr	r4, [pc, #64]	; (80a0934 <module_user_init_hook+0x44>)
 80a08f4:	4d10      	ldr	r5, [pc, #64]	; (80a0938 <module_user_init_hook+0x48>)
 80a08f6:	6823      	ldr	r3, [r4, #0]
 80a08f8:	42ab      	cmp	r3, r5
 80a08fa:	4b10      	ldr	r3, [pc, #64]	; (80a093c <module_user_init_hook+0x4c>)
 80a08fc:	bf0c      	ite	eq
 80a08fe:	2201      	moveq	r2, #1
 80a0900:	2200      	movne	r2, #0
 80a0902:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0904:	d002      	beq.n	80a090c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0906:	f7ff ffbf 	bl	80a0888 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a090a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a090c:	f7ff fd20 	bl	80a0350 <HAL_RNG_GetRandomNumber>
 80a0910:	4604      	mov	r4, r0
    srand(seed);
 80a0912:	f000 fd17 	bl	80a1344 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0916:	4b0a      	ldr	r3, [pc, #40]	; (80a0940 <module_user_init_hook+0x50>)
 80a0918:	b113      	cbz	r3, 80a0920 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a091a:	4620      	mov	r0, r4
 80a091c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0920:	2100      	movs	r1, #0
 80a0922:	4807      	ldr	r0, [pc, #28]	; (80a0940 <module_user_init_hook+0x50>)
 80a0924:	f7ff fe62 	bl	80a05ec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0928:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a092c:	2100      	movs	r1, #0
 80a092e:	4805      	ldr	r0, [pc, #20]	; (80a0944 <module_user_init_hook+0x54>)
 80a0930:	f7ff bdf8 	b.w	80a0524 <system_ctrl_set_app_request_handler>
 80a0934:	40024000 	.word	0x40024000
 80a0938:	9a271c1e 	.word	0x9a271c1e
 80a093c:	20000398 	.word	0x20000398
 80a0940:	00000000 	.word	0x00000000
 80a0944:	080a08b9 	.word	0x080a08b9

080a0948 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0948:	4770      	bx	lr

080a094a <_ZN9IPAddressD0Ev>:
 80a094a:	b510      	push	{r4, lr}
 80a094c:	4604      	mov	r4, r0
 80a094e:	2118      	movs	r1, #24
 80a0950:	f000 fb75 	bl	80a103e <_ZdlPvj>
 80a0954:	4620      	mov	r0, r4
 80a0956:	bd10      	pop	{r4, pc}

080a0958 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a095a:	460f      	mov	r7, r1
 80a095c:	f100 0608 	add.w	r6, r0, #8
 80a0960:	1d05      	adds	r5, r0, #4
 80a0962:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0964:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0968:	220a      	movs	r2, #10
 80a096a:	4638      	mov	r0, r7
 80a096c:	f7ff fee9 	bl	80a0742 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0970:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0972:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0974:	d007      	beq.n	80a0986 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0976:	2c00      	cmp	r4, #0
 80a0978:	d0f4      	beq.n	80a0964 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a097a:	212e      	movs	r1, #46	; 0x2e
 80a097c:	4638      	mov	r0, r7
 80a097e:	f7ff fea7 	bl	80a06d0 <_ZN5Print5printEc>
 80a0982:	4404      	add	r4, r0
 80a0984:	e7ee      	b.n	80a0964 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0986:	4620      	mov	r0, r4
 80a0988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a098c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a098c:	b510      	push	{r4, lr}
 80a098e:	4604      	mov	r4, r0
 80a0990:	4b04      	ldr	r3, [pc, #16]	; (80a09a4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0992:	2211      	movs	r2, #17
 80a0994:	f840 3b04 	str.w	r3, [r0], #4
 80a0998:	2100      	movs	r1, #0
 80a099a:	f000 fcbc 	bl	80a1316 <memset>
{
    clear();
}
 80a099e:	4620      	mov	r0, r4
 80a09a0:	bd10      	pop	{r4, pc}
 80a09a2:	bf00      	nop
 80a09a4:	080a14e0 	.word	0x080a14e0

080a09a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a09a8:	4603      	mov	r3, r0
 80a09aa:	4a07      	ldr	r2, [pc, #28]	; (80a09c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a09ac:	b510      	push	{r4, lr}
 80a09ae:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a09b2:	f101 0210 	add.w	r2, r1, #16
 80a09b6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a09ba:	4291      	cmp	r1, r2
 80a09bc:	f843 4b04 	str.w	r4, [r3], #4
 80a09c0:	d1f9      	bne.n	80a09b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a09c2:	780a      	ldrb	r2, [r1, #0]
 80a09c4:	701a      	strb	r2, [r3, #0]
}
 80a09c6:	bd10      	pop	{r4, pc}
 80a09c8:	080a14e0 	.word	0x080a14e0

080a09cc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a09cc:	4a02      	ldr	r2, [pc, #8]	; (80a09d8 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a09ce:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a09d0:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a09d2:	2204      	movs	r2, #4
 80a09d4:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a09d6:	4770      	bx	lr
 80a09d8:	080a14e0 	.word	0x080a14e0

080a09dc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a09dc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a09de:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a09e2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a09e6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a09ea:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a09ee:	2304      	movs	r3, #4
 80a09f0:	6041      	str	r1, [r0, #4]
 80a09f2:	7503      	strb	r3, [r0, #20]
 80a09f4:	bd10      	pop	{r4, pc}
	...

080a09f8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a09f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a09fa:	4d04      	ldr	r5, [pc, #16]	; (80a0a0c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a09fc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a09fe:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0a02:	9500      	str	r5, [sp, #0]
 80a0a04:	f7ff ffea 	bl	80a09dc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0a08:	b003      	add	sp, #12
 80a0a0a:	bd30      	pop	{r4, r5, pc}
 80a0a0c:	080a14e0 	.word	0x080a14e0

080a0a10 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0a10:	7441      	strb	r1, [r0, #17]
 80a0a12:	4770      	bx	lr

080a0a14 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0a14:	4770      	bx	lr

080a0a16 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0a16:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0a18:	2100      	movs	r1, #0
 80a0a1a:	7c00      	ldrb	r0, [r0, #16]
 80a0a1c:	f7ff fd52 	bl	80a04c4 <HAL_USB_USART_Receive_Data>
}
 80a0a20:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0a24:	bf28      	it	cs
 80a0a26:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0a2a:	bd08      	pop	{r3, pc}

080a0a2c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0a2c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0a2e:	2101      	movs	r1, #1
 80a0a30:	7c00      	ldrb	r0, [r0, #16]
 80a0a32:	f7ff fd47 	bl	80a04c4 <HAL_USB_USART_Receive_Data>
}
 80a0a36:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0a3a:	bf28      	it	cs
 80a0a3c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0a40:	bd08      	pop	{r3, pc}

080a0a42 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0a42:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0a44:	7c00      	ldrb	r0, [r0, #16]
 80a0a46:	f7ff fd35 	bl	80a04b4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0a4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0a4e:	bd08      	pop	{r3, pc}

080a0a50 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0a50:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0a52:	7c00      	ldrb	r0, [r0, #16]
 80a0a54:	f7ff fd26 	bl	80a04a4 <HAL_USB_USART_Available_Data>
}
 80a0a58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0a5c:	bd08      	pop	{r3, pc}

080a0a5e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0a5e:	7c00      	ldrb	r0, [r0, #16]
 80a0a60:	f7ff bd40 	b.w	80a04e4 <HAL_USB_USART_Flush_Data>

080a0a64 <_ZN9USBSerialD0Ev>:
 80a0a64:	b510      	push	{r4, lr}
 80a0a66:	4604      	mov	r4, r0
 80a0a68:	2114      	movs	r1, #20
 80a0a6a:	f000 fae8 	bl	80a103e <_ZdlPvj>
 80a0a6e:	4620      	mov	r0, r4
 80a0a70:	bd10      	pop	{r4, pc}

080a0a72 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0a72:	b538      	push	{r3, r4, r5, lr}
 80a0a74:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0a76:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0a78:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0a7a:	f7ff fd1b 	bl	80a04b4 <HAL_USB_USART_Available_Data_For_Write>
 80a0a7e:	2800      	cmp	r0, #0
 80a0a80:	dc01      	bgt.n	80a0a86 <_ZN9USBSerial5writeEh+0x14>
 80a0a82:	7c60      	ldrb	r0, [r4, #17]
 80a0a84:	b128      	cbz	r0, 80a0a92 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0a86:	4629      	mov	r1, r5
 80a0a88:	7c20      	ldrb	r0, [r4, #16]
 80a0a8a:	f7ff fd23 	bl	80a04d4 <HAL_USB_USART_Send_Data>
 80a0a8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0a92:	bd38      	pop	{r3, r4, r5, pc}

080a0a94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0a94:	b510      	push	{r4, lr}
 80a0a96:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0a98:	2300      	movs	r3, #0
 80a0a9a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0aa0:	60a3      	str	r3, [r4, #8]
 80a0aa2:	4b05      	ldr	r3, [pc, #20]	; (80a0ab8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0aa4:	4608      	mov	r0, r1
 80a0aa6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0aa8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0aaa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0aac:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0aae:	4611      	mov	r1, r2
 80a0ab0:	f7ff fce8 	bl	80a0484 <HAL_USB_USART_Init>
}
 80a0ab4:	4620      	mov	r0, r4
 80a0ab6:	bd10      	pop	{r4, pc}
 80a0ab8:	080a14f4 	.word	0x080a14f4

080a0abc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0abc:	2200      	movs	r2, #0
 80a0abe:	7c00      	ldrb	r0, [r0, #16]
 80a0ac0:	f7ff bce8 	b.w	80a0494 <HAL_USB_USART_Begin>

080a0ac4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0ac4:	b510      	push	{r4, lr}
 80a0ac6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0ac8:	2214      	movs	r2, #20
 80a0aca:	2100      	movs	r1, #0
 80a0acc:	f000 fc23 	bl	80a1316 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0ad0:	4b05      	ldr	r3, [pc, #20]	; (80a0ae8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0ad2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0ad4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0ad6:	4b05      	ldr	r3, [pc, #20]	; (80a0aec <_Z19acquireSerialBufferv+0x28>)
 80a0ad8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0ada:	f240 1301 	movw	r3, #257	; 0x101
 80a0ade:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0ae0:	2381      	movs	r3, #129	; 0x81
 80a0ae2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0ae4:	bd10      	pop	{r4, pc}
 80a0ae6:	bf00      	nop
 80a0ae8:	20000421 	.word	0x20000421
 80a0aec:	200003a0 	.word	0x200003a0

080a0af0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0af0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0af2:	4d0e      	ldr	r5, [pc, #56]	; (80a0b2c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0af4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0af6:	a801      	add	r0, sp, #4
 80a0af8:	f7ff ffe4 	bl	80a0ac4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0afc:	6829      	ldr	r1, [r5, #0]
 80a0afe:	f011 0401 	ands.w	r4, r1, #1
 80a0b02:	d110      	bne.n	80a0b26 <_Z16_fetch_usbserialv+0x36>
 80a0b04:	4628      	mov	r0, r5
 80a0b06:	f7ff faca 	bl	80a009e <__cxa_guard_acquire>
 80a0b0a:	b160      	cbz	r0, 80a0b26 <_Z16_fetch_usbserialv+0x36>
 80a0b0c:	aa01      	add	r2, sp, #4
 80a0b0e:	4621      	mov	r1, r4
 80a0b10:	4807      	ldr	r0, [pc, #28]	; (80a0b30 <_Z16_fetch_usbserialv+0x40>)
 80a0b12:	f7ff ffbf 	bl	80a0a94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0b16:	4628      	mov	r0, r5
 80a0b18:	f7ff fac6 	bl	80a00a8 <__cxa_guard_release>
 80a0b1c:	4a05      	ldr	r2, [pc, #20]	; (80a0b34 <_Z16_fetch_usbserialv+0x44>)
 80a0b1e:	4906      	ldr	r1, [pc, #24]	; (80a0b38 <_Z16_fetch_usbserialv+0x48>)
 80a0b20:	4803      	ldr	r0, [pc, #12]	; (80a0b30 <_Z16_fetch_usbserialv+0x40>)
 80a0b22:	f000 fa87 	bl	80a1034 <__aeabi_atexit>
	return _usbserial;
}
 80a0b26:	4802      	ldr	r0, [pc, #8]	; (80a0b30 <_Z16_fetch_usbserialv+0x40>)
 80a0b28:	b007      	add	sp, #28
 80a0b2a:	bd30      	pop	{r4, r5, pc}
 80a0b2c:	2000039c 	.word	0x2000039c
 80a0b30:	20000524 	.word	0x20000524
 80a0b34:	20000368 	.word	0x20000368
 80a0b38:	080a0a15 	.word	0x080a0a15

080a0b3c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0b3c:	b510      	push	{r4, lr}
 80a0b3e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0b40:	2214      	movs	r2, #20
 80a0b42:	2100      	movs	r1, #0
 80a0b44:	f000 fbe7 	bl	80a1316 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0b48:	4b05      	ldr	r3, [pc, #20]	; (80a0b60 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0b4a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0b4c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0b4e:	4b05      	ldr	r3, [pc, #20]	; (80a0b64 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0b50:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0b52:	f240 1301 	movw	r3, #257	; 0x101
 80a0b56:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0b58:	2381      	movs	r3, #129	; 0x81
 80a0b5a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0b5c:	bd10      	pop	{r4, pc}
 80a0b5e:	bf00      	nop
 80a0b60:	200005d4 	.word	0x200005d4
 80a0b64:	2000053c 	.word	0x2000053c

080a0b68 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0b68:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0b6a:	4c0e      	ldr	r4, [pc, #56]	; (80a0ba4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0b6c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0b6e:	a801      	add	r0, sp, #4
 80a0b70:	f7ff ffe4 	bl	80a0b3c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0b74:	6823      	ldr	r3, [r4, #0]
 80a0b76:	07db      	lsls	r3, r3, #31
 80a0b78:	d410      	bmi.n	80a0b9c <_Z17_fetch_usbserial1v+0x34>
 80a0b7a:	4620      	mov	r0, r4
 80a0b7c:	f7ff fa8f 	bl	80a009e <__cxa_guard_acquire>
 80a0b80:	b160      	cbz	r0, 80a0b9c <_Z17_fetch_usbserial1v+0x34>
 80a0b82:	aa01      	add	r2, sp, #4
 80a0b84:	2101      	movs	r1, #1
 80a0b86:	4808      	ldr	r0, [pc, #32]	; (80a0ba8 <_Z17_fetch_usbserial1v+0x40>)
 80a0b88:	f7ff ff84 	bl	80a0a94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0b8c:	4620      	mov	r0, r4
 80a0b8e:	f7ff fa8b 	bl	80a00a8 <__cxa_guard_release>
 80a0b92:	4a06      	ldr	r2, [pc, #24]	; (80a0bac <_Z17_fetch_usbserial1v+0x44>)
 80a0b94:	4906      	ldr	r1, [pc, #24]	; (80a0bb0 <_Z17_fetch_usbserial1v+0x48>)
 80a0b96:	4804      	ldr	r0, [pc, #16]	; (80a0ba8 <_Z17_fetch_usbserial1v+0x40>)
 80a0b98:	f000 fa4c 	bl	80a1034 <__aeabi_atexit>
  return _usbserial1;
}
 80a0b9c:	4802      	ldr	r0, [pc, #8]	; (80a0ba8 <_Z17_fetch_usbserial1v+0x40>)
 80a0b9e:	b006      	add	sp, #24
 80a0ba0:	bd10      	pop	{r4, pc}
 80a0ba2:	bf00      	nop
 80a0ba4:	20000538 	.word	0x20000538
 80a0ba8:	200005c0 	.word	0x200005c0
 80a0bac:	20000368 	.word	0x20000368
 80a0bb0:	080a0a15 	.word	0x080a0a15

080a0bb4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0bb4:	4770      	bx	lr

080a0bb6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0bb6:	7441      	strb	r1, [r0, #17]
 80a0bb8:	4770      	bx	lr

080a0bba <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0bba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0bbc:	7c00      	ldrb	r0, [r0, #16]
 80a0bbe:	f7ff fc1f 	bl	80a0400 <HAL_USART_Available_Data_For_Write>
}
 80a0bc2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0bc6:	bd08      	pop	{r3, pc}

080a0bc8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0bc8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0bca:	7c00      	ldrb	r0, [r0, #16]
 80a0bcc:	f7ff fbf0 	bl	80a03b0 <HAL_USART_Available_Data>
}
 80a0bd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0bd4:	bd08      	pop	{r3, pc}

080a0bd6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0bd6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0bd8:	7c00      	ldrb	r0, [r0, #16]
 80a0bda:	f7ff fbf9 	bl	80a03d0 <HAL_USART_Peek_Data>
}
 80a0bde:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0be2:	bf28      	it	cs
 80a0be4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0be8:	bd08      	pop	{r3, pc}

080a0bea <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0bea:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0bec:	7c00      	ldrb	r0, [r0, #16]
 80a0bee:	f7ff fbe7 	bl	80a03c0 <HAL_USART_Read_Data>
}
 80a0bf2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0bf6:	bf28      	it	cs
 80a0bf8:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0bfc:	bd08      	pop	{r3, pc}

080a0bfe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0bfe:	7c00      	ldrb	r0, [r0, #16]
 80a0c00:	f7ff bbee 	b.w	80a03e0 <HAL_USART_Flush_Data>

080a0c04 <_ZN11USARTSerialD0Ev>:
 80a0c04:	b510      	push	{r4, lr}
 80a0c06:	4604      	mov	r4, r0
 80a0c08:	2114      	movs	r1, #20
 80a0c0a:	f000 fa18 	bl	80a103e <_ZdlPvj>
 80a0c0e:	4620      	mov	r0, r4
 80a0c10:	bd10      	pop	{r4, pc}

080a0c12 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0c12:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0c14:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0c16:	4604      	mov	r4, r0
 80a0c18:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0c1a:	b925      	cbnz	r5, 80a0c26 <_ZN11USARTSerial5writeEh+0x14>
 80a0c1c:	7c00      	ldrb	r0, [r0, #16]
 80a0c1e:	f7ff fbef 	bl	80a0400 <HAL_USART_Available_Data_For_Write>
 80a0c22:	2800      	cmp	r0, #0
 80a0c24:	dd05      	ble.n	80a0c32 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0c26:	4631      	mov	r1, r6
 80a0c28:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0c2e:	f7ff bbb7 	b.w	80a03a0 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0c32:	4628      	mov	r0, r5
 80a0c34:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0c38 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0c38:	b510      	push	{r4, lr}
 80a0c3a:	4604      	mov	r4, r0
 80a0c3c:	4608      	mov	r0, r1
 80a0c3e:	4611      	mov	r1, r2
 80a0c40:	2200      	movs	r2, #0
 80a0c42:	6062      	str	r2, [r4, #4]
 80a0c44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0c48:	60a2      	str	r2, [r4, #8]
 80a0c4a:	4a05      	ldr	r2, [pc, #20]	; (80a0c60 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0c4c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0c4e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0c50:	2201      	movs	r2, #1
 80a0c52:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0c54:	461a      	mov	r2, r3
 80a0c56:	f7ff fb9b 	bl	80a0390 <HAL_USART_Init>
}
 80a0c5a:	4620      	mov	r0, r4
 80a0c5c:	bd10      	pop	{r4, pc}
 80a0c5e:	bf00      	nop
 80a0c60:	080a1524 	.word	0x080a1524

080a0c64 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0c64:	7c00      	ldrb	r0, [r0, #16]
 80a0c66:	f7ff bbc3 	b.w	80a03f0 <HAL_USART_Is_Enabled>
	...

080a0c6c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0c6c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0c6e:	4d0c      	ldr	r5, [pc, #48]	; (80a0ca0 <_Z22__fetch_global_Serial1v+0x34>)
 80a0c70:	6829      	ldr	r1, [r5, #0]
 80a0c72:	f011 0401 	ands.w	r4, r1, #1
 80a0c76:	d111      	bne.n	80a0c9c <_Z22__fetch_global_Serial1v+0x30>
 80a0c78:	4628      	mov	r0, r5
 80a0c7a:	f7ff fa10 	bl	80a009e <__cxa_guard_acquire>
 80a0c7e:	b168      	cbz	r0, 80a0c9c <_Z22__fetch_global_Serial1v+0x30>
 80a0c80:	4a08      	ldr	r2, [pc, #32]	; (80a0ca4 <_Z22__fetch_global_Serial1v+0x38>)
 80a0c82:	4621      	mov	r1, r4
 80a0c84:	4b08      	ldr	r3, [pc, #32]	; (80a0ca8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0c86:	4809      	ldr	r0, [pc, #36]	; (80a0cac <_Z22__fetch_global_Serial1v+0x40>)
 80a0c88:	f7ff ffd6 	bl	80a0c38 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0c8c:	4628      	mov	r0, r5
 80a0c8e:	f7ff fa0b 	bl	80a00a8 <__cxa_guard_release>
 80a0c92:	4a07      	ldr	r2, [pc, #28]	; (80a0cb0 <_Z22__fetch_global_Serial1v+0x44>)
 80a0c94:	4907      	ldr	r1, [pc, #28]	; (80a0cb4 <_Z22__fetch_global_Serial1v+0x48>)
 80a0c96:	4805      	ldr	r0, [pc, #20]	; (80a0cac <_Z22__fetch_global_Serial1v+0x40>)
 80a0c98:	f000 f9cc 	bl	80a1034 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0c9c:	4803      	ldr	r0, [pc, #12]	; (80a0cac <_Z22__fetch_global_Serial1v+0x40>)
 80a0c9e:	bd38      	pop	{r3, r4, r5, pc}
 80a0ca0:	20000770 	.word	0x20000770
 80a0ca4:	20000774 	.word	0x20000774
 80a0ca8:	200006ec 	.word	0x200006ec
 80a0cac:	200006d8 	.word	0x200006d8
 80a0cb0:	20000368 	.word	0x20000368
 80a0cb4:	080a0bb5 	.word	0x080a0bb5

080a0cb8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0cb8:	4770      	bx	lr

080a0cba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0cbc:	4606      	mov	r6, r0
 80a0cbe:	4615      	mov	r5, r2
 80a0cc0:	460c      	mov	r4, r1
 80a0cc2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0cc4:	42bc      	cmp	r4, r7
 80a0cc6:	d006      	beq.n	80a0cd6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0cc8:	6833      	ldr	r3, [r6, #0]
 80a0cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0cce:	689b      	ldr	r3, [r3, #8]
 80a0cd0:	4630      	mov	r0, r6
 80a0cd2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0cd4:	e7f6      	b.n	80a0cc4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0cd6:	4628      	mov	r0, r5
 80a0cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0cda <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0cda:	2200      	movs	r2, #0
 80a0cdc:	7c00      	ldrb	r0, [r0, #16]
 80a0cde:	f7ff bb97 	b.w	80a0410 <HAL_I2C_Write_Data>

080a0ce2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0ce2:	2100      	movs	r1, #0
 80a0ce4:	7c00      	ldrb	r0, [r0, #16]
 80a0ce6:	f7ff bb9b 	b.w	80a0420 <HAL_I2C_Available_Data>

080a0cea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0cea:	2100      	movs	r1, #0
 80a0cec:	7c00      	ldrb	r0, [r0, #16]
 80a0cee:	f7ff bb9f 	b.w	80a0430 <HAL_I2C_Read_Data>

080a0cf2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0cf2:	2100      	movs	r1, #0
 80a0cf4:	7c00      	ldrb	r0, [r0, #16]
 80a0cf6:	f7ff bba3 	b.w	80a0440 <HAL_I2C_Peek_Data>

080a0cfa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0cfa:	2100      	movs	r1, #0
 80a0cfc:	7c00      	ldrb	r0, [r0, #16]
 80a0cfe:	f7ff bba7 	b.w	80a0450 <HAL_I2C_Flush_Data>

080a0d02 <_ZN7TwoWireD0Ev>:
 80a0d02:	b510      	push	{r4, lr}
 80a0d04:	4604      	mov	r4, r0
 80a0d06:	2114      	movs	r1, #20
 80a0d08:	f000 f999 	bl	80a103e <_ZdlPvj>
 80a0d0c:	4620      	mov	r0, r4
 80a0d0e:	bd10      	pop	{r4, pc}

080a0d10 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0d10:	b510      	push	{r4, lr}
 80a0d12:	4604      	mov	r4, r0
 80a0d14:	4608      	mov	r0, r1
 80a0d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0d1a:	60a3      	str	r3, [r4, #8]
 80a0d1c:	4b04      	ldr	r3, [pc, #16]	; (80a0d30 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a0d1e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0d20:	7420      	strb	r0, [r4, #16]
 80a0d22:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0d24:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0d26:	f7ff fba3 	bl	80a0470 <HAL_I2C_Init>

}
 80a0d2a:	4620      	mov	r0, r4
 80a0d2c:	bd10      	pop	{r4, pc}
 80a0d2e:	bf00      	nop
 80a0d30:	080a1554 	.word	0x080a1554

080a0d34 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0d34:	2100      	movs	r1, #0
 80a0d36:	7c00      	ldrb	r0, [r0, #16]
 80a0d38:	f7ff bb92 	b.w	80a0460 <HAL_I2C_Is_Enabled>

080a0d3c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0d3c:	2200      	movs	r2, #0
 80a0d3e:	4611      	mov	r1, r2
 80a0d40:	6840      	ldr	r0, [r0, #4]
 80a0d42:	f7ff bc1b 	b.w	80a057c <network_ready>

080a0d46 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0d46:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0d48:	4616      	mov	r6, r2
 80a0d4a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0d4c:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0d4e:	460f      	mov	r7, r1
 80a0d50:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0d52:	2100      	movs	r1, #0
 80a0d54:	a803      	add	r0, sp, #12
 80a0d56:	f000 fade 	bl	80a1316 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0d5a:	4630      	mov	r0, r6
 80a0d5c:	f000 fb1a 	bl	80a1394 <strlen>
 80a0d60:	2500      	movs	r5, #0
 80a0d62:	9500      	str	r5, [sp, #0]
 80a0d64:	b281      	uxth	r1, r0
 80a0d66:	687b      	ldr	r3, [r7, #4]
 80a0d68:	aa03      	add	r2, sp, #12
 80a0d6a:	4630      	mov	r0, r6
 80a0d6c:	f7ff fbc2 	bl	80a04f4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0d70:	b120      	cbz	r0, 80a0d7c <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0d72:	4629      	mov	r1, r5
 80a0d74:	4620      	mov	r0, r4
 80a0d76:	f7ff fe29 	bl	80a09cc <_ZN9IPAddressC1Em>
 80a0d7a:	e003      	b.n	80a0d84 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0d7c:	a903      	add	r1, sp, #12
 80a0d7e:	4620      	mov	r0, r4
 80a0d80:	f7ff fe12 	bl	80a09a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0d84:	4620      	mov	r0, r4
 80a0d86:	b009      	add	sp, #36	; 0x24
 80a0d88:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0d8a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0d8a:	2200      	movs	r2, #0
 80a0d8c:	4611      	mov	r1, r2
 80a0d8e:	6840      	ldr	r0, [r0, #4]
 80a0d90:	f7ff bc14 	b.w	80a05bc <network_listening>

080a0d94 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0d94:	2200      	movs	r2, #0
 80a0d96:	4611      	mov	r1, r2
 80a0d98:	6840      	ldr	r0, [r0, #4]
 80a0d9a:	f7ff bc1f 	b.w	80a05dc <network_get_listen_timeout>

080a0d9e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0d9e:	2200      	movs	r2, #0
 80a0da0:	6840      	ldr	r0, [r0, #4]
 80a0da2:	f7ff bc13 	b.w	80a05cc <network_set_listen_timeout>

080a0da6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0da6:	2200      	movs	r2, #0
 80a0da8:	f081 0101 	eor.w	r1, r1, #1
 80a0dac:	6840      	ldr	r0, [r0, #4]
 80a0dae:	f7ff bbfd 	b.w	80a05ac <network_listen>

080a0db2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0db2:	2300      	movs	r3, #0
 80a0db4:	461a      	mov	r2, r3
 80a0db6:	4619      	mov	r1, r3
 80a0db8:	6840      	ldr	r0, [r0, #4]
 80a0dba:	f7ff bbef 	b.w	80a059c <network_off>

080a0dbe <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0dbe:	2200      	movs	r2, #0
 80a0dc0:	4611      	mov	r1, r2
 80a0dc2:	6840      	ldr	r0, [r0, #4]
 80a0dc4:	f7ff bbca 	b.w	80a055c <network_connecting>

080a0dc8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0dc8:	2200      	movs	r2, #0
 80a0dca:	2102      	movs	r1, #2
 80a0dcc:	6840      	ldr	r0, [r0, #4]
 80a0dce:	f7ff bbcd 	b.w	80a056c <network_disconnect>

080a0dd2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0dd2:	2300      	movs	r3, #0
 80a0dd4:	461a      	mov	r2, r3
 80a0dd6:	6840      	ldr	r0, [r0, #4]
 80a0dd8:	f7ff bbb8 	b.w	80a054c <network_connect>

080a0ddc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0ddc:	4b02      	ldr	r3, [pc, #8]	; (80a0de8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0dde:	2204      	movs	r2, #4
 80a0de0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0de2:	4a02      	ldr	r2, [pc, #8]	; (80a0dec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0de4:	601a      	str	r2, [r3, #0]
 80a0de6:	4770      	bx	lr
 80a0de8:	200007f8 	.word	0x200007f8
 80a0dec:	080a157c 	.word	0x080a157c

080a0df0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0df0:	2300      	movs	r3, #0
 80a0df2:	461a      	mov	r2, r3
 80a0df4:	6840      	ldr	r0, [r0, #4]
 80a0df6:	f7ff bba9 	b.w	80a054c <network_connect>

080a0dfa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0dfa:	2200      	movs	r2, #0
 80a0dfc:	2102      	movs	r1, #2
 80a0dfe:	6840      	ldr	r0, [r0, #4]
 80a0e00:	f7ff bbb4 	b.w	80a056c <network_disconnect>

080a0e04 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0e04:	2200      	movs	r2, #0
 80a0e06:	4611      	mov	r1, r2
 80a0e08:	6840      	ldr	r0, [r0, #4]
 80a0e0a:	f7ff bba7 	b.w	80a055c <network_connecting>

080a0e0e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0e0e:	2200      	movs	r2, #0
 80a0e10:	4611      	mov	r1, r2
 80a0e12:	6840      	ldr	r0, [r0, #4]
 80a0e14:	f7ff bbb2 	b.w	80a057c <network_ready>

080a0e18 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0e18:	2300      	movs	r3, #0
 80a0e1a:	461a      	mov	r2, r3
 80a0e1c:	4619      	mov	r1, r3
 80a0e1e:	6840      	ldr	r0, [r0, #4]
 80a0e20:	f7ff bbb4 	b.w	80a058c <network_on>

080a0e24 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0e24:	2300      	movs	r3, #0
 80a0e26:	461a      	mov	r2, r3
 80a0e28:	4619      	mov	r1, r3
 80a0e2a:	6840      	ldr	r0, [r0, #4]
 80a0e2c:	f7ff bbb6 	b.w	80a059c <network_off>

080a0e30 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0e30:	2200      	movs	r2, #0
 80a0e32:	f081 0101 	eor.w	r1, r1, #1
 80a0e36:	6840      	ldr	r0, [r0, #4]
 80a0e38:	f7ff bbb8 	b.w	80a05ac <network_listen>

080a0e3c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0e3c:	2200      	movs	r2, #0
 80a0e3e:	6840      	ldr	r0, [r0, #4]
 80a0e40:	f7ff bbc4 	b.w	80a05cc <network_set_listen_timeout>

080a0e44 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0e44:	2200      	movs	r2, #0
 80a0e46:	4611      	mov	r1, r2
 80a0e48:	6840      	ldr	r0, [r0, #4]
 80a0e4a:	f7ff bbc7 	b.w	80a05dc <network_get_listen_timeout>

080a0e4e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0e4e:	2200      	movs	r2, #0
 80a0e50:	4611      	mov	r1, r2
 80a0e52:	6840      	ldr	r0, [r0, #4]
 80a0e54:	f7ff bbb2 	b.w	80a05bc <network_listening>

080a0e58 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0e58:	b570      	push	{r4, r5, r6, lr}
 80a0e5a:	4616      	mov	r6, r2
 80a0e5c:	b08e      	sub	sp, #56	; 0x38
 80a0e5e:	4604      	mov	r4, r0
    IPAddress addr;
 80a0e60:	a808      	add	r0, sp, #32
 80a0e62:	f7ff fd93 	bl	80a098c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0e66:	2211      	movs	r2, #17
 80a0e68:	2100      	movs	r1, #0
 80a0e6a:	a803      	add	r0, sp, #12
 80a0e6c:	f000 fa53 	bl	80a1316 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0e70:	4630      	mov	r0, r6
 80a0e72:	f000 fa8f 	bl	80a1394 <strlen>
 80a0e76:	2500      	movs	r5, #0
 80a0e78:	4b0a      	ldr	r3, [pc, #40]	; (80a0ea4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0e7a:	9500      	str	r5, [sp, #0]
 80a0e7c:	b281      	uxth	r1, r0
 80a0e7e:	685b      	ldr	r3, [r3, #4]
 80a0e80:	aa03      	add	r2, sp, #12
 80a0e82:	4630      	mov	r0, r6
 80a0e84:	f7ff fb36 	bl	80a04f4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0e88:	b120      	cbz	r0, 80a0e94 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0e8a:	4629      	mov	r1, r5
 80a0e8c:	4620      	mov	r0, r4
 80a0e8e:	f7ff fd9d 	bl	80a09cc <_ZN9IPAddressC1Em>
 80a0e92:	e003      	b.n	80a0e9c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0e94:	a903      	add	r1, sp, #12
 80a0e96:	4620      	mov	r0, r4
 80a0e98:	f7ff fd86 	bl	80a09a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0e9c:	4620      	mov	r0, r4
 80a0e9e:	b00e      	add	sp, #56	; 0x38
 80a0ea0:	bd70      	pop	{r4, r5, r6, pc}
 80a0ea2:	bf00      	nop
 80a0ea4:	200007f8 	.word	0x200007f8

080a0ea8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a0ea8:	4b02      	ldr	r3, [pc, #8]	; (80a0eb4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0eaa:	4a03      	ldr	r2, [pc, #12]	; (80a0eb8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0eac:	601a      	str	r2, [r3, #0]
 80a0eae:	2200      	movs	r2, #0
 80a0eb0:	605a      	str	r2, [r3, #4]
 80a0eb2:	4770      	bx	lr
 80a0eb4:	20000800 	.word	0x20000800
 80a0eb8:	080a15b0 	.word	0x080a15b0

080a0ebc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a0ebc:	b510      	push	{r4, lr}
 80a0ebe:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0ec0:	480f      	ldr	r0, [pc, #60]	; (80a0f00 <pinAvailable+0x44>)
 80a0ec2:	f7ff fbcf 	bl	80a0664 <_ZN8SPIClass9isEnabledEv>
 80a0ec6:	b128      	cbz	r0, 80a0ed4 <pinAvailable+0x18>
 80a0ec8:	f1a4 030d 	sub.w	r3, r4, #13
 80a0ecc:	2b02      	cmp	r3, #2
 80a0ece:	d801      	bhi.n	80a0ed4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a0ed0:	2000      	movs	r0, #0
 80a0ed2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0ed4:	f000 f88e 	bl	80a0ff4 <_Z19__fetch_global_Wirev>
 80a0ed8:	f7ff ff2c 	bl	80a0d34 <_ZN7TwoWire9isEnabledEv>
 80a0edc:	b108      	cbz	r0, 80a0ee2 <pinAvailable+0x26>
 80a0ede:	2c01      	cmp	r4, #1
 80a0ee0:	d9f6      	bls.n	80a0ed0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0ee2:	f7ff fec3 	bl	80a0c6c <_Z22__fetch_global_Serial1v>
 80a0ee6:	f7ff febd 	bl	80a0c64 <_ZN11USARTSerial9isEnabledEv>
 80a0eea:	b118      	cbz	r0, 80a0ef4 <pinAvailable+0x38>
 80a0eec:	f1a4 0312 	sub.w	r3, r4, #18
 80a0ef0:	2b01      	cmp	r3, #1
 80a0ef2:	d9ed      	bls.n	80a0ed0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0ef4:	2c17      	cmp	r4, #23
 80a0ef6:	bf8c      	ite	hi
 80a0ef8:	2000      	movhi	r0, #0
 80a0efa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a0efc:	bd10      	pop	{r4, pc}
 80a0efe:	bf00      	nop
 80a0f00:	20000808 	.word	0x20000808

080a0f04 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0f04:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a0f06:	b538      	push	{r3, r4, r5, lr}
 80a0f08:	4604      	mov	r4, r0
 80a0f0a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0f0c:	d80a      	bhi.n	80a0f24 <pinMode+0x20>
 80a0f0e:	29ff      	cmp	r1, #255	; 0xff
 80a0f10:	d008      	beq.n	80a0f24 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0f12:	f7ff ffd3 	bl	80a0ebc <pinAvailable>
 80a0f16:	b128      	cbz	r0, 80a0f24 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0f18:	4629      	mov	r1, r5
 80a0f1a:	4620      	mov	r0, r4
}
 80a0f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0f20:	f7ff b9e6 	b.w	80a02f0 <HAL_Pin_Mode>
 80a0f24:	bd38      	pop	{r3, r4, r5, pc}

080a0f26 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0f26:	b538      	push	{r3, r4, r5, lr}
 80a0f28:	4604      	mov	r4, r0
 80a0f2a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0f2c:	f7ff f9e8 	bl	80a0300 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0f30:	28ff      	cmp	r0, #255	; 0xff
 80a0f32:	d010      	beq.n	80a0f56 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a0f34:	2806      	cmp	r0, #6
 80a0f36:	d804      	bhi.n	80a0f42 <digitalWrite+0x1c>
 80a0f38:	234d      	movs	r3, #77	; 0x4d
 80a0f3a:	fa23 f000 	lsr.w	r0, r3, r0
 80a0f3e:	07c3      	lsls	r3, r0, #31
 80a0f40:	d409      	bmi.n	80a0f56 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a0f42:	4620      	mov	r0, r4
 80a0f44:	f7ff ffba 	bl	80a0ebc <pinAvailable>
 80a0f48:	b128      	cbz	r0, 80a0f56 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0f4a:	4629      	mov	r1, r5
 80a0f4c:	4620      	mov	r0, r4
}
 80a0f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0f52:	f7ff b9dd 	b.w	80a0310 <HAL_GPIO_Write>
 80a0f56:	bd38      	pop	{r3, r4, r5, pc}

080a0f58 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a0f58:	b510      	push	{r4, lr}
 80a0f5a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0f5c:	f7ff f9d0 	bl	80a0300 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a0f60:	3804      	subs	r0, #4
 80a0f62:	b2c0      	uxtb	r0, r0
 80a0f64:	2801      	cmp	r0, #1
 80a0f66:	d908      	bls.n	80a0f7a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a0f68:	4620      	mov	r0, r4
 80a0f6a:	f7ff ffa7 	bl	80a0ebc <pinAvailable>
 80a0f6e:	b120      	cbz	r0, 80a0f7a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a0f70:	4620      	mov	r0, r4
}
 80a0f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a0f76:	f7ff b9d3 	b.w	80a0320 <HAL_GPIO_Read>
}
 80a0f7a:	2000      	movs	r0, #0
 80a0f7c:	bd10      	pop	{r4, pc}
	...

080a0f80 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0f80:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0f82:	4c0c      	ldr	r4, [pc, #48]	; (80a0fb4 <_GLOBAL__sub_I_SPI+0x34>)
 80a0f84:	4e0c      	ldr	r6, [pc, #48]	; (80a0fb8 <_GLOBAL__sub_I_SPI+0x38>)
 80a0f86:	4d0d      	ldr	r5, [pc, #52]	; (80a0fbc <_GLOBAL__sub_I_SPI+0x3c>)
 80a0f88:	2100      	movs	r1, #0
 80a0f8a:	4620      	mov	r0, r4
 80a0f8c:	f7ff fb56 	bl	80a063c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0f90:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0f92:	4c0b      	ldr	r4, [pc, #44]	; (80a0fc0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0f94:	4632      	mov	r2, r6
 80a0f96:	4629      	mov	r1, r5
 80a0f98:	f000 f84c 	bl	80a1034 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0f9c:	2101      	movs	r1, #1
 80a0f9e:	4620      	mov	r0, r4
 80a0fa0:	f7ff fb4c 	bl	80a063c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0fa4:	4632      	mov	r2, r6
 80a0fa6:	4629      	mov	r1, r5
 80a0fa8:	4620      	mov	r0, r4
 80a0faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0fae:	f000 b841 	b.w	80a1034 <__aeabi_atexit>
 80a0fb2:	bf00      	nop
 80a0fb4:	20000808 	.word	0x20000808
 80a0fb8:	20000368 	.word	0x20000368
 80a0fbc:	080a062d 	.word	0x080a062d
 80a0fc0:	20000818 	.word	0x20000818

080a0fc4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0fc4:	b513      	push	{r0, r1, r4, lr}
 80a0fc6:	4c08      	ldr	r4, [pc, #32]	; (80a0fe8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0fc8:	2300      	movs	r3, #0
 80a0fca:	461a      	mov	r2, r3
 80a0fcc:	4619      	mov	r1, r3
 80a0fce:	9300      	str	r3, [sp, #0]
 80a0fd0:	4620      	mov	r0, r4
 80a0fd2:	f7ff fd11 	bl	80a09f8 <_ZN9IPAddressC1Ehhhh>
 80a0fd6:	4620      	mov	r0, r4
 80a0fd8:	4a04      	ldr	r2, [pc, #16]	; (80a0fec <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0fda:	4905      	ldr	r1, [pc, #20]	; (80a0ff0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0fdc:	b002      	add	sp, #8
 80a0fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0fe2:	f000 b827 	b.w	80a1034 <__aeabi_atexit>
 80a0fe6:	bf00      	nop
 80a0fe8:	2000082c 	.word	0x2000082c
 80a0fec:	20000368 	.word	0x20000368
 80a0ff0:	080a0949 	.word	0x080a0949

080a0ff4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a0ff4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a0ff6:	4d0b      	ldr	r5, [pc, #44]	; (80a1024 <_Z19__fetch_global_Wirev+0x30>)
 80a0ff8:	6829      	ldr	r1, [r5, #0]
 80a0ffa:	f011 0401 	ands.w	r4, r1, #1
 80a0ffe:	d10f      	bne.n	80a1020 <_Z19__fetch_global_Wirev+0x2c>
 80a1000:	4628      	mov	r0, r5
 80a1002:	f7ff f84c 	bl	80a009e <__cxa_guard_acquire>
 80a1006:	b158      	cbz	r0, 80a1020 <_Z19__fetch_global_Wirev+0x2c>
 80a1008:	4621      	mov	r1, r4
 80a100a:	4807      	ldr	r0, [pc, #28]	; (80a1028 <_Z19__fetch_global_Wirev+0x34>)
 80a100c:	f7ff fe80 	bl	80a0d10 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1010:	4628      	mov	r0, r5
 80a1012:	f7ff f849 	bl	80a00a8 <__cxa_guard_release>
 80a1016:	4a05      	ldr	r2, [pc, #20]	; (80a102c <_Z19__fetch_global_Wirev+0x38>)
 80a1018:	4905      	ldr	r1, [pc, #20]	; (80a1030 <_Z19__fetch_global_Wirev+0x3c>)
 80a101a:	4803      	ldr	r0, [pc, #12]	; (80a1028 <_Z19__fetch_global_Wirev+0x34>)
 80a101c:	f000 f80a 	bl	80a1034 <__aeabi_atexit>
	return wire;
}
 80a1020:	4801      	ldr	r0, [pc, #4]	; (80a1028 <_Z19__fetch_global_Wirev+0x34>)
 80a1022:	bd38      	pop	{r3, r4, r5, pc}
 80a1024:	20000844 	.word	0x20000844
 80a1028:	20000848 	.word	0x20000848
 80a102c:	20000368 	.word	0x20000368
 80a1030:	080a0cb9 	.word	0x080a0cb9

080a1034 <__aeabi_atexit>:
 80a1034:	460b      	mov	r3, r1
 80a1036:	4601      	mov	r1, r0
 80a1038:	4618      	mov	r0, r3
 80a103a:	f000 b953 	b.w	80a12e4 <__cxa_atexit>

080a103e <_ZdlPvj>:
 80a103e:	f7ff b82c 	b.w	80a009a <_ZdlPv>
	...

080a1044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1044:	4b18      	ldr	r3, [pc, #96]	; (80a10a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1046:	681a      	ldr	r2, [r3, #0]
 80a1048:	07d1      	lsls	r1, r2, #31
 80a104a:	bf5c      	itt	pl
 80a104c:	2201      	movpl	r2, #1
 80a104e:	601a      	strpl	r2, [r3, #0]
 80a1050:	4b16      	ldr	r3, [pc, #88]	; (80a10ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1052:	681a      	ldr	r2, [r3, #0]
 80a1054:	07d2      	lsls	r2, r2, #31
 80a1056:	bf5c      	itt	pl
 80a1058:	2201      	movpl	r2, #1
 80a105a:	601a      	strpl	r2, [r3, #0]
 80a105c:	4b14      	ldr	r3, [pc, #80]	; (80a10b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a105e:	681a      	ldr	r2, [r3, #0]
 80a1060:	07d0      	lsls	r0, r2, #31
 80a1062:	bf5c      	itt	pl
 80a1064:	2201      	movpl	r2, #1
 80a1066:	601a      	strpl	r2, [r3, #0]
 80a1068:	4b12      	ldr	r3, [pc, #72]	; (80a10b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a106a:	681a      	ldr	r2, [r3, #0]
 80a106c:	07d1      	lsls	r1, r2, #31
 80a106e:	bf5c      	itt	pl
 80a1070:	2201      	movpl	r2, #1
 80a1072:	601a      	strpl	r2, [r3, #0]
 80a1074:	4b10      	ldr	r3, [pc, #64]	; (80a10b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1076:	681a      	ldr	r2, [r3, #0]
 80a1078:	07d2      	lsls	r2, r2, #31
 80a107a:	bf5c      	itt	pl
 80a107c:	2201      	movpl	r2, #1
 80a107e:	601a      	strpl	r2, [r3, #0]
 80a1080:	4b0e      	ldr	r3, [pc, #56]	; (80a10bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1082:	681a      	ldr	r2, [r3, #0]
 80a1084:	07d0      	lsls	r0, r2, #31
 80a1086:	bf5c      	itt	pl
 80a1088:	2201      	movpl	r2, #1
 80a108a:	601a      	strpl	r2, [r3, #0]
 80a108c:	4b0c      	ldr	r3, [pc, #48]	; (80a10c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a108e:	681a      	ldr	r2, [r3, #0]
 80a1090:	07d1      	lsls	r1, r2, #31
 80a1092:	bf5c      	itt	pl
 80a1094:	2201      	movpl	r2, #1
 80a1096:	601a      	strpl	r2, [r3, #0]
 80a1098:	4b0a      	ldr	r3, [pc, #40]	; (80a10c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a109a:	681a      	ldr	r2, [r3, #0]
 80a109c:	07d2      	lsls	r2, r2, #31
 80a109e:	bf5c      	itt	pl
 80a10a0:	2201      	movpl	r2, #1
 80a10a2:	601a      	strpl	r2, [r3, #0]
 80a10a4:	4770      	bx	lr
 80a10a6:	bf00      	nop
 80a10a8:	20000878 	.word	0x20000878
 80a10ac:	20000874 	.word	0x20000874
 80a10b0:	20000870 	.word	0x20000870
 80a10b4:	2000086c 	.word	0x2000086c
 80a10b8:	20000868 	.word	0x20000868
 80a10bc:	20000864 	.word	0x20000864
 80a10c0:	20000860 	.word	0x20000860
 80a10c4:	2000085c 	.word	0x2000085c

080a10c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a10c8:	4b24      	ldr	r3, [pc, #144]	; (80a115c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a10ca:	681a      	ldr	r2, [r3, #0]
 80a10cc:	07d0      	lsls	r0, r2, #31
 80a10ce:	bf5c      	itt	pl
 80a10d0:	2201      	movpl	r2, #1
 80a10d2:	601a      	strpl	r2, [r3, #0]
 80a10d4:	4b22      	ldr	r3, [pc, #136]	; (80a1160 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a10d6:	681a      	ldr	r2, [r3, #0]
 80a10d8:	07d1      	lsls	r1, r2, #31
 80a10da:	bf5c      	itt	pl
 80a10dc:	2201      	movpl	r2, #1
 80a10de:	601a      	strpl	r2, [r3, #0]
 80a10e0:	4b20      	ldr	r3, [pc, #128]	; (80a1164 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a10e2:	681a      	ldr	r2, [r3, #0]
 80a10e4:	07d2      	lsls	r2, r2, #31
 80a10e6:	bf5c      	itt	pl
 80a10e8:	2201      	movpl	r2, #1
 80a10ea:	601a      	strpl	r2, [r3, #0]
 80a10ec:	4b1e      	ldr	r3, [pc, #120]	; (80a1168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a10ee:	681a      	ldr	r2, [r3, #0]
 80a10f0:	07d0      	lsls	r0, r2, #31
 80a10f2:	bf5c      	itt	pl
 80a10f4:	2201      	movpl	r2, #1
 80a10f6:	601a      	strpl	r2, [r3, #0]
 80a10f8:	4b1c      	ldr	r3, [pc, #112]	; (80a116c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a10fa:	681a      	ldr	r2, [r3, #0]
 80a10fc:	07d1      	lsls	r1, r2, #31
 80a10fe:	bf5c      	itt	pl
 80a1100:	2201      	movpl	r2, #1
 80a1102:	601a      	strpl	r2, [r3, #0]
 80a1104:	4b1a      	ldr	r3, [pc, #104]	; (80a1170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1106:	681a      	ldr	r2, [r3, #0]
 80a1108:	07d2      	lsls	r2, r2, #31
 80a110a:	bf5c      	itt	pl
 80a110c:	2201      	movpl	r2, #1
 80a110e:	601a      	strpl	r2, [r3, #0]
 80a1110:	4b18      	ldr	r3, [pc, #96]	; (80a1174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1112:	681a      	ldr	r2, [r3, #0]
 80a1114:	07d0      	lsls	r0, r2, #31
 80a1116:	bf5c      	itt	pl
 80a1118:	2201      	movpl	r2, #1
 80a111a:	601a      	strpl	r2, [r3, #0]
 80a111c:	4b16      	ldr	r3, [pc, #88]	; (80a1178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a111e:	681a      	ldr	r2, [r3, #0]
 80a1120:	07d1      	lsls	r1, r2, #31
 80a1122:	bf5c      	itt	pl
 80a1124:	2201      	movpl	r2, #1
 80a1126:	601a      	strpl	r2, [r3, #0]
 80a1128:	4b14      	ldr	r3, [pc, #80]	; (80a117c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a112a:	681a      	ldr	r2, [r3, #0]
 80a112c:	07d2      	lsls	r2, r2, #31
 80a112e:	bf5c      	itt	pl
 80a1130:	2201      	movpl	r2, #1
 80a1132:	601a      	strpl	r2, [r3, #0]
 80a1134:	4b12      	ldr	r3, [pc, #72]	; (80a1180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1136:	681a      	ldr	r2, [r3, #0]
 80a1138:	07d0      	lsls	r0, r2, #31
 80a113a:	bf5c      	itt	pl
 80a113c:	2201      	movpl	r2, #1
 80a113e:	601a      	strpl	r2, [r3, #0]
 80a1140:	4b10      	ldr	r3, [pc, #64]	; (80a1184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1142:	681a      	ldr	r2, [r3, #0]
 80a1144:	07d1      	lsls	r1, r2, #31
 80a1146:	bf5c      	itt	pl
 80a1148:	2201      	movpl	r2, #1
 80a114a:	601a      	strpl	r2, [r3, #0]
 80a114c:	4b0e      	ldr	r3, [pc, #56]	; (80a1188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a114e:	681a      	ldr	r2, [r3, #0]
 80a1150:	07d2      	lsls	r2, r2, #31
 80a1152:	bf5c      	itt	pl
 80a1154:	2201      	movpl	r2, #1
 80a1156:	601a      	strpl	r2, [r3, #0]
 80a1158:	4770      	bx	lr
 80a115a:	bf00      	nop
 80a115c:	200008a8 	.word	0x200008a8
 80a1160:	200008a4 	.word	0x200008a4
 80a1164:	200008a0 	.word	0x200008a0
 80a1168:	2000089c 	.word	0x2000089c
 80a116c:	20000898 	.word	0x20000898
 80a1170:	20000894 	.word	0x20000894
 80a1174:	20000890 	.word	0x20000890
 80a1178:	2000088c 	.word	0x2000088c
 80a117c:	20000888 	.word	0x20000888
 80a1180:	20000884 	.word	0x20000884
 80a1184:	20000880 	.word	0x20000880
 80a1188:	2000087c 	.word	0x2000087c

080a118c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a118c:	4b24      	ldr	r3, [pc, #144]	; (80a1220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a118e:	681a      	ldr	r2, [r3, #0]
 80a1190:	07d0      	lsls	r0, r2, #31
 80a1192:	bf5c      	itt	pl
 80a1194:	2201      	movpl	r2, #1
 80a1196:	601a      	strpl	r2, [r3, #0]
 80a1198:	4b22      	ldr	r3, [pc, #136]	; (80a1224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a119a:	681a      	ldr	r2, [r3, #0]
 80a119c:	07d1      	lsls	r1, r2, #31
 80a119e:	bf5c      	itt	pl
 80a11a0:	2201      	movpl	r2, #1
 80a11a2:	601a      	strpl	r2, [r3, #0]
 80a11a4:	4b20      	ldr	r3, [pc, #128]	; (80a1228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a11a6:	681a      	ldr	r2, [r3, #0]
 80a11a8:	07d2      	lsls	r2, r2, #31
 80a11aa:	bf5c      	itt	pl
 80a11ac:	2201      	movpl	r2, #1
 80a11ae:	601a      	strpl	r2, [r3, #0]
 80a11b0:	4b1e      	ldr	r3, [pc, #120]	; (80a122c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a11b2:	681a      	ldr	r2, [r3, #0]
 80a11b4:	07d0      	lsls	r0, r2, #31
 80a11b6:	bf5c      	itt	pl
 80a11b8:	2201      	movpl	r2, #1
 80a11ba:	601a      	strpl	r2, [r3, #0]
 80a11bc:	4b1c      	ldr	r3, [pc, #112]	; (80a1230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a11be:	681a      	ldr	r2, [r3, #0]
 80a11c0:	07d1      	lsls	r1, r2, #31
 80a11c2:	bf5c      	itt	pl
 80a11c4:	2201      	movpl	r2, #1
 80a11c6:	601a      	strpl	r2, [r3, #0]
 80a11c8:	4b1a      	ldr	r3, [pc, #104]	; (80a1234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a11ca:	681a      	ldr	r2, [r3, #0]
 80a11cc:	07d2      	lsls	r2, r2, #31
 80a11ce:	bf5c      	itt	pl
 80a11d0:	2201      	movpl	r2, #1
 80a11d2:	601a      	strpl	r2, [r3, #0]
 80a11d4:	4b18      	ldr	r3, [pc, #96]	; (80a1238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a11d6:	681a      	ldr	r2, [r3, #0]
 80a11d8:	07d0      	lsls	r0, r2, #31
 80a11da:	bf5c      	itt	pl
 80a11dc:	2201      	movpl	r2, #1
 80a11de:	601a      	strpl	r2, [r3, #0]
 80a11e0:	4b16      	ldr	r3, [pc, #88]	; (80a123c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a11e2:	681a      	ldr	r2, [r3, #0]
 80a11e4:	07d1      	lsls	r1, r2, #31
 80a11e6:	bf5c      	itt	pl
 80a11e8:	2201      	movpl	r2, #1
 80a11ea:	601a      	strpl	r2, [r3, #0]
 80a11ec:	4b14      	ldr	r3, [pc, #80]	; (80a1240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a11ee:	681a      	ldr	r2, [r3, #0]
 80a11f0:	07d2      	lsls	r2, r2, #31
 80a11f2:	bf5c      	itt	pl
 80a11f4:	2201      	movpl	r2, #1
 80a11f6:	601a      	strpl	r2, [r3, #0]
 80a11f8:	4b12      	ldr	r3, [pc, #72]	; (80a1244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a11fa:	681a      	ldr	r2, [r3, #0]
 80a11fc:	07d0      	lsls	r0, r2, #31
 80a11fe:	bf5c      	itt	pl
 80a1200:	2201      	movpl	r2, #1
 80a1202:	601a      	strpl	r2, [r3, #0]
 80a1204:	4b10      	ldr	r3, [pc, #64]	; (80a1248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1206:	681a      	ldr	r2, [r3, #0]
 80a1208:	07d1      	lsls	r1, r2, #31
 80a120a:	bf5c      	itt	pl
 80a120c:	2201      	movpl	r2, #1
 80a120e:	601a      	strpl	r2, [r3, #0]
 80a1210:	4b0e      	ldr	r3, [pc, #56]	; (80a124c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1212:	681a      	ldr	r2, [r3, #0]
 80a1214:	07d2      	lsls	r2, r2, #31
 80a1216:	bf5c      	itt	pl
 80a1218:	2201      	movpl	r2, #1
 80a121a:	601a      	strpl	r2, [r3, #0]
 80a121c:	4770      	bx	lr
 80a121e:	bf00      	nop
 80a1220:	200008d8 	.word	0x200008d8
 80a1224:	200008d4 	.word	0x200008d4
 80a1228:	200008d0 	.word	0x200008d0
 80a122c:	200008cc 	.word	0x200008cc
 80a1230:	200008c8 	.word	0x200008c8
 80a1234:	200008c4 	.word	0x200008c4
 80a1238:	200008c0 	.word	0x200008c0
 80a123c:	200008bc 	.word	0x200008bc
 80a1240:	200008b8 	.word	0x200008b8
 80a1244:	200008b4 	.word	0x200008b4
 80a1248:	200008b0 	.word	0x200008b0
 80a124c:	200008ac 	.word	0x200008ac

080a1250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1250:	4b18      	ldr	r3, [pc, #96]	; (80a12b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1252:	681a      	ldr	r2, [r3, #0]
 80a1254:	07d1      	lsls	r1, r2, #31
 80a1256:	bf5c      	itt	pl
 80a1258:	2201      	movpl	r2, #1
 80a125a:	601a      	strpl	r2, [r3, #0]
 80a125c:	4b16      	ldr	r3, [pc, #88]	; (80a12b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a125e:	681a      	ldr	r2, [r3, #0]
 80a1260:	07d2      	lsls	r2, r2, #31
 80a1262:	bf5c      	itt	pl
 80a1264:	2201      	movpl	r2, #1
 80a1266:	601a      	strpl	r2, [r3, #0]
 80a1268:	4b14      	ldr	r3, [pc, #80]	; (80a12bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a126a:	681a      	ldr	r2, [r3, #0]
 80a126c:	07d0      	lsls	r0, r2, #31
 80a126e:	bf5c      	itt	pl
 80a1270:	2201      	movpl	r2, #1
 80a1272:	601a      	strpl	r2, [r3, #0]
 80a1274:	4b12      	ldr	r3, [pc, #72]	; (80a12c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1276:	681a      	ldr	r2, [r3, #0]
 80a1278:	07d1      	lsls	r1, r2, #31
 80a127a:	bf5c      	itt	pl
 80a127c:	2201      	movpl	r2, #1
 80a127e:	601a      	strpl	r2, [r3, #0]
 80a1280:	4b10      	ldr	r3, [pc, #64]	; (80a12c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1282:	681a      	ldr	r2, [r3, #0]
 80a1284:	07d2      	lsls	r2, r2, #31
 80a1286:	bf5c      	itt	pl
 80a1288:	2201      	movpl	r2, #1
 80a128a:	601a      	strpl	r2, [r3, #0]
 80a128c:	4b0e      	ldr	r3, [pc, #56]	; (80a12c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a128e:	681a      	ldr	r2, [r3, #0]
 80a1290:	07d0      	lsls	r0, r2, #31
 80a1292:	bf5c      	itt	pl
 80a1294:	2201      	movpl	r2, #1
 80a1296:	601a      	strpl	r2, [r3, #0]
 80a1298:	4b0c      	ldr	r3, [pc, #48]	; (80a12cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a129a:	681a      	ldr	r2, [r3, #0]
 80a129c:	07d1      	lsls	r1, r2, #31
 80a129e:	bf5c      	itt	pl
 80a12a0:	2201      	movpl	r2, #1
 80a12a2:	601a      	strpl	r2, [r3, #0]
 80a12a4:	4b0a      	ldr	r3, [pc, #40]	; (80a12d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a12a6:	681a      	ldr	r2, [r3, #0]
 80a12a8:	07d2      	lsls	r2, r2, #31
 80a12aa:	bf5c      	itt	pl
 80a12ac:	2201      	movpl	r2, #1
 80a12ae:	601a      	strpl	r2, [r3, #0]
 80a12b0:	4770      	bx	lr
 80a12b2:	bf00      	nop
 80a12b4:	200008f8 	.word	0x200008f8
 80a12b8:	200008f4 	.word	0x200008f4
 80a12bc:	200008f0 	.word	0x200008f0
 80a12c0:	200008ec 	.word	0x200008ec
 80a12c4:	200008e8 	.word	0x200008e8
 80a12c8:	200008e4 	.word	0x200008e4
 80a12cc:	200008e0 	.word	0x200008e0
 80a12d0:	200008dc 	.word	0x200008dc

080a12d4 <calloc>:
 80a12d4:	4b02      	ldr	r3, [pc, #8]	; (80a12e0 <calloc+0xc>)
 80a12d6:	460a      	mov	r2, r1
 80a12d8:	4601      	mov	r1, r0
 80a12da:	6818      	ldr	r0, [r3, #0]
 80a12dc:	f000 b823 	b.w	80a1326 <_calloc_r>
 80a12e0:	20000364 	.word	0x20000364

080a12e4 <__cxa_atexit>:
 80a12e4:	b510      	push	{r4, lr}
 80a12e6:	4c05      	ldr	r4, [pc, #20]	; (80a12fc <__cxa_atexit+0x18>)
 80a12e8:	4613      	mov	r3, r2
 80a12ea:	b12c      	cbz	r4, 80a12f8 <__cxa_atexit+0x14>
 80a12ec:	460a      	mov	r2, r1
 80a12ee:	4601      	mov	r1, r0
 80a12f0:	2002      	movs	r0, #2
 80a12f2:	f3af 8000 	nop.w
 80a12f6:	bd10      	pop	{r4, pc}
 80a12f8:	4620      	mov	r0, r4
 80a12fa:	bd10      	pop	{r4, pc}
 80a12fc:	00000000 	.word	0x00000000

080a1300 <memcpy>:
 80a1300:	b510      	push	{r4, lr}
 80a1302:	1e43      	subs	r3, r0, #1
 80a1304:	440a      	add	r2, r1
 80a1306:	4291      	cmp	r1, r2
 80a1308:	d004      	beq.n	80a1314 <memcpy+0x14>
 80a130a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a130e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1312:	e7f8      	b.n	80a1306 <memcpy+0x6>
 80a1314:	bd10      	pop	{r4, pc}

080a1316 <memset>:
 80a1316:	4603      	mov	r3, r0
 80a1318:	4402      	add	r2, r0
 80a131a:	4293      	cmp	r3, r2
 80a131c:	d002      	beq.n	80a1324 <memset+0xe>
 80a131e:	f803 1b01 	strb.w	r1, [r3], #1
 80a1322:	e7fa      	b.n	80a131a <memset+0x4>
 80a1324:	4770      	bx	lr

080a1326 <_calloc_r>:
 80a1326:	b538      	push	{r3, r4, r5, lr}
 80a1328:	fb02 f401 	mul.w	r4, r2, r1
 80a132c:	4621      	mov	r1, r4
 80a132e:	f7ff f975 	bl	80a061c <_malloc_r>
 80a1332:	4605      	mov	r5, r0
 80a1334:	b118      	cbz	r0, 80a133e <_calloc_r+0x18>
 80a1336:	4622      	mov	r2, r4
 80a1338:	2100      	movs	r1, #0
 80a133a:	f7ff ffec 	bl	80a1316 <memset>
 80a133e:	4628      	mov	r0, r5
 80a1340:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1344 <srand>:
 80a1344:	b538      	push	{r3, r4, r5, lr}
 80a1346:	4b12      	ldr	r3, [pc, #72]	; (80a1390 <srand+0x4c>)
 80a1348:	4605      	mov	r5, r0
 80a134a:	681c      	ldr	r4, [r3, #0]
 80a134c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a134e:	b9d3      	cbnz	r3, 80a1386 <srand+0x42>
 80a1350:	2018      	movs	r0, #24
 80a1352:	f7ff f953 	bl	80a05fc <malloc>
 80a1356:	f243 330e 	movw	r3, #13070	; 0x330e
 80a135a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a135c:	8003      	strh	r3, [r0, #0]
 80a135e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1362:	8043      	strh	r3, [r0, #2]
 80a1364:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1368:	8083      	strh	r3, [r0, #4]
 80a136a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a136e:	80c3      	strh	r3, [r0, #6]
 80a1370:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1374:	8103      	strh	r3, [r0, #8]
 80a1376:	2305      	movs	r3, #5
 80a1378:	8143      	strh	r3, [r0, #10]
 80a137a:	230b      	movs	r3, #11
 80a137c:	8183      	strh	r3, [r0, #12]
 80a137e:	2201      	movs	r2, #1
 80a1380:	2300      	movs	r3, #0
 80a1382:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1386:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1388:	2200      	movs	r2, #0
 80a138a:	611d      	str	r5, [r3, #16]
 80a138c:	615a      	str	r2, [r3, #20]
 80a138e:	bd38      	pop	{r3, r4, r5, pc}
 80a1390:	20000364 	.word	0x20000364

080a1394 <strlen>:
 80a1394:	4603      	mov	r3, r0
 80a1396:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a139a:	2a00      	cmp	r2, #0
 80a139c:	d1fb      	bne.n	80a1396 <strlen+0x2>
 80a139e:	1a18      	subs	r0, r3, r0
 80a13a0:	3801      	subs	r0, #1
 80a13a2:	4770      	bx	lr

080a13a4 <dynalib_user>:
 80a13a4:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a13b4:	0000 0000                                   ....

080a13b8 <_ZTV8SPIClass>:
	...
 80a13c0:	062d 080a 062f 080a 0066 6e6c 6600 006e     -.../...f.ln.fn.
 80a13d0:	6f63 6564 6400 7465 6961 006c 0a0d 2500     code.detail....%
 80a13e0:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
 80a13f0:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80a1400:	0069 6564 6174 6c69 2073 203d 6200 7561     i.details = .bau
 80a1410:	0064 6553 6972 6c61 5500 4253 6553 6972     d.Serial.USBSeri
 80a1420:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
 80a1430:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
 80a1440:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
 80a1450:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
 80a1460:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
 80a1470:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
 80a1480:	7265 6100 7070 6e00 6e6f 0065 7274 6361     er.app.none.trac
 80a1490:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
 80a14a0:	0072 6170 696e 0063 6c61 006c 005a 2b25     r.panic.all.Z.%+
 80a14b0:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
 80a14c0:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
 80a14d0:	6974 656d 0000 0000                         time....

080a14d8 <_ZTV9IPAddress>:
	...
 80a14e0:	0959 080a 0949 080a 094b 080a               Y...I...K...

080a14ec <_ZTV9USBSerial>:
	...
 80a14f4:	0a15 080a 0a65 080a 0a73 080a 0685 080a     ....e...s.......
 80a1504:	0a51 080a 0a17 080a 0a2d 080a 0a5f 080a     Q.......-..._...
 80a1514:	0a43 080a 0a11 080a                         C.......

080a151c <_ZTV11USARTSerial>:
	...
 80a1524:	0bb5 080a 0c05 080a 0c13 080a 0685 080a     ................
 80a1534:	0bc9 080a 0beb 080a 0bd7 080a 0bff 080a     ................
 80a1544:	0bb7 080a 0bbb 080a                         ........

080a154c <_ZTV7TwoWire>:
	...
 80a1554:	0cb9 080a 0d03 080a 0cdb 080a 0cbb 080a     ................
 80a1564:	0ce3 080a 0ceb 080a 0cf3 080a 0cfb 080a     ................

080a1574 <_ZTVN5spark9WiFiClassE>:
	...
 80a157c:	0dd3 080a 0dc9 080a 0dbf 080a 0d3d 080a     ............=...
 80a158c:	079f 080a 0db3 080a 0da7 080a 0d9f 080a     ................
 80a159c:	0d95 080a 0d8b 080a 0d47 080a               ........G...

080a15a8 <_ZTVN5spark12NetworkClassE>:
	...
 80a15b0:	0df1 080a 0dfb 080a 0e05 080a 0e0f 080a     ................
 80a15c0:	0e19 080a 0e25 080a 0e31 080a 0e3d 080a     ....%...1...=...
 80a15d0:	0e45 080a 0e4f 080a 0e59 080a               E...O...Y...

080a15dc <__sf_fake_stdin>:
	...

080a15fc <__sf_fake_stdout>:
	...

080a161c <__sf_fake_stderr>:
	...
 80a163c:	0043                                        C.

080a163e <link_const_variable_data_end>:
	...

080a1640 <link_constructors_location>:
 80a1640:	080a010d 	.word	0x080a010d
 80a1644:	080a02db 	.word	0x080a02db
 80a1648:	080a066d 	.word	0x080a066d
 80a164c:	080a07ad 	.word	0x080a07ad
 80a1650:	080a07bd 	.word	0x080a07bd
 80a1654:	080a07f5 	.word	0x080a07f5
 80a1658:	080a0ddd 	.word	0x080a0ddd
 80a165c:	080a0ea9 	.word	0x080a0ea9
 80a1660:	080a0f81 	.word	0x080a0f81
 80a1664:	080a0fc5 	.word	0x080a0fc5
 80a1668:	080a1045 	.word	0x080a1045
 80a166c:	080a10c9 	.word	0x080a10c9
 80a1670:	080a118d 	.word	0x080a118d
 80a1674:	080a1251 	.word	0x080a1251

080a1678 <link_constructors_end>:
	...
