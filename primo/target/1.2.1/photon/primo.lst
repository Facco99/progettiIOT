
c:/IOT/primo/target/1.2.1/photon/primo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e8  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a3100  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000078  20000300  080a3104  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000005ec  20000378  20000378  00030378  2**3
                  ALLOC
  5 .module_info_suffix 00000028  080a317c  080a317c  0002317c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a31a4  080a31a4  000231a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000c7584  00000000  00000000  000231a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001201f  00000000  00000000  000ea72c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000154fd  00000000  00000000  000fc74b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002130  00000000  00000000  00111c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000035d8  00000000  00000000  00113d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00027ffe  00000000  00000000  00117350  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00028782  00000000  00000000  0013f34e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a6065  00000000  00000000  00167ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000bd30  00000000  00000000  0020db38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	e8 2c 0a 08                                         .,..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fd87 	bl	80a2b40 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fd8c 	bl	80a2b56 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a3104 	.word	0x080a3104
 80a004c:	20000378 	.word	0x20000378
 80a0050:	20000378 	.word	0x20000378
 80a0054:	20000964 	.word	0x20000964
 80a0058:	20000964 	.word	0x20000964

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 f8bb 	bl	80a11d8 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a30b8 	.word	0x080a30b8
 80a0084:	080a30f8 	.word	0x080a30f8

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8c1 	bl	80a0214 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 b861 	b.w	80a115c <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bde5 	b.w	80a0c68 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bdeb 	b.w	80a0c78 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
uint32_t msLastTemp;
uint32_t msRelay = 0;
int timeout = 0;
int status = 0;

void setup() {
 80a00b4:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  pinMode(D3, INPUT);
 80a00b6:	2100      	movs	r1, #0
 80a00b8:	2003      	movs	r0, #3
 80a00ba:	f001 fbc7 	bl	80a184c <pinMode>
  pinMode(latchPin, OUTPUT);
 80a00be:	4b11      	ldr	r3, [pc, #68]	; (80a0104 <setup+0x50>)
 80a00c0:	2101      	movs	r1, #1
 80a00c2:	8818      	ldrh	r0, [r3, #0]
 80a00c4:	f001 fbc2 	bl	80a184c <pinMode>
  pinMode(dataPin, OUTPUT);
 80a00c8:	4b0f      	ldr	r3, [pc, #60]	; (80a0108 <setup+0x54>)
 80a00ca:	2101      	movs	r1, #1
 80a00cc:	8818      	ldrh	r0, [r3, #0]
 80a00ce:	f001 fbbd 	bl	80a184c <pinMode>
  pinMode(clockPin, OUTPUT);
 80a00d2:	4b0e      	ldr	r3, [pc, #56]	; (80a010c <setup+0x58>)
 80a00d4:	2101      	movs	r1, #1
 80a00d6:	8818      	ldrh	r0, [r3, #0]
 80a00d8:	f001 fbb8 	bl	80a184c <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a00dc:	2300      	movs	r3, #0
 80a00de:	2202      	movs	r2, #2
 80a00e0:	490b      	ldr	r1, [pc, #44]	; (80a0110 <setup+0x5c>)
 80a00e2:	480c      	ldr	r0, [pc, #48]	; (80a0114 <setup+0x60>)
 80a00e4:	f000 fda8 	bl	80a0c38 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a00e8:	490b      	ldr	r1, [pc, #44]	; (80a0118 <setup+0x64>)
 80a00ea:	4a0c      	ldr	r2, [pc, #48]	; (80a011c <setup+0x68>)
 80a00ec:	480c      	ldr	r0, [pc, #48]	; (80a0120 <setup+0x6c>)
 80a00ee:	f001 f8b5 	bl	80a125c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  Particle.variable("bottone", button);
  Particle.function("attivaRelay", attivaRelay);

  Serial.begin(9600);
 80a00f2:	f001 f99d 	bl	80a1430 <_Z16_fetch_usbserialv>

}
 80a00f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(dataPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  Particle.variable("bottone", button);
  Particle.function("attivaRelay", attivaRelay);

  Serial.begin(9600);
 80a00fa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00fe:	f001 b97d 	b.w	80a13fc <_ZN9USBSerial5beginEl>
 80a0102:	bf00      	nop
 80a0104:	20000308 	.word	0x20000308
 80a0108:	20000304 	.word	0x20000304
 80a010c:	20000300 	.word	0x20000300
 80a0110:	200003d8 	.word	0x200003d8
 80a0114:	080a2cfc 	.word	0x080a2cfc
 80a0118:	080a0191 	.word	0x080a0191
 80a011c:	080a2d04 	.word	0x080a2d04
 80a0120:	080a1231 	.word	0x080a1231

080a0124 <_Z13registerWritev>:
    registerWrite();
  }

}

void registerWrite() {
 80a0124:	b538      	push	{r3, r4, r5, lr}

    shiftStatus = 8*relay1 + 16*relay2 + 32*relay3 + 64*relay4;
 80a0126:	4b12      	ldr	r3, [pc, #72]	; (80a0170 <_Z13registerWritev+0x4c>)

    digitalWrite(latchPin, LOW);
 80a0128:	4c12      	ldr	r4, [pc, #72]	; (80a0174 <_Z13registerWritev+0x50>)

}

void registerWrite() {

    shiftStatus = 8*relay1 + 16*relay2 + 32*relay3 + 64*relay4;
 80a012a:	681a      	ldr	r2, [r3, #0]
 80a012c:	4b12      	ldr	r3, [pc, #72]	; (80a0178 <_Z13registerWritev+0x54>)
 80a012e:	4d13      	ldr	r5, [pc, #76]	; (80a017c <_Z13registerWritev+0x58>)
 80a0130:	681b      	ldr	r3, [r3, #0]

    digitalWrite(latchPin, LOW);
 80a0132:	8820      	ldrh	r0, [r4, #0]

}

void registerWrite() {

    shiftStatus = 8*relay1 + 16*relay2 + 32*relay3 + 64*relay4;
 80a0134:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80a0138:	4a11      	ldr	r2, [pc, #68]	; (80a0180 <_Z13registerWritev+0x5c>)

    digitalWrite(latchPin, LOW);
 80a013a:	2100      	movs	r1, #0

}

void registerWrite() {

    shiftStatus = 8*relay1 + 16*relay2 + 32*relay3 + 64*relay4;
 80a013c:	6812      	ldr	r2, [r2, #0]
 80a013e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a0142:	4a10      	ldr	r2, [pc, #64]	; (80a0184 <_Z13registerWritev+0x60>)
 80a0144:	6812      	ldr	r2, [r2, #0]
 80a0146:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a014a:	00db      	lsls	r3, r3, #3
 80a014c:	602b      	str	r3, [r5, #0]

    digitalWrite(latchPin, LOW);
 80a014e:	f001 fb8e 	bl	80a186e <digitalWrite>
    shiftOut(dataPin, clockPin, MSBFIRST, shiftStatus);
 80a0152:	490d      	ldr	r1, [pc, #52]	; (80a0188 <_Z13registerWritev+0x64>)
 80a0154:	480d      	ldr	r0, [pc, #52]	; (80a018c <_Z13registerWritev+0x68>)
 80a0156:	782b      	ldrb	r3, [r5, #0]
 80a0158:	7809      	ldrb	r1, [r1, #0]
 80a015a:	7800      	ldrb	r0, [r0, #0]
 80a015c:	2201      	movs	r2, #1
 80a015e:	f001 fbb2 	bl	80a18c6 <shiftOut>
    digitalWrite(latchPin, HIGH);
 80a0162:	8820      	ldrh	r0, [r4, #0]
 80a0164:	2101      	movs	r1, #1
}
 80a0166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    shiftStatus = 8*relay1 + 16*relay2 + 32*relay3 + 64*relay4;

    digitalWrite(latchPin, LOW);
    shiftOut(dataPin, clockPin, MSBFIRST, shiftStatus);
    digitalWrite(latchPin, HIGH);
 80a016a:	f001 bb80 	b.w	80a186e <digitalWrite>
 80a016e:	bf00      	nop
 80a0170:	200003a4 	.word	0x200003a4
 80a0174:	20000308 	.word	0x20000308
 80a0178:	200003a0 	.word	0x200003a0
 80a017c:	200003c4 	.word	0x200003c4
 80a0180:	200003a8 	.word	0x200003a8
 80a0184:	200003ac 	.word	0x200003ac
 80a0188:	20000300 	.word	0x20000300
 80a018c:	20000304 	.word	0x20000304

080a0190 <_Z11attivaRelay6String>:
}

int attivaRelay(String relay){
 80a0190:	b508      	push	{r3, lr}
  relay2 = relay.toInt();
 80a0192:	f000 fe21 	bl	80a0dd8 <_ZNK6String5toIntEv>
 80a0196:	4b03      	ldr	r3, [pc, #12]	; (80a01a4 <_Z11attivaRelay6String+0x14>)
 80a0198:	6018      	str	r0, [r3, #0]
  registerWrite();
 80a019a:	f7ff ffc3 	bl	80a0124 <_Z13registerWritev>
  return 1;
}
 80a019e:	2001      	movs	r0, #1
 80a01a0:	bd08      	pop	{r3, pc}
 80a01a2:	bf00      	nop
 80a01a4:	200003a4 	.word	0x200003a4

080a01a8 <_Z7getTempv>:

void getTemp(){
 80a01a8:	b538      	push	{r3, r4, r5, lr}
  float _temp;
  int   i = 0;
 80a01aa:	2400      	movs	r4, #0

  do {
    _temp = ds18b20.getTemperature();
 80a01ac:	2100      	movs	r1, #0
 80a01ae:	4813      	ldr	r0, [pc, #76]	; (80a01fc <_Z7getTempv+0x54>)
 80a01b0:	f000 fb78 	bl	80a08a4 <_ZN7DS18B2014getTemperatureEb>
 80a01b4:	4605      	mov	r5, r0
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
 80a01b6:	4811      	ldr	r0, [pc, #68]	; (80a01fc <_Z7getTempv+0x54>)
 80a01b8:	f000 fb90 	bl	80a08dc <_ZN7DS18B208crcCheckEv>
 80a01bc:	b9a0      	cbnz	r0, 80a01e8 <_Z7getTempv+0x40>
 80a01be:	3401      	adds	r4, #1
 80a01c0:	2c05      	cmp	r4, #5
 80a01c2:	d1f3      	bne.n	80a01ac <_Z7getTempv+0x4>

  if (i < MAXRETRY) {
    celsius = _temp;
  }
  else {
    celsius = fahrenheit = NAN;
 80a01c4:	4b0e      	ldr	r3, [pc, #56]	; (80a0200 <_Z7getTempv+0x58>)
 80a01c6:	490f      	ldr	r1, [pc, #60]	; (80a0204 <_Z7getTempv+0x5c>)
 80a01c8:	2200      	movs	r2, #0
 80a01ca:	e9c1 2300 	strd	r2, r3, [r1]
 80a01ce:	490e      	ldr	r1, [pc, #56]	; (80a0208 <_Z7getTempv+0x60>)
 80a01d0:	e9c1 2300 	strd	r2, r3, [r1]
    Serial.println("Invalid reading");
 80a01d4:	f001 f92c 	bl	80a1430 <_Z16_fetch_usbserialv>
 80a01d8:	490c      	ldr	r1, [pc, #48]	; (80a020c <_Z7getTempv+0x64>)
 80a01da:	f000 fe37 	bl	80a0e4c <_ZN5Print7printlnEPKc>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a01de:	f000 fbdd 	bl	80a099c <HAL_Timer_Get_Milli_Seconds>
  }
  msLastSample = millis();
 80a01e2:	4b0b      	ldr	r3, [pc, #44]	; (80a0210 <_Z7getTempv+0x68>)
 80a01e4:	6018      	str	r0, [r3, #0]
 80a01e6:	bd38      	pop	{r3, r4, r5, pc}

  do {
    _temp = ds18b20.getTemperature();
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);

  if (i < MAXRETRY) {
 80a01e8:	2c04      	cmp	r4, #4
 80a01ea:	d0eb      	beq.n	80a01c4 <_Z7getTempv+0x1c>
    celsius = _temp;
 80a01ec:	4628      	mov	r0, r5
 80a01ee:	f001 fe9b 	bl	80a1f28 <__aeabi_f2d>
 80a01f2:	4b05      	ldr	r3, [pc, #20]	; (80a0208 <_Z7getTempv+0x60>)
 80a01f4:	e9c3 0100 	strd	r0, r1, [r3]
 80a01f8:	e7f1      	b.n	80a01de <_Z7getTempv+0x36>
 80a01fa:	bf00      	nop
 80a01fc:	20000380 	.word	0x20000380
 80a0200:	7ff80000 	.word	0x7ff80000
 80a0204:	200003d0 	.word	0x200003d0
 80a0208:	200003b0 	.word	0x200003b0
 80a020c:	080a2d10 	.word	0x080a2d10
 80a0210:	200003bc 	.word	0x200003bc

080a0214 <loop>:
  Serial.begin(9600);

}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0214:	b573      	push	{r0, r1, r4, r5, r6, lr}
  // The core of your code will likely live here.
  button = digitalRead(D3);
 80a0216:	2003      	movs	r0, #3
 80a0218:	f001 fb42 	bl	80a18a0 <digitalRead>

  if(oldButton==button){
 80a021c:	4e3e      	ldr	r6, [pc, #248]	; (80a0318 <loop+0x104>)
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  button = digitalRead(D3);
 80a021e:	4c3f      	ldr	r4, [pc, #252]	; (80a031c <loop+0x108>)

  if(oldButton==button){
 80a0220:	6833      	ldr	r3, [r6, #0]
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  button = digitalRead(D3);
 80a0222:	6020      	str	r0, [r4, #0]

  if(oldButton==button){
 80a0224:	4298      	cmp	r0, r3
 80a0226:	4d3e      	ldr	r5, [pc, #248]	; (80a0320 <loop+0x10c>)
 80a0228:	d103      	bne.n	80a0232 <loop+0x1e>
    delay(0);
 80a022a:	2000      	movs	r0, #0
 80a022c:	f000 ff44 	bl	80a10b8 <delay>
 80a0230:	e00e      	b.n	80a0250 <loop+0x3c>
    //Serial.println(timeout);
  }else{
    relay1 = button;
 80a0232:	4b3c      	ldr	r3, [pc, #240]	; (80a0324 <loop+0x110>)
 80a0234:	6018      	str	r0, [r3, #0]
    registerWrite();
 80a0236:	f7ff ff75 	bl	80a0124 <_Z13registerWritev>
    oldButton=button;
 80a023a:	6823      	ldr	r3, [r4, #0]
 80a023c:	6033      	str	r3, [r6, #0]
 80a023e:	f000 fbad 	bl	80a099c <HAL_Timer_Get_Milli_Seconds>
    timeout = millis();
 80a0242:	6028      	str	r0, [r5, #0]
    Serial.println(timeout);
 80a0244:	f001 f8f4 	bl	80a1430 <_Z16_fetch_usbserialv>
 80a0248:	220a      	movs	r2, #10
 80a024a:	6829      	ldr	r1, [r5, #0]
 80a024c:	f000 fe56 	bl	80a0efc <_ZN5Print7printlnEii>
    //timeout = 0;
  } 

  if ((timeout > 0)&&(millis() - timeout >= 5000)){
 80a0250:	682b      	ldr	r3, [r5, #0]
 80a0252:	4e33      	ldr	r6, [pc, #204]	; (80a0320 <loop+0x10c>)
 80a0254:	2b00      	cmp	r3, #0
 80a0256:	dd07      	ble.n	80a0268 <loop+0x54>
 80a0258:	f000 fba0 	bl	80a099c <HAL_Timer_Get_Milli_Seconds>
 80a025c:	6833      	ldr	r3, [r6, #0]
 80a025e:	1ac0      	subs	r0, r0, r3
 80a0260:	f241 3387 	movw	r3, #4999	; 0x1387
 80a0264:	4298      	cmp	r0, r3
 80a0266:	d834      	bhi.n	80a02d2 <loop+0xbe>
 80a0268:	f000 fb98 	bl	80a099c <HAL_Timer_Get_Milli_Seconds>
    registerWrite();
    timeout = 0;
  }


  if (millis() - msLastSample >= msSAMPLE_INTERVAL){
 80a026c:	4b2e      	ldr	r3, [pc, #184]	; (80a0328 <loop+0x114>)
 80a026e:	681b      	ldr	r3, [r3, #0]
 80a0270:	1ac0      	subs	r0, r0, r3
 80a0272:	f640 13c3 	movw	r3, #2499	; 0x9c3
 80a0276:	4298      	cmp	r0, r3
 80a0278:	d901      	bls.n	80a027e <loop+0x6a>
    getTemp();
 80a027a:	f7ff ff95 	bl	80a01a8 <_Z7getTempv>
 80a027e:	f000 fb8d 	bl	80a099c <HAL_Timer_Get_Milli_Seconds>
  }

  if (millis() - msLastTemp >= msTEMP_INTERVAL){
 80a0282:	4c2a      	ldr	r4, [pc, #168]	; (80a032c <loop+0x118>)
 80a0284:	6823      	ldr	r3, [r4, #0]
 80a0286:	1ac0      	subs	r0, r0, r3
 80a0288:	f241 3387 	movw	r3, #4999	; 0x1387
 80a028c:	4298      	cmp	r0, r3
 80a028e:	d90b      	bls.n	80a02a8 <loop+0x94>
      Serial.println(celsius);
 80a0290:	f001 f8ce 	bl	80a1430 <_Z16_fetch_usbserialv>
 80a0294:	2302      	movs	r3, #2
 80a0296:	9300      	str	r3, [sp, #0]
 80a0298:	4b25      	ldr	r3, [pc, #148]	; (80a0330 <loop+0x11c>)
 80a029a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a029e:	f000 fee5 	bl	80a106c <_ZN5Print7printlnEdi>
 80a02a2:	f000 fb7b 	bl	80a099c <HAL_Timer_Get_Milli_Seconds>
      msLastTemp=millis();
 80a02a6:	6020      	str	r0, [r4, #0]
  }

  if ((status==0)&&(millis() - msRelay >= 5000)){
 80a02a8:	4c22      	ldr	r4, [pc, #136]	; (80a0334 <loop+0x120>)
 80a02aa:	6823      	ldr	r3, [r4, #0]
 80a02ac:	4626      	mov	r6, r4
 80a02ae:	b9c3      	cbnz	r3, 80a02e2 <loop+0xce>
 80a02b0:	f000 fb74 	bl	80a099c <HAL_Timer_Get_Milli_Seconds>
 80a02b4:	4d20      	ldr	r5, [pc, #128]	; (80a0338 <loop+0x124>)
 80a02b6:	682b      	ldr	r3, [r5, #0]
 80a02b8:	1ac0      	subs	r0, r0, r3
 80a02ba:	f241 3387 	movw	r3, #4999	; 0x1387
 80a02be:	4298      	cmp	r0, r3
 80a02c0:	d90f      	bls.n	80a02e2 <loop+0xce>
    relay4 = 1;
 80a02c2:	4a1e      	ldr	r2, [pc, #120]	; (80a033c <loop+0x128>)
 80a02c4:	2301      	movs	r3, #1
 80a02c6:	6013      	str	r3, [r2, #0]
    status = relay4;
 80a02c8:	6023      	str	r3, [r4, #0]
 80a02ca:	f000 fb67 	bl	80a099c <HAL_Timer_Get_Milli_Seconds>
    msRelay = millis();
 80a02ce:	6028      	str	r0, [r5, #0]
 80a02d0:	e01b      	b.n	80a030a <loop+0xf6>
    Serial.println(timeout);
    //timeout = 0;
  } 

  if ((timeout > 0)&&(millis() - timeout >= 5000)){
    relay3 = button;
 80a02d2:	4b1b      	ldr	r3, [pc, #108]	; (80a0340 <loop+0x12c>)
 80a02d4:	6822      	ldr	r2, [r4, #0]
 80a02d6:	601a      	str	r2, [r3, #0]
    registerWrite();
 80a02d8:	f7ff ff24 	bl	80a0124 <_Z13registerWritev>
    timeout = 0;
 80a02dc:	2300      	movs	r3, #0
 80a02de:	6033      	str	r3, [r6, #0]
 80a02e0:	e7c2      	b.n	80a0268 <loop+0x54>
  if ((status==0)&&(millis() - msRelay >= 5000)){
    relay4 = 1;
    status = relay4;
    msRelay = millis();
    registerWrite();
  }else if((status == 1)&&(millis() - msRelay >= 5000)){
 80a02e2:	6833      	ldr	r3, [r6, #0]
 80a02e4:	2b01      	cmp	r3, #1
 80a02e6:	d115      	bne.n	80a0314 <loop+0x100>
 80a02e8:	f000 fb58 	bl	80a099c <HAL_Timer_Get_Milli_Seconds>
 80a02ec:	4c12      	ldr	r4, [pc, #72]	; (80a0338 <loop+0x124>)
 80a02ee:	6823      	ldr	r3, [r4, #0]
 80a02f0:	1ac0      	subs	r0, r0, r3
 80a02f2:	f241 3387 	movw	r3, #4999	; 0x1387
 80a02f6:	4298      	cmp	r0, r3
 80a02f8:	d90c      	bls.n	80a0314 <loop+0x100>
    relay4 = 0;
 80a02fa:	4a10      	ldr	r2, [pc, #64]	; (80a033c <loop+0x128>)
 80a02fc:	2300      	movs	r3, #0
 80a02fe:	6013      	str	r3, [r2, #0]
    status = relay4;
 80a0300:	4a0c      	ldr	r2, [pc, #48]	; (80a0334 <loop+0x120>)
 80a0302:	6013      	str	r3, [r2, #0]
 80a0304:	f000 fb4a 	bl	80a099c <HAL_Timer_Get_Milli_Seconds>
    msRelay = millis();
 80a0308:	6020      	str	r0, [r4, #0]
    registerWrite();
  }

}
 80a030a:	b002      	add	sp, #8
 80a030c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    registerWrite();
  }else if((status == 1)&&(millis() - msRelay >= 5000)){
    relay4 = 0;
    status = relay4;
    msRelay = millis();
    registerWrite();
 80a0310:	f7ff bf08 	b.w	80a0124 <_Z13registerWritev>
  }

}
 80a0314:	b002      	add	sp, #8
 80a0316:	bd70      	pop	{r4, r5, r6, pc}
 80a0318:	200003b8 	.word	0x200003b8
 80a031c:	200003d8 	.word	0x200003d8
 80a0320:	200003c8 	.word	0x200003c8
 80a0324:	200003a0 	.word	0x200003a0
 80a0328:	200003bc 	.word	0x200003bc
 80a032c:	2000037c 	.word	0x2000037c
 80a0330:	200003b0 	.word	0x200003b0
 80a0334:	200003c0 	.word	0x200003c0
 80a0338:	200003cc 	.word	0x200003cc
 80a033c:	200003ac 	.word	0x200003ac
 80a0340:	200003a8 	.word	0x200003a8

080a0344 <_GLOBAL__sub_I_button>:
  else {
    celsius = fahrenheit = NAN;
    Serial.println("Invalid reading");
  }
  msLastSample = millis();
 80a0344:	b510      	push	{r4, lr}
const int MAXRETRY = 4;
const int16_t dsData = D7;
const uint32_t msSAMPLE_INTERVAL = 2500;
const uint32_t msTEMP_INTERVAL = 5000;

DS18B20  ds18b20(dsData, true); 
 80a0346:	4c07      	ldr	r4, [pc, #28]	; (80a0364 <_GLOBAL__sub_I_button+0x20>)
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0348:	f000 fad0 	bl	80a08ec <HAL_Pin_Map>
 80a034c:	2201      	movs	r2, #1
 80a034e:	2107      	movs	r1, #7
 80a0350:	4620      	mov	r0, r4
 80a0352:	f000 f9af 	bl	80a06b4 <_ZN7DS18B20C1Etb>
 80a0356:	4620      	mov	r0, r4
  else {
    celsius = fahrenheit = NAN;
    Serial.println("Invalid reading");
  }
  msLastSample = millis();
 80a0358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
const int MAXRETRY = 4;
const int16_t dsData = D7;
const uint32_t msSAMPLE_INTERVAL = 2500;
const uint32_t msTEMP_INTERVAL = 5000;

DS18B20  ds18b20(dsData, true); 
 80a035c:	4a02      	ldr	r2, [pc, #8]	; (80a0368 <_GLOBAL__sub_I_button+0x24>)
 80a035e:	4903      	ldr	r1, [pc, #12]	; (80a036c <_GLOBAL__sub_I_button+0x28>)
 80a0360:	f001 bb2e 	b.w	80a19c0 <__aeabi_atexit>
 80a0364:	20000380 	.word	0x20000380
 80a0368:	20000378 	.word	0x20000378
 80a036c:	080a0719 	.word	0x080a0719

080a0370 <_ZN7OneWire19digitalWriteFastLowEv>:
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed

    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a0370:	8802      	ldrh	r2, [r0, #0]
 80a0372:	231c      	movs	r3, #28
 80a0374:	4353      	muls	r3, r2
 80a0376:	6842      	ldr	r2, [r0, #4]
 80a0378:	18d1      	adds	r1, r2, r3
 80a037a:	58d3      	ldr	r3, [r2, r3]
 80a037c:	888a      	ldrh	r2, [r1, #4]
 80a037e:	835a      	strh	r2, [r3, #26]
 80a0380:	4770      	bx	lr

080a0382 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a0382:	b538      	push	{r3, r4, r5, lr}
 80a0384:	4604      	mov	r4, r0
 80a0386:	460d      	mov	r5, r1
    }

  // Assume all other platforms are STM32F2xx until proven otherwise
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed
 80a0388:	f000 fab0 	bl	80a08ec <HAL_Pin_Map>
{
    pinMode(pin, INPUT);
 80a038c:	2100      	movs	r1, #0
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a038e:	6060      	str	r0, [r4, #4]
{
    pinMode(pin, INPUT);
 80a0390:	4628      	mov	r0, r5
 80a0392:	f001 fa5b 	bl	80a184c <pinMode>
    _pin = pin;
 80a0396:	8025      	strh	r5, [r4, #0]
}
 80a0398:	4620      	mov	r0, r4
 80a039a:	bd38      	pop	{r3, r4, r5, pc}

080a039c <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
 80a039c:	b570      	push	{r4, r5, r6, lr}
 80a039e:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
 80a03a0:	f001 f8a8 	bl	80a14f4 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a03a4:	2100      	movs	r1, #0
 80a03a6:	8828      	ldrh	r0, [r5, #0]
 80a03a8:	f000 faa8 	bl	80a08fc <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
 80a03ac:	f001 f8a4 	bl	80a14f8 <_Z10interruptsv>
 80a03b0:	247d      	movs	r4, #125	; 0x7d
 80a03b2:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do
    {
        if (--retries == 0)
 80a03b4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a03b8:	d02f      	beq.n	80a041a <_ZN7OneWire5resetEv+0x7e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a03ba:	2002      	movs	r0, #2
 80a03bc:	f000 fae6 	bl	80a098c <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a03c0:	8828      	ldrh	r0, [r5, #0]
 80a03c2:	f000 fab3 	bl	80a092c <HAL_GPIO_Read>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do
 80a03c6:	f010 0fff 	tst.w	r0, #255	; 0xff
 80a03ca:	d0f2      	beq.n	80a03b2 <_ZN7OneWire5resetEv+0x16>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());

    noInterrupts();
 80a03cc:	f001 f892 	bl	80a14f4 <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a03d0:	4628      	mov	r0, r5
 80a03d2:	f7ff ffcd 	bl	80a0370 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a03d6:	2101      	movs	r1, #1
 80a03d8:	8828      	ldrh	r0, [r5, #0]
 80a03da:	f000 fa8f 	bl	80a08fc <HAL_Pin_Mode>
    pinModeFastOutput(); // drive output low

    interrupts();
 80a03de:	f001 f88b 	bl	80a14f8 <_Z10interruptsv>
 80a03e2:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80a03e6:	f000 fad1 	bl	80a098c <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
 80a03ea:	f000 fadf 	bl	80a09ac <HAL_disable_irq>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a03ee:	2100      	movs	r1, #0
 80a03f0:	4606      	mov	r6, r0
 80a03f2:	8828      	ldrh	r0, [r5, #0]
 80a03f4:	f000 fa82 	bl	80a08fc <HAL_Pin_Mode>
 80a03f8:	2046      	movs	r0, #70	; 0x46
 80a03fa:	f000 fac7 	bl	80a098c <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a03fe:	8828      	ldrh	r0, [r5, #0]
 80a0400:	f000 fa94 	bl	80a092c <HAL_GPIO_Read>
    {
        pinModeFastInput(); // allow it to float

        delayMicroseconds(70);

        r = !digitalReadFast();
 80a0404:	b2c0      	uxtb	r0, r0
 80a0406:	fab0 f480 	clz	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
 80a040a:	4630      	mov	r0, r6
 80a040c:	f000 fad6 	bl	80a09bc <HAL_enable_irq>
 80a0410:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80a0414:	0964      	lsrs	r4, r4, #5
 80a0416:	f000 fab9 	bl	80a098c <HAL_Delay_Microseconds>
    }

    delayMicroseconds(410);

    return r;
}
 80a041a:	4620      	mov	r0, r4
 80a041c:	bd70      	pop	{r4, r5, r6, pc}

080a041e <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
 80a041e:	b570      	push	{r4, r5, r6, lr}
    if (v & 1)
 80a0420:	f011 0601 	ands.w	r6, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
 80a0424:	4604      	mov	r4, r0
    if (v & 1)
 80a0426:	d015      	beq.n	80a0454 <_ZN7OneWire9write_bitEh+0x36>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
 80a0428:	f000 fac0 	bl	80a09ac <HAL_disable_irq>
 80a042c:	4605      	mov	r5, r0
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
 80a042e:	4620      	mov	r0, r4
 80a0430:	f7ff ff9e 	bl	80a0370 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0434:	2101      	movs	r1, #1
 80a0436:	8820      	ldrh	r0, [r4, #0]
 80a0438:	f000 fa60 	bl	80a08fc <HAL_Pin_Mode>
 80a043c:	2001      	movs	r0, #1
 80a043e:	f000 faa5 	bl	80a098c <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0442:	2100      	movs	r1, #0
 80a0444:	8820      	ldrh	r0, [r4, #0]
 80a0446:	f000 fa59 	bl	80a08fc <HAL_Pin_Mode>
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
 80a044a:	4628      	mov	r0, r5
 80a044c:	f000 fab6 	bl	80a09bc <HAL_enable_irq>
 80a0450:	203b      	movs	r0, #59	; 0x3b
 80a0452:	e014      	b.n	80a047e <_ZN7OneWire9write_bitEh+0x60>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
 80a0454:	f000 faaa 	bl	80a09ac <HAL_disable_irq>
 80a0458:	4605      	mov	r5, r0
    }
    else
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
 80a045a:	4620      	mov	r0, r4
 80a045c:	f7ff ff88 	bl	80a0370 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0460:	2101      	movs	r1, #1
 80a0462:	8820      	ldrh	r0, [r4, #0]
 80a0464:	f000 fa4a 	bl	80a08fc <HAL_Pin_Mode>
 80a0468:	2041      	movs	r0, #65	; 0x41
 80a046a:	f000 fa8f 	bl	80a098c <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a046e:	4631      	mov	r1, r6
 80a0470:	8820      	ldrh	r0, [r4, #0]
 80a0472:	f000 fa43 	bl	80a08fc <HAL_Pin_Mode>
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
 80a0476:	4628      	mov	r0, r5
 80a0478:	f000 faa0 	bl	80a09bc <HAL_enable_irq>
 80a047c:	2005      	movs	r0, #5

            pinModeFastInput(); // float high
        }
        delayMicroseconds(5);
    }
}
 80a047e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0482:	f000 ba83 	b.w	80a098c <HAL_Delay_Microseconds>

080a0486 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
 80a0486:	b538      	push	{r3, r4, r5, lr}
 80a0488:	4604      	mov	r4, r0

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
 80a048a:	f000 fa8f 	bl	80a09ac <HAL_disable_irq>
 80a048e:	4605      	mov	r5, r0
    uint8_t r;

    ATOMIC_BLOCK()
    {
        digitalWriteFastLow();
 80a0490:	4620      	mov	r0, r4
 80a0492:	f7ff ff6d 	bl	80a0370 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0496:	2101      	movs	r1, #1
 80a0498:	8820      	ldrh	r0, [r4, #0]
 80a049a:	f000 fa2f 	bl	80a08fc <HAL_Pin_Mode>
 80a049e:	2001      	movs	r0, #1
 80a04a0:	f000 fa74 	bl	80a098c <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a04a4:	2100      	movs	r1, #0
 80a04a6:	8820      	ldrh	r0, [r4, #0]
 80a04a8:	f000 fa28 	bl	80a08fc <HAL_Pin_Mode>
 80a04ac:	200d      	movs	r0, #13
 80a04ae:	f000 fa6d 	bl	80a098c <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a04b2:	8820      	ldrh	r0, [r4, #0]
 80a04b4:	f000 fa3a 	bl	80a092c <HAL_GPIO_Read>
 80a04b8:	4604      	mov	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
 80a04ba:	4628      	mov	r0, r5
 80a04bc:	f000 fa7e 	bl	80a09bc <HAL_enable_irq>
 80a04c0:	202e      	movs	r0, #46	; 0x2e
 80a04c2:	f000 fa63 	bl	80a098c <HAL_Delay_Microseconds>
    }

    delayMicroseconds(46);

    return r;
}
 80a04c6:	b2e0      	uxtb	r0, r4
 80a04c8:	bd38      	pop	{r3, r4, r5, pc}

080a04ca <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
 80a04ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a04ce:	4605      	mov	r5, r0
 80a04d0:	4688      	mov	r8, r1
 80a04d2:	4617      	mov	r7, r2
 80a04d4:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
 80a04d6:	2401      	movs	r4, #1
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
 80a04d8:	ea18 0f04 	tst.w	r8, r4
 80a04dc:	bf14      	ite	ne
 80a04de:	2101      	movne	r1, #1
 80a04e0:	2100      	moveq	r1, #0
 80a04e2:	4628      	mov	r0, r5
 80a04e4:	f7ff ff9b 	bl	80a041e <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
 80a04e8:	0064      	lsls	r4, r4, #1
 80a04ea:	3e01      	subs	r6, #1
 80a04ec:	b2e4      	uxtb	r4, r4
 80a04ee:	d1f3      	bne.n	80a04d8 <_ZN7OneWire5writeEhh+0xe>
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
    }

    if (power)
 80a04f0:	b18f      	cbz	r7, 80a0516 <_ZN7OneWire5writeEhh+0x4c>
    {
        noInterrupts();
 80a04f2:	f000 ffff 	bl	80a14f4 <_Z12noInterruptsv>
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a04f6:	882a      	ldrh	r2, [r5, #0]
 80a04f8:	231c      	movs	r3, #28
 80a04fa:	4353      	muls	r3, r2
 80a04fc:	686a      	ldr	r2, [r5, #4]
 80a04fe:	18d1      	adds	r1, r2, r3
 80a0500:	58d3      	ldr	r3, [r2, r3]
 80a0502:	888a      	ldrh	r2, [r1, #4]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0504:	2101      	movs	r1, #1
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0506:	831a      	strh	r2, [r3, #24]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0508:	8828      	ldrh	r0, [r5, #0]
 80a050a:	f000 f9f7 	bl	80a08fc <HAL_Pin_Mode>
        digitalWriteFastHigh();
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
    }
}
 80a050e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
 80a0512:	f000 bff1 	b.w	80a14f8 <_Z10interruptsv>
 80a0516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a051a <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
 80a051a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a051c:	4607      	mov	r7, r0
 80a051e:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
 80a0520:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
 80a0522:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
 80a0524:	4638      	mov	r0, r7
 80a0526:	f7ff ffae 	bl	80a0486 <_ZN7OneWire8read_bitEv>
 80a052a:	b100      	cbz	r0, 80a052e <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
 80a052c:	4325      	orrs	r5, r4
uint8_t OneWire::read()
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
 80a052e:	0064      	lsls	r4, r4, #1
 80a0530:	3e01      	subs	r6, #1
 80a0532:	b2e4      	uxtb	r4, r4
 80a0534:	d1f6      	bne.n	80a0524 <_ZN7OneWire4readEv+0xa>
        if (OneWire::read_bit())
            r |= bitMask;
    }

    return r;
}
 80a0536:	4628      	mov	r0, r5
 80a0538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a053a <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a053a:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
 80a053c:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a053e:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55); // Choose ROM
 80a0540:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a0542:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55); // Choose ROM
 80a0544:	f7ff ffc1 	bl	80a04ca <_ZN7OneWire5writeEhh>
 80a0548:	1e65      	subs	r5, r4, #1
 80a054a:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++)
        write(rom[i]);
 80a054c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a0550:	2200      	movs	r2, #0
 80a0552:	4630      	mov	r0, r6
 80a0554:	f7ff ffb9 	bl	80a04ca <_ZN7OneWire5writeEhh>
{
    uint8_t i;

    write(0x55); // Choose ROM

    for (i = 0; i < 8; i++)
 80a0558:	42a5      	cmp	r5, r4
 80a055a:	d1f7      	bne.n	80a054c <_ZN7OneWire6selectEPKh+0x12>
        write(rom[i]);
}
 80a055c:	bd70      	pop	{r4, r5, r6, pc}

080a055e <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC); // Skip ROM
 80a055e:	2200      	movs	r2, #0
 80a0560:	21cc      	movs	r1, #204	; 0xcc
 80a0562:	f7ff bfb2 	b.w	80a04ca <_ZN7OneWire5writeEhh>

080a0566 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
 80a0566:	2300      	movs	r3, #0
 80a0568:	7403      	strb	r3, [r0, #16]
    LastDeviceFlag = FALSE;
 80a056a:	7483      	strb	r3, [r0, #18]
    LastFamilyDiscrepancy = 0;
 80a056c:	7443      	strb	r3, [r0, #17]
 80a056e:	f100 0210 	add.w	r2, r0, #16
 80a0572:	3008      	adds	r0, #8

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
 80a0574:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if (i == 0)
 80a0578:	4282      	cmp	r2, r0
 80a057a:	d1fb      	bne.n	80a0574 <_ZN7OneWire12reset_searchEv+0xe>
            break;
    }
}
 80a057c:	4770      	bx	lr

080a057e <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a057e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a0582:	7c85      	ldrb	r5, [r0, #18]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a0584:	4604      	mov	r4, r0
 80a0586:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a0588:	2d00      	cmp	r5, #0
 80a058a:	d15e      	bne.n	80a064a <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset())
 80a058c:	f7ff ff06 	bl	80a039c <_ZN7OneWire5resetEv>
 80a0590:	b920      	cbnz	r0, 80a059c <_ZN7OneWire6searchEPh+0x1e>
        {
            // reset the search
            LastDiscrepancy = 0;
 80a0592:	7420      	strb	r0, [r4, #16]
            LastDeviceFlag = FALSE;
 80a0594:	74a0      	strb	r0, [r4, #18]
            LastFamilyDiscrepancy = 0;
 80a0596:	7460      	strb	r0, [r4, #17]

            return FALSE;
 80a0598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
 80a059c:	462a      	mov	r2, r5
 80a059e:	21f0      	movs	r1, #240	; 0xf0
 80a05a0:	4620      	mov	r0, r4

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
 80a05a2:	2601      	movs	r6, #1

            return FALSE;
        }

        // issue the search command
        write(0xF0);
 80a05a4:	f7ff ff91 	bl	80a04ca <_ZN7OneWire5writeEhh>

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
 80a05a8:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a05aa:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
 80a05ac:	4620      	mov	r0, r4
 80a05ae:	f7ff ff6a 	bl	80a0486 <_ZN7OneWire8read_bitEv>
 80a05b2:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
 80a05b4:	4620      	mov	r0, r4
 80a05b6:	f7ff ff66 	bl	80a0486 <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1))
 80a05ba:	f1b9 0f01 	cmp.w	r9, #1
 80a05be:	d102      	bne.n	80a05c6 <_ZN7OneWire6searchEPh+0x48>
 80a05c0:	2801      	cmp	r0, #1
 80a05c2:	d11b      	bne.n	80a05fc <_ZN7OneWire6searchEPh+0x7e>
 80a05c4:	e037      	b.n	80a0636 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit)
 80a05c6:	4581      	cmp	r9, r0
 80a05c8:	eb04 0305 	add.w	r3, r4, r5
 80a05cc:	d11e      	bne.n	80a060c <_ZN7OneWire6searchEPh+0x8e>
                }
                else
                {
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
 80a05ce:	7c22      	ldrb	r2, [r4, #16]
 80a05d0:	4297      	cmp	r7, r2
 80a05d2:	d207      	bcs.n	80a05e4 <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80a05d4:	7a1a      	ldrb	r2, [r3, #8]
 80a05d6:	4216      	tst	r6, r2
 80a05d8:	bf14      	ite	ne
 80a05da:	f04f 0901 	movne.w	r9, #1
 80a05de:	f04f 0900 	moveq.w	r9, #0
 80a05e2:	e004      	b.n	80a05ee <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
 80a05e4:	bf0c      	ite	eq
 80a05e6:	f04f 0901 	moveq.w	r9, #1
 80a05ea:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0)
 80a05ee:	f1b9 0f00 	cmp.w	r9, #0
 80a05f2:	d103      	bne.n	80a05fc <_ZN7OneWire6searchEPh+0x7e>
                    {
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
 80a05f4:	2f08      	cmp	r7, #8
 80a05f6:	d808      	bhi.n	80a060a <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
 80a05f8:	7467      	strb	r7, [r4, #17]
 80a05fa:	e006      	b.n	80a060a <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
 80a05fc:	1962      	adds	r2, r4, r5
 80a05fe:	7a13      	ldrb	r3, [r2, #8]
 80a0600:	f04f 0901 	mov.w	r9, #1
 80a0604:	4333      	orrs	r3, r6
 80a0606:	7213      	strb	r3, [r2, #8]
 80a0608:	e004      	b.n	80a0614 <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a060a:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80a060c:	7a1a      	ldrb	r2, [r3, #8]
 80a060e:	ea22 0206 	bic.w	r2, r2, r6
 80a0612:	721a      	strb	r2, [r3, #8]

                // serial number search direction write bit
                write_bit(search_direction);
 80a0614:	4649      	mov	r1, r9
 80a0616:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
 80a0618:	0076      	lsls	r6, r6, #1
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
 80a061a:	f7ff ff00 	bl	80a041e <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
 80a061e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
 80a0622:	bf04      	itt	eq
 80a0624:	3501      	addeq	r5, #1
 80a0626:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a0628:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
 80a062c:	bf08      	it	eq
 80a062e:	2601      	moveq	r6, #1
                }
            }
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
 80a0630:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a0632:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
 80a0634:	d9ba      	bls.n	80a05ac <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
 80a0636:	2f40      	cmp	r7, #64	; 0x40
 80a0638:	d907      	bls.n	80a064a <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
 80a063a:	f884 a010 	strb.w	sl, [r4, #16]

            // check for last device
            if (LastDiscrepancy == 0)
 80a063e:	f1ba 0f00 	cmp.w	sl, #0
 80a0642:	d112      	bne.n	80a066a <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
 80a0644:	2301      	movs	r3, #1
 80a0646:	74a3      	strb	r3, [r4, #18]
 80a0648:	e00f      	b.n	80a066a <_ZN7OneWire6searchEPh+0xec>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
 80a064a:	2000      	movs	r0, #0
 80a064c:	7420      	strb	r0, [r4, #16]
        LastDeviceFlag = FALSE;
 80a064e:	74a0      	strb	r0, [r4, #18]
        LastFamilyDiscrepancy = 0;
 80a0650:	7460      	strb	r0, [r4, #17]
 80a0652:	1de3      	adds	r3, r4, #7
 80a0654:	f108 38ff 	add.w	r8, r8, #4294967295
 80a0658:	340f      	adds	r4, #15
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
        newAddr[i] = ROM_NO[i];
 80a065a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
        LastDeviceFlag = FALSE;
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
 80a065e:	42a3      	cmp	r3, r4
        newAddr[i] = ROM_NO[i];
 80a0660:	f808 2f01 	strb.w	r2, [r8, #1]!
        LastDeviceFlag = FALSE;
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
 80a0664:	d1f9      	bne.n	80a065a <_ZN7OneWire6searchEPh+0xdc>
 80a0666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
 80a066a:	7a23      	ldrb	r3, [r4, #8]
 80a066c:	2b00      	cmp	r3, #0
 80a066e:	d0ec      	beq.n	80a064a <_ZN7OneWire6searchEPh+0xcc>
 80a0670:	2001      	movs	r0, #1
 80a0672:	e7ee      	b.n	80a0652 <_ZN7OneWire6searchEPh+0xd4>

080a0674 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
 80a0674:	b530      	push	{r4, r5, lr}
 80a0676:	4605      	mov	r5, r0
    uint8_t crc = 0;
 80a0678:	2000      	movs	r0, #0

    while (len--)
 80a067a:	3901      	subs	r1, #1
 80a067c:	b2c9      	uxtb	r1, r1
 80a067e:	29ff      	cmp	r1, #255	; 0xff
 80a0680:	d013      	beq.n	80a06aa <_ZN7OneWire4crc8EPhh+0x36>
    {
        uint8_t inbyte = *addr++;
 80a0682:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a0686:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
 80a0688:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix)
 80a068c:	f013 0f01 	tst.w	r3, #1
 80a0690:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
 80a0694:	bf1c      	itt	ne
 80a0696:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
 80a069a:	b2d8      	uxtbne	r0, r3
 80a069c:	1e53      	subs	r3, r2, #1
    uint8_t crc = 0;

    while (len--)
    {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--)
 80a069e:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix)
                crc ^= 0x8C;
            inbyte >>= 1;
 80a06a2:	ea4f 0454 	mov.w	r4, r4, lsr #1
    uint8_t crc = 0;

    while (len--)
    {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--)
 80a06a6:	d1ef      	bne.n	80a0688 <_ZN7OneWire4crc8EPhh+0x14>
 80a06a8:	e7e7      	b.n	80a067a <_ZN7OneWire4crc8EPhh+0x6>
            inbyte >>= 1;
        }
    }

    return crc;
}
 80a06aa:	bd30      	pop	{r4, r5, pc}

080a06ac <_GLOBAL__sub_I__ZN7OneWireC2Et>:
 80a06ac:	f000 b91e 	b.w	80a08ec <HAL_Pin_Map>

080a06b0 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
 80a06b0:	f000 b91c 	b.w	80a08ec <HAL_Pin_Map>

080a06b4 <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a06b4:	b570      	push	{r4, r5, r6, lr}
 80a06b6:	4604      	mov	r4, r0
{
  memset(_data, 0, sizeof(_data));
 80a06b8:	2300      	movs	r3, #0
 80a06ba:	6063      	str	r3, [r4, #4]
 80a06bc:	60a3      	str	r3, [r4, #8]
 80a06be:	60e3      	str	r3, [r4, #12]
  memset(_addr, 0, sizeof(_addr));
 80a06c0:	6123      	str	r3, [r4, #16]
 80a06c2:	6163      	str	r3, [r4, #20]
  _dataCRC     = 0; 
 80a06c4:	7623      	strb	r3, [r4, #24]
  _readCRC     = 0;
 80a06c6:	7663      	strb	r3, [r4, #25]
  _singleDrop  = singleDrop;
  _sampleDelay = 750;
 80a06c8:	f240 23ee 	movw	r3, #750	; 0x2ee
{
  memset(_data, 0, sizeof(_data));
  memset(_addr, 0, sizeof(_addr));
  _dataCRC     = 0; 
  _readCRC     = 0;
  _singleDrop  = singleDrop;
 80a06cc:	76a2      	strb	r2, [r4, #26]
  _sampleDelay = 750;
 80a06ce:	61e3      	str	r3, [r4, #28]
  ds           = new OneWire(pin);
 80a06d0:	2014      	movs	r0, #20
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a06d2:	460e      	mov	r6, r1
  memset(_addr, 0, sizeof(_addr));
  _dataCRC     = 0; 
  _readCRC     = 0;
  _singleDrop  = singleDrop;
  _sampleDelay = 750;
  ds           = new OneWire(pin);
 80a06d4:	f7ff fce1 	bl	80a009a <_Znwj>
 80a06d8:	4605      	mov	r5, r0
 80a06da:	b110      	cbz	r0, 80a06e2 <_ZN7DS18B20C1Etb+0x2e>
 80a06dc:	4631      	mov	r1, r6
 80a06de:	f7ff fe50 	bl	80a0382 <_ZN7OneWireC1Et>
 80a06e2:	6025      	str	r5, [r4, #0]
}
 80a06e4:	4620      	mov	r0, r4
 80a06e6:	bd70      	pop	{r4, r5, r6, pc}

080a06e8 <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
 80a06e8:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
 80a06ea:	f100 0510 	add.w	r5, r0, #16
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
 80a06ee:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
 80a06f0:	6800      	ldr	r0, [r0, #0]
 80a06f2:	4629      	mov	r1, r5
 80a06f4:	f7ff ff43 	bl	80a057e <_ZN7OneWire6searchEPh>
 80a06f8:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
 80a06fa:	bf17      	itett	ne
 80a06fc:	682b      	ldrne	r3, [r5, #0]
  else           memset(addr, 0, 8);
 80a06fe:	6023      	streq	r3, [r4, #0]
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
  if (isSuccess) memcpy(addr, _addr, 8);
 80a0700:	6023      	strne	r3, [r4, #0]
 80a0702:	686b      	ldrne	r3, [r5, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
 80a0704:	bf18      	it	ne
 80a0706:	2001      	movne	r0, #1
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
 80a0708:	6063      	str	r3, [r4, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
 80a070a:	bf08      	it	eq
 80a070c:	2000      	moveq	r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}
 80a070e:	bd38      	pop	{r3, r4, r5, pc}

080a0710 <_ZN7DS18B206searchEv>:
  ds           = new OneWire(pin);
}

boolean DS18B20::search()
{
  return search(_addr);
 80a0710:	f100 0110 	add.w	r1, r0, #16
 80a0714:	f7ff bfe8 	b.w	80a06e8 <_ZN7DS18B206searchEPh>

080a0718 <_ZN7DS18B20D1Ev>:
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}

DS18B20::~DS18B20()
 80a0718:	b510      	push	{r4, lr}
 80a071a:	4604      	mov	r4, r0
{
  delete(ds);
 80a071c:	2114      	movs	r1, #20
 80a071e:	6800      	ldr	r0, [r0, #0]
 80a0720:	f001 f953 	bl	80a19ca <_ZdlPvj>
}
 80a0724:	4620      	mov	r0, r4
 80a0726:	bd10      	pop	{r4, pc}

080a0728 <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
 80a0728:	6800      	ldr	r0, [r0, #0]
 80a072a:	f7ff bf1c 	b.w	80a0566 <_ZN7OneWire12reset_searchEv>
	...

080a0730 <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
 80a0730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
 80a0732:	7e83      	ldrb	r3, [r0, #26]
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
 80a0734:	4604      	mov	r4, r0
 80a0736:	460d      	mov	r5, r1
 80a0738:	4616      	mov	r6, r2
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
 80a073a:	b91b      	cbnz	r3, 80a0744 <_ZN7DS18B2014getTemperatureEPhb+0x14>
 80a073c:	780b      	ldrb	r3, [r1, #0]
 80a073e:	2b00      	cmp	r3, #0
 80a0740:	f000 80a3 	beq.w	80a088a <_ZN7DS18B2014getTemperatureEPhb+0x15a>

  ds->reset();
 80a0744:	6820      	ldr	r0, [r4, #0]
 80a0746:	f7ff fe29 	bl	80a039c <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
 80a074a:	7ea3      	ldrb	r3, [r4, #26]
 80a074c:	b123      	cbz	r3, 80a0758 <_ZN7DS18B2014getTemperatureEPhb+0x28>
 80a074e:	b91e      	cbnz	r6, 80a0758 <_ZN7DS18B2014getTemperatureEPhb+0x28>
    ds->skip();
 80a0750:	6820      	ldr	r0, [r4, #0]
 80a0752:	f7ff ff04 	bl	80a055e <_ZN7OneWire4skipEv>
 80a0756:	e003      	b.n	80a0760 <_ZN7DS18B2014getTemperatureEPhb+0x30>
  else
    ds->select(addr);
 80a0758:	4629      	mov	r1, r5
 80a075a:	6820      	ldr	r0, [r4, #0]
 80a075c:	f7ff feed 	bl	80a053a <_ZN7OneWire6selectEPKh>

  ds->write(0x44);        // start conversion, with parasite power on at the end
 80a0760:	2200      	movs	r2, #0
 80a0762:	2144      	movs	r1, #68	; 0x44
 80a0764:	6820      	ldr	r0, [r4, #0]
 80a0766:	f7ff feb0 	bl	80a04ca <_ZN7OneWire5writeEhh>
  delay(_sampleDelay);    // maybe 750ms is enough, maybe not
 80a076a:	69e0      	ldr	r0, [r4, #28]
 80a076c:	f000 fca4 	bl	80a10b8 <delay>
                          // we might do a ds.depower() here, but the reset will take care of it.
  ds->reset();
 80a0770:	6820      	ldr	r0, [r4, #0]
 80a0772:	f7ff fe13 	bl	80a039c <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
 80a0776:	7ea3      	ldrb	r3, [r4, #26]
 80a0778:	b123      	cbz	r3, 80a0784 <_ZN7DS18B2014getTemperatureEPhb+0x54>
 80a077a:	b91e      	cbnz	r6, 80a0784 <_ZN7DS18B2014getTemperatureEPhb+0x54>
    ds->skip();
 80a077c:	6820      	ldr	r0, [r4, #0]
 80a077e:	f7ff feee 	bl	80a055e <_ZN7OneWire4skipEv>
 80a0782:	e003      	b.n	80a078c <_ZN7DS18B2014getTemperatureEPhb+0x5c>
  else
    ds->select(addr);
 80a0784:	4629      	mov	r1, r5
 80a0786:	6820      	ldr	r0, [r4, #0]
 80a0788:	f7ff fed7 	bl	80a053a <_ZN7OneWire6selectEPKh>

  ds->write(0xBE);         // Read Scratchpad
 80a078c:	2200      	movs	r2, #0
 80a078e:	21be      	movs	r1, #190	; 0xbe
 80a0790:	6820      	ldr	r0, [r4, #0]
 80a0792:	f7ff fe9a 	bl	80a04ca <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
 80a0796:	782b      	ldrb	r3, [r5, #0]
 80a0798:	2b26      	cmp	r3, #38	; 0x26
 80a079a:	d104      	bne.n	80a07a6 <_ZN7DS18B2014getTemperatureEPhb+0x76>
    ds->write(0x00,0);     // DS2438 requires a page to read
 80a079c:	2200      	movs	r2, #0
 80a079e:	4611      	mov	r1, r2
 80a07a0:	6820      	ldr	r0, [r4, #0]
 80a07a2:	f7ff fe92 	bl	80a04ca <_ZN7OneWire5writeEhh>
 80a07a6:	1ce6      	adds	r6, r4, #3
 80a07a8:	f104 070c 	add.w	r7, r4, #12
  }

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
 80a07ac:	6820      	ldr	r0, [r4, #0]
 80a07ae:	f7ff feb4 	bl	80a051a <_ZN7OneWire4readEv>
 80a07b2:	f806 0f01 	strb.w	r0, [r6, #1]!
  ds->write(0xBE);         // Read Scratchpad
  if (addr[0] == WIRE_DS2438) {
    ds->write(0x00,0);     // DS2438 requires a page to read
  }

  for (int i = 0; i < 9; i++)
 80a07b6:	42be      	cmp	r6, r7
 80a07b8:	d1f8      	bne.n	80a07ac <_ZN7DS18B2014getTemperatureEPhb+0x7c>
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
 80a07ba:	2108      	movs	r1, #8
 80a07bc:	1d20      	adds	r0, r4, #4
 80a07be:	f7ff ff59 	bl	80a0674 <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
 80a07c2:	7b23      	ldrb	r3, [r4, #12]

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
 80a07c4:	7620      	strb	r0, [r4, #24]
  _readCRC = (_data[8]);
  if (_dataCRC != _readCRC) return NAN;
 80a07c6:	4298      	cmp	r0, r3
  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
  _readCRC = (_data[8]);
 80a07c8:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
 80a07ca:	d15e      	bne.n	80a088a <_ZN7DS18B2014getTemperatureEPhb+0x15a>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
 80a07cc:	782b      	ldrb	r3, [r5, #0]
 80a07ce:	2b22      	cmp	r3, #34	; 0x22
 80a07d0:	d01b      	beq.n	80a080a <_ZN7DS18B2014getTemperatureEPhb+0xda>
 80a07d2:	d816      	bhi.n	80a0802 <_ZN7DS18B2014getTemperatureEPhb+0xd2>
 80a07d4:	2b10      	cmp	r3, #16
 80a07d6:	d158      	bne.n	80a088a <_ZN7DS18B2014getTemperatureEPhb+0x15a>
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
 80a07d8:	7ae3      	ldrb	r3, [r4, #11]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a07da:	88a0      	ldrh	r0, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
 80a07dc:	2b10      	cmp	r3, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
 80a07de:	bf08      	it	eq
 80a07e0:	7aa3      	ldrbeq	r3, [r4, #10]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a07e2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
        raw = (raw & 0xFFF0) + 12 - _data[6];     
 80a07e6:	bf02      	ittt	eq
 80a07e8:	f020 000f 	biceq.w	r0, r0, #15
 80a07ec:	f1c3 030c 	rsbeq	r3, r3, #12
 80a07f0:	18c0      	addeq	r0, r0, r3
 80a07f2:	b200      	sxth	r0, r0
      celsius = (float)raw / 16.0;
 80a07f4:	f001 ffee 	bl	80a27d4 <__aeabi_i2f>
 80a07f8:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80a07fc:	f002 f83e 	bl	80a287c <__aeabi_fmul>
      break;
 80a0800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
 80a0802:	2b26      	cmp	r3, #38	; 0x26
 80a0804:	d01f      	beq.n	80a0846 <_ZN7DS18B2014getTemperatureEPhb+0x116>
 80a0806:	2b28      	cmp	r3, #40	; 0x28
 80a0808:	d13f      	bne.n	80a088a <_ZN7DS18B2014getTemperatureEPhb+0x15a>
      celsius = (float)raw / 16.0;
      break;

    case WIRE_DS1822:
    case WIRE_DS18B20:
      switch (_data[4] & 0x60)
 80a080a:	7a22      	ldrb	r2, [r4, #8]
 80a080c:	7923      	ldrb	r3, [r4, #4]
 80a080e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a0812:	2a20      	cmp	r2, #32
 80a0814:	d005      	beq.n	80a0822 <_ZN7DS18B2014getTemperatureEPhb+0xf2>
 80a0816:	2a40      	cmp	r2, #64	; 0x40
 80a0818:	d006      	beq.n	80a0828 <_ZN7DS18B2014getTemperatureEPhb+0xf8>
 80a081a:	b942      	cbnz	r2, 80a082e <_ZN7DS18B2014getTemperatureEPhb+0xfe>
      { // lower resolution means shorter conversion time, low bits need masking
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
 80a081c:	f023 0307 	bic.w	r3, r3, #7
 80a0820:	e004      	b.n	80a082c <_ZN7DS18B2014getTemperatureEPhb+0xfc>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
 80a0822:	f023 0303 	bic.w	r3, r3, #3
 80a0826:	e001      	b.n	80a082c <_ZN7DS18B2014getTemperatureEPhb+0xfc>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
 80a0828:	f023 0301 	bic.w	r3, r3, #1
 80a082c:	7123      	strb	r3, [r4, #4]
        default: break;                                 // 12 bit 750.00 ms 
      }
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
 80a082e:	7923      	ldrb	r3, [r4, #4]
 80a0830:	7960      	ldrb	r0, [r4, #5]
 80a0832:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a0836:	b200      	sxth	r0, r0
 80a0838:	f001 fb64 	bl	80a1f04 <__aeabi_i2d>
 80a083c:	2200      	movs	r2, #0
 80a083e:	4b14      	ldr	r3, [pc, #80]	; (80a0890 <_ZN7DS18B2014getTemperatureEPhb+0x160>)
 80a0840:	f001 fbc6 	bl	80a1fd0 <__aeabi_dmul>
 80a0844:	e01e      	b.n	80a0884 <_ZN7DS18B2014getTemperatureEPhb+0x154>
      break;
      
    case WIRE_DS2438:
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
 80a0846:	79a5      	ldrb	r5, [r4, #6]
 80a0848:	4628      	mov	r0, r5
 80a084a:	f001 fb5b 	bl	80a1f04 <__aeabi_i2d>
 80a084e:	4606      	mov	r6, r0
 80a0850:	7960      	ldrb	r0, [r4, #5]
 80a0852:	460f      	mov	r7, r1
 80a0854:	08c0      	lsrs	r0, r0, #3
 80a0856:	f001 ffbd 	bl	80a27d4 <__aeabi_i2f>
 80a085a:	f001 fb65 	bl	80a1f28 <__aeabi_f2d>
 80a085e:	2200      	movs	r2, #0
 80a0860:	4b0c      	ldr	r3, [pc, #48]	; (80a0894 <_ZN7DS18B2014getTemperatureEPhb+0x164>)
 80a0862:	f001 fbb5 	bl	80a1fd0 <__aeabi_dmul>
 80a0866:	460b      	mov	r3, r1
 80a0868:	0629      	lsls	r1, r5, #24
 80a086a:	4602      	mov	r2, r0
 80a086c:	bf48      	it	mi
 80a086e:	490a      	ldrmi	r1, [pc, #40]	; (80a0898 <_ZN7DS18B2014getTemperatureEPhb+0x168>)
 80a0870:	f04f 0000 	mov.w	r0, #0
 80a0874:	bf58      	it	pl
 80a0876:	4909      	ldrpl	r1, [pc, #36]	; (80a089c <_ZN7DS18B2014getTemperatureEPhb+0x16c>)
 80a0878:	f001 fbaa 	bl	80a1fd0 <__aeabi_dmul>
 80a087c:	4632      	mov	r2, r6
 80a087e:	463b      	mov	r3, r7
 80a0880:	f001 f9f4 	bl	80a1c6c <__adddf3>
 80a0884:	f001 fe9c 	bl	80a25c0 <__aeabi_d2f>
      break;
 80a0888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      
    default:
      celsius = NAN;
 80a088a:	4805      	ldr	r0, [pc, #20]	; (80a08a0 <_ZN7DS18B2014getTemperatureEPhb+0x170>)
      break;                            
  }
  
  return celsius;
}
 80a088c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a088e:	bf00      	nop
 80a0890:	3fb00000 	.word	0x3fb00000
 80a0894:	3fa00000 	.word	0x3fa00000
 80a0898:	bff00000 	.word	0xbff00000
 80a089c:	3ff00000 	.word	0x3ff00000
 80a08a0:	7fc00000 	.word	0x7fc00000

080a08a4 <_ZN7DS18B2014getTemperatureEb>:

  return "impossible";
}

float DS18B20::getTemperature(bool forceSelect)
{
 80a08a4:	b538      	push	{r3, r4, r5, lr}
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
 80a08a6:	7e83      	ldrb	r3, [r0, #26]

  return "impossible";
}

float DS18B20::getTemperature(bool forceSelect)
{
 80a08a8:	4604      	mov	r4, r0
 80a08aa:	460d      	mov	r5, r1
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
 80a08ac:	b93b      	cbnz	r3, 80a08be <_ZN7DS18B2014getTemperatureEb+0x1a>
  {
    resetsearch();
    if (!search()) return NAN;
  }
  return getTemperature(_addr, forceSelect);
 80a08ae:	462a      	mov	r2, r5
 80a08b0:	f104 0110 	add.w	r1, r4, #16
 80a08b4:	4620      	mov	r0, r4
}
 80a08b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
  {
    resetsearch();
    if (!search()) return NAN;
  }
  return getTemperature(_addr, forceSelect);
 80a08ba:	f7ff bf39 	b.w	80a0730 <_ZN7DS18B2014getTemperatureEPhb>
  return "impossible";
}

float DS18B20::getTemperature(bool forceSelect)
{
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
 80a08be:	7c03      	ldrb	r3, [r0, #16]
 80a08c0:	2b00      	cmp	r3, #0
 80a08c2:	d1f4      	bne.n	80a08ae <_ZN7DS18B2014getTemperatureEb+0xa>
  {
    resetsearch();
 80a08c4:	f7ff ff30 	bl	80a0728 <_ZN7DS18B2011resetsearchEv>
    if (!search()) return NAN;
 80a08c8:	4620      	mov	r0, r4
 80a08ca:	f7ff ff21 	bl	80a0710 <_ZN7DS18B206searchEv>
 80a08ce:	2800      	cmp	r0, #0
 80a08d0:	d1ed      	bne.n	80a08ae <_ZN7DS18B2014getTemperatureEb+0xa>
  }
  return getTemperature(_addr, forceSelect);
}
 80a08d2:	4801      	ldr	r0, [pc, #4]	; (80a08d8 <_ZN7DS18B2014getTemperatureEb+0x34>)
 80a08d4:	bd38      	pop	{r3, r4, r5, pc}
 80a08d6:	bf00      	nop
 80a08d8:	7fc00000 	.word	0x7fc00000

080a08dc <_ZN7DS18B208crcCheckEv>:
  return celsius * 1.8 + 32.0;
}

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
 80a08dc:	7e02      	ldrb	r2, [r0, #24]
 80a08de:	7e40      	ldrb	r0, [r0, #25]
}
 80a08e0:	1a13      	subs	r3, r2, r0
 80a08e2:	4258      	negs	r0, r3
 80a08e4:	4158      	adcs	r0, r3
 80a08e6:	4770      	bx	lr

080a08e8 <_GLOBAL__sub_I__ZN7DS18B20C2Etb>:
 80a08e8:	f000 b800 	b.w	80a08ec <HAL_Pin_Map>

080a08ec <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a08ec:	b508      	push	{r3, lr}
 80a08ee:	4b02      	ldr	r3, [pc, #8]	; (80a08f8 <HAL_Pin_Map+0xc>)
 80a08f0:	681b      	ldr	r3, [r3, #0]
 80a08f2:	681b      	ldr	r3, [r3, #0]
 80a08f4:	9301      	str	r3, [sp, #4]
 80a08f6:	bd08      	pop	{r3, pc}
 80a08f8:	080601b0 	.word	0x080601b0

080a08fc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a08fc:	b508      	push	{r3, lr}
 80a08fe:	4b02      	ldr	r3, [pc, #8]	; (80a0908 <HAL_Pin_Mode+0xc>)
 80a0900:	681b      	ldr	r3, [r3, #0]
 80a0902:	689b      	ldr	r3, [r3, #8]
 80a0904:	9301      	str	r3, [sp, #4]
 80a0906:	bd08      	pop	{r3, pc}
 80a0908:	080601b0 	.word	0x080601b0

080a090c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a090c:	b508      	push	{r3, lr}
 80a090e:	4b02      	ldr	r3, [pc, #8]	; (80a0918 <HAL_Get_Pin_Mode+0xc>)
 80a0910:	681b      	ldr	r3, [r3, #0]
 80a0912:	68db      	ldr	r3, [r3, #12]
 80a0914:	9301      	str	r3, [sp, #4]
 80a0916:	bd08      	pop	{r3, pc}
 80a0918:	080601b0 	.word	0x080601b0

080a091c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a091c:	b508      	push	{r3, lr}
 80a091e:	4b02      	ldr	r3, [pc, #8]	; (80a0928 <HAL_GPIO_Write+0xc>)
 80a0920:	681b      	ldr	r3, [r3, #0]
 80a0922:	691b      	ldr	r3, [r3, #16]
 80a0924:	9301      	str	r3, [sp, #4]
 80a0926:	bd08      	pop	{r3, pc}
 80a0928:	080601b0 	.word	0x080601b0

080a092c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a092c:	b508      	push	{r3, lr}
 80a092e:	4b02      	ldr	r3, [pc, #8]	; (80a0938 <HAL_GPIO_Read+0xc>)
 80a0930:	681b      	ldr	r3, [r3, #0]
 80a0932:	695b      	ldr	r3, [r3, #20]
 80a0934:	9301      	str	r3, [sp, #4]
 80a0936:	bd08      	pop	{r3, pc}
 80a0938:	080601b0 	.word	0x080601b0

080a093c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a093c:	b508      	push	{r3, lr}
 80a093e:	4b02      	ldr	r3, [pc, #8]	; (80a0948 <HAL_Interrupts_Enable_All+0xc>)
 80a0940:	681b      	ldr	r3, [r3, #0]
 80a0942:	6a1b      	ldr	r3, [r3, #32]
 80a0944:	9301      	str	r3, [sp, #4]
 80a0946:	bd08      	pop	{r3, pc}
 80a0948:	080601b0 	.word	0x080601b0

080a094c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a094c:	b508      	push	{r3, lr}
 80a094e:	4b02      	ldr	r3, [pc, #8]	; (80a0958 <HAL_Interrupts_Disable_All+0xc>)
 80a0950:	681b      	ldr	r3, [r3, #0]
 80a0952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0954:	9301      	str	r3, [sp, #4]
 80a0956:	bd08      	pop	{r3, pc}
 80a0958:	080601b0 	.word	0x080601b0

080a095c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a095c:	b508      	push	{r3, lr}
 80a095e:	4b02      	ldr	r3, [pc, #8]	; (80a0968 <HAL_SPI_Init+0xc>)
 80a0960:	681b      	ldr	r3, [r3, #0]
 80a0962:	69db      	ldr	r3, [r3, #28]
 80a0964:	9301      	str	r3, [sp, #4]
 80a0966:	bd08      	pop	{r3, pc}
 80a0968:	080601b4 	.word	0x080601b4

080a096c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a096c:	b508      	push	{r3, lr}
 80a096e:	4b02      	ldr	r3, [pc, #8]	; (80a0978 <HAL_SPI_Is_Enabled+0xc>)
 80a0970:	681b      	ldr	r3, [r3, #0]
 80a0972:	6a1b      	ldr	r3, [r3, #32]
 80a0974:	9301      	str	r3, [sp, #4]
 80a0976:	bd08      	pop	{r3, pc}
 80a0978:	080601b4 	.word	0x080601b4

080a097c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a097c:	b508      	push	{r3, lr}
 80a097e:	4b02      	ldr	r3, [pc, #8]	; (80a0988 <HAL_RNG_GetRandomNumber+0xc>)
 80a0980:	681b      	ldr	r3, [r3, #0]
 80a0982:	685b      	ldr	r3, [r3, #4]
 80a0984:	9301      	str	r3, [sp, #4]
 80a0986:	bd08      	pop	{r3, pc}
 80a0988:	0806019c 	.word	0x0806019c

080a098c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a098c:	b508      	push	{r3, lr}
 80a098e:	4b02      	ldr	r3, [pc, #8]	; (80a0998 <HAL_Delay_Microseconds+0xc>)
 80a0990:	681b      	ldr	r3, [r3, #0]
 80a0992:	68db      	ldr	r3, [r3, #12]
 80a0994:	9301      	str	r3, [sp, #4]
 80a0996:	bd08      	pop	{r3, pc}
 80a0998:	0806019c 	.word	0x0806019c

080a099c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a099c:	b508      	push	{r3, lr}
 80a099e:	4b02      	ldr	r3, [pc, #8]	; (80a09a8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a09a0:	681b      	ldr	r3, [r3, #0]
 80a09a2:	695b      	ldr	r3, [r3, #20]
 80a09a4:	9301      	str	r3, [sp, #4]
 80a09a6:	bd08      	pop	{r3, pc}
 80a09a8:	0806019c 	.word	0x0806019c

080a09ac <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
 80a09ac:	b508      	push	{r3, lr}
 80a09ae:	4b02      	ldr	r3, [pc, #8]	; (80a09b8 <HAL_disable_irq+0xc>)
 80a09b0:	681b      	ldr	r3, [r3, #0]
 80a09b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a09b4:	9301      	str	r3, [sp, #4]
 80a09b6:	bd08      	pop	{r3, pc}
 80a09b8:	0806019c 	.word	0x0806019c

080a09bc <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
 80a09bc:	b508      	push	{r3, lr}
 80a09be:	4b02      	ldr	r3, [pc, #8]	; (80a09c8 <HAL_enable_irq+0xc>)
 80a09c0:	681b      	ldr	r3, [r3, #0]
 80a09c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a09c4:	9301      	str	r3, [sp, #4]
 80a09c6:	bd08      	pop	{r3, pc}
 80a09c8:	0806019c 	.word	0x0806019c

080a09cc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a09cc:	b508      	push	{r3, lr}
 80a09ce:	4b02      	ldr	r3, [pc, #8]	; (80a09d8 <os_mutex_create+0xc>)
 80a09d0:	681b      	ldr	r3, [r3, #0]
 80a09d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a09d4:	9301      	str	r3, [sp, #4]
 80a09d6:	bd08      	pop	{r3, pc}
 80a09d8:	080601d0 	.word	0x080601d0

080a09dc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a09dc:	b508      	push	{r3, lr}
 80a09de:	4b02      	ldr	r3, [pc, #8]	; (80a09e8 <HAL_USART_Init+0xc>)
 80a09e0:	681b      	ldr	r3, [r3, #0]
 80a09e2:	699b      	ldr	r3, [r3, #24]
 80a09e4:	9301      	str	r3, [sp, #4]
 80a09e6:	bd08      	pop	{r3, pc}
 80a09e8:	080601c4 	.word	0x080601c4

080a09ec <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a09ec:	b508      	push	{r3, lr}
 80a09ee:	4b02      	ldr	r3, [pc, #8]	; (80a09f8 <HAL_USART_Write_Data+0xc>)
 80a09f0:	681b      	ldr	r3, [r3, #0]
 80a09f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a09f4:	9301      	str	r3, [sp, #4]
 80a09f6:	bd08      	pop	{r3, pc}
 80a09f8:	080601c4 	.word	0x080601c4

080a09fc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a09fc:	b508      	push	{r3, lr}
 80a09fe:	4b02      	ldr	r3, [pc, #8]	; (80a0a08 <HAL_USART_Available_Data+0xc>)
 80a0a00:	681b      	ldr	r3, [r3, #0]
 80a0a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0a04:	9301      	str	r3, [sp, #4]
 80a0a06:	bd08      	pop	{r3, pc}
 80a0a08:	080601c4 	.word	0x080601c4

080a0a0c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0a0c:	b508      	push	{r3, lr}
 80a0a0e:	4b02      	ldr	r3, [pc, #8]	; (80a0a18 <HAL_USART_Read_Data+0xc>)
 80a0a10:	681b      	ldr	r3, [r3, #0]
 80a0a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0a14:	9301      	str	r3, [sp, #4]
 80a0a16:	bd08      	pop	{r3, pc}
 80a0a18:	080601c4 	.word	0x080601c4

080a0a1c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0a1c:	b508      	push	{r3, lr}
 80a0a1e:	4b02      	ldr	r3, [pc, #8]	; (80a0a28 <HAL_USART_Peek_Data+0xc>)
 80a0a20:	681b      	ldr	r3, [r3, #0]
 80a0a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a24:	9301      	str	r3, [sp, #4]
 80a0a26:	bd08      	pop	{r3, pc}
 80a0a28:	080601c4 	.word	0x080601c4

080a0a2c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0a2c:	b508      	push	{r3, lr}
 80a0a2e:	4b02      	ldr	r3, [pc, #8]	; (80a0a38 <HAL_USART_Flush_Data+0xc>)
 80a0a30:	681b      	ldr	r3, [r3, #0]
 80a0a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0a34:	9301      	str	r3, [sp, #4]
 80a0a36:	bd08      	pop	{r3, pc}
 80a0a38:	080601c4 	.word	0x080601c4

080a0a3c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0a3c:	b508      	push	{r3, lr}
 80a0a3e:	4b02      	ldr	r3, [pc, #8]	; (80a0a48 <HAL_USART_Is_Enabled+0xc>)
 80a0a40:	681b      	ldr	r3, [r3, #0]
 80a0a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0a44:	9301      	str	r3, [sp, #4]
 80a0a46:	bd08      	pop	{r3, pc}
 80a0a48:	080601c4 	.word	0x080601c4

080a0a4c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0a4c:	b508      	push	{r3, lr}
 80a0a4e:	4b02      	ldr	r3, [pc, #8]	; (80a0a58 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0a50:	681b      	ldr	r3, [r3, #0]
 80a0a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0a54:	9301      	str	r3, [sp, #4]
 80a0a56:	bd08      	pop	{r3, pc}
 80a0a58:	080601c4 	.word	0x080601c4

080a0a5c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0a5c:	b508      	push	{r3, lr}
 80a0a5e:	4b02      	ldr	r3, [pc, #8]	; (80a0a68 <HAL_I2C_Write_Data+0xc>)
 80a0a60:	681b      	ldr	r3, [r3, #0]
 80a0a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0a64:	9301      	str	r3, [sp, #4]
 80a0a66:	bd08      	pop	{r3, pc}
 80a0a68:	080601ac 	.word	0x080601ac

080a0a6c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0a6c:	b508      	push	{r3, lr}
 80a0a6e:	4b02      	ldr	r3, [pc, #8]	; (80a0a78 <HAL_I2C_Available_Data+0xc>)
 80a0a70:	681b      	ldr	r3, [r3, #0]
 80a0a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0a74:	9301      	str	r3, [sp, #4]
 80a0a76:	bd08      	pop	{r3, pc}
 80a0a78:	080601ac 	.word	0x080601ac

080a0a7c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0a7c:	b508      	push	{r3, lr}
 80a0a7e:	4b02      	ldr	r3, [pc, #8]	; (80a0a88 <HAL_I2C_Read_Data+0xc>)
 80a0a80:	681b      	ldr	r3, [r3, #0]
 80a0a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0a84:	9301      	str	r3, [sp, #4]
 80a0a86:	bd08      	pop	{r3, pc}
 80a0a88:	080601ac 	.word	0x080601ac

080a0a8c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0a8c:	b508      	push	{r3, lr}
 80a0a8e:	4b02      	ldr	r3, [pc, #8]	; (80a0a98 <HAL_I2C_Peek_Data+0xc>)
 80a0a90:	681b      	ldr	r3, [r3, #0]
 80a0a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0a94:	9301      	str	r3, [sp, #4]
 80a0a96:	bd08      	pop	{r3, pc}
 80a0a98:	080601ac 	.word	0x080601ac

080a0a9c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0a9c:	b508      	push	{r3, lr}
 80a0a9e:	4b02      	ldr	r3, [pc, #8]	; (80a0aa8 <HAL_I2C_Flush_Data+0xc>)
 80a0aa0:	681b      	ldr	r3, [r3, #0]
 80a0aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0aa4:	9301      	str	r3, [sp, #4]
 80a0aa6:	bd08      	pop	{r3, pc}
 80a0aa8:	080601ac 	.word	0x080601ac

080a0aac <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0aac:	b508      	push	{r3, lr}
 80a0aae:	4b02      	ldr	r3, [pc, #8]	; (80a0ab8 <HAL_I2C_Is_Enabled+0xc>)
 80a0ab0:	681b      	ldr	r3, [r3, #0]
 80a0ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0ab4:	9301      	str	r3, [sp, #4]
 80a0ab6:	bd08      	pop	{r3, pc}
 80a0ab8:	080601ac 	.word	0x080601ac

080a0abc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0abc:	b508      	push	{r3, lr}
 80a0abe:	4b03      	ldr	r3, [pc, #12]	; (80a0acc <HAL_I2C_Init+0x10>)
 80a0ac0:	681b      	ldr	r3, [r3, #0]
 80a0ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0ac6:	9301      	str	r3, [sp, #4]
 80a0ac8:	bd08      	pop	{r3, pc}
 80a0aca:	0000      	.short	0x0000
 80a0acc:	080601ac 	.word	0x080601ac

080a0ad0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0ad0:	b508      	push	{r3, lr}
 80a0ad2:	4b02      	ldr	r3, [pc, #8]	; (80a0adc <HAL_USB_USART_Init+0xc>)
 80a0ad4:	681b      	ldr	r3, [r3, #0]
 80a0ad6:	681b      	ldr	r3, [r3, #0]
 80a0ad8:	9301      	str	r3, [sp, #4]
 80a0ada:	bd08      	pop	{r3, pc}
 80a0adc:	080601d8 	.word	0x080601d8

080a0ae0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0ae0:	b508      	push	{r3, lr}
 80a0ae2:	4b02      	ldr	r3, [pc, #8]	; (80a0aec <HAL_USB_USART_Begin+0xc>)
 80a0ae4:	681b      	ldr	r3, [r3, #0]
 80a0ae6:	685b      	ldr	r3, [r3, #4]
 80a0ae8:	9301      	str	r3, [sp, #4]
 80a0aea:	bd08      	pop	{r3, pc}
 80a0aec:	080601d8 	.word	0x080601d8

080a0af0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0af0:	b508      	push	{r3, lr}
 80a0af2:	4b02      	ldr	r3, [pc, #8]	; (80a0afc <HAL_USB_USART_Available_Data+0xc>)
 80a0af4:	681b      	ldr	r3, [r3, #0]
 80a0af6:	691b      	ldr	r3, [r3, #16]
 80a0af8:	9301      	str	r3, [sp, #4]
 80a0afa:	bd08      	pop	{r3, pc}
 80a0afc:	080601d8 	.word	0x080601d8

080a0b00 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0b00:	b508      	push	{r3, lr}
 80a0b02:	4b02      	ldr	r3, [pc, #8]	; (80a0b0c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0b04:	681b      	ldr	r3, [r3, #0]
 80a0b06:	695b      	ldr	r3, [r3, #20]
 80a0b08:	9301      	str	r3, [sp, #4]
 80a0b0a:	bd08      	pop	{r3, pc}
 80a0b0c:	080601d8 	.word	0x080601d8

080a0b10 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0b10:	b508      	push	{r3, lr}
 80a0b12:	4b02      	ldr	r3, [pc, #8]	; (80a0b1c <HAL_USB_USART_Receive_Data+0xc>)
 80a0b14:	681b      	ldr	r3, [r3, #0]
 80a0b16:	699b      	ldr	r3, [r3, #24]
 80a0b18:	9301      	str	r3, [sp, #4]
 80a0b1a:	bd08      	pop	{r3, pc}
 80a0b1c:	080601d8 	.word	0x080601d8

080a0b20 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0b20:	b508      	push	{r3, lr}
 80a0b22:	4b02      	ldr	r3, [pc, #8]	; (80a0b2c <HAL_USB_USART_Send_Data+0xc>)
 80a0b24:	681b      	ldr	r3, [r3, #0]
 80a0b26:	69db      	ldr	r3, [r3, #28]
 80a0b28:	9301      	str	r3, [sp, #4]
 80a0b2a:	bd08      	pop	{r3, pc}
 80a0b2c:	080601d8 	.word	0x080601d8

080a0b30 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0b30:	b508      	push	{r3, lr}
 80a0b32:	4b02      	ldr	r3, [pc, #8]	; (80a0b3c <HAL_USB_USART_Flush_Data+0xc>)
 80a0b34:	681b      	ldr	r3, [r3, #0]
 80a0b36:	6a1b      	ldr	r3, [r3, #32]
 80a0b38:	9301      	str	r3, [sp, #4]
 80a0b3a:	bd08      	pop	{r3, pc}
 80a0b3c:	080601d8 	.word	0x080601d8

080a0b40 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0b40:	b508      	push	{r3, lr}
 80a0b42:	4b02      	ldr	r3, [pc, #8]	; (80a0b4c <inet_gethostbyname+0xc>)
 80a0b44:	681b      	ldr	r3, [r3, #0]
 80a0b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0b48:	9301      	str	r3, [sp, #4]
 80a0b4a:	bd08      	pop	{r3, pc}
 80a0b4c:	080601c0 	.word	0x080601c0

080a0b50 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0b50:	b508      	push	{r3, lr}
 80a0b52:	4b02      	ldr	r3, [pc, #8]	; (80a0b5c <set_system_mode+0xc>)
 80a0b54:	681b      	ldr	r3, [r3, #0]
 80a0b56:	685b      	ldr	r3, [r3, #4]
 80a0b58:	9301      	str	r3, [sp, #4]
 80a0b5a:	bd08      	pop	{r3, pc}
 80a0b5c:	080601a4 	.word	0x080601a4

080a0b60 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0b60:	b508      	push	{r3, lr}
 80a0b62:	4b02      	ldr	r3, [pc, #8]	; (80a0b6c <system_delay_ms+0xc>)
 80a0b64:	681b      	ldr	r3, [r3, #0]
 80a0b66:	695b      	ldr	r3, [r3, #20]
 80a0b68:	9301      	str	r3, [sp, #4]
 80a0b6a:	bd08      	pop	{r3, pc}
 80a0b6c:	080601a4 	.word	0x080601a4

080a0b70 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0b70:	b508      	push	{r3, lr}
 80a0b72:	4b03      	ldr	r3, [pc, #12]	; (80a0b80 <system_ctrl_set_app_request_handler+0x10>)
 80a0b74:	681b      	ldr	r3, [r3, #0]
 80a0b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0b7a:	9301      	str	r3, [sp, #4]
 80a0b7c:	bd08      	pop	{r3, pc}
 80a0b7e:	0000      	.short	0x0000
 80a0b80:	080601a4 	.word	0x080601a4

080a0b84 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0b84:	b508      	push	{r3, lr}
 80a0b86:	4b03      	ldr	r3, [pc, #12]	; (80a0b94 <system_ctrl_set_result+0x10>)
 80a0b88:	681b      	ldr	r3, [r3, #0]
 80a0b8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0b8e:	9301      	str	r3, [sp, #4]
 80a0b90:	bd08      	pop	{r3, pc}
 80a0b92:	0000      	.short	0x0000
 80a0b94:	080601a4 	.word	0x080601a4

080a0b98 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b98:	b508      	push	{r3, lr}
 80a0b9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ba4 <network_connect+0xc>)
 80a0b9c:	681b      	ldr	r3, [r3, #0]
 80a0b9e:	685b      	ldr	r3, [r3, #4]
 80a0ba0:	9301      	str	r3, [sp, #4]
 80a0ba2:	bd08      	pop	{r3, pc}
 80a0ba4:	080601c8 	.word	0x080601c8

080a0ba8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0ba8:	b508      	push	{r3, lr}
 80a0baa:	4b02      	ldr	r3, [pc, #8]	; (80a0bb4 <network_connecting+0xc>)
 80a0bac:	681b      	ldr	r3, [r3, #0]
 80a0bae:	689b      	ldr	r3, [r3, #8]
 80a0bb0:	9301      	str	r3, [sp, #4]
 80a0bb2:	bd08      	pop	{r3, pc}
 80a0bb4:	080601c8 	.word	0x080601c8

080a0bb8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0bb8:	b508      	push	{r3, lr}
 80a0bba:	4b02      	ldr	r3, [pc, #8]	; (80a0bc4 <network_disconnect+0xc>)
 80a0bbc:	681b      	ldr	r3, [r3, #0]
 80a0bbe:	68db      	ldr	r3, [r3, #12]
 80a0bc0:	9301      	str	r3, [sp, #4]
 80a0bc2:	bd08      	pop	{r3, pc}
 80a0bc4:	080601c8 	.word	0x080601c8

080a0bc8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0bc8:	b508      	push	{r3, lr}
 80a0bca:	4b02      	ldr	r3, [pc, #8]	; (80a0bd4 <network_ready+0xc>)
 80a0bcc:	681b      	ldr	r3, [r3, #0]
 80a0bce:	691b      	ldr	r3, [r3, #16]
 80a0bd0:	9301      	str	r3, [sp, #4]
 80a0bd2:	bd08      	pop	{r3, pc}
 80a0bd4:	080601c8 	.word	0x080601c8

080a0bd8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0bd8:	b508      	push	{r3, lr}
 80a0bda:	4b02      	ldr	r3, [pc, #8]	; (80a0be4 <network_on+0xc>)
 80a0bdc:	681b      	ldr	r3, [r3, #0]
 80a0bde:	695b      	ldr	r3, [r3, #20]
 80a0be0:	9301      	str	r3, [sp, #4]
 80a0be2:	bd08      	pop	{r3, pc}
 80a0be4:	080601c8 	.word	0x080601c8

080a0be8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0be8:	b508      	push	{r3, lr}
 80a0bea:	4b02      	ldr	r3, [pc, #8]	; (80a0bf4 <network_off+0xc>)
 80a0bec:	681b      	ldr	r3, [r3, #0]
 80a0bee:	699b      	ldr	r3, [r3, #24]
 80a0bf0:	9301      	str	r3, [sp, #4]
 80a0bf2:	bd08      	pop	{r3, pc}
 80a0bf4:	080601c8 	.word	0x080601c8

080a0bf8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0bf8:	b508      	push	{r3, lr}
 80a0bfa:	4b02      	ldr	r3, [pc, #8]	; (80a0c04 <network_listen+0xc>)
 80a0bfc:	681b      	ldr	r3, [r3, #0]
 80a0bfe:	69db      	ldr	r3, [r3, #28]
 80a0c00:	9301      	str	r3, [sp, #4]
 80a0c02:	bd08      	pop	{r3, pc}
 80a0c04:	080601c8 	.word	0x080601c8

080a0c08 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0c08:	b508      	push	{r3, lr}
 80a0c0a:	4b02      	ldr	r3, [pc, #8]	; (80a0c14 <network_listening+0xc>)
 80a0c0c:	681b      	ldr	r3, [r3, #0]
 80a0c0e:	6a1b      	ldr	r3, [r3, #32]
 80a0c10:	9301      	str	r3, [sp, #4]
 80a0c12:	bd08      	pop	{r3, pc}
 80a0c14:	080601c8 	.word	0x080601c8

080a0c18 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0c18:	b508      	push	{r3, lr}
 80a0c1a:	4b02      	ldr	r3, [pc, #8]	; (80a0c24 <network_set_listen_timeout+0xc>)
 80a0c1c:	681b      	ldr	r3, [r3, #0]
 80a0c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c20:	9301      	str	r3, [sp, #4]
 80a0c22:	bd08      	pop	{r3, pc}
 80a0c24:	080601c8 	.word	0x080601c8

080a0c28 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0c28:	b508      	push	{r3, lr}
 80a0c2a:	4b02      	ldr	r3, [pc, #8]	; (80a0c34 <network_get_listen_timeout+0xc>)
 80a0c2c:	681b      	ldr	r3, [r3, #0]
 80a0c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0c30:	9301      	str	r3, [sp, #4]
 80a0c32:	bd08      	pop	{r3, pc}
 80a0c34:	080601c8 	.word	0x080601c8

080a0c38 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a0c38:	b508      	push	{r3, lr}
 80a0c3a:	4b02      	ldr	r3, [pc, #8]	; (80a0c44 <spark_variable+0xc>)
 80a0c3c:	681b      	ldr	r3, [r3, #0]
 80a0c3e:	681b      	ldr	r3, [r3, #0]
 80a0c40:	9301      	str	r3, [sp, #4]
 80a0c42:	bd08      	pop	{r3, pc}
 80a0c44:	080601cc 	.word	0x080601cc

080a0c48 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a0c48:	b508      	push	{r3, lr}
 80a0c4a:	4b02      	ldr	r3, [pc, #8]	; (80a0c54 <spark_function+0xc>)
 80a0c4c:	681b      	ldr	r3, [r3, #0]
 80a0c4e:	685b      	ldr	r3, [r3, #4]
 80a0c50:	9301      	str	r3, [sp, #4]
 80a0c52:	bd08      	pop	{r3, pc}
 80a0c54:	080601cc 	.word	0x080601cc

080a0c58 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0c58:	b508      	push	{r3, lr}
 80a0c5a:	4b02      	ldr	r3, [pc, #8]	; (80a0c64 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0c5c:	681b      	ldr	r3, [r3, #0]
 80a0c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0c60:	9301      	str	r3, [sp, #4]
 80a0c62:	bd08      	pop	{r3, pc}
 80a0c64:	080601cc 	.word	0x080601cc

080a0c68 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0c68:	b508      	push	{r3, lr}
 80a0c6a:	4b02      	ldr	r3, [pc, #8]	; (80a0c74 <malloc+0xc>)
 80a0c6c:	681b      	ldr	r3, [r3, #0]
 80a0c6e:	681b      	ldr	r3, [r3, #0]
 80a0c70:	9301      	str	r3, [sp, #4]
 80a0c72:	bd08      	pop	{r3, pc}
 80a0c74:	080601a0 	.word	0x080601a0

080a0c78 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0c78:	b508      	push	{r3, lr}
 80a0c7a:	4b02      	ldr	r3, [pc, #8]	; (80a0c84 <free+0xc>)
 80a0c7c:	681b      	ldr	r3, [r3, #0]
 80a0c7e:	685b      	ldr	r3, [r3, #4]
 80a0c80:	9301      	str	r3, [sp, #4]
 80a0c82:	bd08      	pop	{r3, pc}
 80a0c84:	080601a0 	.word	0x080601a0

080a0c88 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0c88:	b508      	push	{r3, lr}
 80a0c8a:	4b02      	ldr	r3, [pc, #8]	; (80a0c94 <realloc+0xc>)
 80a0c8c:	681b      	ldr	r3, [r3, #0]
 80a0c8e:	689b      	ldr	r3, [r3, #8]
 80a0c90:	9301      	str	r3, [sp, #4]
 80a0c92:	bd08      	pop	{r3, pc}
 80a0c94:	080601a0 	.word	0x080601a0

080a0c98 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0c98:	4770      	bx	lr

080a0c9a <_ZN8SPIClassD0Ev>:
 80a0c9a:	b510      	push	{r4, lr}
 80a0c9c:	4604      	mov	r4, r0
 80a0c9e:	2110      	movs	r1, #16
 80a0ca0:	f000 fe93 	bl	80a19ca <_ZdlPvj>
 80a0ca4:	4620      	mov	r0, r4
 80a0ca6:	bd10      	pop	{r4, pc}

080a0ca8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0ca8:	b570      	push	{r4, r5, r6, lr}
 80a0caa:	4604      	mov	r4, r0
 80a0cac:	460e      	mov	r6, r1
 80a0cae:	4b07      	ldr	r3, [pc, #28]	; (80a0ccc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0cb0:	2500      	movs	r5, #0
 80a0cb2:	6003      	str	r3, [r0, #0]
 80a0cb4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0cb8:	f7ff fe88 	bl	80a09cc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0cbc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0cbe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0cc0:	f7ff fe4c 	bl	80a095c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0cc4:	60a5      	str	r5, [r4, #8]
}
 80a0cc6:	4620      	mov	r0, r4
 80a0cc8:	bd70      	pop	{r4, r5, r6, pc}
 80a0cca:	bf00      	nop
 80a0ccc:	080a2d28 	.word	0x080a2d28

080a0cd0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0cd0:	7900      	ldrb	r0, [r0, #4]
 80a0cd2:	f7ff be4b 	b.w	80a096c <HAL_SPI_Is_Enabled>
	...

080a0cd8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0cdc:	4b03      	ldr	r3, [pc, #12]	; (80a0cec <_GLOBAL__sub_I_System+0x14>)
 80a0cde:	2000      	movs	r0, #0
 80a0ce0:	7018      	strb	r0, [r3, #0]
 80a0ce2:	8058      	strh	r0, [r3, #2]
 80a0ce4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0ce6:	f7ff bf33 	b.w	80a0b50 <set_system_mode>
 80a0cea:	bf00      	nop
 80a0cec:	200003dc 	.word	0x200003dc

080a0cf0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0cf0:	b510      	push	{r4, lr}
 80a0cf2:	4604      	mov	r4, r0
{
	free(buffer);
 80a0cf4:	6800      	ldr	r0, [r0, #0]
 80a0cf6:	f7ff ffbf 	bl	80a0c78 <free>
}
 80a0cfa:	4620      	mov	r0, r4
 80a0cfc:	bd10      	pop	{r4, pc}

080a0cfe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0cfe:	b510      	push	{r4, lr}
 80a0d00:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0d02:	6800      	ldr	r0, [r0, #0]
 80a0d04:	b108      	cbz	r0, 80a0d0a <_ZN6String10invalidateEv+0xc>
 80a0d06:	f7ff ffb7 	bl	80a0c78 <free>
	buffer = NULL;
 80a0d0a:	2300      	movs	r3, #0
 80a0d0c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0d0e:	60a3      	str	r3, [r4, #8]
 80a0d10:	6063      	str	r3, [r4, #4]
 80a0d12:	bd10      	pop	{r4, pc}

080a0d14 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0d14:	b538      	push	{r3, r4, r5, lr}
 80a0d16:	4604      	mov	r4, r0
 80a0d18:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0d1a:	6800      	ldr	r0, [r0, #0]
 80a0d1c:	3101      	adds	r1, #1
 80a0d1e:	f7ff ffb3 	bl	80a0c88 <realloc>
	if (newbuffer) {
 80a0d22:	b110      	cbz	r0, 80a0d2a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0d24:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0d28:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0d2a:	bd38      	pop	{r3, r4, r5, pc}

080a0d2c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0d2c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0d2e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0d30:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0d32:	b113      	cbz	r3, 80a0d3a <_ZN6String7reserveEj+0xe>
 80a0d34:	6843      	ldr	r3, [r0, #4]
 80a0d36:	428b      	cmp	r3, r1
 80a0d38:	d207      	bcs.n	80a0d4a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0d3a:	4620      	mov	r0, r4
 80a0d3c:	f7ff ffea 	bl	80a0d14 <_ZN6String12changeBufferEj>
 80a0d40:	b120      	cbz	r0, 80a0d4c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0d42:	68a3      	ldr	r3, [r4, #8]
 80a0d44:	b90b      	cbnz	r3, 80a0d4a <_ZN6String7reserveEj+0x1e>
 80a0d46:	6822      	ldr	r2, [r4, #0]
 80a0d48:	7013      	strb	r3, [r2, #0]
 80a0d4a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0d4c:	bd10      	pop	{r4, pc}

080a0d4e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0d4e:	b570      	push	{r4, r5, r6, lr}
 80a0d50:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0d52:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0d54:	4604      	mov	r4, r0
 80a0d56:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0d58:	f7ff ffe8 	bl	80a0d2c <_ZN6String7reserveEj>
 80a0d5c:	b918      	cbnz	r0, 80a0d66 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0d5e:	4620      	mov	r0, r4
 80a0d60:	f7ff ffcd 	bl	80a0cfe <_ZN6String10invalidateEv>
		return *this;
 80a0d64:	e009      	b.n	80a0d7a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0d66:	462a      	mov	r2, r5
 80a0d68:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0d6a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0d6c:	6820      	ldr	r0, [r4, #0]
 80a0d6e:	f001 fee7 	bl	80a2b40 <memcpy>
	buffer[len] = 0;
 80a0d72:	6822      	ldr	r2, [r4, #0]
 80a0d74:	68a3      	ldr	r3, [r4, #8]
 80a0d76:	2100      	movs	r1, #0
 80a0d78:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0d7a:	4620      	mov	r0, r4
 80a0d7c:	bd70      	pop	{r4, r5, r6, pc}

080a0d7e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0d7e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0d80:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0d82:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0d84:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0d86:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0d88:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0d8a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0d8c:	460d      	mov	r5, r1
 80a0d8e:	b139      	cbz	r1, 80a0da0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a0d90:	4608      	mov	r0, r1
 80a0d92:	f001 ff11 	bl	80a2bb8 <strlen>
 80a0d96:	4629      	mov	r1, r5
 80a0d98:	4602      	mov	r2, r0
 80a0d9a:	4620      	mov	r0, r4
 80a0d9c:	f7ff ffd7 	bl	80a0d4e <_ZN6String4copyEPKcj>
}
 80a0da0:	4620      	mov	r0, r4
 80a0da2:	bd38      	pop	{r3, r4, r5, pc}

080a0da4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a0da4:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a0da6:	b510      	push	{r4, lr}
 80a0da8:	460b      	mov	r3, r1
 80a0daa:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a0dac:	d007      	beq.n	80a0dbe <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a0dae:	6809      	ldr	r1, [r1, #0]
 80a0db0:	b119      	cbz	r1, 80a0dba <_ZN6StringaSERKS_+0x16>
 80a0db2:	689a      	ldr	r2, [r3, #8]
 80a0db4:	f7ff ffcb 	bl	80a0d4e <_ZN6String4copyEPKcj>
 80a0db8:	e001      	b.n	80a0dbe <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a0dba:	f7ff ffa0 	bl	80a0cfe <_ZN6String10invalidateEv>

	return *this;
}
 80a0dbe:	4620      	mov	r0, r4
 80a0dc0:	bd10      	pop	{r4, pc}

080a0dc2 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a0dc2:	b510      	push	{r4, lr}
 80a0dc4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0dc6:	2300      	movs	r3, #0
 80a0dc8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0dca:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0dcc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0dce:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a0dd0:	f7ff ffe8 	bl	80a0da4 <_ZN6StringaSERKS_>
}
 80a0dd4:	4620      	mov	r0, r4
 80a0dd6:	bd10      	pop	{r4, pc}

080a0dd8 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a0dd8:	6800      	ldr	r0, [r0, #0]
 80a0dda:	b108      	cbz	r0, 80a0de0 <_ZNK6String5toIntEv+0x8>
 80a0ddc:	f001 be9e 	b.w	80a2b1c <atol>
	return 0;
}
 80a0de0:	4770      	bx	lr

080a0de2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0de4:	4606      	mov	r6, r0
 80a0de6:	460d      	mov	r5, r1
 80a0de8:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0dea:	2400      	movs	r4, #0
  while (size--) {
 80a0dec:	42bd      	cmp	r5, r7
 80a0dee:	d00c      	beq.n	80a0e0a <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0df0:	6833      	ldr	r3, [r6, #0]
 80a0df2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0df6:	689b      	ldr	r3, [r3, #8]
 80a0df8:	4630      	mov	r0, r6
 80a0dfa:	4798      	blx	r3
     if (chunk>=0)
 80a0dfc:	2800      	cmp	r0, #0
 80a0dfe:	db01      	blt.n	80a0e04 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0e00:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0e02:	e7f3      	b.n	80a0dec <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0e04:	2c00      	cmp	r4, #0
 80a0e06:	bf08      	it	eq
 80a0e08:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0e0a:	4620      	mov	r0, r4
 80a0e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e0e <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0e0e:	b570      	push	{r4, r5, r6, lr}
 80a0e10:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0e12:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0e14:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0e16:	b149      	cbz	r1, 80a0e2c <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0e18:	f001 fece 	bl	80a2bb8 <strlen>
 80a0e1c:	682b      	ldr	r3, [r5, #0]
 80a0e1e:	4602      	mov	r2, r0
 80a0e20:	4621      	mov	r1, r4
 80a0e22:	4628      	mov	r0, r5
    }
 80a0e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0e28:	68db      	ldr	r3, [r3, #12]
 80a0e2a:	4718      	bx	r3
    }
 80a0e2c:	bd70      	pop	{r4, r5, r6, pc}

080a0e2e <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0e2e:	6803      	ldr	r3, [r0, #0]
 80a0e30:	689b      	ldr	r3, [r3, #8]
 80a0e32:	4718      	bx	r3

080a0e34 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0e34:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0e36:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0e38:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0e3a:	f7ff fff8 	bl	80a0e2e <_ZN5Print5printEc>
  n += print('\n');
 80a0e3e:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0e40:	4604      	mov	r4, r0
  n += print('\n');
 80a0e42:	4628      	mov	r0, r5
 80a0e44:	f7ff fff3 	bl	80a0e2e <_ZN5Print5printEc>
  return n;
}
 80a0e48:	4420      	add	r0, r4
 80a0e4a:	bd38      	pop	{r3, r4, r5, pc}

080a0e4c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0e4c:	b538      	push	{r3, r4, r5, lr}
 80a0e4e:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0e50:	f7ff ffdd 	bl	80a0e0e <_ZN5Print5writeEPKc>
 80a0e54:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0e56:	4628      	mov	r0, r5
 80a0e58:	f7ff ffec 	bl	80a0e34 <_ZN5Print7printlnEv>
  return n;
}
 80a0e5c:	4420      	add	r0, r4
 80a0e5e:	bd38      	pop	{r3, r4, r5, pc}

080a0e60 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0e60:	2a01      	cmp	r2, #1
 80a0e62:	bf98      	it	ls
 80a0e64:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0e66:	b530      	push	{r4, r5, lr}
 80a0e68:	460b      	mov	r3, r1
 80a0e6a:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0e6c:	2100      	movs	r1, #0
 80a0e6e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0e72:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0e76:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0e7a:	fb05 3312 	mls	r3, r5, r2, r3
 80a0e7e:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0e80:	2b09      	cmp	r3, #9
 80a0e82:	bf94      	ite	ls
 80a0e84:	3330      	addls	r3, #48	; 0x30
 80a0e86:	3337      	addhi	r3, #55	; 0x37
 80a0e88:	b2db      	uxtb	r3, r3
 80a0e8a:	4621      	mov	r1, r4
 80a0e8c:	f804 3901 	strb.w	r3, [r4], #-1
 80a0e90:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0e92:	2d00      	cmp	r5, #0
 80a0e94:	d1ef      	bne.n	80a0e76 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0e96:	f7ff ffba 	bl	80a0e0e <_ZN5Print5writeEPKc>
}
 80a0e9a:	b00b      	add	sp, #44	; 0x2c
 80a0e9c:	bd30      	pop	{r4, r5, pc}

080a0e9e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0e9e:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0ea0:	b922      	cbnz	r2, 80a0eac <_ZN5Print5printEmi+0xe>
 80a0ea2:	6803      	ldr	r3, [r0, #0]
 80a0ea4:	b2c9      	uxtb	r1, r1
 80a0ea6:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0ea8:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0eaa:	4718      	bx	r3
  else return printNumber(n, base);
 80a0eac:	b2d2      	uxtb	r2, r2
}
 80a0eae:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0eb0:	f7ff bfd6 	b.w	80a0e60 <_ZN5Print11printNumberEmh>

080a0eb4 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0eb4:	f7ff bff3 	b.w	80a0e9e <_ZN5Print5printEmi>

080a0eb8 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a0eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0ebc:	4607      	mov	r7, r0
 80a0ebe:	460e      	mov	r6, r1
  if (base == 0) {
 80a0ec0:	4615      	mov	r5, r2
 80a0ec2:	b92a      	cbnz	r2, 80a0ed0 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a0ec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a0ec8:	6803      	ldr	r3, [r0, #0]
 80a0eca:	b2c9      	uxtb	r1, r1
 80a0ecc:	689b      	ldr	r3, [r3, #8]
 80a0ece:	4718      	bx	r3
  } else if (base == 10) {
 80a0ed0:	2a0a      	cmp	r2, #10
 80a0ed2:	d102      	bne.n	80a0eda <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a0ed4:	2900      	cmp	r1, #0
 80a0ed6:	da01      	bge.n	80a0edc <_ZN5Print5printEli+0x24>
 80a0ed8:	e004      	b.n	80a0ee4 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0eda:	b2d2      	uxtb	r2, r2
  }
}
 80a0edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0ee0:	f7ff bfbe 	b.w	80a0e60 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a0ee4:	212d      	movs	r1, #45	; 0x2d
 80a0ee6:	f7ff ffa2 	bl	80a0e2e <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a0eea:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a0eec:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a0eee:	4271      	negs	r1, r6
 80a0ef0:	4638      	mov	r0, r7
 80a0ef2:	f7ff ffb5 	bl	80a0e60 <_ZN5Print11printNumberEmh>
 80a0ef6:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a0ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0efc <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a0efc:	b538      	push	{r3, r4, r5, lr}
 80a0efe:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a0f00:	f7ff ffda 	bl	80a0eb8 <_ZN5Print5printEli>
 80a0f04:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a0f06:	4628      	mov	r0, r5
 80a0f08:	f7ff ff94 	bl	80a0e34 <_ZN5Print7printlnEv>
  return n;
}
 80a0f0c:	4420      	add	r0, r4
 80a0f0e:	bd38      	pop	{r3, r4, r5, pc}

080a0f10 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0f14:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0f16:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0f18:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a0f1a:	4617      	mov	r7, r2
 80a0f1c:	461e      	mov	r6, r3
 80a0f1e:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a0f22:	f001 faef 	bl	80a2504 <__aeabi_dcmpun>
 80a0f26:	b108      	cbz	r0, 80a0f2c <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0f28:	4947      	ldr	r1, [pc, #284]	; (80a1048 <_ZN5Print10printFloatEdh+0x138>)
 80a0f2a:	e012      	b.n	80a0f52 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a0f2c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a0f30:	f04f 32ff 	mov.w	r2, #4294967295
 80a0f34:	4b45      	ldr	r3, [pc, #276]	; (80a104c <_ZN5Print10printFloatEdh+0x13c>)
 80a0f36:	4638      	mov	r0, r7
 80a0f38:	4621      	mov	r1, r4
 80a0f3a:	f001 fae3 	bl	80a2504 <__aeabi_dcmpun>
 80a0f3e:	b968      	cbnz	r0, 80a0f5c <_ZN5Print10printFloatEdh+0x4c>
 80a0f40:	f04f 32ff 	mov.w	r2, #4294967295
 80a0f44:	4b41      	ldr	r3, [pc, #260]	; (80a104c <_ZN5Print10printFloatEdh+0x13c>)
 80a0f46:	4638      	mov	r0, r7
 80a0f48:	4621      	mov	r1, r4
 80a0f4a:	f001 fabd 	bl	80a24c8 <__aeabi_dcmple>
 80a0f4e:	b928      	cbnz	r0, 80a0f5c <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0f50:	493f      	ldr	r1, [pc, #252]	; (80a1050 <_ZN5Print10printFloatEdh+0x140>)
 80a0f52:	4640      	mov	r0, r8
 80a0f54:	f7ff ff5b 	bl	80a0e0e <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a0f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a0f5c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0f60:	4b3c      	ldr	r3, [pc, #240]	; (80a1054 <_ZN5Print10printFloatEdh+0x144>)
 80a0f62:	4638      	mov	r0, r7
 80a0f64:	4631      	mov	r1, r6
 80a0f66:	f001 fac3 	bl	80a24f0 <__aeabi_dcmpgt>
 80a0f6a:	b108      	cbz	r0, 80a0f70 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0f6c:	493a      	ldr	r1, [pc, #232]	; (80a1058 <_ZN5Print10printFloatEdh+0x148>)
 80a0f6e:	e7f0      	b.n	80a0f52 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a0f70:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a0f74:	4b39      	ldr	r3, [pc, #228]	; (80a105c <_ZN5Print10printFloatEdh+0x14c>)
 80a0f76:	4638      	mov	r0, r7
 80a0f78:	4631      	mov	r1, r6
 80a0f7a:	f001 fa9b 	bl	80a24b4 <__aeabi_dcmplt>
 80a0f7e:	2800      	cmp	r0, #0
 80a0f80:	d1f4      	bne.n	80a0f6c <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a0f82:	2200      	movs	r2, #0
 80a0f84:	2300      	movs	r3, #0
 80a0f86:	4638      	mov	r0, r7
 80a0f88:	4631      	mov	r1, r6
 80a0f8a:	f001 fa93 	bl	80a24b4 <__aeabi_dcmplt>
 80a0f8e:	b138      	cbz	r0, 80a0fa0 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a0f90:	212d      	movs	r1, #45	; 0x2d
 80a0f92:	4640      	mov	r0, r8
 80a0f94:	f7ff ff4b 	bl	80a0e2e <_ZN5Print5printEc>
     number = -number;
 80a0f98:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a0f9c:	4604      	mov	r4, r0
 80a0f9e:	e000      	b.n	80a0fa2 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a0fa0:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a0fa2:	492f      	ldr	r1, [pc, #188]	; (80a1060 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a0fa4:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a0fa8:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a0faa:	fa5f f389 	uxtb.w	r3, r9
 80a0fae:	429d      	cmp	r5, r3
 80a0fb0:	d906      	bls.n	80a0fc0 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a0fb2:	2200      	movs	r2, #0
 80a0fb4:	4b2b      	ldr	r3, [pc, #172]	; (80a1064 <_ZN5Print10printFloatEdh+0x154>)
 80a0fb6:	f001 f935 	bl	80a2224 <__aeabi_ddiv>
 80a0fba:	f109 0901 	add.w	r9, r9, #1
 80a0fbe:	e7f4      	b.n	80a0faa <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a0fc0:	463a      	mov	r2, r7
 80a0fc2:	4633      	mov	r3, r6
 80a0fc4:	f000 fe52 	bl	80a1c6c <__adddf3>
 80a0fc8:	460f      	mov	r7, r1
 80a0fca:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a0fcc:	f001 fad8 	bl	80a2580 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0fd0:	220a      	movs	r2, #10
 80a0fd2:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a0fd4:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0fd6:	4640      	mov	r0, r8
 80a0fd8:	f7ff ff42 	bl	80a0e60 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a0fdc:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a0fde:	b37d      	cbz	r5, 80a1040 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a0fe0:	4648      	mov	r0, r9
 80a0fe2:	f000 ff7f 	bl	80a1ee4 <__aeabi_ui2d>
 80a0fe6:	4602      	mov	r2, r0
 80a0fe8:	460b      	mov	r3, r1
 80a0fea:	4630      	mov	r0, r6
 80a0fec:	4639      	mov	r1, r7
 80a0fee:	f000 fe3b 	bl	80a1c68 <__aeabi_dsub>
 80a0ff2:	4606      	mov	r6, r0
 80a0ff4:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0ff6:	4640      	mov	r0, r8
 80a0ff8:	491b      	ldr	r1, [pc, #108]	; (80a1068 <_ZN5Print10printFloatEdh+0x158>)
 80a0ffa:	f7ff ff08 	bl	80a0e0e <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a0ffe:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a1000:	4b18      	ldr	r3, [pc, #96]	; (80a1064 <_ZN5Print10printFloatEdh+0x154>)
 80a1002:	2200      	movs	r2, #0
 80a1004:	4630      	mov	r0, r6
 80a1006:	4639      	mov	r1, r7
 80a1008:	f000 ffe2 	bl	80a1fd0 <__aeabi_dmul>
 80a100c:	460f      	mov	r7, r1
 80a100e:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a1010:	f001 fa8e 	bl	80a2530 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1014:	220a      	movs	r2, #10
 80a1016:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a1018:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a101a:	4640      	mov	r0, r8
 80a101c:	f7ff ff4c 	bl	80a0eb8 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a1020:	4404      	add	r4, r0
    remainder -= toPrint;
 80a1022:	4648      	mov	r0, r9
 80a1024:	f000 ff6e 	bl	80a1f04 <__aeabi_i2d>
 80a1028:	4602      	mov	r2, r0
 80a102a:	460b      	mov	r3, r1
 80a102c:	4630      	mov	r0, r6
 80a102e:	4639      	mov	r1, r7
 80a1030:	f000 fe1a 	bl	80a1c68 <__aeabi_dsub>
 80a1034:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1036:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a103a:	4606      	mov	r6, r0
 80a103c:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a103e:	d1df      	bne.n	80a1000 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1040:	4620      	mov	r0, r4
 80a1042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1046:	bf00      	nop
 80a1048:	080a2d30 	.word	0x080a2d30
 80a104c:	7fefffff 	.word	0x7fefffff
 80a1050:	080a2d3a 	.word	0x080a2d3a
 80a1054:	41efffff 	.word	0x41efffff
 80a1058:	080a2d34 	.word	0x080a2d34
 80a105c:	c1efffff 	.word	0xc1efffff
 80a1060:	3fe00000 	.word	0x3fe00000
 80a1064:	40240000 	.word	0x40240000
 80a1068:	080a2d38 	.word	0x080a2d38

080a106c <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a106c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a106e:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a1072:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a1074:	9100      	str	r1, [sp, #0]
 80a1076:	f7ff ff4b 	bl	80a0f10 <_ZN5Print10printFloatEdh>
 80a107a:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a107c:	4628      	mov	r0, r5
 80a107e:	f7ff fed9 	bl	80a0e34 <_ZN5Print7printlnEv>
  return n;
}
 80a1082:	4420      	add	r0, r4
 80a1084:	b003      	add	sp, #12
 80a1086:	bd30      	pop	{r4, r5, pc}

080a1088 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1088:	2300      	movs	r3, #0
 80a108a:	461a      	mov	r2, r3
 80a108c:	4619      	mov	r1, r3
 80a108e:	6840      	ldr	r0, [r0, #4]
 80a1090:	f7ff bda2 	b.w	80a0bd8 <network_on>

080a1094 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1094:	4a01      	ldr	r2, [pc, #4]	; (80a109c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1096:	4b02      	ldr	r3, [pc, #8]	; (80a10a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1098:	601a      	str	r2, [r3, #0]
 80a109a:	4770      	bx	lr
 80a109c:	080a2df7 	.word	0x080a2df7
 80a10a0:	200003e4 	.word	0x200003e4

080a10a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a10a4:	4b02      	ldr	r3, [pc, #8]	; (80a10b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a10a6:	681a      	ldr	r2, [r3, #0]
 80a10a8:	4b02      	ldr	r3, [pc, #8]	; (80a10b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a10aa:	601a      	str	r2, [r3, #0]
 80a10ac:	4770      	bx	lr
 80a10ae:	bf00      	nop
 80a10b0:	2000030c 	.word	0x2000030c
 80a10b4:	200003e8 	.word	0x200003e8

080a10b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a10b8:	2100      	movs	r1, #0
 80a10ba:	f7ff bd51 	b.w	80a0b60 <system_delay_ms>

080a10be <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a10be:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a10c0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a10c2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a10c4:	b113      	cbz	r3, 80a10cc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a10c6:	2203      	movs	r2, #3
 80a10c8:	4601      	mov	r1, r0
 80a10ca:	4798      	blx	r3
    }
 80a10cc:	4620      	mov	r0, r4
 80a10ce:	bd10      	pop	{r4, pc}

080a10d0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a10d0:	b510      	push	{r4, lr}
 80a10d2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a10d4:	f7ff fff3 	bl	80a10be <_ZNSt14_Function_baseD1Ev>
 80a10d8:	4620      	mov	r0, r4
 80a10da:	bd10      	pop	{r4, pc}

080a10dc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a10dc:	4803      	ldr	r0, [pc, #12]	; (80a10ec <_GLOBAL__sub_I_RGB+0x10>)
 80a10de:	2300      	movs	r3, #0
 80a10e0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a10e2:	4a03      	ldr	r2, [pc, #12]	; (80a10f0 <_GLOBAL__sub_I_RGB+0x14>)
 80a10e4:	4903      	ldr	r1, [pc, #12]	; (80a10f4 <_GLOBAL__sub_I_RGB+0x18>)
 80a10e6:	f000 bc6b 	b.w	80a19c0 <__aeabi_atexit>
 80a10ea:	bf00      	nop
 80a10ec:	200003ec 	.word	0x200003ec
 80a10f0:	20000378 	.word	0x20000378
 80a10f4:	080a10d1 	.word	0x080a10d1

080a10f8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a10f8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a10fa:	4b14      	ldr	r3, [pc, #80]	; (80a114c <serialEventRun+0x54>)
 80a10fc:	b133      	cbz	r3, 80a110c <serialEventRun+0x14>
 80a10fe:	f000 f997 	bl	80a1430 <_Z16_fetch_usbserialv>
 80a1102:	6803      	ldr	r3, [r0, #0]
 80a1104:	691b      	ldr	r3, [r3, #16]
 80a1106:	4798      	blx	r3
 80a1108:	2800      	cmp	r0, #0
 80a110a:	dc16      	bgt.n	80a113a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a110c:	4b10      	ldr	r3, [pc, #64]	; (80a1150 <serialEventRun+0x58>)
 80a110e:	b133      	cbz	r3, 80a111e <serialEventRun+0x26>
 80a1110:	f000 fa50 	bl	80a15b4 <_Z22__fetch_global_Serial1v>
 80a1114:	6803      	ldr	r3, [r0, #0]
 80a1116:	691b      	ldr	r3, [r3, #16]
 80a1118:	4798      	blx	r3
 80a111a:	2800      	cmp	r0, #0
 80a111c:	dc10      	bgt.n	80a1140 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a111e:	4b0d      	ldr	r3, [pc, #52]	; (80a1154 <serialEventRun+0x5c>)
 80a1120:	b10b      	cbz	r3, 80a1126 <serialEventRun+0x2e>
 80a1122:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1126:	4b0c      	ldr	r3, [pc, #48]	; (80a1158 <serialEventRun+0x60>)
 80a1128:	b17b      	cbz	r3, 80a114a <serialEventRun+0x52>
 80a112a:	f000 f9bd 	bl	80a14a8 <_Z17_fetch_usbserial1v>
 80a112e:	6803      	ldr	r3, [r0, #0]
 80a1130:	691b      	ldr	r3, [r3, #16]
 80a1132:	4798      	blx	r3
 80a1134:	2800      	cmp	r0, #0
 80a1136:	dc06      	bgt.n	80a1146 <serialEventRun+0x4e>
 80a1138:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a113a:	f3af 8000 	nop.w
 80a113e:	e7e5      	b.n	80a110c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1140:	f3af 8000 	nop.w
 80a1144:	e7eb      	b.n	80a111e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1146:	f3af 8000 	nop.w
 80a114a:	bd08      	pop	{r3, pc}
	...

080a115c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a115c:	b508      	push	{r3, lr}
	serialEventRun();
 80a115e:	f7ff ffcb 	bl	80a10f8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1162:	f7ff fc1b 	bl	80a099c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1166:	4b01      	ldr	r3, [pc, #4]	; (80a116c <_post_loop+0x10>)
 80a1168:	6018      	str	r0, [r3, #0]
 80a116a:	bd08      	pop	{r3, pc}
 80a116c:	20000890 	.word	0x20000890

080a1170 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1170:	4802      	ldr	r0, [pc, #8]	; (80a117c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1172:	4a03      	ldr	r2, [pc, #12]	; (80a1180 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1174:	4903      	ldr	r1, [pc, #12]	; (80a1184 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1176:	1a12      	subs	r2, r2, r0
 80a1178:	f001 bce2 	b.w	80a2b40 <memcpy>
 80a117c:	40024000 	.word	0x40024000
 80a1180:	40024004 	.word	0x40024004
 80a1184:	080a3100 	.word	0x080a3100

080a1188 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1188:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a118a:	2300      	movs	r3, #0
 80a118c:	9300      	str	r3, [sp, #0]
 80a118e:	461a      	mov	r2, r3
 80a1190:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1194:	f7ff fcf6 	bl	80a0b84 <system_ctrl_set_result>
}
 80a1198:	b003      	add	sp, #12
 80a119a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a11a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a11a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a11a2:	8843      	ldrh	r3, [r0, #2]
 80a11a4:	2b0a      	cmp	r3, #10
 80a11a6:	d008      	beq.n	80a11ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a11a8:	2b50      	cmp	r3, #80	; 0x50
 80a11aa:	d109      	bne.n	80a11c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a11ac:	4b09      	ldr	r3, [pc, #36]	; (80a11d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a11ae:	681b      	ldr	r3, [r3, #0]
 80a11b0:	b13b      	cbz	r3, 80a11c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a11b2:	b003      	add	sp, #12
 80a11b4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a11b8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a11ba:	f7ff ffe5 	bl	80a1188 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a11be:	e006      	b.n	80a11ce <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a11c0:	2300      	movs	r3, #0
 80a11c2:	9300      	str	r3, [sp, #0]
 80a11c4:	461a      	mov	r2, r3
 80a11c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a11ca:	f7ff fcdb 	bl	80a0b84 <system_ctrl_set_result>
        break;
    }
}
 80a11ce:	b003      	add	sp, #12
 80a11d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a11d4:	200003fc 	.word	0x200003fc

080a11d8 <module_user_init_hook>:

void module_user_init_hook()
{
 80a11d8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a11da:	4c10      	ldr	r4, [pc, #64]	; (80a121c <module_user_init_hook+0x44>)
 80a11dc:	4d10      	ldr	r5, [pc, #64]	; (80a1220 <module_user_init_hook+0x48>)
 80a11de:	6823      	ldr	r3, [r4, #0]
 80a11e0:	42ab      	cmp	r3, r5
 80a11e2:	4b10      	ldr	r3, [pc, #64]	; (80a1224 <module_user_init_hook+0x4c>)
 80a11e4:	bf0c      	ite	eq
 80a11e6:	2201      	moveq	r2, #1
 80a11e8:	2200      	movne	r2, #0
 80a11ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a11ec:	d002      	beq.n	80a11f4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a11ee:	f7ff ffbf 	bl	80a1170 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a11f2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a11f4:	f7ff fbc2 	bl	80a097c <HAL_RNG_GetRandomNumber>
 80a11f8:	4604      	mov	r4, r0
    srand(seed);
 80a11fa:	f001 fcb5 	bl	80a2b68 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a11fe:	4b0a      	ldr	r3, [pc, #40]	; (80a1228 <module_user_init_hook+0x50>)
 80a1200:	b113      	cbz	r3, 80a1208 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1202:	4620      	mov	r0, r4
 80a1204:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1208:	2100      	movs	r1, #0
 80a120a:	4807      	ldr	r0, [pc, #28]	; (80a1228 <module_user_init_hook+0x50>)
 80a120c:	f7ff fd24 	bl	80a0c58 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1214:	2100      	movs	r1, #0
 80a1216:	4805      	ldr	r0, [pc, #20]	; (80a122c <module_user_init_hook+0x54>)
 80a1218:	f7ff bcaa 	b.w	80a0b70 <system_ctrl_set_app_request_handler>
 80a121c:	40024000 	.word	0x40024000
 80a1220:	9a271c1e 	.word	0x9a271c1e
 80a1224:	20000400 	.word	0x20000400
 80a1228:	00000000 	.word	0x00000000
 80a122c:	080a11a1 	.word	0x080a11a1

080a1230 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a1230:	b510      	push	{r4, lr}
 80a1232:	b088      	sub	sp, #32
 80a1234:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1236:	4668      	mov	r0, sp
 80a1238:	f7ff fda1 	bl	80a0d7e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a123c:	4669      	mov	r1, sp
 80a123e:	a804      	add	r0, sp, #16
 80a1240:	f7ff fdbf 	bl	80a0dc2 <_ZN6StringC1ERKS_>
 80a1244:	a804      	add	r0, sp, #16
 80a1246:	47a0      	blx	r4
 80a1248:	4604      	mov	r4, r0
 80a124a:	a804      	add	r0, sp, #16
 80a124c:	f7ff fd50 	bl	80a0cf0 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1250:	4668      	mov	r0, sp
 80a1252:	f7ff fd4d 	bl	80a0cf0 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a1256:	4620      	mov	r0, r4
 80a1258:	b008      	add	sp, #32
 80a125a:	bd10      	pop	{r4, pc}

080a125c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a125e:	4607      	mov	r7, r0
 80a1260:	460e      	mov	r6, r1
 80a1262:	4615      	mov	r5, r2
 80a1264:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a1266:	2410      	movs	r4, #16
 80a1268:	4622      	mov	r2, r4
 80a126a:	2100      	movs	r1, #0
 80a126c:	4668      	mov	r0, sp
 80a126e:	f001 fc72 	bl	80a2b56 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1272:	2200      	movs	r2, #0
 80a1274:	4669      	mov	r1, sp
 80a1276:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a1278:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a127c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a127e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a1280:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1282:	f7ff fce1 	bl	80a0c48 <spark_function>
}
 80a1286:	b005      	add	sp, #20
 80a1288:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a128a <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a128a:	4770      	bx	lr

080a128c <_ZN9IPAddressD0Ev>:
 80a128c:	b510      	push	{r4, lr}
 80a128e:	4604      	mov	r4, r0
 80a1290:	2118      	movs	r1, #24
 80a1292:	f000 fb9a 	bl	80a19ca <_ZdlPvj>
 80a1296:	4620      	mov	r0, r4
 80a1298:	bd10      	pop	{r4, pc}

080a129a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a129a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a129c:	460f      	mov	r7, r1
 80a129e:	f100 0608 	add.w	r6, r0, #8
 80a12a2:	1d05      	adds	r5, r0, #4
 80a12a4:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a12a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a12aa:	220a      	movs	r2, #10
 80a12ac:	4638      	mov	r0, r7
 80a12ae:	f7ff fe01 	bl	80a0eb4 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a12b2:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a12b4:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a12b6:	d007      	beq.n	80a12c8 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a12b8:	2c00      	cmp	r4, #0
 80a12ba:	d0f4      	beq.n	80a12a6 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a12bc:	212e      	movs	r1, #46	; 0x2e
 80a12be:	4638      	mov	r0, r7
 80a12c0:	f7ff fdb5 	bl	80a0e2e <_ZN5Print5printEc>
 80a12c4:	4404      	add	r4, r0
 80a12c6:	e7ee      	b.n	80a12a6 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a12c8:	4620      	mov	r0, r4
 80a12ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a12cc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a12cc:	b510      	push	{r4, lr}
 80a12ce:	4604      	mov	r4, r0
 80a12d0:	4b04      	ldr	r3, [pc, #16]	; (80a12e4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a12d2:	2211      	movs	r2, #17
 80a12d4:	f840 3b04 	str.w	r3, [r0], #4
 80a12d8:	2100      	movs	r1, #0
 80a12da:	f001 fc3c 	bl	80a2b56 <memset>
{
    clear();
}
 80a12de:	4620      	mov	r0, r4
 80a12e0:	bd10      	pop	{r4, pc}
 80a12e2:	bf00      	nop
 80a12e4:	080a2e54 	.word	0x080a2e54

080a12e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a12e8:	4603      	mov	r3, r0
 80a12ea:	4a07      	ldr	r2, [pc, #28]	; (80a1308 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a12ec:	b510      	push	{r4, lr}
 80a12ee:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a12f2:	f101 0210 	add.w	r2, r1, #16
 80a12f6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a12fa:	4291      	cmp	r1, r2
 80a12fc:	f843 4b04 	str.w	r4, [r3], #4
 80a1300:	d1f9      	bne.n	80a12f6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1302:	780a      	ldrb	r2, [r1, #0]
 80a1304:	701a      	strb	r2, [r3, #0]
}
 80a1306:	bd10      	pop	{r4, pc}
 80a1308:	080a2e54 	.word	0x080a2e54

080a130c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a130c:	4a02      	ldr	r2, [pc, #8]	; (80a1318 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a130e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1310:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1312:	2204      	movs	r2, #4
 80a1314:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1316:	4770      	bx	lr
 80a1318:	080a2e54 	.word	0x080a2e54

080a131c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a131c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a131e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1322:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1326:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a132a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a132e:	2304      	movs	r3, #4
 80a1330:	6041      	str	r1, [r0, #4]
 80a1332:	7503      	strb	r3, [r0, #20]
 80a1334:	bd10      	pop	{r4, pc}
	...

080a1338 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a133a:	4d04      	ldr	r5, [pc, #16]	; (80a134c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a133c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a133e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1342:	9500      	str	r5, [sp, #0]
 80a1344:	f7ff ffea 	bl	80a131c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1348:	b003      	add	sp, #12
 80a134a:	bd30      	pop	{r4, r5, pc}
 80a134c:	080a2e54 	.word	0x080a2e54

080a1350 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1350:	7441      	strb	r1, [r0, #17]
 80a1352:	4770      	bx	lr

080a1354 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1354:	4770      	bx	lr

080a1356 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1356:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1358:	2100      	movs	r1, #0
 80a135a:	7c00      	ldrb	r0, [r0, #16]
 80a135c:	f7ff fbd8 	bl	80a0b10 <HAL_USB_USART_Receive_Data>
}
 80a1360:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1364:	bf28      	it	cs
 80a1366:	f04f 30ff 	movcs.w	r0, #4294967295
 80a136a:	bd08      	pop	{r3, pc}

080a136c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a136c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a136e:	2101      	movs	r1, #1
 80a1370:	7c00      	ldrb	r0, [r0, #16]
 80a1372:	f7ff fbcd 	bl	80a0b10 <HAL_USB_USART_Receive_Data>
}
 80a1376:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a137a:	bf28      	it	cs
 80a137c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1380:	bd08      	pop	{r3, pc}

080a1382 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1382:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1384:	7c00      	ldrb	r0, [r0, #16]
 80a1386:	f7ff fbbb 	bl	80a0b00 <HAL_USB_USART_Available_Data_For_Write>
}
 80a138a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a138e:	bd08      	pop	{r3, pc}

080a1390 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1390:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1392:	7c00      	ldrb	r0, [r0, #16]
 80a1394:	f7ff fbac 	bl	80a0af0 <HAL_USB_USART_Available_Data>
}
 80a1398:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a139c:	bd08      	pop	{r3, pc}

080a139e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a139e:	7c00      	ldrb	r0, [r0, #16]
 80a13a0:	f7ff bbc6 	b.w	80a0b30 <HAL_USB_USART_Flush_Data>

080a13a4 <_ZN9USBSerialD0Ev>:
 80a13a4:	b510      	push	{r4, lr}
 80a13a6:	4604      	mov	r4, r0
 80a13a8:	2114      	movs	r1, #20
 80a13aa:	f000 fb0e 	bl	80a19ca <_ZdlPvj>
 80a13ae:	4620      	mov	r0, r4
 80a13b0:	bd10      	pop	{r4, pc}

080a13b2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a13b2:	b538      	push	{r3, r4, r5, lr}
 80a13b4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a13b6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a13b8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a13ba:	f7ff fba1 	bl	80a0b00 <HAL_USB_USART_Available_Data_For_Write>
 80a13be:	2800      	cmp	r0, #0
 80a13c0:	dc01      	bgt.n	80a13c6 <_ZN9USBSerial5writeEh+0x14>
 80a13c2:	7c60      	ldrb	r0, [r4, #17]
 80a13c4:	b128      	cbz	r0, 80a13d2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a13c6:	4629      	mov	r1, r5
 80a13c8:	7c20      	ldrb	r0, [r4, #16]
 80a13ca:	f7ff fba9 	bl	80a0b20 <HAL_USB_USART_Send_Data>
 80a13ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a13d2:	bd38      	pop	{r3, r4, r5, pc}

080a13d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a13d4:	b510      	push	{r4, lr}
 80a13d6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a13d8:	2300      	movs	r3, #0
 80a13da:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a13dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a13e0:	60a3      	str	r3, [r4, #8]
 80a13e2:	4b05      	ldr	r3, [pc, #20]	; (80a13f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a13e4:	4608      	mov	r0, r1
 80a13e6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a13e8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a13ea:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a13ec:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a13ee:	4611      	mov	r1, r2
 80a13f0:	f7ff fb6e 	bl	80a0ad0 <HAL_USB_USART_Init>
}
 80a13f4:	4620      	mov	r0, r4
 80a13f6:	bd10      	pop	{r4, pc}
 80a13f8:	080a2e68 	.word	0x080a2e68

080a13fc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a13fc:	2200      	movs	r2, #0
 80a13fe:	7c00      	ldrb	r0, [r0, #16]
 80a1400:	f7ff bb6e 	b.w	80a0ae0 <HAL_USB_USART_Begin>

080a1404 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1404:	b510      	push	{r4, lr}
 80a1406:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1408:	2214      	movs	r2, #20
 80a140a:	2100      	movs	r1, #0
 80a140c:	f001 fba3 	bl	80a2b56 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1410:	4b05      	ldr	r3, [pc, #20]	; (80a1428 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1412:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1414:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1416:	4b05      	ldr	r3, [pc, #20]	; (80a142c <_Z19acquireSerialBufferv+0x28>)
 80a1418:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a141a:	f240 1301 	movw	r3, #257	; 0x101
 80a141e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1420:	2381      	movs	r3, #129	; 0x81
 80a1422:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1424:	bd10      	pop	{r4, pc}
 80a1426:	bf00      	nop
 80a1428:	20000489 	.word	0x20000489
 80a142c:	20000408 	.word	0x20000408

080a1430 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1430:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1432:	4d0e      	ldr	r5, [pc, #56]	; (80a146c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1434:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1436:	a801      	add	r0, sp, #4
 80a1438:	f7ff ffe4 	bl	80a1404 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a143c:	6829      	ldr	r1, [r5, #0]
 80a143e:	f011 0401 	ands.w	r4, r1, #1
 80a1442:	d110      	bne.n	80a1466 <_Z16_fetch_usbserialv+0x36>
 80a1444:	4628      	mov	r0, r5
 80a1446:	f7fe fe2c 	bl	80a00a2 <__cxa_guard_acquire>
 80a144a:	b160      	cbz	r0, 80a1466 <_Z16_fetch_usbserialv+0x36>
 80a144c:	aa01      	add	r2, sp, #4
 80a144e:	4621      	mov	r1, r4
 80a1450:	4807      	ldr	r0, [pc, #28]	; (80a1470 <_Z16_fetch_usbserialv+0x40>)
 80a1452:	f7ff ffbf 	bl	80a13d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1456:	4628      	mov	r0, r5
 80a1458:	f7fe fe28 	bl	80a00ac <__cxa_guard_release>
 80a145c:	4a05      	ldr	r2, [pc, #20]	; (80a1474 <_Z16_fetch_usbserialv+0x44>)
 80a145e:	4906      	ldr	r1, [pc, #24]	; (80a1478 <_Z16_fetch_usbserialv+0x48>)
 80a1460:	4803      	ldr	r0, [pc, #12]	; (80a1470 <_Z16_fetch_usbserialv+0x40>)
 80a1462:	f000 faad 	bl	80a19c0 <__aeabi_atexit>
	return _usbserial;
}
 80a1466:	4802      	ldr	r0, [pc, #8]	; (80a1470 <_Z16_fetch_usbserialv+0x40>)
 80a1468:	b007      	add	sp, #28
 80a146a:	bd30      	pop	{r4, r5, pc}
 80a146c:	20000404 	.word	0x20000404
 80a1470:	2000058c 	.word	0x2000058c
 80a1474:	20000378 	.word	0x20000378
 80a1478:	080a1355 	.word	0x080a1355

080a147c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a147c:	b510      	push	{r4, lr}
 80a147e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1480:	2214      	movs	r2, #20
 80a1482:	2100      	movs	r1, #0
 80a1484:	f001 fb67 	bl	80a2b56 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1488:	4b05      	ldr	r3, [pc, #20]	; (80a14a0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a148a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a148c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a148e:	4b05      	ldr	r3, [pc, #20]	; (80a14a4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1490:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1492:	f240 1301 	movw	r3, #257	; 0x101
 80a1496:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1498:	2381      	movs	r3, #129	; 0x81
 80a149a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a149c:	bd10      	pop	{r4, pc}
 80a149e:	bf00      	nop
 80a14a0:	2000063c 	.word	0x2000063c
 80a14a4:	200005a4 	.word	0x200005a4

080a14a8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a14a8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a14aa:	4c0e      	ldr	r4, [pc, #56]	; (80a14e4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a14ac:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a14ae:	a801      	add	r0, sp, #4
 80a14b0:	f7ff ffe4 	bl	80a147c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a14b4:	6823      	ldr	r3, [r4, #0]
 80a14b6:	07db      	lsls	r3, r3, #31
 80a14b8:	d410      	bmi.n	80a14dc <_Z17_fetch_usbserial1v+0x34>
 80a14ba:	4620      	mov	r0, r4
 80a14bc:	f7fe fdf1 	bl	80a00a2 <__cxa_guard_acquire>
 80a14c0:	b160      	cbz	r0, 80a14dc <_Z17_fetch_usbserial1v+0x34>
 80a14c2:	aa01      	add	r2, sp, #4
 80a14c4:	2101      	movs	r1, #1
 80a14c6:	4808      	ldr	r0, [pc, #32]	; (80a14e8 <_Z17_fetch_usbserial1v+0x40>)
 80a14c8:	f7ff ff84 	bl	80a13d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a14cc:	4620      	mov	r0, r4
 80a14ce:	f7fe fded 	bl	80a00ac <__cxa_guard_release>
 80a14d2:	4a06      	ldr	r2, [pc, #24]	; (80a14ec <_Z17_fetch_usbserial1v+0x44>)
 80a14d4:	4906      	ldr	r1, [pc, #24]	; (80a14f0 <_Z17_fetch_usbserial1v+0x48>)
 80a14d6:	4804      	ldr	r0, [pc, #16]	; (80a14e8 <_Z17_fetch_usbserial1v+0x40>)
 80a14d8:	f000 fa72 	bl	80a19c0 <__aeabi_atexit>
  return _usbserial1;
}
 80a14dc:	4802      	ldr	r0, [pc, #8]	; (80a14e8 <_Z17_fetch_usbserial1v+0x40>)
 80a14de:	b006      	add	sp, #24
 80a14e0:	bd10      	pop	{r4, pc}
 80a14e2:	bf00      	nop
 80a14e4:	200005a0 	.word	0x200005a0
 80a14e8:	20000628 	.word	0x20000628
 80a14ec:	20000378 	.word	0x20000378
 80a14f0:	080a1355 	.word	0x080a1355

080a14f4 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a14f4:	f7ff ba2a 	b.w	80a094c <HAL_Interrupts_Disable_All>

080a14f8 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a14f8:	f7ff ba20 	b.w	80a093c <HAL_Interrupts_Enable_All>

080a14fc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a14fc:	4770      	bx	lr

080a14fe <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a14fe:	7441      	strb	r1, [r0, #17]
 80a1500:	4770      	bx	lr

080a1502 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1502:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1504:	7c00      	ldrb	r0, [r0, #16]
 80a1506:	f7ff faa1 	bl	80a0a4c <HAL_USART_Available_Data_For_Write>
}
 80a150a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a150e:	bd08      	pop	{r3, pc}

080a1510 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1510:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1512:	7c00      	ldrb	r0, [r0, #16]
 80a1514:	f7ff fa72 	bl	80a09fc <HAL_USART_Available_Data>
}
 80a1518:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a151c:	bd08      	pop	{r3, pc}

080a151e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a151e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1520:	7c00      	ldrb	r0, [r0, #16]
 80a1522:	f7ff fa7b 	bl	80a0a1c <HAL_USART_Peek_Data>
}
 80a1526:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a152a:	bf28      	it	cs
 80a152c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1530:	bd08      	pop	{r3, pc}

080a1532 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1532:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1534:	7c00      	ldrb	r0, [r0, #16]
 80a1536:	f7ff fa69 	bl	80a0a0c <HAL_USART_Read_Data>
}
 80a153a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a153e:	bf28      	it	cs
 80a1540:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1544:	bd08      	pop	{r3, pc}

080a1546 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1546:	7c00      	ldrb	r0, [r0, #16]
 80a1548:	f7ff ba70 	b.w	80a0a2c <HAL_USART_Flush_Data>

080a154c <_ZN11USARTSerialD0Ev>:
 80a154c:	b510      	push	{r4, lr}
 80a154e:	4604      	mov	r4, r0
 80a1550:	2114      	movs	r1, #20
 80a1552:	f000 fa3a 	bl	80a19ca <_ZdlPvj>
 80a1556:	4620      	mov	r0, r4
 80a1558:	bd10      	pop	{r4, pc}

080a155a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a155a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a155c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a155e:	4604      	mov	r4, r0
 80a1560:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1562:	b925      	cbnz	r5, 80a156e <_ZN11USARTSerial5writeEh+0x14>
 80a1564:	7c00      	ldrb	r0, [r0, #16]
 80a1566:	f7ff fa71 	bl	80a0a4c <HAL_USART_Available_Data_For_Write>
 80a156a:	2800      	cmp	r0, #0
 80a156c:	dd05      	ble.n	80a157a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a156e:	4631      	mov	r1, r6
 80a1570:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1576:	f7ff ba39 	b.w	80a09ec <HAL_USART_Write_Data>
  }
  return 0;
}
 80a157a:	4628      	mov	r0, r5
 80a157c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1580 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1580:	b510      	push	{r4, lr}
 80a1582:	4604      	mov	r4, r0
 80a1584:	4608      	mov	r0, r1
 80a1586:	4611      	mov	r1, r2
 80a1588:	2200      	movs	r2, #0
 80a158a:	6062      	str	r2, [r4, #4]
 80a158c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1590:	60a2      	str	r2, [r4, #8]
 80a1592:	4a05      	ldr	r2, [pc, #20]	; (80a15a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1594:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1596:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1598:	2201      	movs	r2, #1
 80a159a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a159c:	461a      	mov	r2, r3
 80a159e:	f7ff fa1d 	bl	80a09dc <HAL_USART_Init>
}
 80a15a2:	4620      	mov	r0, r4
 80a15a4:	bd10      	pop	{r4, pc}
 80a15a6:	bf00      	nop
 80a15a8:	080a2e98 	.word	0x080a2e98

080a15ac <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a15ac:	7c00      	ldrb	r0, [r0, #16]
 80a15ae:	f7ff ba45 	b.w	80a0a3c <HAL_USART_Is_Enabled>
	...

080a15b4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a15b4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a15b6:	4d0c      	ldr	r5, [pc, #48]	; (80a15e8 <_Z22__fetch_global_Serial1v+0x34>)
 80a15b8:	6829      	ldr	r1, [r5, #0]
 80a15ba:	f011 0401 	ands.w	r4, r1, #1
 80a15be:	d111      	bne.n	80a15e4 <_Z22__fetch_global_Serial1v+0x30>
 80a15c0:	4628      	mov	r0, r5
 80a15c2:	f7fe fd6e 	bl	80a00a2 <__cxa_guard_acquire>
 80a15c6:	b168      	cbz	r0, 80a15e4 <_Z22__fetch_global_Serial1v+0x30>
 80a15c8:	4a08      	ldr	r2, [pc, #32]	; (80a15ec <_Z22__fetch_global_Serial1v+0x38>)
 80a15ca:	4621      	mov	r1, r4
 80a15cc:	4b08      	ldr	r3, [pc, #32]	; (80a15f0 <_Z22__fetch_global_Serial1v+0x3c>)
 80a15ce:	4809      	ldr	r0, [pc, #36]	; (80a15f4 <_Z22__fetch_global_Serial1v+0x40>)
 80a15d0:	f7ff ffd6 	bl	80a1580 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a15d4:	4628      	mov	r0, r5
 80a15d6:	f7fe fd69 	bl	80a00ac <__cxa_guard_release>
 80a15da:	4a07      	ldr	r2, [pc, #28]	; (80a15f8 <_Z22__fetch_global_Serial1v+0x44>)
 80a15dc:	4907      	ldr	r1, [pc, #28]	; (80a15fc <_Z22__fetch_global_Serial1v+0x48>)
 80a15de:	4805      	ldr	r0, [pc, #20]	; (80a15f4 <_Z22__fetch_global_Serial1v+0x40>)
 80a15e0:	f000 f9ee 	bl	80a19c0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a15e4:	4803      	ldr	r0, [pc, #12]	; (80a15f4 <_Z22__fetch_global_Serial1v+0x40>)
 80a15e6:	bd38      	pop	{r3, r4, r5, pc}
 80a15e8:	200007d8 	.word	0x200007d8
 80a15ec:	200007dc 	.word	0x200007dc
 80a15f0:	20000754 	.word	0x20000754
 80a15f4:	20000740 	.word	0x20000740
 80a15f8:	20000378 	.word	0x20000378
 80a15fc:	080a14fd 	.word	0x080a14fd

080a1600 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1600:	4770      	bx	lr

080a1602 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1604:	4606      	mov	r6, r0
 80a1606:	4615      	mov	r5, r2
 80a1608:	460c      	mov	r4, r1
 80a160a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a160c:	42bc      	cmp	r4, r7
 80a160e:	d006      	beq.n	80a161e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1610:	6833      	ldr	r3, [r6, #0]
 80a1612:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1616:	689b      	ldr	r3, [r3, #8]
 80a1618:	4630      	mov	r0, r6
 80a161a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a161c:	e7f6      	b.n	80a160c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a161e:	4628      	mov	r0, r5
 80a1620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1622 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1622:	2200      	movs	r2, #0
 80a1624:	7c00      	ldrb	r0, [r0, #16]
 80a1626:	f7ff ba19 	b.w	80a0a5c <HAL_I2C_Write_Data>

080a162a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a162a:	2100      	movs	r1, #0
 80a162c:	7c00      	ldrb	r0, [r0, #16]
 80a162e:	f7ff ba1d 	b.w	80a0a6c <HAL_I2C_Available_Data>

080a1632 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1632:	2100      	movs	r1, #0
 80a1634:	7c00      	ldrb	r0, [r0, #16]
 80a1636:	f7ff ba21 	b.w	80a0a7c <HAL_I2C_Read_Data>

080a163a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a163a:	2100      	movs	r1, #0
 80a163c:	7c00      	ldrb	r0, [r0, #16]
 80a163e:	f7ff ba25 	b.w	80a0a8c <HAL_I2C_Peek_Data>

080a1642 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1642:	2100      	movs	r1, #0
 80a1644:	7c00      	ldrb	r0, [r0, #16]
 80a1646:	f7ff ba29 	b.w	80a0a9c <HAL_I2C_Flush_Data>

080a164a <_ZN7TwoWireD0Ev>:
 80a164a:	b510      	push	{r4, lr}
 80a164c:	4604      	mov	r4, r0
 80a164e:	2114      	movs	r1, #20
 80a1650:	f000 f9bb 	bl	80a19ca <_ZdlPvj>
 80a1654:	4620      	mov	r0, r4
 80a1656:	bd10      	pop	{r4, pc}

080a1658 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1658:	b510      	push	{r4, lr}
 80a165a:	4604      	mov	r4, r0
 80a165c:	4608      	mov	r0, r1
 80a165e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1662:	60a3      	str	r3, [r4, #8]
 80a1664:	4b04      	ldr	r3, [pc, #16]	; (80a1678 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a1666:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1668:	7420      	strb	r0, [r4, #16]
 80a166a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a166c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a166e:	f7ff fa25 	bl	80a0abc <HAL_I2C_Init>

}
 80a1672:	4620      	mov	r0, r4
 80a1674:	bd10      	pop	{r4, pc}
 80a1676:	bf00      	nop
 80a1678:	080a2ec8 	.word	0x080a2ec8

080a167c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a167c:	2100      	movs	r1, #0
 80a167e:	7c00      	ldrb	r0, [r0, #16]
 80a1680:	f7ff ba14 	b.w	80a0aac <HAL_I2C_Is_Enabled>

080a1684 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1684:	2200      	movs	r2, #0
 80a1686:	4611      	mov	r1, r2
 80a1688:	6840      	ldr	r0, [r0, #4]
 80a168a:	f7ff ba9d 	b.w	80a0bc8 <network_ready>

080a168e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a168e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1690:	4616      	mov	r6, r2
 80a1692:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1694:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1696:	460f      	mov	r7, r1
 80a1698:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a169a:	2100      	movs	r1, #0
 80a169c:	a803      	add	r0, sp, #12
 80a169e:	f001 fa5a 	bl	80a2b56 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a16a2:	4630      	mov	r0, r6
 80a16a4:	f001 fa88 	bl	80a2bb8 <strlen>
 80a16a8:	2500      	movs	r5, #0
 80a16aa:	9500      	str	r5, [sp, #0]
 80a16ac:	b281      	uxth	r1, r0
 80a16ae:	687b      	ldr	r3, [r7, #4]
 80a16b0:	aa03      	add	r2, sp, #12
 80a16b2:	4630      	mov	r0, r6
 80a16b4:	f7ff fa44 	bl	80a0b40 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a16b8:	b120      	cbz	r0, 80a16c4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a16ba:	4629      	mov	r1, r5
 80a16bc:	4620      	mov	r0, r4
 80a16be:	f7ff fe25 	bl	80a130c <_ZN9IPAddressC1Em>
 80a16c2:	e003      	b.n	80a16cc <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a16c4:	a903      	add	r1, sp, #12
 80a16c6:	4620      	mov	r0, r4
 80a16c8:	f7ff fe0e 	bl	80a12e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a16cc:	4620      	mov	r0, r4
 80a16ce:	b009      	add	sp, #36	; 0x24
 80a16d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a16d2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a16d2:	2200      	movs	r2, #0
 80a16d4:	4611      	mov	r1, r2
 80a16d6:	6840      	ldr	r0, [r0, #4]
 80a16d8:	f7ff ba96 	b.w	80a0c08 <network_listening>

080a16dc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a16dc:	2200      	movs	r2, #0
 80a16de:	4611      	mov	r1, r2
 80a16e0:	6840      	ldr	r0, [r0, #4]
 80a16e2:	f7ff baa1 	b.w	80a0c28 <network_get_listen_timeout>

080a16e6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a16e6:	2200      	movs	r2, #0
 80a16e8:	6840      	ldr	r0, [r0, #4]
 80a16ea:	f7ff ba95 	b.w	80a0c18 <network_set_listen_timeout>

080a16ee <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a16ee:	2200      	movs	r2, #0
 80a16f0:	f081 0101 	eor.w	r1, r1, #1
 80a16f4:	6840      	ldr	r0, [r0, #4]
 80a16f6:	f7ff ba7f 	b.w	80a0bf8 <network_listen>

080a16fa <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a16fa:	2300      	movs	r3, #0
 80a16fc:	461a      	mov	r2, r3
 80a16fe:	4619      	mov	r1, r3
 80a1700:	6840      	ldr	r0, [r0, #4]
 80a1702:	f7ff ba71 	b.w	80a0be8 <network_off>

080a1706 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1706:	2200      	movs	r2, #0
 80a1708:	4611      	mov	r1, r2
 80a170a:	6840      	ldr	r0, [r0, #4]
 80a170c:	f7ff ba4c 	b.w	80a0ba8 <network_connecting>

080a1710 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1710:	2200      	movs	r2, #0
 80a1712:	2102      	movs	r1, #2
 80a1714:	6840      	ldr	r0, [r0, #4]
 80a1716:	f7ff ba4f 	b.w	80a0bb8 <network_disconnect>

080a171a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a171a:	2300      	movs	r3, #0
 80a171c:	461a      	mov	r2, r3
 80a171e:	6840      	ldr	r0, [r0, #4]
 80a1720:	f7ff ba3a 	b.w	80a0b98 <network_connect>

080a1724 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1724:	4b02      	ldr	r3, [pc, #8]	; (80a1730 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1726:	2204      	movs	r2, #4
 80a1728:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a172a:	4a02      	ldr	r2, [pc, #8]	; (80a1734 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a172c:	601a      	str	r2, [r3, #0]
 80a172e:	4770      	bx	lr
 80a1730:	20000860 	.word	0x20000860
 80a1734:	080a2ef0 	.word	0x080a2ef0

080a1738 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1738:	2300      	movs	r3, #0
 80a173a:	461a      	mov	r2, r3
 80a173c:	6840      	ldr	r0, [r0, #4]
 80a173e:	f7ff ba2b 	b.w	80a0b98 <network_connect>

080a1742 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1742:	2200      	movs	r2, #0
 80a1744:	2102      	movs	r1, #2
 80a1746:	6840      	ldr	r0, [r0, #4]
 80a1748:	f7ff ba36 	b.w	80a0bb8 <network_disconnect>

080a174c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a174c:	2200      	movs	r2, #0
 80a174e:	4611      	mov	r1, r2
 80a1750:	6840      	ldr	r0, [r0, #4]
 80a1752:	f7ff ba29 	b.w	80a0ba8 <network_connecting>

080a1756 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1756:	2200      	movs	r2, #0
 80a1758:	4611      	mov	r1, r2
 80a175a:	6840      	ldr	r0, [r0, #4]
 80a175c:	f7ff ba34 	b.w	80a0bc8 <network_ready>

080a1760 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1760:	2300      	movs	r3, #0
 80a1762:	461a      	mov	r2, r3
 80a1764:	4619      	mov	r1, r3
 80a1766:	6840      	ldr	r0, [r0, #4]
 80a1768:	f7ff ba36 	b.w	80a0bd8 <network_on>

080a176c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a176c:	2300      	movs	r3, #0
 80a176e:	461a      	mov	r2, r3
 80a1770:	4619      	mov	r1, r3
 80a1772:	6840      	ldr	r0, [r0, #4]
 80a1774:	f7ff ba38 	b.w	80a0be8 <network_off>

080a1778 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1778:	2200      	movs	r2, #0
 80a177a:	f081 0101 	eor.w	r1, r1, #1
 80a177e:	6840      	ldr	r0, [r0, #4]
 80a1780:	f7ff ba3a 	b.w	80a0bf8 <network_listen>

080a1784 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1784:	2200      	movs	r2, #0
 80a1786:	6840      	ldr	r0, [r0, #4]
 80a1788:	f7ff ba46 	b.w	80a0c18 <network_set_listen_timeout>

080a178c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a178c:	2200      	movs	r2, #0
 80a178e:	4611      	mov	r1, r2
 80a1790:	6840      	ldr	r0, [r0, #4]
 80a1792:	f7ff ba49 	b.w	80a0c28 <network_get_listen_timeout>

080a1796 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1796:	2200      	movs	r2, #0
 80a1798:	4611      	mov	r1, r2
 80a179a:	6840      	ldr	r0, [r0, #4]
 80a179c:	f7ff ba34 	b.w	80a0c08 <network_listening>

080a17a0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a17a0:	b570      	push	{r4, r5, r6, lr}
 80a17a2:	4616      	mov	r6, r2
 80a17a4:	b08e      	sub	sp, #56	; 0x38
 80a17a6:	4604      	mov	r4, r0
    IPAddress addr;
 80a17a8:	a808      	add	r0, sp, #32
 80a17aa:	f7ff fd8f 	bl	80a12cc <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a17ae:	2211      	movs	r2, #17
 80a17b0:	2100      	movs	r1, #0
 80a17b2:	a803      	add	r0, sp, #12
 80a17b4:	f001 f9cf 	bl	80a2b56 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a17b8:	4630      	mov	r0, r6
 80a17ba:	f001 f9fd 	bl	80a2bb8 <strlen>
 80a17be:	2500      	movs	r5, #0
 80a17c0:	4b0a      	ldr	r3, [pc, #40]	; (80a17ec <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a17c2:	9500      	str	r5, [sp, #0]
 80a17c4:	b281      	uxth	r1, r0
 80a17c6:	685b      	ldr	r3, [r3, #4]
 80a17c8:	aa03      	add	r2, sp, #12
 80a17ca:	4630      	mov	r0, r6
 80a17cc:	f7ff f9b8 	bl	80a0b40 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a17d0:	b120      	cbz	r0, 80a17dc <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a17d2:	4629      	mov	r1, r5
 80a17d4:	4620      	mov	r0, r4
 80a17d6:	f7ff fd99 	bl	80a130c <_ZN9IPAddressC1Em>
 80a17da:	e003      	b.n	80a17e4 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a17dc:	a903      	add	r1, sp, #12
 80a17de:	4620      	mov	r0, r4
 80a17e0:	f7ff fd82 	bl	80a12e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a17e4:	4620      	mov	r0, r4
 80a17e6:	b00e      	add	sp, #56	; 0x38
 80a17e8:	bd70      	pop	{r4, r5, r6, pc}
 80a17ea:	bf00      	nop
 80a17ec:	20000860 	.word	0x20000860

080a17f0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a17f0:	4b02      	ldr	r3, [pc, #8]	; (80a17fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a17f2:	4a03      	ldr	r2, [pc, #12]	; (80a1800 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a17f4:	601a      	str	r2, [r3, #0]
 80a17f6:	2200      	movs	r2, #0
 80a17f8:	605a      	str	r2, [r3, #4]
 80a17fa:	4770      	bx	lr
 80a17fc:	20000868 	.word	0x20000868
 80a1800:	080a2f24 	.word	0x080a2f24

080a1804 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1804:	b510      	push	{r4, lr}
 80a1806:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1808:	480f      	ldr	r0, [pc, #60]	; (80a1848 <pinAvailable+0x44>)
 80a180a:	f7ff fa61 	bl	80a0cd0 <_ZN8SPIClass9isEnabledEv>
 80a180e:	b128      	cbz	r0, 80a181c <pinAvailable+0x18>
 80a1810:	f1a4 030d 	sub.w	r3, r4, #13
 80a1814:	2b02      	cmp	r3, #2
 80a1816:	d801      	bhi.n	80a181c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1818:	2000      	movs	r0, #0
 80a181a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a181c:	f000 f8b0 	bl	80a1980 <_Z19__fetch_global_Wirev>
 80a1820:	f7ff ff2c 	bl	80a167c <_ZN7TwoWire9isEnabledEv>
 80a1824:	b108      	cbz	r0, 80a182a <pinAvailable+0x26>
 80a1826:	2c01      	cmp	r4, #1
 80a1828:	d9f6      	bls.n	80a1818 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a182a:	f7ff fec3 	bl	80a15b4 <_Z22__fetch_global_Serial1v>
 80a182e:	f7ff febd 	bl	80a15ac <_ZN11USARTSerial9isEnabledEv>
 80a1832:	b118      	cbz	r0, 80a183c <pinAvailable+0x38>
 80a1834:	f1a4 0312 	sub.w	r3, r4, #18
 80a1838:	2b01      	cmp	r3, #1
 80a183a:	d9ed      	bls.n	80a1818 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a183c:	2c17      	cmp	r4, #23
 80a183e:	bf8c      	ite	hi
 80a1840:	2000      	movhi	r0, #0
 80a1842:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1844:	bd10      	pop	{r4, pc}
 80a1846:	bf00      	nop
 80a1848:	20000870 	.word	0x20000870

080a184c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a184c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a184e:	b538      	push	{r3, r4, r5, lr}
 80a1850:	4604      	mov	r4, r0
 80a1852:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1854:	d80a      	bhi.n	80a186c <pinMode+0x20>
 80a1856:	29ff      	cmp	r1, #255	; 0xff
 80a1858:	d008      	beq.n	80a186c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a185a:	f7ff ffd3 	bl	80a1804 <pinAvailable>
 80a185e:	b128      	cbz	r0, 80a186c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1860:	4629      	mov	r1, r5
 80a1862:	4620      	mov	r0, r4
}
 80a1864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1868:	f7ff b848 	b.w	80a08fc <HAL_Pin_Mode>
 80a186c:	bd38      	pop	{r3, r4, r5, pc}

080a186e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a186e:	b538      	push	{r3, r4, r5, lr}
 80a1870:	4604      	mov	r4, r0
 80a1872:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1874:	f7ff f84a 	bl	80a090c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1878:	28ff      	cmp	r0, #255	; 0xff
 80a187a:	d010      	beq.n	80a189e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a187c:	2806      	cmp	r0, #6
 80a187e:	d804      	bhi.n	80a188a <digitalWrite+0x1c>
 80a1880:	234d      	movs	r3, #77	; 0x4d
 80a1882:	fa23 f000 	lsr.w	r0, r3, r0
 80a1886:	07c3      	lsls	r3, r0, #31
 80a1888:	d409      	bmi.n	80a189e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a188a:	4620      	mov	r0, r4
 80a188c:	f7ff ffba 	bl	80a1804 <pinAvailable>
 80a1890:	b128      	cbz	r0, 80a189e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1892:	4629      	mov	r1, r5
 80a1894:	4620      	mov	r0, r4
}
 80a1896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a189a:	f7ff b83f 	b.w	80a091c <HAL_GPIO_Write>
 80a189e:	bd38      	pop	{r3, r4, r5, pc}

080a18a0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a18a0:	b510      	push	{r4, lr}
 80a18a2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a18a4:	f7ff f832 	bl	80a090c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a18a8:	3804      	subs	r0, #4
 80a18aa:	b2c0      	uxtb	r0, r0
 80a18ac:	2801      	cmp	r0, #1
 80a18ae:	d908      	bls.n	80a18c2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a18b0:	4620      	mov	r0, r4
 80a18b2:	f7ff ffa7 	bl	80a1804 <pinAvailable>
 80a18b6:	b120      	cbz	r0, 80a18c2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a18b8:	4620      	mov	r0, r4
}
 80a18ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a18be:	f7ff b835 	b.w	80a092c <HAL_GPIO_Read>
}
 80a18c2:	2000      	movs	r0, #0
 80a18c4:	bd10      	pop	{r4, pc}

080a18c6 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 80a18c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a18ca:	4690      	mov	r8, r2
 80a18cc:	461e      	mov	r6, r3
 80a18ce:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
 80a18d0:	460d      	mov	r5, r1
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 80a18d2:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
 80a18d4:	f1b8 0f00 	cmp.w	r8, #0
 80a18d8:	d104      	bne.n	80a18e4 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
 80a18da:	f1c4 0107 	rsb	r1, r4, #7
 80a18de:	fa46 f101 	asr.w	r1, r6, r1
 80a18e2:	e001      	b.n	80a18e8 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 80a18e4:	fa46 f104 	asr.w	r1, r6, r4
 80a18e8:	f001 0101 	and.w	r1, r1, #1
 80a18ec:	4638      	mov	r0, r7
 80a18ee:	f7ff ffbe 	bl	80a186e <digitalWrite>

    digitalWrite(clockPin, HIGH);
 80a18f2:	2101      	movs	r1, #1
 80a18f4:	4628      	mov	r0, r5
 80a18f6:	f7ff ffba 	bl	80a186e <digitalWrite>
    digitalWrite(clockPin, LOW);
 80a18fa:	2100      	movs	r1, #0
 80a18fc:	4628      	mov	r0, r5
 80a18fe:	f7ff ffb6 	bl	80a186e <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
 80a1902:	f114 34ff 	adds.w	r4, r4, #4294967295
 80a1906:	d2e5      	bcs.n	80a18d4 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
 80a1908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a190c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a190c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a190e:	4c0c      	ldr	r4, [pc, #48]	; (80a1940 <_GLOBAL__sub_I_SPI+0x34>)
 80a1910:	4e0c      	ldr	r6, [pc, #48]	; (80a1944 <_GLOBAL__sub_I_SPI+0x38>)
 80a1912:	4d0d      	ldr	r5, [pc, #52]	; (80a1948 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1914:	2100      	movs	r1, #0
 80a1916:	4620      	mov	r0, r4
 80a1918:	f7ff f9c6 	bl	80a0ca8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a191c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a191e:	4c0b      	ldr	r4, [pc, #44]	; (80a194c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1920:	4632      	mov	r2, r6
 80a1922:	4629      	mov	r1, r5
 80a1924:	f000 f84c 	bl	80a19c0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1928:	2101      	movs	r1, #1
 80a192a:	4620      	mov	r0, r4
 80a192c:	f7ff f9bc 	bl	80a0ca8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1930:	4632      	mov	r2, r6
 80a1932:	4629      	mov	r1, r5
 80a1934:	4620      	mov	r0, r4
 80a1936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a193a:	f000 b841 	b.w	80a19c0 <__aeabi_atexit>
 80a193e:	bf00      	nop
 80a1940:	20000870 	.word	0x20000870
 80a1944:	20000378 	.word	0x20000378
 80a1948:	080a0c99 	.word	0x080a0c99
 80a194c:	20000880 	.word	0x20000880

080a1950 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1950:	b513      	push	{r0, r1, r4, lr}
 80a1952:	4c08      	ldr	r4, [pc, #32]	; (80a1974 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1954:	2300      	movs	r3, #0
 80a1956:	461a      	mov	r2, r3
 80a1958:	4619      	mov	r1, r3
 80a195a:	9300      	str	r3, [sp, #0]
 80a195c:	4620      	mov	r0, r4
 80a195e:	f7ff fceb 	bl	80a1338 <_ZN9IPAddressC1Ehhhh>
 80a1962:	4620      	mov	r0, r4
 80a1964:	4a04      	ldr	r2, [pc, #16]	; (80a1978 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1966:	4905      	ldr	r1, [pc, #20]	; (80a197c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1968:	b002      	add	sp, #8
 80a196a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a196e:	f000 b827 	b.w	80a19c0 <__aeabi_atexit>
 80a1972:	bf00      	nop
 80a1974:	20000894 	.word	0x20000894
 80a1978:	20000378 	.word	0x20000378
 80a197c:	080a128b 	.word	0x080a128b

080a1980 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1980:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1982:	4d0b      	ldr	r5, [pc, #44]	; (80a19b0 <_Z19__fetch_global_Wirev+0x30>)
 80a1984:	6829      	ldr	r1, [r5, #0]
 80a1986:	f011 0401 	ands.w	r4, r1, #1
 80a198a:	d10f      	bne.n	80a19ac <_Z19__fetch_global_Wirev+0x2c>
 80a198c:	4628      	mov	r0, r5
 80a198e:	f7fe fb88 	bl	80a00a2 <__cxa_guard_acquire>
 80a1992:	b158      	cbz	r0, 80a19ac <_Z19__fetch_global_Wirev+0x2c>
 80a1994:	4621      	mov	r1, r4
 80a1996:	4807      	ldr	r0, [pc, #28]	; (80a19b4 <_Z19__fetch_global_Wirev+0x34>)
 80a1998:	f7ff fe5e 	bl	80a1658 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a199c:	4628      	mov	r0, r5
 80a199e:	f7fe fb85 	bl	80a00ac <__cxa_guard_release>
 80a19a2:	4a05      	ldr	r2, [pc, #20]	; (80a19b8 <_Z19__fetch_global_Wirev+0x38>)
 80a19a4:	4905      	ldr	r1, [pc, #20]	; (80a19bc <_Z19__fetch_global_Wirev+0x3c>)
 80a19a6:	4803      	ldr	r0, [pc, #12]	; (80a19b4 <_Z19__fetch_global_Wirev+0x34>)
 80a19a8:	f000 f80a 	bl	80a19c0 <__aeabi_atexit>
	return wire;
}
 80a19ac:	4801      	ldr	r0, [pc, #4]	; (80a19b4 <_Z19__fetch_global_Wirev+0x34>)
 80a19ae:	bd38      	pop	{r3, r4, r5, pc}
 80a19b0:	200008ac 	.word	0x200008ac
 80a19b4:	200008b0 	.word	0x200008b0
 80a19b8:	20000378 	.word	0x20000378
 80a19bc:	080a1601 	.word	0x080a1601

080a19c0 <__aeabi_atexit>:
 80a19c0:	460b      	mov	r3, r1
 80a19c2:	4601      	mov	r1, r0
 80a19c4:	4618      	mov	r0, r3
 80a19c6:	f001 b8ad 	b.w	80a2b24 <__cxa_atexit>

080a19ca <_ZdlPvj>:
 80a19ca:	f7fe bb68 	b.w	80a009e <_ZdlPv>
	...

080a19d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a19d0:	4b18      	ldr	r3, [pc, #96]	; (80a1a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a19d2:	681a      	ldr	r2, [r3, #0]
 80a19d4:	07d1      	lsls	r1, r2, #31
 80a19d6:	bf5c      	itt	pl
 80a19d8:	2201      	movpl	r2, #1
 80a19da:	601a      	strpl	r2, [r3, #0]
 80a19dc:	4b16      	ldr	r3, [pc, #88]	; (80a1a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a19de:	681a      	ldr	r2, [r3, #0]
 80a19e0:	07d2      	lsls	r2, r2, #31
 80a19e2:	bf5c      	itt	pl
 80a19e4:	2201      	movpl	r2, #1
 80a19e6:	601a      	strpl	r2, [r3, #0]
 80a19e8:	4b14      	ldr	r3, [pc, #80]	; (80a1a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a19ea:	681a      	ldr	r2, [r3, #0]
 80a19ec:	07d0      	lsls	r0, r2, #31
 80a19ee:	bf5c      	itt	pl
 80a19f0:	2201      	movpl	r2, #1
 80a19f2:	601a      	strpl	r2, [r3, #0]
 80a19f4:	4b12      	ldr	r3, [pc, #72]	; (80a1a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a19f6:	681a      	ldr	r2, [r3, #0]
 80a19f8:	07d1      	lsls	r1, r2, #31
 80a19fa:	bf5c      	itt	pl
 80a19fc:	2201      	movpl	r2, #1
 80a19fe:	601a      	strpl	r2, [r3, #0]
 80a1a00:	4b10      	ldr	r3, [pc, #64]	; (80a1a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1a02:	681a      	ldr	r2, [r3, #0]
 80a1a04:	07d2      	lsls	r2, r2, #31
 80a1a06:	bf5c      	itt	pl
 80a1a08:	2201      	movpl	r2, #1
 80a1a0a:	601a      	strpl	r2, [r3, #0]
 80a1a0c:	4b0e      	ldr	r3, [pc, #56]	; (80a1a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1a0e:	681a      	ldr	r2, [r3, #0]
 80a1a10:	07d0      	lsls	r0, r2, #31
 80a1a12:	bf5c      	itt	pl
 80a1a14:	2201      	movpl	r2, #1
 80a1a16:	601a      	strpl	r2, [r3, #0]
 80a1a18:	4b0c      	ldr	r3, [pc, #48]	; (80a1a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1a1a:	681a      	ldr	r2, [r3, #0]
 80a1a1c:	07d1      	lsls	r1, r2, #31
 80a1a1e:	bf5c      	itt	pl
 80a1a20:	2201      	movpl	r2, #1
 80a1a22:	601a      	strpl	r2, [r3, #0]
 80a1a24:	4b0a      	ldr	r3, [pc, #40]	; (80a1a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1a26:	681a      	ldr	r2, [r3, #0]
 80a1a28:	07d2      	lsls	r2, r2, #31
 80a1a2a:	bf5c      	itt	pl
 80a1a2c:	2201      	movpl	r2, #1
 80a1a2e:	601a      	strpl	r2, [r3, #0]
 80a1a30:	4770      	bx	lr
 80a1a32:	bf00      	nop
 80a1a34:	200008e0 	.word	0x200008e0
 80a1a38:	200008dc 	.word	0x200008dc
 80a1a3c:	200008d8 	.word	0x200008d8
 80a1a40:	200008d4 	.word	0x200008d4
 80a1a44:	200008d0 	.word	0x200008d0
 80a1a48:	200008cc 	.word	0x200008cc
 80a1a4c:	200008c8 	.word	0x200008c8
 80a1a50:	200008c4 	.word	0x200008c4

080a1a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1a54:	4b24      	ldr	r3, [pc, #144]	; (80a1ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1a56:	681a      	ldr	r2, [r3, #0]
 80a1a58:	07d0      	lsls	r0, r2, #31
 80a1a5a:	bf5c      	itt	pl
 80a1a5c:	2201      	movpl	r2, #1
 80a1a5e:	601a      	strpl	r2, [r3, #0]
 80a1a60:	4b22      	ldr	r3, [pc, #136]	; (80a1aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1a62:	681a      	ldr	r2, [r3, #0]
 80a1a64:	07d1      	lsls	r1, r2, #31
 80a1a66:	bf5c      	itt	pl
 80a1a68:	2201      	movpl	r2, #1
 80a1a6a:	601a      	strpl	r2, [r3, #0]
 80a1a6c:	4b20      	ldr	r3, [pc, #128]	; (80a1af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1a6e:	681a      	ldr	r2, [r3, #0]
 80a1a70:	07d2      	lsls	r2, r2, #31
 80a1a72:	bf5c      	itt	pl
 80a1a74:	2201      	movpl	r2, #1
 80a1a76:	601a      	strpl	r2, [r3, #0]
 80a1a78:	4b1e      	ldr	r3, [pc, #120]	; (80a1af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1a7a:	681a      	ldr	r2, [r3, #0]
 80a1a7c:	07d0      	lsls	r0, r2, #31
 80a1a7e:	bf5c      	itt	pl
 80a1a80:	2201      	movpl	r2, #1
 80a1a82:	601a      	strpl	r2, [r3, #0]
 80a1a84:	4b1c      	ldr	r3, [pc, #112]	; (80a1af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1a86:	681a      	ldr	r2, [r3, #0]
 80a1a88:	07d1      	lsls	r1, r2, #31
 80a1a8a:	bf5c      	itt	pl
 80a1a8c:	2201      	movpl	r2, #1
 80a1a8e:	601a      	strpl	r2, [r3, #0]
 80a1a90:	4b1a      	ldr	r3, [pc, #104]	; (80a1afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1a92:	681a      	ldr	r2, [r3, #0]
 80a1a94:	07d2      	lsls	r2, r2, #31
 80a1a96:	bf5c      	itt	pl
 80a1a98:	2201      	movpl	r2, #1
 80a1a9a:	601a      	strpl	r2, [r3, #0]
 80a1a9c:	4b18      	ldr	r3, [pc, #96]	; (80a1b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1a9e:	681a      	ldr	r2, [r3, #0]
 80a1aa0:	07d0      	lsls	r0, r2, #31
 80a1aa2:	bf5c      	itt	pl
 80a1aa4:	2201      	movpl	r2, #1
 80a1aa6:	601a      	strpl	r2, [r3, #0]
 80a1aa8:	4b16      	ldr	r3, [pc, #88]	; (80a1b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1aaa:	681a      	ldr	r2, [r3, #0]
 80a1aac:	07d1      	lsls	r1, r2, #31
 80a1aae:	bf5c      	itt	pl
 80a1ab0:	2201      	movpl	r2, #1
 80a1ab2:	601a      	strpl	r2, [r3, #0]
 80a1ab4:	4b14      	ldr	r3, [pc, #80]	; (80a1b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1ab6:	681a      	ldr	r2, [r3, #0]
 80a1ab8:	07d2      	lsls	r2, r2, #31
 80a1aba:	bf5c      	itt	pl
 80a1abc:	2201      	movpl	r2, #1
 80a1abe:	601a      	strpl	r2, [r3, #0]
 80a1ac0:	4b12      	ldr	r3, [pc, #72]	; (80a1b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1ac2:	681a      	ldr	r2, [r3, #0]
 80a1ac4:	07d0      	lsls	r0, r2, #31
 80a1ac6:	bf5c      	itt	pl
 80a1ac8:	2201      	movpl	r2, #1
 80a1aca:	601a      	strpl	r2, [r3, #0]
 80a1acc:	4b10      	ldr	r3, [pc, #64]	; (80a1b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1ace:	681a      	ldr	r2, [r3, #0]
 80a1ad0:	07d1      	lsls	r1, r2, #31
 80a1ad2:	bf5c      	itt	pl
 80a1ad4:	2201      	movpl	r2, #1
 80a1ad6:	601a      	strpl	r2, [r3, #0]
 80a1ad8:	4b0e      	ldr	r3, [pc, #56]	; (80a1b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1ada:	681a      	ldr	r2, [r3, #0]
 80a1adc:	07d2      	lsls	r2, r2, #31
 80a1ade:	bf5c      	itt	pl
 80a1ae0:	2201      	movpl	r2, #1
 80a1ae2:	601a      	strpl	r2, [r3, #0]
 80a1ae4:	4770      	bx	lr
 80a1ae6:	bf00      	nop
 80a1ae8:	20000910 	.word	0x20000910
 80a1aec:	2000090c 	.word	0x2000090c
 80a1af0:	20000908 	.word	0x20000908
 80a1af4:	20000904 	.word	0x20000904
 80a1af8:	20000900 	.word	0x20000900
 80a1afc:	200008fc 	.word	0x200008fc
 80a1b00:	200008f8 	.word	0x200008f8
 80a1b04:	200008f4 	.word	0x200008f4
 80a1b08:	200008f0 	.word	0x200008f0
 80a1b0c:	200008ec 	.word	0x200008ec
 80a1b10:	200008e8 	.word	0x200008e8
 80a1b14:	200008e4 	.word	0x200008e4

080a1b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1b18:	4b24      	ldr	r3, [pc, #144]	; (80a1bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1b1a:	681a      	ldr	r2, [r3, #0]
 80a1b1c:	07d0      	lsls	r0, r2, #31
 80a1b1e:	bf5c      	itt	pl
 80a1b20:	2201      	movpl	r2, #1
 80a1b22:	601a      	strpl	r2, [r3, #0]
 80a1b24:	4b22      	ldr	r3, [pc, #136]	; (80a1bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1b26:	681a      	ldr	r2, [r3, #0]
 80a1b28:	07d1      	lsls	r1, r2, #31
 80a1b2a:	bf5c      	itt	pl
 80a1b2c:	2201      	movpl	r2, #1
 80a1b2e:	601a      	strpl	r2, [r3, #0]
 80a1b30:	4b20      	ldr	r3, [pc, #128]	; (80a1bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1b32:	681a      	ldr	r2, [r3, #0]
 80a1b34:	07d2      	lsls	r2, r2, #31
 80a1b36:	bf5c      	itt	pl
 80a1b38:	2201      	movpl	r2, #1
 80a1b3a:	601a      	strpl	r2, [r3, #0]
 80a1b3c:	4b1e      	ldr	r3, [pc, #120]	; (80a1bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1b3e:	681a      	ldr	r2, [r3, #0]
 80a1b40:	07d0      	lsls	r0, r2, #31
 80a1b42:	bf5c      	itt	pl
 80a1b44:	2201      	movpl	r2, #1
 80a1b46:	601a      	strpl	r2, [r3, #0]
 80a1b48:	4b1c      	ldr	r3, [pc, #112]	; (80a1bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1b4a:	681a      	ldr	r2, [r3, #0]
 80a1b4c:	07d1      	lsls	r1, r2, #31
 80a1b4e:	bf5c      	itt	pl
 80a1b50:	2201      	movpl	r2, #1
 80a1b52:	601a      	strpl	r2, [r3, #0]
 80a1b54:	4b1a      	ldr	r3, [pc, #104]	; (80a1bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1b56:	681a      	ldr	r2, [r3, #0]
 80a1b58:	07d2      	lsls	r2, r2, #31
 80a1b5a:	bf5c      	itt	pl
 80a1b5c:	2201      	movpl	r2, #1
 80a1b5e:	601a      	strpl	r2, [r3, #0]
 80a1b60:	4b18      	ldr	r3, [pc, #96]	; (80a1bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1b62:	681a      	ldr	r2, [r3, #0]
 80a1b64:	07d0      	lsls	r0, r2, #31
 80a1b66:	bf5c      	itt	pl
 80a1b68:	2201      	movpl	r2, #1
 80a1b6a:	601a      	strpl	r2, [r3, #0]
 80a1b6c:	4b16      	ldr	r3, [pc, #88]	; (80a1bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1b6e:	681a      	ldr	r2, [r3, #0]
 80a1b70:	07d1      	lsls	r1, r2, #31
 80a1b72:	bf5c      	itt	pl
 80a1b74:	2201      	movpl	r2, #1
 80a1b76:	601a      	strpl	r2, [r3, #0]
 80a1b78:	4b14      	ldr	r3, [pc, #80]	; (80a1bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1b7a:	681a      	ldr	r2, [r3, #0]
 80a1b7c:	07d2      	lsls	r2, r2, #31
 80a1b7e:	bf5c      	itt	pl
 80a1b80:	2201      	movpl	r2, #1
 80a1b82:	601a      	strpl	r2, [r3, #0]
 80a1b84:	4b12      	ldr	r3, [pc, #72]	; (80a1bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1b86:	681a      	ldr	r2, [r3, #0]
 80a1b88:	07d0      	lsls	r0, r2, #31
 80a1b8a:	bf5c      	itt	pl
 80a1b8c:	2201      	movpl	r2, #1
 80a1b8e:	601a      	strpl	r2, [r3, #0]
 80a1b90:	4b10      	ldr	r3, [pc, #64]	; (80a1bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1b92:	681a      	ldr	r2, [r3, #0]
 80a1b94:	07d1      	lsls	r1, r2, #31
 80a1b96:	bf5c      	itt	pl
 80a1b98:	2201      	movpl	r2, #1
 80a1b9a:	601a      	strpl	r2, [r3, #0]
 80a1b9c:	4b0e      	ldr	r3, [pc, #56]	; (80a1bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1b9e:	681a      	ldr	r2, [r3, #0]
 80a1ba0:	07d2      	lsls	r2, r2, #31
 80a1ba2:	bf5c      	itt	pl
 80a1ba4:	2201      	movpl	r2, #1
 80a1ba6:	601a      	strpl	r2, [r3, #0]
 80a1ba8:	4770      	bx	lr
 80a1baa:	bf00      	nop
 80a1bac:	20000940 	.word	0x20000940
 80a1bb0:	2000093c 	.word	0x2000093c
 80a1bb4:	20000938 	.word	0x20000938
 80a1bb8:	20000934 	.word	0x20000934
 80a1bbc:	20000930 	.word	0x20000930
 80a1bc0:	2000092c 	.word	0x2000092c
 80a1bc4:	20000928 	.word	0x20000928
 80a1bc8:	20000924 	.word	0x20000924
 80a1bcc:	20000920 	.word	0x20000920
 80a1bd0:	2000091c 	.word	0x2000091c
 80a1bd4:	20000918 	.word	0x20000918
 80a1bd8:	20000914 	.word	0x20000914

080a1bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1bdc:	4b18      	ldr	r3, [pc, #96]	; (80a1c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1bde:	681a      	ldr	r2, [r3, #0]
 80a1be0:	07d1      	lsls	r1, r2, #31
 80a1be2:	bf5c      	itt	pl
 80a1be4:	2201      	movpl	r2, #1
 80a1be6:	601a      	strpl	r2, [r3, #0]
 80a1be8:	4b16      	ldr	r3, [pc, #88]	; (80a1c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1bea:	681a      	ldr	r2, [r3, #0]
 80a1bec:	07d2      	lsls	r2, r2, #31
 80a1bee:	bf5c      	itt	pl
 80a1bf0:	2201      	movpl	r2, #1
 80a1bf2:	601a      	strpl	r2, [r3, #0]
 80a1bf4:	4b14      	ldr	r3, [pc, #80]	; (80a1c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1bf6:	681a      	ldr	r2, [r3, #0]
 80a1bf8:	07d0      	lsls	r0, r2, #31
 80a1bfa:	bf5c      	itt	pl
 80a1bfc:	2201      	movpl	r2, #1
 80a1bfe:	601a      	strpl	r2, [r3, #0]
 80a1c00:	4b12      	ldr	r3, [pc, #72]	; (80a1c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1c02:	681a      	ldr	r2, [r3, #0]
 80a1c04:	07d1      	lsls	r1, r2, #31
 80a1c06:	bf5c      	itt	pl
 80a1c08:	2201      	movpl	r2, #1
 80a1c0a:	601a      	strpl	r2, [r3, #0]
 80a1c0c:	4b10      	ldr	r3, [pc, #64]	; (80a1c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1c0e:	681a      	ldr	r2, [r3, #0]
 80a1c10:	07d2      	lsls	r2, r2, #31
 80a1c12:	bf5c      	itt	pl
 80a1c14:	2201      	movpl	r2, #1
 80a1c16:	601a      	strpl	r2, [r3, #0]
 80a1c18:	4b0e      	ldr	r3, [pc, #56]	; (80a1c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1c1a:	681a      	ldr	r2, [r3, #0]
 80a1c1c:	07d0      	lsls	r0, r2, #31
 80a1c1e:	bf5c      	itt	pl
 80a1c20:	2201      	movpl	r2, #1
 80a1c22:	601a      	strpl	r2, [r3, #0]
 80a1c24:	4b0c      	ldr	r3, [pc, #48]	; (80a1c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1c26:	681a      	ldr	r2, [r3, #0]
 80a1c28:	07d1      	lsls	r1, r2, #31
 80a1c2a:	bf5c      	itt	pl
 80a1c2c:	2201      	movpl	r2, #1
 80a1c2e:	601a      	strpl	r2, [r3, #0]
 80a1c30:	4b0a      	ldr	r3, [pc, #40]	; (80a1c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1c32:	681a      	ldr	r2, [r3, #0]
 80a1c34:	07d2      	lsls	r2, r2, #31
 80a1c36:	bf5c      	itt	pl
 80a1c38:	2201      	movpl	r2, #1
 80a1c3a:	601a      	strpl	r2, [r3, #0]
 80a1c3c:	4770      	bx	lr
 80a1c3e:	bf00      	nop
 80a1c40:	20000960 	.word	0x20000960
 80a1c44:	2000095c 	.word	0x2000095c
 80a1c48:	20000958 	.word	0x20000958
 80a1c4c:	20000954 	.word	0x20000954
 80a1c50:	20000950 	.word	0x20000950
 80a1c54:	2000094c 	.word	0x2000094c
 80a1c58:	20000948 	.word	0x20000948
 80a1c5c:	20000944 	.word	0x20000944

080a1c60 <__aeabi_drsub>:
 80a1c60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1c64:	e002      	b.n	80a1c6c <__adddf3>
 80a1c66:	bf00      	nop

080a1c68 <__aeabi_dsub>:
 80a1c68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1c6c <__adddf3>:
 80a1c6c:	b530      	push	{r4, r5, lr}
 80a1c6e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1c72:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1c76:	ea94 0f05 	teq	r4, r5
 80a1c7a:	bf08      	it	eq
 80a1c7c:	ea90 0f02 	teqeq	r0, r2
 80a1c80:	bf1f      	itttt	ne
 80a1c82:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1c86:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1c8a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1c8e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1c92:	f000 80e2 	beq.w	80a1e5a <__adddf3+0x1ee>
 80a1c96:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1c9a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1c9e:	bfb8      	it	lt
 80a1ca0:	426d      	neglt	r5, r5
 80a1ca2:	dd0c      	ble.n	80a1cbe <__adddf3+0x52>
 80a1ca4:	442c      	add	r4, r5
 80a1ca6:	ea80 0202 	eor.w	r2, r0, r2
 80a1caa:	ea81 0303 	eor.w	r3, r1, r3
 80a1cae:	ea82 0000 	eor.w	r0, r2, r0
 80a1cb2:	ea83 0101 	eor.w	r1, r3, r1
 80a1cb6:	ea80 0202 	eor.w	r2, r0, r2
 80a1cba:	ea81 0303 	eor.w	r3, r1, r3
 80a1cbe:	2d36      	cmp	r5, #54	; 0x36
 80a1cc0:	bf88      	it	hi
 80a1cc2:	bd30      	pophi	{r4, r5, pc}
 80a1cc4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1cc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1ccc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1cd0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1cd4:	d002      	beq.n	80a1cdc <__adddf3+0x70>
 80a1cd6:	4240      	negs	r0, r0
 80a1cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1cdc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1ce0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1ce4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1ce8:	d002      	beq.n	80a1cf0 <__adddf3+0x84>
 80a1cea:	4252      	negs	r2, r2
 80a1cec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1cf0:	ea94 0f05 	teq	r4, r5
 80a1cf4:	f000 80a7 	beq.w	80a1e46 <__adddf3+0x1da>
 80a1cf8:	f1a4 0401 	sub.w	r4, r4, #1
 80a1cfc:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1d00:	db0d      	blt.n	80a1d1e <__adddf3+0xb2>
 80a1d02:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1d06:	fa22 f205 	lsr.w	r2, r2, r5
 80a1d0a:	1880      	adds	r0, r0, r2
 80a1d0c:	f141 0100 	adc.w	r1, r1, #0
 80a1d10:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1d14:	1880      	adds	r0, r0, r2
 80a1d16:	fa43 f305 	asr.w	r3, r3, r5
 80a1d1a:	4159      	adcs	r1, r3
 80a1d1c:	e00e      	b.n	80a1d3c <__adddf3+0xd0>
 80a1d1e:	f1a5 0520 	sub.w	r5, r5, #32
 80a1d22:	f10e 0e20 	add.w	lr, lr, #32
 80a1d26:	2a01      	cmp	r2, #1
 80a1d28:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1d2c:	bf28      	it	cs
 80a1d2e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1d32:	fa43 f305 	asr.w	r3, r3, r5
 80a1d36:	18c0      	adds	r0, r0, r3
 80a1d38:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1d3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1d40:	d507      	bpl.n	80a1d52 <__adddf3+0xe6>
 80a1d42:	f04f 0e00 	mov.w	lr, #0
 80a1d46:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1d4a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1d4e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1d52:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1d56:	d31b      	bcc.n	80a1d90 <__adddf3+0x124>
 80a1d58:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1d5c:	d30c      	bcc.n	80a1d78 <__adddf3+0x10c>
 80a1d5e:	0849      	lsrs	r1, r1, #1
 80a1d60:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1d64:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1d68:	f104 0401 	add.w	r4, r4, #1
 80a1d6c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1d70:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1d74:	f080 809a 	bcs.w	80a1eac <__adddf3+0x240>
 80a1d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1d7c:	bf08      	it	eq
 80a1d7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1d82:	f150 0000 	adcs.w	r0, r0, #0
 80a1d86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1d8a:	ea41 0105 	orr.w	r1, r1, r5
 80a1d8e:	bd30      	pop	{r4, r5, pc}
 80a1d90:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1d94:	4140      	adcs	r0, r0
 80a1d96:	eb41 0101 	adc.w	r1, r1, r1
 80a1d9a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1d9e:	f1a4 0401 	sub.w	r4, r4, #1
 80a1da2:	d1e9      	bne.n	80a1d78 <__adddf3+0x10c>
 80a1da4:	f091 0f00 	teq	r1, #0
 80a1da8:	bf04      	itt	eq
 80a1daa:	4601      	moveq	r1, r0
 80a1dac:	2000      	moveq	r0, #0
 80a1dae:	fab1 f381 	clz	r3, r1
 80a1db2:	bf08      	it	eq
 80a1db4:	3320      	addeq	r3, #32
 80a1db6:	f1a3 030b 	sub.w	r3, r3, #11
 80a1dba:	f1b3 0220 	subs.w	r2, r3, #32
 80a1dbe:	da0c      	bge.n	80a1dda <__adddf3+0x16e>
 80a1dc0:	320c      	adds	r2, #12
 80a1dc2:	dd08      	ble.n	80a1dd6 <__adddf3+0x16a>
 80a1dc4:	f102 0c14 	add.w	ip, r2, #20
 80a1dc8:	f1c2 020c 	rsb	r2, r2, #12
 80a1dcc:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1dd0:	fa21 f102 	lsr.w	r1, r1, r2
 80a1dd4:	e00c      	b.n	80a1df0 <__adddf3+0x184>
 80a1dd6:	f102 0214 	add.w	r2, r2, #20
 80a1dda:	bfd8      	it	le
 80a1ddc:	f1c2 0c20 	rsble	ip, r2, #32
 80a1de0:	fa01 f102 	lsl.w	r1, r1, r2
 80a1de4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1de8:	bfdc      	itt	le
 80a1dea:	ea41 010c 	orrle.w	r1, r1, ip
 80a1dee:	4090      	lslle	r0, r2
 80a1df0:	1ae4      	subs	r4, r4, r3
 80a1df2:	bfa2      	ittt	ge
 80a1df4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1df8:	4329      	orrge	r1, r5
 80a1dfa:	bd30      	popge	{r4, r5, pc}
 80a1dfc:	ea6f 0404 	mvn.w	r4, r4
 80a1e00:	3c1f      	subs	r4, #31
 80a1e02:	da1c      	bge.n	80a1e3e <__adddf3+0x1d2>
 80a1e04:	340c      	adds	r4, #12
 80a1e06:	dc0e      	bgt.n	80a1e26 <__adddf3+0x1ba>
 80a1e08:	f104 0414 	add.w	r4, r4, #20
 80a1e0c:	f1c4 0220 	rsb	r2, r4, #32
 80a1e10:	fa20 f004 	lsr.w	r0, r0, r4
 80a1e14:	fa01 f302 	lsl.w	r3, r1, r2
 80a1e18:	ea40 0003 	orr.w	r0, r0, r3
 80a1e1c:	fa21 f304 	lsr.w	r3, r1, r4
 80a1e20:	ea45 0103 	orr.w	r1, r5, r3
 80a1e24:	bd30      	pop	{r4, r5, pc}
 80a1e26:	f1c4 040c 	rsb	r4, r4, #12
 80a1e2a:	f1c4 0220 	rsb	r2, r4, #32
 80a1e2e:	fa20 f002 	lsr.w	r0, r0, r2
 80a1e32:	fa01 f304 	lsl.w	r3, r1, r4
 80a1e36:	ea40 0003 	orr.w	r0, r0, r3
 80a1e3a:	4629      	mov	r1, r5
 80a1e3c:	bd30      	pop	{r4, r5, pc}
 80a1e3e:	fa21 f004 	lsr.w	r0, r1, r4
 80a1e42:	4629      	mov	r1, r5
 80a1e44:	bd30      	pop	{r4, r5, pc}
 80a1e46:	f094 0f00 	teq	r4, #0
 80a1e4a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1e4e:	bf06      	itte	eq
 80a1e50:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1e54:	3401      	addeq	r4, #1
 80a1e56:	3d01      	subne	r5, #1
 80a1e58:	e74e      	b.n	80a1cf8 <__adddf3+0x8c>
 80a1e5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1e5e:	bf18      	it	ne
 80a1e60:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1e64:	d029      	beq.n	80a1eba <__adddf3+0x24e>
 80a1e66:	ea94 0f05 	teq	r4, r5
 80a1e6a:	bf08      	it	eq
 80a1e6c:	ea90 0f02 	teqeq	r0, r2
 80a1e70:	d005      	beq.n	80a1e7e <__adddf3+0x212>
 80a1e72:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1e76:	bf04      	itt	eq
 80a1e78:	4619      	moveq	r1, r3
 80a1e7a:	4610      	moveq	r0, r2
 80a1e7c:	bd30      	pop	{r4, r5, pc}
 80a1e7e:	ea91 0f03 	teq	r1, r3
 80a1e82:	bf1e      	ittt	ne
 80a1e84:	2100      	movne	r1, #0
 80a1e86:	2000      	movne	r0, #0
 80a1e88:	bd30      	popne	{r4, r5, pc}
 80a1e8a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1e8e:	d105      	bne.n	80a1e9c <__adddf3+0x230>
 80a1e90:	0040      	lsls	r0, r0, #1
 80a1e92:	4149      	adcs	r1, r1
 80a1e94:	bf28      	it	cs
 80a1e96:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1e9a:	bd30      	pop	{r4, r5, pc}
 80a1e9c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1ea0:	bf3c      	itt	cc
 80a1ea2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1ea6:	bd30      	popcc	{r4, r5, pc}
 80a1ea8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1eac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1eb0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1eb4:	f04f 0000 	mov.w	r0, #0
 80a1eb8:	bd30      	pop	{r4, r5, pc}
 80a1eba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1ebe:	bf1a      	itte	ne
 80a1ec0:	4619      	movne	r1, r3
 80a1ec2:	4610      	movne	r0, r2
 80a1ec4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1ec8:	bf1c      	itt	ne
 80a1eca:	460b      	movne	r3, r1
 80a1ecc:	4602      	movne	r2, r0
 80a1ece:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1ed2:	bf06      	itte	eq
 80a1ed4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1ed8:	ea91 0f03 	teqeq	r1, r3
 80a1edc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1ee0:	bd30      	pop	{r4, r5, pc}
 80a1ee2:	bf00      	nop

080a1ee4 <__aeabi_ui2d>:
 80a1ee4:	f090 0f00 	teq	r0, #0
 80a1ee8:	bf04      	itt	eq
 80a1eea:	2100      	moveq	r1, #0
 80a1eec:	4770      	bxeq	lr
 80a1eee:	b530      	push	{r4, r5, lr}
 80a1ef0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1ef4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1ef8:	f04f 0500 	mov.w	r5, #0
 80a1efc:	f04f 0100 	mov.w	r1, #0
 80a1f00:	e750      	b.n	80a1da4 <__adddf3+0x138>
 80a1f02:	bf00      	nop

080a1f04 <__aeabi_i2d>:
 80a1f04:	f090 0f00 	teq	r0, #0
 80a1f08:	bf04      	itt	eq
 80a1f0a:	2100      	moveq	r1, #0
 80a1f0c:	4770      	bxeq	lr
 80a1f0e:	b530      	push	{r4, r5, lr}
 80a1f10:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1f14:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1f18:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1f1c:	bf48      	it	mi
 80a1f1e:	4240      	negmi	r0, r0
 80a1f20:	f04f 0100 	mov.w	r1, #0
 80a1f24:	e73e      	b.n	80a1da4 <__adddf3+0x138>
 80a1f26:	bf00      	nop

080a1f28 <__aeabi_f2d>:
 80a1f28:	0042      	lsls	r2, r0, #1
 80a1f2a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1f2e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1f32:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1f36:	bf1f      	itttt	ne
 80a1f38:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1f3c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1f40:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1f44:	4770      	bxne	lr
 80a1f46:	f092 0f00 	teq	r2, #0
 80a1f4a:	bf14      	ite	ne
 80a1f4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1f50:	4770      	bxeq	lr
 80a1f52:	b530      	push	{r4, r5, lr}
 80a1f54:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1f58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1f5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1f60:	e720      	b.n	80a1da4 <__adddf3+0x138>
 80a1f62:	bf00      	nop

080a1f64 <__aeabi_ul2d>:
 80a1f64:	ea50 0201 	orrs.w	r2, r0, r1
 80a1f68:	bf08      	it	eq
 80a1f6a:	4770      	bxeq	lr
 80a1f6c:	b530      	push	{r4, r5, lr}
 80a1f6e:	f04f 0500 	mov.w	r5, #0
 80a1f72:	e00a      	b.n	80a1f8a <__aeabi_l2d+0x16>

080a1f74 <__aeabi_l2d>:
 80a1f74:	ea50 0201 	orrs.w	r2, r0, r1
 80a1f78:	bf08      	it	eq
 80a1f7a:	4770      	bxeq	lr
 80a1f7c:	b530      	push	{r4, r5, lr}
 80a1f7e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1f82:	d502      	bpl.n	80a1f8a <__aeabi_l2d+0x16>
 80a1f84:	4240      	negs	r0, r0
 80a1f86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1f8a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1f8e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1f92:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1f96:	f43f aedc 	beq.w	80a1d52 <__adddf3+0xe6>
 80a1f9a:	f04f 0203 	mov.w	r2, #3
 80a1f9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1fa2:	bf18      	it	ne
 80a1fa4:	3203      	addne	r2, #3
 80a1fa6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1faa:	bf18      	it	ne
 80a1fac:	3203      	addne	r2, #3
 80a1fae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1fb2:	f1c2 0320 	rsb	r3, r2, #32
 80a1fb6:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1fba:	fa20 f002 	lsr.w	r0, r0, r2
 80a1fbe:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1fc2:	ea40 000e 	orr.w	r0, r0, lr
 80a1fc6:	fa21 f102 	lsr.w	r1, r1, r2
 80a1fca:	4414      	add	r4, r2
 80a1fcc:	e6c1      	b.n	80a1d52 <__adddf3+0xe6>
 80a1fce:	bf00      	nop

080a1fd0 <__aeabi_dmul>:
 80a1fd0:	b570      	push	{r4, r5, r6, lr}
 80a1fd2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1fd6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1fda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1fde:	bf1d      	ittte	ne
 80a1fe0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1fe4:	ea94 0f0c 	teqne	r4, ip
 80a1fe8:	ea95 0f0c 	teqne	r5, ip
 80a1fec:	f000 f8de 	bleq	80a21ac <__aeabi_dmul+0x1dc>
 80a1ff0:	442c      	add	r4, r5
 80a1ff2:	ea81 0603 	eor.w	r6, r1, r3
 80a1ff6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1ffa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1ffe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2002:	bf18      	it	ne
 80a2004:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2008:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a200c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2010:	d038      	beq.n	80a2084 <__aeabi_dmul+0xb4>
 80a2012:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2016:	f04f 0500 	mov.w	r5, #0
 80a201a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a201e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2022:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2026:	f04f 0600 	mov.w	r6, #0
 80a202a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a202e:	f09c 0f00 	teq	ip, #0
 80a2032:	bf18      	it	ne
 80a2034:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2038:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a203c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2040:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2044:	d204      	bcs.n	80a2050 <__aeabi_dmul+0x80>
 80a2046:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a204a:	416d      	adcs	r5, r5
 80a204c:	eb46 0606 	adc.w	r6, r6, r6
 80a2050:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2054:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2058:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a205c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2060:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2064:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2068:	bf88      	it	hi
 80a206a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a206e:	d81e      	bhi.n	80a20ae <__aeabi_dmul+0xde>
 80a2070:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2074:	bf08      	it	eq
 80a2076:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a207a:	f150 0000 	adcs.w	r0, r0, #0
 80a207e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2082:	bd70      	pop	{r4, r5, r6, pc}
 80a2084:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2088:	ea46 0101 	orr.w	r1, r6, r1
 80a208c:	ea40 0002 	orr.w	r0, r0, r2
 80a2090:	ea81 0103 	eor.w	r1, r1, r3
 80a2094:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2098:	bfc2      	ittt	gt
 80a209a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a209e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a20a2:	bd70      	popgt	{r4, r5, r6, pc}
 80a20a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a20a8:	f04f 0e00 	mov.w	lr, #0
 80a20ac:	3c01      	subs	r4, #1
 80a20ae:	f300 80ab 	bgt.w	80a2208 <__aeabi_dmul+0x238>
 80a20b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a20b6:	bfde      	ittt	le
 80a20b8:	2000      	movle	r0, #0
 80a20ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a20be:	bd70      	pople	{r4, r5, r6, pc}
 80a20c0:	f1c4 0400 	rsb	r4, r4, #0
 80a20c4:	3c20      	subs	r4, #32
 80a20c6:	da35      	bge.n	80a2134 <__aeabi_dmul+0x164>
 80a20c8:	340c      	adds	r4, #12
 80a20ca:	dc1b      	bgt.n	80a2104 <__aeabi_dmul+0x134>
 80a20cc:	f104 0414 	add.w	r4, r4, #20
 80a20d0:	f1c4 0520 	rsb	r5, r4, #32
 80a20d4:	fa00 f305 	lsl.w	r3, r0, r5
 80a20d8:	fa20 f004 	lsr.w	r0, r0, r4
 80a20dc:	fa01 f205 	lsl.w	r2, r1, r5
 80a20e0:	ea40 0002 	orr.w	r0, r0, r2
 80a20e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a20e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a20ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a20f0:	fa21 f604 	lsr.w	r6, r1, r4
 80a20f4:	eb42 0106 	adc.w	r1, r2, r6
 80a20f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a20fc:	bf08      	it	eq
 80a20fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2102:	bd70      	pop	{r4, r5, r6, pc}
 80a2104:	f1c4 040c 	rsb	r4, r4, #12
 80a2108:	f1c4 0520 	rsb	r5, r4, #32
 80a210c:	fa00 f304 	lsl.w	r3, r0, r4
 80a2110:	fa20 f005 	lsr.w	r0, r0, r5
 80a2114:	fa01 f204 	lsl.w	r2, r1, r4
 80a2118:	ea40 0002 	orr.w	r0, r0, r2
 80a211c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2120:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2124:	f141 0100 	adc.w	r1, r1, #0
 80a2128:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a212c:	bf08      	it	eq
 80a212e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2132:	bd70      	pop	{r4, r5, r6, pc}
 80a2134:	f1c4 0520 	rsb	r5, r4, #32
 80a2138:	fa00 f205 	lsl.w	r2, r0, r5
 80a213c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2140:	fa20 f304 	lsr.w	r3, r0, r4
 80a2144:	fa01 f205 	lsl.w	r2, r1, r5
 80a2148:	ea43 0302 	orr.w	r3, r3, r2
 80a214c:	fa21 f004 	lsr.w	r0, r1, r4
 80a2150:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2154:	fa21 f204 	lsr.w	r2, r1, r4
 80a2158:	ea20 0002 	bic.w	r0, r0, r2
 80a215c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2160:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2164:	bf08      	it	eq
 80a2166:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a216a:	bd70      	pop	{r4, r5, r6, pc}
 80a216c:	f094 0f00 	teq	r4, #0
 80a2170:	d10f      	bne.n	80a2192 <__aeabi_dmul+0x1c2>
 80a2172:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2176:	0040      	lsls	r0, r0, #1
 80a2178:	eb41 0101 	adc.w	r1, r1, r1
 80a217c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2180:	bf08      	it	eq
 80a2182:	3c01      	subeq	r4, #1
 80a2184:	d0f7      	beq.n	80a2176 <__aeabi_dmul+0x1a6>
 80a2186:	ea41 0106 	orr.w	r1, r1, r6
 80a218a:	f095 0f00 	teq	r5, #0
 80a218e:	bf18      	it	ne
 80a2190:	4770      	bxne	lr
 80a2192:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2196:	0052      	lsls	r2, r2, #1
 80a2198:	eb43 0303 	adc.w	r3, r3, r3
 80a219c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a21a0:	bf08      	it	eq
 80a21a2:	3d01      	subeq	r5, #1
 80a21a4:	d0f7      	beq.n	80a2196 <__aeabi_dmul+0x1c6>
 80a21a6:	ea43 0306 	orr.w	r3, r3, r6
 80a21aa:	4770      	bx	lr
 80a21ac:	ea94 0f0c 	teq	r4, ip
 80a21b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a21b4:	bf18      	it	ne
 80a21b6:	ea95 0f0c 	teqne	r5, ip
 80a21ba:	d00c      	beq.n	80a21d6 <__aeabi_dmul+0x206>
 80a21bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a21c0:	bf18      	it	ne
 80a21c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a21c6:	d1d1      	bne.n	80a216c <__aeabi_dmul+0x19c>
 80a21c8:	ea81 0103 	eor.w	r1, r1, r3
 80a21cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a21d0:	f04f 0000 	mov.w	r0, #0
 80a21d4:	bd70      	pop	{r4, r5, r6, pc}
 80a21d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a21da:	bf06      	itte	eq
 80a21dc:	4610      	moveq	r0, r2
 80a21de:	4619      	moveq	r1, r3
 80a21e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a21e4:	d019      	beq.n	80a221a <__aeabi_dmul+0x24a>
 80a21e6:	ea94 0f0c 	teq	r4, ip
 80a21ea:	d102      	bne.n	80a21f2 <__aeabi_dmul+0x222>
 80a21ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a21f0:	d113      	bne.n	80a221a <__aeabi_dmul+0x24a>
 80a21f2:	ea95 0f0c 	teq	r5, ip
 80a21f6:	d105      	bne.n	80a2204 <__aeabi_dmul+0x234>
 80a21f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a21fc:	bf1c      	itt	ne
 80a21fe:	4610      	movne	r0, r2
 80a2200:	4619      	movne	r1, r3
 80a2202:	d10a      	bne.n	80a221a <__aeabi_dmul+0x24a>
 80a2204:	ea81 0103 	eor.w	r1, r1, r3
 80a2208:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a220c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2210:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2214:	f04f 0000 	mov.w	r0, #0
 80a2218:	bd70      	pop	{r4, r5, r6, pc}
 80a221a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a221e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2222:	bd70      	pop	{r4, r5, r6, pc}

080a2224 <__aeabi_ddiv>:
 80a2224:	b570      	push	{r4, r5, r6, lr}
 80a2226:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a222a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a222e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2232:	bf1d      	ittte	ne
 80a2234:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2238:	ea94 0f0c 	teqne	r4, ip
 80a223c:	ea95 0f0c 	teqne	r5, ip
 80a2240:	f000 f8a7 	bleq	80a2392 <__aeabi_ddiv+0x16e>
 80a2244:	eba4 0405 	sub.w	r4, r4, r5
 80a2248:	ea81 0e03 	eor.w	lr, r1, r3
 80a224c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2254:	f000 8088 	beq.w	80a2368 <__aeabi_ddiv+0x144>
 80a2258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a225c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2260:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2264:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2268:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a226c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2270:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2274:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2278:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a227c:	429d      	cmp	r5, r3
 80a227e:	bf08      	it	eq
 80a2280:	4296      	cmpeq	r6, r2
 80a2282:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2286:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a228a:	d202      	bcs.n	80a2292 <__aeabi_ddiv+0x6e>
 80a228c:	085b      	lsrs	r3, r3, #1
 80a228e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2292:	1ab6      	subs	r6, r6, r2
 80a2294:	eb65 0503 	sbc.w	r5, r5, r3
 80a2298:	085b      	lsrs	r3, r3, #1
 80a229a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a229e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a22a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a22a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a22aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a22ae:	bf22      	ittt	cs
 80a22b0:	1ab6      	subcs	r6, r6, r2
 80a22b2:	4675      	movcs	r5, lr
 80a22b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a22b8:	085b      	lsrs	r3, r3, #1
 80a22ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80a22be:	ebb6 0e02 	subs.w	lr, r6, r2
 80a22c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a22c6:	bf22      	ittt	cs
 80a22c8:	1ab6      	subcs	r6, r6, r2
 80a22ca:	4675      	movcs	r5, lr
 80a22cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a22d0:	085b      	lsrs	r3, r3, #1
 80a22d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a22d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a22da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a22de:	bf22      	ittt	cs
 80a22e0:	1ab6      	subcs	r6, r6, r2
 80a22e2:	4675      	movcs	r5, lr
 80a22e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a22e8:	085b      	lsrs	r3, r3, #1
 80a22ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80a22ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80a22f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a22f6:	bf22      	ittt	cs
 80a22f8:	1ab6      	subcs	r6, r6, r2
 80a22fa:	4675      	movcs	r5, lr
 80a22fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2300:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2304:	d018      	beq.n	80a2338 <__aeabi_ddiv+0x114>
 80a2306:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a230a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a230e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2312:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2316:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a231a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a231e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2322:	d1c0      	bne.n	80a22a6 <__aeabi_ddiv+0x82>
 80a2324:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2328:	d10b      	bne.n	80a2342 <__aeabi_ddiv+0x11e>
 80a232a:	ea41 0100 	orr.w	r1, r1, r0
 80a232e:	f04f 0000 	mov.w	r0, #0
 80a2332:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2336:	e7b6      	b.n	80a22a6 <__aeabi_ddiv+0x82>
 80a2338:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a233c:	bf04      	itt	eq
 80a233e:	4301      	orreq	r1, r0
 80a2340:	2000      	moveq	r0, #0
 80a2342:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2346:	bf88      	it	hi
 80a2348:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a234c:	f63f aeaf 	bhi.w	80a20ae <__aeabi_dmul+0xde>
 80a2350:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2354:	bf04      	itt	eq
 80a2356:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a235a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a235e:	f150 0000 	adcs.w	r0, r0, #0
 80a2362:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2366:	bd70      	pop	{r4, r5, r6, pc}
 80a2368:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a236c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2370:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2374:	bfc2      	ittt	gt
 80a2376:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a237a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a237e:	bd70      	popgt	{r4, r5, r6, pc}
 80a2380:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2384:	f04f 0e00 	mov.w	lr, #0
 80a2388:	3c01      	subs	r4, #1
 80a238a:	e690      	b.n	80a20ae <__aeabi_dmul+0xde>
 80a238c:	ea45 0e06 	orr.w	lr, r5, r6
 80a2390:	e68d      	b.n	80a20ae <__aeabi_dmul+0xde>
 80a2392:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2396:	ea94 0f0c 	teq	r4, ip
 80a239a:	bf08      	it	eq
 80a239c:	ea95 0f0c 	teqeq	r5, ip
 80a23a0:	f43f af3b 	beq.w	80a221a <__aeabi_dmul+0x24a>
 80a23a4:	ea94 0f0c 	teq	r4, ip
 80a23a8:	d10a      	bne.n	80a23c0 <__aeabi_ddiv+0x19c>
 80a23aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a23ae:	f47f af34 	bne.w	80a221a <__aeabi_dmul+0x24a>
 80a23b2:	ea95 0f0c 	teq	r5, ip
 80a23b6:	f47f af25 	bne.w	80a2204 <__aeabi_dmul+0x234>
 80a23ba:	4610      	mov	r0, r2
 80a23bc:	4619      	mov	r1, r3
 80a23be:	e72c      	b.n	80a221a <__aeabi_dmul+0x24a>
 80a23c0:	ea95 0f0c 	teq	r5, ip
 80a23c4:	d106      	bne.n	80a23d4 <__aeabi_ddiv+0x1b0>
 80a23c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a23ca:	f43f aefd 	beq.w	80a21c8 <__aeabi_dmul+0x1f8>
 80a23ce:	4610      	mov	r0, r2
 80a23d0:	4619      	mov	r1, r3
 80a23d2:	e722      	b.n	80a221a <__aeabi_dmul+0x24a>
 80a23d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a23d8:	bf18      	it	ne
 80a23da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a23de:	f47f aec5 	bne.w	80a216c <__aeabi_dmul+0x19c>
 80a23e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a23e6:	f47f af0d 	bne.w	80a2204 <__aeabi_dmul+0x234>
 80a23ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a23ee:	f47f aeeb 	bne.w	80a21c8 <__aeabi_dmul+0x1f8>
 80a23f2:	e712      	b.n	80a221a <__aeabi_dmul+0x24a>

080a23f4 <__gedf2>:
 80a23f4:	f04f 3cff 	mov.w	ip, #4294967295
 80a23f8:	e006      	b.n	80a2408 <__cmpdf2+0x4>
 80a23fa:	bf00      	nop

080a23fc <__ledf2>:
 80a23fc:	f04f 0c01 	mov.w	ip, #1
 80a2400:	e002      	b.n	80a2408 <__cmpdf2+0x4>
 80a2402:	bf00      	nop

080a2404 <__cmpdf2>:
 80a2404:	f04f 0c01 	mov.w	ip, #1
 80a2408:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a240c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2410:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2414:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2418:	bf18      	it	ne
 80a241a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a241e:	d01b      	beq.n	80a2458 <__cmpdf2+0x54>
 80a2420:	b001      	add	sp, #4
 80a2422:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2426:	bf0c      	ite	eq
 80a2428:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a242c:	ea91 0f03 	teqne	r1, r3
 80a2430:	bf02      	ittt	eq
 80a2432:	ea90 0f02 	teqeq	r0, r2
 80a2436:	2000      	moveq	r0, #0
 80a2438:	4770      	bxeq	lr
 80a243a:	f110 0f00 	cmn.w	r0, #0
 80a243e:	ea91 0f03 	teq	r1, r3
 80a2442:	bf58      	it	pl
 80a2444:	4299      	cmppl	r1, r3
 80a2446:	bf08      	it	eq
 80a2448:	4290      	cmpeq	r0, r2
 80a244a:	bf2c      	ite	cs
 80a244c:	17d8      	asrcs	r0, r3, #31
 80a244e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2452:	f040 0001 	orr.w	r0, r0, #1
 80a2456:	4770      	bx	lr
 80a2458:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a245c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2460:	d102      	bne.n	80a2468 <__cmpdf2+0x64>
 80a2462:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2466:	d107      	bne.n	80a2478 <__cmpdf2+0x74>
 80a2468:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a246c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2470:	d1d6      	bne.n	80a2420 <__cmpdf2+0x1c>
 80a2472:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2476:	d0d3      	beq.n	80a2420 <__cmpdf2+0x1c>
 80a2478:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a247c:	4770      	bx	lr
 80a247e:	bf00      	nop

080a2480 <__aeabi_cdrcmple>:
 80a2480:	4684      	mov	ip, r0
 80a2482:	4610      	mov	r0, r2
 80a2484:	4662      	mov	r2, ip
 80a2486:	468c      	mov	ip, r1
 80a2488:	4619      	mov	r1, r3
 80a248a:	4663      	mov	r3, ip
 80a248c:	e000      	b.n	80a2490 <__aeabi_cdcmpeq>
 80a248e:	bf00      	nop

080a2490 <__aeabi_cdcmpeq>:
 80a2490:	b501      	push	{r0, lr}
 80a2492:	f7ff ffb7 	bl	80a2404 <__cmpdf2>
 80a2496:	2800      	cmp	r0, #0
 80a2498:	bf48      	it	mi
 80a249a:	f110 0f00 	cmnmi.w	r0, #0
 80a249e:	bd01      	pop	{r0, pc}

080a24a0 <__aeabi_dcmpeq>:
 80a24a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a24a4:	f7ff fff4 	bl	80a2490 <__aeabi_cdcmpeq>
 80a24a8:	bf0c      	ite	eq
 80a24aa:	2001      	moveq	r0, #1
 80a24ac:	2000      	movne	r0, #0
 80a24ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80a24b2:	bf00      	nop

080a24b4 <__aeabi_dcmplt>:
 80a24b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a24b8:	f7ff ffea 	bl	80a2490 <__aeabi_cdcmpeq>
 80a24bc:	bf34      	ite	cc
 80a24be:	2001      	movcc	r0, #1
 80a24c0:	2000      	movcs	r0, #0
 80a24c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a24c6:	bf00      	nop

080a24c8 <__aeabi_dcmple>:
 80a24c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a24cc:	f7ff ffe0 	bl	80a2490 <__aeabi_cdcmpeq>
 80a24d0:	bf94      	ite	ls
 80a24d2:	2001      	movls	r0, #1
 80a24d4:	2000      	movhi	r0, #0
 80a24d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a24da:	bf00      	nop

080a24dc <__aeabi_dcmpge>:
 80a24dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a24e0:	f7ff ffce 	bl	80a2480 <__aeabi_cdrcmple>
 80a24e4:	bf94      	ite	ls
 80a24e6:	2001      	movls	r0, #1
 80a24e8:	2000      	movhi	r0, #0
 80a24ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80a24ee:	bf00      	nop

080a24f0 <__aeabi_dcmpgt>:
 80a24f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a24f4:	f7ff ffc4 	bl	80a2480 <__aeabi_cdrcmple>
 80a24f8:	bf34      	ite	cc
 80a24fa:	2001      	movcc	r0, #1
 80a24fc:	2000      	movcs	r0, #0
 80a24fe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2502:	bf00      	nop

080a2504 <__aeabi_dcmpun>:
 80a2504:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2508:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a250c:	d102      	bne.n	80a2514 <__aeabi_dcmpun+0x10>
 80a250e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2512:	d10a      	bne.n	80a252a <__aeabi_dcmpun+0x26>
 80a2514:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2518:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a251c:	d102      	bne.n	80a2524 <__aeabi_dcmpun+0x20>
 80a251e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2522:	d102      	bne.n	80a252a <__aeabi_dcmpun+0x26>
 80a2524:	f04f 0000 	mov.w	r0, #0
 80a2528:	4770      	bx	lr
 80a252a:	f04f 0001 	mov.w	r0, #1
 80a252e:	4770      	bx	lr

080a2530 <__aeabi_d2iz>:
 80a2530:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2534:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2538:	d215      	bcs.n	80a2566 <__aeabi_d2iz+0x36>
 80a253a:	d511      	bpl.n	80a2560 <__aeabi_d2iz+0x30>
 80a253c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2540:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2544:	d912      	bls.n	80a256c <__aeabi_d2iz+0x3c>
 80a2546:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a254a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a254e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2552:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2556:	fa23 f002 	lsr.w	r0, r3, r2
 80a255a:	bf18      	it	ne
 80a255c:	4240      	negne	r0, r0
 80a255e:	4770      	bx	lr
 80a2560:	f04f 0000 	mov.w	r0, #0
 80a2564:	4770      	bx	lr
 80a2566:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a256a:	d105      	bne.n	80a2578 <__aeabi_d2iz+0x48>
 80a256c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a2570:	bf08      	it	eq
 80a2572:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a2576:	4770      	bx	lr
 80a2578:	f04f 0000 	mov.w	r0, #0
 80a257c:	4770      	bx	lr
 80a257e:	bf00      	nop

080a2580 <__aeabi_d2uiz>:
 80a2580:	004a      	lsls	r2, r1, #1
 80a2582:	d211      	bcs.n	80a25a8 <__aeabi_d2uiz+0x28>
 80a2584:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2588:	d211      	bcs.n	80a25ae <__aeabi_d2uiz+0x2e>
 80a258a:	d50d      	bpl.n	80a25a8 <__aeabi_d2uiz+0x28>
 80a258c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2590:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2594:	d40e      	bmi.n	80a25b4 <__aeabi_d2uiz+0x34>
 80a2596:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a259a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a259e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a25a2:	fa23 f002 	lsr.w	r0, r3, r2
 80a25a6:	4770      	bx	lr
 80a25a8:	f04f 0000 	mov.w	r0, #0
 80a25ac:	4770      	bx	lr
 80a25ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a25b2:	d102      	bne.n	80a25ba <__aeabi_d2uiz+0x3a>
 80a25b4:	f04f 30ff 	mov.w	r0, #4294967295
 80a25b8:	4770      	bx	lr
 80a25ba:	f04f 0000 	mov.w	r0, #0
 80a25be:	4770      	bx	lr

080a25c0 <__aeabi_d2f>:
 80a25c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a25c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a25c8:	bf24      	itt	cs
 80a25ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a25ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a25d2:	d90d      	bls.n	80a25f0 <__aeabi_d2f+0x30>
 80a25d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a25d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a25dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a25e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a25e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a25e8:	bf08      	it	eq
 80a25ea:	f020 0001 	biceq.w	r0, r0, #1
 80a25ee:	4770      	bx	lr
 80a25f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a25f4:	d121      	bne.n	80a263a <__aeabi_d2f+0x7a>
 80a25f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a25fa:	bfbc      	itt	lt
 80a25fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a2600:	4770      	bxlt	lr
 80a2602:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2606:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a260a:	f1c2 0218 	rsb	r2, r2, #24
 80a260e:	f1c2 0c20 	rsb	ip, r2, #32
 80a2612:	fa10 f30c 	lsls.w	r3, r0, ip
 80a2616:	fa20 f002 	lsr.w	r0, r0, r2
 80a261a:	bf18      	it	ne
 80a261c:	f040 0001 	orrne.w	r0, r0, #1
 80a2620:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2624:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a2628:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a262c:	ea40 000c 	orr.w	r0, r0, ip
 80a2630:	fa23 f302 	lsr.w	r3, r3, r2
 80a2634:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a2638:	e7cc      	b.n	80a25d4 <__aeabi_d2f+0x14>
 80a263a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a263e:	d107      	bne.n	80a2650 <__aeabi_d2f+0x90>
 80a2640:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a2644:	bf1e      	ittt	ne
 80a2646:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a264a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a264e:	4770      	bxne	lr
 80a2650:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a2654:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2658:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a265c:	4770      	bx	lr
 80a265e:	bf00      	nop

080a2660 <__aeabi_frsub>:
 80a2660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a2664:	e002      	b.n	80a266c <__addsf3>
 80a2666:	bf00      	nop

080a2668 <__aeabi_fsub>:
 80a2668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a266c <__addsf3>:
 80a266c:	0042      	lsls	r2, r0, #1
 80a266e:	bf1f      	itttt	ne
 80a2670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a2674:	ea92 0f03 	teqne	r2, r3
 80a2678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a267c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2680:	d06a      	beq.n	80a2758 <__addsf3+0xec>
 80a2682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a2686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a268a:	bfc1      	itttt	gt
 80a268c:	18d2      	addgt	r2, r2, r3
 80a268e:	4041      	eorgt	r1, r0
 80a2690:	4048      	eorgt	r0, r1
 80a2692:	4041      	eorgt	r1, r0
 80a2694:	bfb8      	it	lt
 80a2696:	425b      	neglt	r3, r3
 80a2698:	2b19      	cmp	r3, #25
 80a269a:	bf88      	it	hi
 80a269c:	4770      	bxhi	lr
 80a269e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a26a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a26a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a26aa:	bf18      	it	ne
 80a26ac:	4240      	negne	r0, r0
 80a26ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a26b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a26b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a26ba:	bf18      	it	ne
 80a26bc:	4249      	negne	r1, r1
 80a26be:	ea92 0f03 	teq	r2, r3
 80a26c2:	d03f      	beq.n	80a2744 <__addsf3+0xd8>
 80a26c4:	f1a2 0201 	sub.w	r2, r2, #1
 80a26c8:	fa41 fc03 	asr.w	ip, r1, r3
 80a26cc:	eb10 000c 	adds.w	r0, r0, ip
 80a26d0:	f1c3 0320 	rsb	r3, r3, #32
 80a26d4:	fa01 f103 	lsl.w	r1, r1, r3
 80a26d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a26dc:	d502      	bpl.n	80a26e4 <__addsf3+0x78>
 80a26de:	4249      	negs	r1, r1
 80a26e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a26e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a26e8:	d313      	bcc.n	80a2712 <__addsf3+0xa6>
 80a26ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a26ee:	d306      	bcc.n	80a26fe <__addsf3+0x92>
 80a26f0:	0840      	lsrs	r0, r0, #1
 80a26f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a26f6:	f102 0201 	add.w	r2, r2, #1
 80a26fa:	2afe      	cmp	r2, #254	; 0xfe
 80a26fc:	d251      	bcs.n	80a27a2 <__addsf3+0x136>
 80a26fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a2702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2706:	bf08      	it	eq
 80a2708:	f020 0001 	biceq.w	r0, r0, #1
 80a270c:	ea40 0003 	orr.w	r0, r0, r3
 80a2710:	4770      	bx	lr
 80a2712:	0049      	lsls	r1, r1, #1
 80a2714:	eb40 0000 	adc.w	r0, r0, r0
 80a2718:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a271c:	f1a2 0201 	sub.w	r2, r2, #1
 80a2720:	d1ed      	bne.n	80a26fe <__addsf3+0x92>
 80a2722:	fab0 fc80 	clz	ip, r0
 80a2726:	f1ac 0c08 	sub.w	ip, ip, #8
 80a272a:	ebb2 020c 	subs.w	r2, r2, ip
 80a272e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a2732:	bfaa      	itet	ge
 80a2734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2738:	4252      	neglt	r2, r2
 80a273a:	4318      	orrge	r0, r3
 80a273c:	bfbc      	itt	lt
 80a273e:	40d0      	lsrlt	r0, r2
 80a2740:	4318      	orrlt	r0, r3
 80a2742:	4770      	bx	lr
 80a2744:	f092 0f00 	teq	r2, #0
 80a2748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a274c:	bf06      	itte	eq
 80a274e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a2752:	3201      	addeq	r2, #1
 80a2754:	3b01      	subne	r3, #1
 80a2756:	e7b5      	b.n	80a26c4 <__addsf3+0x58>
 80a2758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a275c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2760:	bf18      	it	ne
 80a2762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2766:	d021      	beq.n	80a27ac <__addsf3+0x140>
 80a2768:	ea92 0f03 	teq	r2, r3
 80a276c:	d004      	beq.n	80a2778 <__addsf3+0x10c>
 80a276e:	f092 0f00 	teq	r2, #0
 80a2772:	bf08      	it	eq
 80a2774:	4608      	moveq	r0, r1
 80a2776:	4770      	bx	lr
 80a2778:	ea90 0f01 	teq	r0, r1
 80a277c:	bf1c      	itt	ne
 80a277e:	2000      	movne	r0, #0
 80a2780:	4770      	bxne	lr
 80a2782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a2786:	d104      	bne.n	80a2792 <__addsf3+0x126>
 80a2788:	0040      	lsls	r0, r0, #1
 80a278a:	bf28      	it	cs
 80a278c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a2790:	4770      	bx	lr
 80a2792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a2796:	bf3c      	itt	cc
 80a2798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a279c:	4770      	bxcc	lr
 80a279e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a27a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a27a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a27aa:	4770      	bx	lr
 80a27ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a27b0:	bf16      	itet	ne
 80a27b2:	4608      	movne	r0, r1
 80a27b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a27b8:	4601      	movne	r1, r0
 80a27ba:	0242      	lsls	r2, r0, #9
 80a27bc:	bf06      	itte	eq
 80a27be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a27c2:	ea90 0f01 	teqeq	r0, r1
 80a27c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a27ca:	4770      	bx	lr

080a27cc <__aeabi_ui2f>:
 80a27cc:	f04f 0300 	mov.w	r3, #0
 80a27d0:	e004      	b.n	80a27dc <__aeabi_i2f+0x8>
 80a27d2:	bf00      	nop

080a27d4 <__aeabi_i2f>:
 80a27d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a27d8:	bf48      	it	mi
 80a27da:	4240      	negmi	r0, r0
 80a27dc:	ea5f 0c00 	movs.w	ip, r0
 80a27e0:	bf08      	it	eq
 80a27e2:	4770      	bxeq	lr
 80a27e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a27e8:	4601      	mov	r1, r0
 80a27ea:	f04f 0000 	mov.w	r0, #0
 80a27ee:	e01c      	b.n	80a282a <__aeabi_l2f+0x2a>

080a27f0 <__aeabi_ul2f>:
 80a27f0:	ea50 0201 	orrs.w	r2, r0, r1
 80a27f4:	bf08      	it	eq
 80a27f6:	4770      	bxeq	lr
 80a27f8:	f04f 0300 	mov.w	r3, #0
 80a27fc:	e00a      	b.n	80a2814 <__aeabi_l2f+0x14>
 80a27fe:	bf00      	nop

080a2800 <__aeabi_l2f>:
 80a2800:	ea50 0201 	orrs.w	r2, r0, r1
 80a2804:	bf08      	it	eq
 80a2806:	4770      	bxeq	lr
 80a2808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a280c:	d502      	bpl.n	80a2814 <__aeabi_l2f+0x14>
 80a280e:	4240      	negs	r0, r0
 80a2810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2814:	ea5f 0c01 	movs.w	ip, r1
 80a2818:	bf02      	ittt	eq
 80a281a:	4684      	moveq	ip, r0
 80a281c:	4601      	moveq	r1, r0
 80a281e:	2000      	moveq	r0, #0
 80a2820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2824:	bf08      	it	eq
 80a2826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a282a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a282e:	fabc f28c 	clz	r2, ip
 80a2832:	3a08      	subs	r2, #8
 80a2834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2838:	db10      	blt.n	80a285c <__aeabi_l2f+0x5c>
 80a283a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a283e:	4463      	add	r3, ip
 80a2840:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2844:	f1c2 0220 	rsb	r2, r2, #32
 80a2848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a284c:	fa20 f202 	lsr.w	r2, r0, r2
 80a2850:	eb43 0002 	adc.w	r0, r3, r2
 80a2854:	bf08      	it	eq
 80a2856:	f020 0001 	biceq.w	r0, r0, #1
 80a285a:	4770      	bx	lr
 80a285c:	f102 0220 	add.w	r2, r2, #32
 80a2860:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2864:	f1c2 0220 	rsb	r2, r2, #32
 80a2868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a286c:	fa21 f202 	lsr.w	r2, r1, r2
 80a2870:	eb43 0002 	adc.w	r0, r3, r2
 80a2874:	bf08      	it	eq
 80a2876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a287a:	4770      	bx	lr

080a287c <__aeabi_fmul>:
 80a287c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2884:	bf1e      	ittt	ne
 80a2886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a288a:	ea92 0f0c 	teqne	r2, ip
 80a288e:	ea93 0f0c 	teqne	r3, ip
 80a2892:	d06f      	beq.n	80a2974 <__aeabi_fmul+0xf8>
 80a2894:	441a      	add	r2, r3
 80a2896:	ea80 0c01 	eor.w	ip, r0, r1
 80a289a:	0240      	lsls	r0, r0, #9
 80a289c:	bf18      	it	ne
 80a289e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a28a2:	d01e      	beq.n	80a28e2 <__aeabi_fmul+0x66>
 80a28a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a28a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a28ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a28b0:	fba0 3101 	umull	r3, r1, r0, r1
 80a28b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a28b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a28bc:	bf3e      	ittt	cc
 80a28be:	0049      	lslcc	r1, r1, #1
 80a28c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a28c4:	005b      	lslcc	r3, r3, #1
 80a28c6:	ea40 0001 	orr.w	r0, r0, r1
 80a28ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a28ce:	2afd      	cmp	r2, #253	; 0xfd
 80a28d0:	d81d      	bhi.n	80a290e <__aeabi_fmul+0x92>
 80a28d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a28d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a28da:	bf08      	it	eq
 80a28dc:	f020 0001 	biceq.w	r0, r0, #1
 80a28e0:	4770      	bx	lr
 80a28e2:	f090 0f00 	teq	r0, #0
 80a28e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a28ea:	bf08      	it	eq
 80a28ec:	0249      	lsleq	r1, r1, #9
 80a28ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a28f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a28f6:	3a7f      	subs	r2, #127	; 0x7f
 80a28f8:	bfc2      	ittt	gt
 80a28fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a28fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2902:	4770      	bxgt	lr
 80a2904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2908:	f04f 0300 	mov.w	r3, #0
 80a290c:	3a01      	subs	r2, #1
 80a290e:	dc5d      	bgt.n	80a29cc <__aeabi_fmul+0x150>
 80a2910:	f112 0f19 	cmn.w	r2, #25
 80a2914:	bfdc      	itt	le
 80a2916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a291a:	4770      	bxle	lr
 80a291c:	f1c2 0200 	rsb	r2, r2, #0
 80a2920:	0041      	lsls	r1, r0, #1
 80a2922:	fa21 f102 	lsr.w	r1, r1, r2
 80a2926:	f1c2 0220 	rsb	r2, r2, #32
 80a292a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a292e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a2932:	f140 0000 	adc.w	r0, r0, #0
 80a2936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a293a:	bf08      	it	eq
 80a293c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2940:	4770      	bx	lr
 80a2942:	f092 0f00 	teq	r2, #0
 80a2946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a294a:	bf02      	ittt	eq
 80a294c:	0040      	lsleq	r0, r0, #1
 80a294e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2952:	3a01      	subeq	r2, #1
 80a2954:	d0f9      	beq.n	80a294a <__aeabi_fmul+0xce>
 80a2956:	ea40 000c 	orr.w	r0, r0, ip
 80a295a:	f093 0f00 	teq	r3, #0
 80a295e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2962:	bf02      	ittt	eq
 80a2964:	0049      	lsleq	r1, r1, #1
 80a2966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a296a:	3b01      	subeq	r3, #1
 80a296c:	d0f9      	beq.n	80a2962 <__aeabi_fmul+0xe6>
 80a296e:	ea41 010c 	orr.w	r1, r1, ip
 80a2972:	e78f      	b.n	80a2894 <__aeabi_fmul+0x18>
 80a2974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2978:	ea92 0f0c 	teq	r2, ip
 80a297c:	bf18      	it	ne
 80a297e:	ea93 0f0c 	teqne	r3, ip
 80a2982:	d00a      	beq.n	80a299a <__aeabi_fmul+0x11e>
 80a2984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2988:	bf18      	it	ne
 80a298a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a298e:	d1d8      	bne.n	80a2942 <__aeabi_fmul+0xc6>
 80a2990:	ea80 0001 	eor.w	r0, r0, r1
 80a2994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2998:	4770      	bx	lr
 80a299a:	f090 0f00 	teq	r0, #0
 80a299e:	bf17      	itett	ne
 80a29a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a29a4:	4608      	moveq	r0, r1
 80a29a6:	f091 0f00 	teqne	r1, #0
 80a29aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a29ae:	d014      	beq.n	80a29da <__aeabi_fmul+0x15e>
 80a29b0:	ea92 0f0c 	teq	r2, ip
 80a29b4:	d101      	bne.n	80a29ba <__aeabi_fmul+0x13e>
 80a29b6:	0242      	lsls	r2, r0, #9
 80a29b8:	d10f      	bne.n	80a29da <__aeabi_fmul+0x15e>
 80a29ba:	ea93 0f0c 	teq	r3, ip
 80a29be:	d103      	bne.n	80a29c8 <__aeabi_fmul+0x14c>
 80a29c0:	024b      	lsls	r3, r1, #9
 80a29c2:	bf18      	it	ne
 80a29c4:	4608      	movne	r0, r1
 80a29c6:	d108      	bne.n	80a29da <__aeabi_fmul+0x15e>
 80a29c8:	ea80 0001 	eor.w	r0, r0, r1
 80a29cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a29d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a29d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a29d8:	4770      	bx	lr
 80a29da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a29de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a29e2:	4770      	bx	lr

080a29e4 <__aeabi_fdiv>:
 80a29e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a29e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a29ec:	bf1e      	ittt	ne
 80a29ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a29f2:	ea92 0f0c 	teqne	r2, ip
 80a29f6:	ea93 0f0c 	teqne	r3, ip
 80a29fa:	d069      	beq.n	80a2ad0 <__aeabi_fdiv+0xec>
 80a29fc:	eba2 0203 	sub.w	r2, r2, r3
 80a2a00:	ea80 0c01 	eor.w	ip, r0, r1
 80a2a04:	0249      	lsls	r1, r1, #9
 80a2a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2a0a:	d037      	beq.n	80a2a7c <__aeabi_fdiv+0x98>
 80a2a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2a1c:	428b      	cmp	r3, r1
 80a2a1e:	bf38      	it	cc
 80a2a20:	005b      	lslcc	r3, r3, #1
 80a2a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2a2a:	428b      	cmp	r3, r1
 80a2a2c:	bf24      	itt	cs
 80a2a2e:	1a5b      	subcs	r3, r3, r1
 80a2a30:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2a38:	bf24      	itt	cs
 80a2a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2a46:	bf24      	itt	cs
 80a2a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2a54:	bf24      	itt	cs
 80a2a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2a5e:	011b      	lsls	r3, r3, #4
 80a2a60:	bf18      	it	ne
 80a2a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a2a66:	d1e0      	bne.n	80a2a2a <__aeabi_fdiv+0x46>
 80a2a68:	2afd      	cmp	r2, #253	; 0xfd
 80a2a6a:	f63f af50 	bhi.w	80a290e <__aeabi_fmul+0x92>
 80a2a6e:	428b      	cmp	r3, r1
 80a2a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2a74:	bf08      	it	eq
 80a2a76:	f020 0001 	biceq.w	r0, r0, #1
 80a2a7a:	4770      	bx	lr
 80a2a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2a84:	327f      	adds	r2, #127	; 0x7f
 80a2a86:	bfc2      	ittt	gt
 80a2a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2a90:	4770      	bxgt	lr
 80a2a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2a96:	f04f 0300 	mov.w	r3, #0
 80a2a9a:	3a01      	subs	r2, #1
 80a2a9c:	e737      	b.n	80a290e <__aeabi_fmul+0x92>
 80a2a9e:	f092 0f00 	teq	r2, #0
 80a2aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2aa6:	bf02      	ittt	eq
 80a2aa8:	0040      	lsleq	r0, r0, #1
 80a2aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2aae:	3a01      	subeq	r2, #1
 80a2ab0:	d0f9      	beq.n	80a2aa6 <__aeabi_fdiv+0xc2>
 80a2ab2:	ea40 000c 	orr.w	r0, r0, ip
 80a2ab6:	f093 0f00 	teq	r3, #0
 80a2aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2abe:	bf02      	ittt	eq
 80a2ac0:	0049      	lsleq	r1, r1, #1
 80a2ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2ac6:	3b01      	subeq	r3, #1
 80a2ac8:	d0f9      	beq.n	80a2abe <__aeabi_fdiv+0xda>
 80a2aca:	ea41 010c 	orr.w	r1, r1, ip
 80a2ace:	e795      	b.n	80a29fc <__aeabi_fdiv+0x18>
 80a2ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2ad4:	ea92 0f0c 	teq	r2, ip
 80a2ad8:	d108      	bne.n	80a2aec <__aeabi_fdiv+0x108>
 80a2ada:	0242      	lsls	r2, r0, #9
 80a2adc:	f47f af7d 	bne.w	80a29da <__aeabi_fmul+0x15e>
 80a2ae0:	ea93 0f0c 	teq	r3, ip
 80a2ae4:	f47f af70 	bne.w	80a29c8 <__aeabi_fmul+0x14c>
 80a2ae8:	4608      	mov	r0, r1
 80a2aea:	e776      	b.n	80a29da <__aeabi_fmul+0x15e>
 80a2aec:	ea93 0f0c 	teq	r3, ip
 80a2af0:	d104      	bne.n	80a2afc <__aeabi_fdiv+0x118>
 80a2af2:	024b      	lsls	r3, r1, #9
 80a2af4:	f43f af4c 	beq.w	80a2990 <__aeabi_fmul+0x114>
 80a2af8:	4608      	mov	r0, r1
 80a2afa:	e76e      	b.n	80a29da <__aeabi_fmul+0x15e>
 80a2afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2b00:	bf18      	it	ne
 80a2b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2b06:	d1ca      	bne.n	80a2a9e <__aeabi_fdiv+0xba>
 80a2b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2b0c:	f47f af5c 	bne.w	80a29c8 <__aeabi_fmul+0x14c>
 80a2b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2b14:	f47f af3c 	bne.w	80a2990 <__aeabi_fmul+0x114>
 80a2b18:	e75f      	b.n	80a29da <__aeabi_fmul+0x15e>
 80a2b1a:	bf00      	nop

080a2b1c <atol>:
 80a2b1c:	220a      	movs	r2, #10
 80a2b1e:	2100      	movs	r1, #0
 80a2b20:	f000 b8d8 	b.w	80a2cd4 <strtol>

080a2b24 <__cxa_atexit>:
 80a2b24:	b510      	push	{r4, lr}
 80a2b26:	4c05      	ldr	r4, [pc, #20]	; (80a2b3c <__cxa_atexit+0x18>)
 80a2b28:	4613      	mov	r3, r2
 80a2b2a:	b12c      	cbz	r4, 80a2b38 <__cxa_atexit+0x14>
 80a2b2c:	460a      	mov	r2, r1
 80a2b2e:	4601      	mov	r1, r0
 80a2b30:	2002      	movs	r0, #2
 80a2b32:	f3af 8000 	nop.w
 80a2b36:	bd10      	pop	{r4, pc}
 80a2b38:	4620      	mov	r0, r4
 80a2b3a:	bd10      	pop	{r4, pc}
 80a2b3c:	00000000 	.word	0x00000000

080a2b40 <memcpy>:
 80a2b40:	b510      	push	{r4, lr}
 80a2b42:	1e43      	subs	r3, r0, #1
 80a2b44:	440a      	add	r2, r1
 80a2b46:	4291      	cmp	r1, r2
 80a2b48:	d004      	beq.n	80a2b54 <memcpy+0x14>
 80a2b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2b52:	e7f8      	b.n	80a2b46 <memcpy+0x6>
 80a2b54:	bd10      	pop	{r4, pc}

080a2b56 <memset>:
 80a2b56:	4603      	mov	r3, r0
 80a2b58:	4402      	add	r2, r0
 80a2b5a:	4293      	cmp	r3, r2
 80a2b5c:	d002      	beq.n	80a2b64 <memset+0xe>
 80a2b5e:	f803 1b01 	strb.w	r1, [r3], #1
 80a2b62:	e7fa      	b.n	80a2b5a <memset+0x4>
 80a2b64:	4770      	bx	lr
	...

080a2b68 <srand>:
 80a2b68:	b538      	push	{r3, r4, r5, lr}
 80a2b6a:	4b12      	ldr	r3, [pc, #72]	; (80a2bb4 <srand+0x4c>)
 80a2b6c:	4605      	mov	r5, r0
 80a2b6e:	681c      	ldr	r4, [r3, #0]
 80a2b70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2b72:	b9d3      	cbnz	r3, 80a2baa <srand+0x42>
 80a2b74:	2018      	movs	r0, #24
 80a2b76:	f7fe f877 	bl	80a0c68 <malloc>
 80a2b7a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2b7e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2b80:	8003      	strh	r3, [r0, #0]
 80a2b82:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2b86:	8043      	strh	r3, [r0, #2]
 80a2b88:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2b8c:	8083      	strh	r3, [r0, #4]
 80a2b8e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2b92:	80c3      	strh	r3, [r0, #6]
 80a2b94:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2b98:	8103      	strh	r3, [r0, #8]
 80a2b9a:	2305      	movs	r3, #5
 80a2b9c:	8143      	strh	r3, [r0, #10]
 80a2b9e:	230b      	movs	r3, #11
 80a2ba0:	8183      	strh	r3, [r0, #12]
 80a2ba2:	2201      	movs	r2, #1
 80a2ba4:	2300      	movs	r3, #0
 80a2ba6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2baa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2bac:	2200      	movs	r2, #0
 80a2bae:	611d      	str	r5, [r3, #16]
 80a2bb0:	615a      	str	r2, [r3, #20]
 80a2bb2:	bd38      	pop	{r3, r4, r5, pc}
 80a2bb4:	20000374 	.word	0x20000374

080a2bb8 <strlen>:
 80a2bb8:	4603      	mov	r3, r0
 80a2bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2bbe:	2a00      	cmp	r2, #0
 80a2bc0:	d1fb      	bne.n	80a2bba <strlen+0x2>
 80a2bc2:	1a18      	subs	r0, r3, r0
 80a2bc4:	3801      	subs	r0, #1
 80a2bc6:	4770      	bx	lr

080a2bc8 <_strtol_r>:
 80a2bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2bcc:	460f      	mov	r7, r1
 80a2bce:	4680      	mov	r8, r0
 80a2bd0:	483f      	ldr	r0, [pc, #252]	; (80a2cd0 <_strtol_r+0x108>)
 80a2bd2:	f8d0 9000 	ldr.w	r9, [r0]
 80a2bd6:	463d      	mov	r5, r7
 80a2bd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a2bdc:	eb09 0004 	add.w	r0, r9, r4
 80a2be0:	7840      	ldrb	r0, [r0, #1]
 80a2be2:	f000 0008 	and.w	r0, r0, #8
 80a2be6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a2bea:	b108      	cbz	r0, 80a2bf0 <_strtol_r+0x28>
 80a2bec:	462f      	mov	r7, r5
 80a2bee:	e7f2      	b.n	80a2bd6 <_strtol_r+0xe>
 80a2bf0:	2c2d      	cmp	r4, #45	; 0x2d
 80a2bf2:	d103      	bne.n	80a2bfc <_strtol_r+0x34>
 80a2bf4:	1cbd      	adds	r5, r7, #2
 80a2bf6:	787c      	ldrb	r4, [r7, #1]
 80a2bf8:	2601      	movs	r6, #1
 80a2bfa:	e003      	b.n	80a2c04 <_strtol_r+0x3c>
 80a2bfc:	2c2b      	cmp	r4, #43	; 0x2b
 80a2bfe:	bf04      	itt	eq
 80a2c00:	787c      	ldrbeq	r4, [r7, #1]
 80a2c02:	1cbd      	addeq	r5, r7, #2
 80a2c04:	b113      	cbz	r3, 80a2c0c <_strtol_r+0x44>
 80a2c06:	2b10      	cmp	r3, #16
 80a2c08:	d10a      	bne.n	80a2c20 <_strtol_r+0x58>
 80a2c0a:	e05b      	b.n	80a2cc4 <_strtol_r+0xfc>
 80a2c0c:	2c30      	cmp	r4, #48	; 0x30
 80a2c0e:	d157      	bne.n	80a2cc0 <_strtol_r+0xf8>
 80a2c10:	7828      	ldrb	r0, [r5, #0]
 80a2c12:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a2c16:	2858      	cmp	r0, #88	; 0x58
 80a2c18:	d14d      	bne.n	80a2cb6 <_strtol_r+0xee>
 80a2c1a:	786c      	ldrb	r4, [r5, #1]
 80a2c1c:	2310      	movs	r3, #16
 80a2c1e:	3502      	adds	r5, #2
 80a2c20:	2e00      	cmp	r6, #0
 80a2c22:	bf14      	ite	ne
 80a2c24:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a2c28:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a2c2c:	fbbc faf3 	udiv	sl, ip, r3
 80a2c30:	2700      	movs	r7, #0
 80a2c32:	4638      	mov	r0, r7
 80a2c34:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a2c38:	eb09 0e04 	add.w	lr, r9, r4
 80a2c3c:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a2c40:	f01e 0f04 	tst.w	lr, #4
 80a2c44:	d001      	beq.n	80a2c4a <_strtol_r+0x82>
 80a2c46:	3c30      	subs	r4, #48	; 0x30
 80a2c48:	e00b      	b.n	80a2c62 <_strtol_r+0x9a>
 80a2c4a:	f01e 0e03 	ands.w	lr, lr, #3
 80a2c4e:	d01b      	beq.n	80a2c88 <_strtol_r+0xc0>
 80a2c50:	f1be 0f01 	cmp.w	lr, #1
 80a2c54:	bf0c      	ite	eq
 80a2c56:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a2c5a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a2c5e:	ebce 0404 	rsb	r4, lr, r4
 80a2c62:	42a3      	cmp	r3, r4
 80a2c64:	dd10      	ble.n	80a2c88 <_strtol_r+0xc0>
 80a2c66:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a2c6a:	d00a      	beq.n	80a2c82 <_strtol_r+0xba>
 80a2c6c:	4550      	cmp	r0, sl
 80a2c6e:	d806      	bhi.n	80a2c7e <_strtol_r+0xb6>
 80a2c70:	d101      	bne.n	80a2c76 <_strtol_r+0xae>
 80a2c72:	4564      	cmp	r4, ip
 80a2c74:	dc03      	bgt.n	80a2c7e <_strtol_r+0xb6>
 80a2c76:	fb03 4000 	mla	r0, r3, r0, r4
 80a2c7a:	2701      	movs	r7, #1
 80a2c7c:	e001      	b.n	80a2c82 <_strtol_r+0xba>
 80a2c7e:	f04f 37ff 	mov.w	r7, #4294967295
 80a2c82:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a2c86:	e7d7      	b.n	80a2c38 <_strtol_r+0x70>
 80a2c88:	1c7b      	adds	r3, r7, #1
 80a2c8a:	d10c      	bne.n	80a2ca6 <_strtol_r+0xde>
 80a2c8c:	2e00      	cmp	r6, #0
 80a2c8e:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a2c92:	bf14      	ite	ne
 80a2c94:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a2c98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a2c9c:	f8c8 3000 	str.w	r3, [r8]
 80a2ca0:	b92a      	cbnz	r2, 80a2cae <_strtol_r+0xe6>
 80a2ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2ca6:	b106      	cbz	r6, 80a2caa <_strtol_r+0xe2>
 80a2ca8:	4240      	negs	r0, r0
 80a2caa:	b172      	cbz	r2, 80a2cca <_strtol_r+0x102>
 80a2cac:	b107      	cbz	r7, 80a2cb0 <_strtol_r+0xe8>
 80a2cae:	1e69      	subs	r1, r5, #1
 80a2cb0:	6011      	str	r1, [r2, #0]
 80a2cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2cb6:	2430      	movs	r4, #48	; 0x30
 80a2cb8:	2b00      	cmp	r3, #0
 80a2cba:	d1b1      	bne.n	80a2c20 <_strtol_r+0x58>
 80a2cbc:	2308      	movs	r3, #8
 80a2cbe:	e7af      	b.n	80a2c20 <_strtol_r+0x58>
 80a2cc0:	230a      	movs	r3, #10
 80a2cc2:	e7ad      	b.n	80a2c20 <_strtol_r+0x58>
 80a2cc4:	2c30      	cmp	r4, #48	; 0x30
 80a2cc6:	d0a3      	beq.n	80a2c10 <_strtol_r+0x48>
 80a2cc8:	e7aa      	b.n	80a2c20 <_strtol_r+0x58>
 80a2cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2cce:	bf00      	nop
 80a2cd0:	20000310 	.word	0x20000310

080a2cd4 <strtol>:
 80a2cd4:	4613      	mov	r3, r2
 80a2cd6:	460a      	mov	r2, r1
 80a2cd8:	4601      	mov	r1, r0
 80a2cda:	4802      	ldr	r0, [pc, #8]	; (80a2ce4 <strtol+0x10>)
 80a2cdc:	6800      	ldr	r0, [r0, #0]
 80a2cde:	f7ff bf73 	b.w	80a2bc8 <_strtol_r>
 80a2ce2:	bf00      	nop
 80a2ce4:	20000374 	.word	0x20000374

080a2ce8 <dynalib_user>:
 80a2ce8:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a2cf8:	00000000 74746f62 00656e6f 69747461     ....bottone.atti
 80a2d08:	65526176 0079616c 61766e49 2064696c     vaRelay.Invalid 
 80a2d18:	64616572 00676e69                       reading.

080a2d20 <_ZTV8SPIClass>:
	...
 80a2d28:	080a0c99 080a0c9b 006e616e 0066766f     ........nan.ovf.
 80a2d38:	6e69002e 6e6c0066 006e6600 65646f63     ..inf.ln.fn.code
 80a2d48:	74656400 006c6961 25000a0d 75303130     .detail....%010u
 80a2d58:	205d0020 00642500 2800202c 00203a29      .] .%d., .(): .
 80a2d68:	63005b20 2065646f 2500203d 65640069      [.code = .%i.de
 80a2d78:	6c696174 203d2073 75616200 65530064     tails = .baud.Se
 80a2d88:	6c616972 42535500 69726553 00316c61     rial.USBSerial1.
 80a2d98:	65707974 72617000 63006d61 6900646d     type.param.cmd.i
 80a2da8:	6e680064 74730064 66006d72 00746c69     d.hnd.strm.filt.
 80a2db8:	006c766c 48646461 6c646e61 72007265     lvl.addHandler.r
 80a2dc8:	766f6d65 6e614865 72656c64 756e6500     emoveHandler.enu
 80a2dd8:	6e61486d 72656c64 534a0073 74534e4f     mHandlers.JSONSt
 80a2de8:	6d616572 48676f4c 6c646e61 61007265     reamLogHandler.a
 80a2df8:	6e007070 00656e6f 63617274 6e690065     pp.none.trace.in
 80a2e08:	77006f66 006e7261 6f727265 61700072     fo.warn.error.pa
 80a2e18:	0063696e 006c6c61 2b25005a 3a643330     nic.all.Z.%+03d:
 80a2e28:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
 80a2e38:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
 80a2e48:	00000000                                ....

080a2e4c <_ZTV9IPAddress>:
	...
 80a2e54:	080a129b 080a128b 080a128d              ............

080a2e60 <_ZTV9USBSerial>:
	...
 80a2e68:	080a1355 080a13a5 080a13b3 080a0de3     U...............
 80a2e78:	080a1391 080a1357 080a136d 080a139f     ....W...m.......
 80a2e88:	080a1383 080a1351                       ....Q...

080a2e90 <_ZTV11USARTSerial>:
	...
 80a2e98:	080a14fd 080a154d 080a155b 080a0de3     ....M...[.......
 80a2ea8:	080a1511 080a1533 080a151f 080a1547     ....3.......G...
 80a2eb8:	080a14ff 080a1503                       ........

080a2ec0 <_ZTV7TwoWire>:
	...
 80a2ec8:	080a1601 080a164b 080a1623 080a1603     ....K...#.......
 80a2ed8:	080a162b 080a1633 080a163b 080a1643     +...3...;...C...

080a2ee8 <_ZTVN5spark9WiFiClassE>:
	...
 80a2ef0:	080a171b 080a1711 080a1707 080a1685     ................
 80a2f00:	080a1089 080a16fb 080a16ef 080a16e7     ................
 80a2f10:	080a16dd 080a16d3 080a168f              ............

080a2f1c <_ZTVN5spark12NetworkClassE>:
	...
 80a2f24:	080a1739 080a1743 080a174d 080a1757     9...C...M...W...
 80a2f34:	080a1761 080a176d 080a1779 080a1785     a...m...y.......
 80a2f44:	080a178d 080a1797 080a17a1              ............

080a2f50 <_ctype_>:
 80a2f50:	20202000 20202020 28282020 20282828     .         ((((( 
 80a2f60:	20202020 20202020 20202020 20202020                     
 80a2f70:	10108820 10101010 10101010 10101010      ...............
 80a2f80:	04040410 04040404 10040404 10101010     ................
 80a2f90:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a2fa0:	01010101 01010101 01010101 10101010     ................
 80a2fb0:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a2fc0:	02020202 02020202 02020202 10101010     ................
 80a2fd0:	00000020 00000000 00000000 00000000      ...............
	...

080a3054 <__sf_fake_stdin>:
	...

080a3074 <__sf_fake_stdout>:
	...

080a3094 <__sf_fake_stderr>:
	...
 80a30b4:	00000043                                         C.

080a30b6 <link_const_variable_data_end>:
	...

080a30b8 <link_constructors_location>:
 80a30b8:	080a0345 	.word	0x080a0345
 80a30bc:	080a06ad 	.word	0x080a06ad
 80a30c0:	080a06b1 	.word	0x080a06b1
 80a30c4:	080a08e9 	.word	0x080a08e9
 80a30c8:	080a0cd9 	.word	0x080a0cd9
 80a30cc:	080a1095 	.word	0x080a1095
 80a30d0:	080a10a5 	.word	0x080a10a5
 80a30d4:	080a10dd 	.word	0x080a10dd
 80a30d8:	080a1725 	.word	0x080a1725
 80a30dc:	080a17f1 	.word	0x080a17f1
 80a30e0:	080a190d 	.word	0x080a190d
 80a30e4:	080a1951 	.word	0x080a1951
 80a30e8:	080a19d1 	.word	0x080a19d1
 80a30ec:	080a1a55 	.word	0x080a1a55
 80a30f0:	080a1b19 	.word	0x080a1b19
 80a30f4:	080a1bdd 	.word	0x080a1bdd

080a30f8 <link_constructors_end>:
	...
