
c:/IOT/progetti/sensoreUmidita/target/1.2.1/photon/sensoreUmidita.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b48  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  080a4b60  080a4b60  00014b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  080a4b68  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000300  080a4b6c  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000688  20000378  20000378  00040378  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a4be0  080a4be0  00034be0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a4c08  080a4c08  00034c08  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000dfa3e  00000000  00000000  00034c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014341  00000000  00000000  0011464a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001667c  00000000  00000000  0012898b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002220  00000000  00000000  0013f007  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003670  00000000  00000000  00141227  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002c80e  00000000  00000000  00144897  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002e8da  00000000  00000000  001710a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000adec1  00000000  00000000  0019f97f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d4b0  00000000  00000000  0024d840  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	80 43 0a 08                                         .C..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 f886 	bl	80a413e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 f8a6 	bl	80a418a <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a4b6c 	.word	0x080a4b6c
 80a004c:	20000374 	.word	0x20000374
 80a0050:	20000378 	.word	0x20000378
 80a0054:	20000a00 	.word	0x20000a00
 80a0058:	20000a00 	.word	0x20000a00

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fc9f 	bl	80a19a0 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a4b0c 	.word	0x080a4b0c
 80a0084:	080a4b58 	.word	0x080a4b58

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b9c8 	b.w	80a041c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f86f 	bl	80a0170 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bc45 	b.w	80a1924 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 b97d 	b.w	80a1398 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 b983 	b.w	80a13a8 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z9modValori6String>:
/* int modUm(String valore){
  soglia = valore.toFloat();
  return 1;
} */

int modValori(String valore){
 80a00b4:	b570      	push	{r4, r5, r6, lr}
  s = valore;
 80a00b6:	4d29      	ldr	r5, [pc, #164]	; (80a015c <_Z9modValori6String+0xa8>)
 80a00b8:	6801      	ldr	r1, [r0, #0]
/* int modUm(String valore){
  soglia = valore.toFloat();
  return 1;
} */

int modValori(String valore){
 80a00ba:	b092      	sub	sp, #72	; 0x48
  s = valore;
 80a00bc:	4628      	mov	r0, r5
 80a00be:	f002 fc54 	bl	80a296a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
  if(s.size()>0){
 80a00c2:	686b      	ldr	r3, [r5, #4]
 80a00c4:	2b00      	cmp	r3, #0
 80a00c6:	d045      	beq.n	80a0154 <_Z9modValori6String+0xa0>
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80a00c8:	4a25      	ldr	r2, [pc, #148]	; (80a0160 <_Z9modValori6String+0xac>)

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
      {
	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
	: allocator_type(__a), _M_p(__dat) { }
 80a00ca:	a802      	add	r0, sp, #8
 80a00cc:	1e51      	subs	r1, r2, #1
 80a00ce:	9000      	str	r0, [sp, #0]
 80a00d0:	f002 fb79 	bl	80a27c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
 80a00d4:	9b00      	ldr	r3, [sp, #0]
 80a00d6:	2600      	movs	r6, #0
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }
 80a00d8:	2401      	movs	r4, #1
 80a00da:	9401      	str	r4, [sp, #4]
    std::string delimiter = "=";
    std::string type = s.substr(0, s.find(delimiter));
 80a00dc:	4632      	mov	r2, r6
 80a00de:	705e      	strb	r6, [r3, #1]
 80a00e0:	4669      	mov	r1, sp
 80a00e2:	4628      	mov	r0, r5
 80a00e4:	f002 fc71 	bl	80a29ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 80a00e8:	4629      	mov	r1, r5
 80a00ea:	4603      	mov	r3, r0
 80a00ec:	4632      	mov	r2, r6
 80a00ee:	a806      	add	r0, sp, #24
 80a00f0:	f002 fcc6 	bl	80a2a80 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
    std::string number = s.substr(s.find(delimiter)+1);
 80a00f4:	4632      	mov	r2, r6
 80a00f6:	4669      	mov	r1, sp
 80a00f8:	4628      	mov	r0, r5
 80a00fa:	f002 fc66 	bl	80a29ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 80a00fe:	4629      	mov	r1, r5
 80a0100:	1902      	adds	r2, r0, r4
 80a0102:	f04f 33ff 	mov.w	r3, #4294967295
 80a0106:	a80c      	add	r0, sp, #48	; 0x30
 80a0108:	f002 fcba 	bl	80a2a80 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>

    n = atoi( number.c_str() );
 80a010c:	980c      	ldr	r0, [sp, #48]	; 0x30
 80a010e:	f003 ffed 	bl	80a40ec <atoi>
 80a0112:	4d14      	ldr	r5, [pc, #80]	; (80a0164 <_Z9modValori6String+0xb0>)
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
	       const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
 80a0114:	4914      	ldr	r1, [pc, #80]	; (80a0168 <_Z9modValori6String+0xb4>)
 80a0116:	6028      	str	r0, [r5, #0]
 80a0118:	a806      	add	r0, sp, #24
 80a011a:	f002 fc5b 	bl	80a29d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>

    if(type == "publish"){
 80a011e:	b968      	cbnz	r0, 80a013c <_Z9modValori6String+0x88>
      pubTimer = n;
 80a0120:	682a      	ldr	r2, [r5, #0]
 80a0122:	4b12      	ldr	r3, [pc, #72]	; (80a016c <_Z9modValori6String+0xb8>)

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
 80a0124:	a80c      	add	r0, sp, #48	; 0x30
 80a0126:	601a      	str	r2, [r3, #0]
 80a0128:	f002 fb0a 	bl	80a2740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80a012c:	a806      	add	r0, sp, #24
 80a012e:	f002 fb07 	bl	80a2740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80a0132:	4668      	mov	r0, sp
 80a0134:	f002 fb04 	bl	80a2740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    }else{
      return -1;
    }
  }
  return 1;
 80a0138:	4620      	mov	r0, r4
 80a013a:	e00c      	b.n	80a0156 <_Z9modValori6String+0xa2>
 80a013c:	a80c      	add	r0, sp, #48	; 0x30
 80a013e:	f002 faff 	bl	80a2740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80a0142:	a806      	add	r0, sp, #24
 80a0144:	f002 fafc 	bl	80a2740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80a0148:	4668      	mov	r0, sp
 80a014a:	f002 faf9 	bl	80a2740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    n = atoi( number.c_str() );

    if(type == "publish"){
      pubTimer = n;
    }else{
      return -1;
 80a014e:	f04f 30ff 	mov.w	r0, #4294967295
 80a0152:	e000      	b.n	80a0156 <_Z9modValori6String+0xa2>
    }
  }
  return 1;
 80a0154:	2001      	movs	r0, #1
 80a0156:	b012      	add	sp, #72	; 0x48
 80a0158:	bd70      	pop	{r4, r5, r6, pc}
 80a015a:	bf00      	nop
 80a015c:	2000041c 	.word	0x2000041c
 80a0160:	080a4395 	.word	0x080a4395
 80a0164:	20000440 	.word	0x20000440
 80a0168:	080a4396 	.word	0x080a4396
 80a016c:	20000300 	.word	0x20000300

080a0170 <loop>:
  veml.setHighThreshold(20000);
  veml.interruptEnable(true);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0174:	b09b      	sub	sp, #108	; 0x6c
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0176:	f000 ff81 	bl	80a107c <HAL_Timer_Get_Milli_Seconds>
  // The core of your code will likely live here.
  if(millis()-msVal>=msUm_CONST){
 80a017a:	4d8c      	ldr	r5, [pc, #560]	; (80a03ac <loop+0x23c>)
 80a017c:	682b      	ldr	r3, [r5, #0]
 80a017e:	1ac0      	subs	r0, r0, r3
 80a0180:	f241 3387 	movw	r3, #4999	; 0x1387
 80a0184:	4298      	cmp	r0, r3
 80a0186:	f240 80e3 	bls.w	80a0350 <loop+0x1e0>
    humdTerraLunga = sht20.readHumidity();                 
 80a018a:	4889      	ldr	r0, [pc, #548]	; (80a03b0 <loop+0x240>)
 80a018c:	f000 fa8c 	bl	80a06a8 <_ZN13DFRobot_SHT2012readHumidityEv>
 80a0190:	f003 f814 	bl	80a31bc <__aeabi_f2d>
 80a0194:	4f87      	ldr	r7, [pc, #540]	; (80a03b4 <loop+0x244>)
    tempTerraLunga = sht20.readTemperature();
 80a0196:	4e88      	ldr	r6, [pc, #544]	; (80a03b8 <loop+0x248>)

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  if(millis()-msVal>=msUm_CONST){
    humdTerraLunga = sht20.readHumidity();                 
 80a0198:	e9c7 0100 	strd	r0, r1, [r7]
    tempTerraLunga = sht20.readTemperature();
 80a019c:	4884      	ldr	r0, [pc, #528]	; (80a03b0 <loop+0x240>)
 80a019e:	f000 fa9f 	bl	80a06e0 <_ZN13DFRobot_SHT2015readTemperatureEv>
 80a01a2:	f003 f80b 	bl	80a31bc <__aeabi_f2d>
 80a01a6:	e9c6 0100 	strd	r0, r1, [r6]
    humdAmbLunga = sht31.getHumidity(); 
 80a01aa:	4884      	ldr	r0, [pc, #528]	; (80a03bc <loop+0x24c>)
 80a01ac:	f000 ff18 	bl	80a0fe0 <_ZN5SHT3111getHumidityEv>
 80a01b0:	f003 f804 	bl	80a31bc <__aeabi_f2d>
 80a01b4:	4c82      	ldr	r4, [pc, #520]	; (80a03c0 <loop+0x250>)
    tempAmbLunga = sht31.getTemperature();

    humdTerra = ((int) (humdTerraLunga*100))/100.0;
 80a01b6:	f8df a250 	ldr.w	sl, [pc, #592]	; 80a0408 <loop+0x298>
void loop() {
  // The core of your code will likely live here.
  if(millis()-msVal>=msUm_CONST){
    humdTerraLunga = sht20.readHumidity();                 
    tempTerraLunga = sht20.readTemperature();
    humdAmbLunga = sht31.getHumidity(); 
 80a01ba:	e9c4 0100 	strd	r0, r1, [r4]
    tempAmbLunga = sht31.getTemperature();
 80a01be:	487f      	ldr	r0, [pc, #508]	; (80a03bc <loop+0x24c>)
 80a01c0:	f000 ff02 	bl	80a0fc8 <_ZN5SHT3114getTemperatureEv>
 80a01c4:	f002 fffa 	bl	80a31bc <__aeabi_f2d>
 80a01c8:	4680      	mov	r8, r0
 80a01ca:	4689      	mov	r9, r1

    humdTerra = ((int) (humdTerraLunga*100))/100.0;
 80a01cc:	e9d7 0100 	ldrd	r0, r1, [r7]
  // The core of your code will likely live here.
  if(millis()-msVal>=msUm_CONST){
    humdTerraLunga = sht20.readHumidity();                 
    tempTerraLunga = sht20.readTemperature();
    humdAmbLunga = sht31.getHumidity(); 
    tempAmbLunga = sht31.getTemperature();
 80a01d0:	4b7c      	ldr	r3, [pc, #496]	; (80a03c4 <loop+0x254>)

    humdTerra = ((int) (humdTerraLunga*100))/100.0;
 80a01d2:	2200      	movs	r2, #0
  // The core of your code will likely live here.
  if(millis()-msVal>=msUm_CONST){
    humdTerraLunga = sht20.readHumidity();                 
    tempTerraLunga = sht20.readTemperature();
    humdAmbLunga = sht31.getHumidity(); 
    tempAmbLunga = sht31.getTemperature();
 80a01d4:	e9c3 8900 	strd	r8, r9, [r3]

    humdTerra = ((int) (humdTerraLunga*100))/100.0;
 80a01d8:	4b7b      	ldr	r3, [pc, #492]	; (80a03c8 <loop+0x258>)
 80a01da:	f003 f843 	bl	80a3264 <__aeabi_dmul>
 80a01de:	f003 fadb 	bl	80a3798 <__aeabi_d2iz>
 80a01e2:	f002 ffd9 	bl	80a3198 <__aeabi_i2d>
 80a01e6:	2200      	movs	r2, #0
 80a01e8:	4b77      	ldr	r3, [pc, #476]	; (80a03c8 <loop+0x258>)
 80a01ea:	f003 f965 	bl	80a34b8 <__aeabi_ddiv>
    tempTerra = ((int) (tempTerraLunga*100))/100.0;
 80a01ee:	2200      	movs	r2, #0
 80a01f0:	4b75      	ldr	r3, [pc, #468]	; (80a03c8 <loop+0x258>)
    humdTerraLunga = sht20.readHumidity();                 
    tempTerraLunga = sht20.readTemperature();
    humdAmbLunga = sht31.getHumidity(); 
    tempAmbLunga = sht31.getTemperature();

    humdTerra = ((int) (humdTerraLunga*100))/100.0;
 80a01f2:	e9ca 0100 	strd	r0, r1, [sl]
    tempTerra = ((int) (tempTerraLunga*100))/100.0;
 80a01f6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80a01fa:	f003 f833 	bl	80a3264 <__aeabi_dmul>
 80a01fe:	f003 facb 	bl	80a3798 <__aeabi_d2iz>
 80a0202:	f002 ffc9 	bl	80a3198 <__aeabi_i2d>
 80a0206:	2200      	movs	r2, #0
 80a0208:	4b6f      	ldr	r3, [pc, #444]	; (80a03c8 <loop+0x258>)
 80a020a:	f003 f955 	bl	80a34b8 <__aeabi_ddiv>
 80a020e:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80a040c <loop+0x29c>
    humdAmb = ((int) (humdAmbLunga*100))/100.0;
 80a0212:	2200      	movs	r2, #0
 80a0214:	4b6c      	ldr	r3, [pc, #432]	; (80a03c8 <loop+0x258>)
    tempTerraLunga = sht20.readTemperature();
    humdAmbLunga = sht31.getHumidity(); 
    tempAmbLunga = sht31.getTemperature();

    humdTerra = ((int) (humdTerraLunga*100))/100.0;
    tempTerra = ((int) (tempTerraLunga*100))/100.0;
 80a0216:	e9cb 0100 	strd	r0, r1, [fp]
    humdAmb = ((int) (humdAmbLunga*100))/100.0;
 80a021a:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a021e:	f003 f821 	bl	80a3264 <__aeabi_dmul>
 80a0222:	f003 fab9 	bl	80a3798 <__aeabi_d2iz>
 80a0226:	f002 ffb7 	bl	80a3198 <__aeabi_i2d>
 80a022a:	2200      	movs	r2, #0
 80a022c:	4b66      	ldr	r3, [pc, #408]	; (80a03c8 <loop+0x258>)
 80a022e:	f003 f943 	bl	80a34b8 <__aeabi_ddiv>
 80a0232:	4e66      	ldr	r6, [pc, #408]	; (80a03cc <loop+0x25c>)
    tempAmb = ((int) (tempAmbLunga*100))/100.0;
 80a0234:	2200      	movs	r2, #0
 80a0236:	4b64      	ldr	r3, [pc, #400]	; (80a03c8 <loop+0x258>)
    humdAmbLunga = sht31.getHumidity(); 
    tempAmbLunga = sht31.getTemperature();

    humdTerra = ((int) (humdTerraLunga*100))/100.0;
    tempTerra = ((int) (tempTerraLunga*100))/100.0;
    humdAmb = ((int) (humdAmbLunga*100))/100.0;
 80a0238:	e9c6 0100 	strd	r0, r1, [r6]
    tempAmb = ((int) (tempAmbLunga*100))/100.0;
 80a023c:	4640      	mov	r0, r8
 80a023e:	4649      	mov	r1, r9
 80a0240:	f003 f810 	bl	80a3264 <__aeabi_dmul>
 80a0244:	f003 faa8 	bl	80a3798 <__aeabi_d2iz>
 80a0248:	f002 ffa6 	bl	80a3198 <__aeabi_i2d>
 80a024c:	2200      	movs	r2, #0
 80a024e:	4b5e      	ldr	r3, [pc, #376]	; (80a03c8 <loop+0x258>)
 80a0250:	f003 f932 	bl	80a34b8 <__aeabi_ddiv>
 80a0254:	4f5e      	ldr	r7, [pc, #376]	; (80a03d0 <loop+0x260>)

    lumLunga = veml.readLux();
    lum = ((int) (lumLunga*100))/100.0;
 80a0256:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80a0410 <loop+0x2a0>
    tempAmbLunga = sht31.getTemperature();

    humdTerra = ((int) (humdTerraLunga*100))/100.0;
    tempTerra = ((int) (tempTerraLunga*100))/100.0;
    humdAmb = ((int) (humdAmbLunga*100))/100.0;
    tempAmb = ((int) (tempAmbLunga*100))/100.0;
 80a025a:	e9c7 0100 	strd	r0, r1, [r7]

    lumLunga = veml.readLux();
 80a025e:	485d      	ldr	r0, [pc, #372]	; (80a03d4 <loop+0x264>)
 80a0260:	f000 fbca 	bl	80a09f8 <_ZN17Adafruit_VEML77007readLuxEv>
 80a0264:	f002 ffaa 	bl	80a31bc <__aeabi_f2d>
 80a0268:	4b5b      	ldr	r3, [pc, #364]	; (80a03d8 <loop+0x268>)
    lum = ((int) (lumLunga*100))/100.0;
 80a026a:	2200      	movs	r2, #0
    humdTerra = ((int) (humdTerraLunga*100))/100.0;
    tempTerra = ((int) (tempTerraLunga*100))/100.0;
    humdAmb = ((int) (humdAmbLunga*100))/100.0;
    tempAmb = ((int) (tempAmbLunga*100))/100.0;

    lumLunga = veml.readLux();
 80a026c:	e9c3 0100 	strd	r0, r1, [r3]
    lum = ((int) (lumLunga*100))/100.0;
 80a0270:	4b55      	ldr	r3, [pc, #340]	; (80a03c8 <loop+0x258>)
 80a0272:	f002 fff7 	bl	80a3264 <__aeabi_dmul>
 80a0276:	f003 fa8f 	bl	80a3798 <__aeabi_d2iz>
 80a027a:	f002 ff8d 	bl	80a3198 <__aeabi_i2d>
 80a027e:	2200      	movs	r2, #0
 80a0280:	4b51      	ldr	r3, [pc, #324]	; (80a03c8 <loop+0x258>)
 80a0282:	f003 f919 	bl	80a34b8 <__aeabi_ddiv>

    json = "{\"temperatura_terra\": "+String(tempTerra)+",\"umidita_terra\": "+String(humdTerra)+",\"luminosita\": "+String(lum)+",\"temperatura_ambiente\": "+String(tempAmb)+",\"umidita_ambiente\": "+String(humdAmb)+"}";
 80a0286:	2406      	movs	r4, #6
    tempTerra = ((int) (tempTerraLunga*100))/100.0;
    humdAmb = ((int) (humdAmbLunga*100))/100.0;
    tempAmb = ((int) (tempAmbLunga*100))/100.0;

    lumLunga = veml.readLux();
    lum = ((int) (lumLunga*100))/100.0;
 80a0288:	e9c8 0100 	strd	r0, r1, [r8]

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a028c:	4953      	ldr	r1, [pc, #332]	; (80a03dc <loop+0x26c>)
 80a028e:	a806      	add	r0, sp, #24
 80a0290:	f001 f9b9 	bl	80a1606 <_ZN6StringC1EPK19__FlashStringHelper>

    json = "{\"temperatura_terra\": "+String(tempTerra)+",\"umidita_terra\": "+String(humdTerra)+",\"luminosita\": "+String(lum)+",\"temperatura_ambiente\": "+String(tempAmb)+",\"umidita_ambiente\": "+String(humdAmb)+"}";
 80a0294:	e9db 2300 	ldrd	r2, r3, [fp]
 80a0298:	9400      	str	r4, [sp, #0]
 80a029a:	a802      	add	r0, sp, #8
 80a029c:	f001 f9f1 	bl	80a1682 <_ZN6StringC1Edi>
 80a02a0:	a902      	add	r1, sp, #8
 80a02a2:	a806      	add	r0, sp, #24
 80a02a4:	f001 fa1a 	bl	80a16dc <_ZplRK15StringSumHelperRK6String>
 80a02a8:	494d      	ldr	r1, [pc, #308]	; (80a03e0 <loop+0x270>)
 80a02aa:	f001 fa23 	bl	80a16f4 <_ZplRK15StringSumHelperPKc>
 80a02ae:	e9da 2300 	ldrd	r2, r3, [sl]
 80a02b2:	4681      	mov	r9, r0
 80a02b4:	9400      	str	r4, [sp, #0]
 80a02b6:	a80a      	add	r0, sp, #40	; 0x28
 80a02b8:	f001 f9e3 	bl	80a1682 <_ZN6StringC1Edi>
 80a02bc:	a90a      	add	r1, sp, #40	; 0x28
 80a02be:	4648      	mov	r0, r9
 80a02c0:	f001 fa0c 	bl	80a16dc <_ZplRK15StringSumHelperRK6String>
 80a02c4:	4947      	ldr	r1, [pc, #284]	; (80a03e4 <loop+0x274>)
 80a02c6:	f001 fa15 	bl	80a16f4 <_ZplRK15StringSumHelperPKc>
 80a02ca:	4681      	mov	r9, r0
 80a02cc:	9400      	str	r4, [sp, #0]
 80a02ce:	e9d8 2300 	ldrd	r2, r3, [r8]
 80a02d2:	a80e      	add	r0, sp, #56	; 0x38
 80a02d4:	f001 f9d5 	bl	80a1682 <_ZN6StringC1Edi>
 80a02d8:	a90e      	add	r1, sp, #56	; 0x38
 80a02da:	4648      	mov	r0, r9
 80a02dc:	f001 f9fe 	bl	80a16dc <_ZplRK15StringSumHelperRK6String>
 80a02e0:	4941      	ldr	r1, [pc, #260]	; (80a03e8 <loop+0x278>)
 80a02e2:	f001 fa07 	bl	80a16f4 <_ZplRK15StringSumHelperPKc>
 80a02e6:	4680      	mov	r8, r0
 80a02e8:	9400      	str	r4, [sp, #0]
 80a02ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a02ee:	a812      	add	r0, sp, #72	; 0x48
 80a02f0:	f001 f9c7 	bl	80a1682 <_ZN6StringC1Edi>
 80a02f4:	a912      	add	r1, sp, #72	; 0x48
 80a02f6:	4640      	mov	r0, r8
 80a02f8:	f001 f9f0 	bl	80a16dc <_ZplRK15StringSumHelperRK6String>
 80a02fc:	493b      	ldr	r1, [pc, #236]	; (80a03ec <loop+0x27c>)
 80a02fe:	f001 f9f9 	bl	80a16f4 <_ZplRK15StringSumHelperPKc>
 80a0302:	4607      	mov	r7, r0
 80a0304:	9400      	str	r4, [sp, #0]
 80a0306:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a030a:	a816      	add	r0, sp, #88	; 0x58
 80a030c:	f001 f9b9 	bl	80a1682 <_ZN6StringC1Edi>
 80a0310:	a916      	add	r1, sp, #88	; 0x58
 80a0312:	4638      	mov	r0, r7
 80a0314:	f001 f9e2 	bl	80a16dc <_ZplRK15StringSumHelperRK6String>
 80a0318:	4935      	ldr	r1, [pc, #212]	; (80a03f0 <loop+0x280>)
 80a031a:	f001 f9eb 	bl	80a16f4 <_ZplRK15StringSumHelperPKc>
 80a031e:	4601      	mov	r1, r0
 80a0320:	4834      	ldr	r0, [pc, #208]	; (80a03f4 <loop+0x284>)
 80a0322:	f001 f983 	bl	80a162c <_ZN6StringaSERKS_>
 80a0326:	a816      	add	r0, sp, #88	; 0x58
 80a0328:	f001 f926 	bl	80a1578 <_ZN6StringD1Ev>
 80a032c:	a812      	add	r0, sp, #72	; 0x48
 80a032e:	f001 f923 	bl	80a1578 <_ZN6StringD1Ev>
 80a0332:	a80e      	add	r0, sp, #56	; 0x38
 80a0334:	f001 f920 	bl	80a1578 <_ZN6StringD1Ev>
 80a0338:	a80a      	add	r0, sp, #40	; 0x28
 80a033a:	f001 f91d 	bl	80a1578 <_ZN6StringD1Ev>
 80a033e:	a802      	add	r0, sp, #8
 80a0340:	f001 f91a 	bl	80a1578 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0344:	a806      	add	r0, sp, #24
 80a0346:	f001 f917 	bl	80a1578 <_ZN6StringD1Ev>
 80a034a:	f000 fe97 	bl	80a107c <HAL_Timer_Get_Milli_Seconds>

    msVal = millis();
 80a034e:	6028      	str	r0, [r5, #0]
 80a0350:	f000 fe94 	bl	80a107c <HAL_Timer_Get_Milli_Seconds>
  }else{
    bagna="La pianta non ha bisogno di acqua";
    leds.setColorRGB(0, 0, 0, 0);
  } */

  if(millis()-msTimer >= pubTimer){
 80a0354:	4a28      	ldr	r2, [pc, #160]	; (80a03f8 <loop+0x288>)
 80a0356:	6813      	ldr	r3, [r2, #0]
 80a0358:	4615      	mov	r5, r2
 80a035a:	1ac0      	subs	r0, r0, r3
 80a035c:	4b27      	ldr	r3, [pc, #156]	; (80a03fc <loop+0x28c>)
 80a035e:	681b      	ldr	r3, [r3, #0]
 80a0360:	4298      	cmp	r0, r3
 80a0362:	d31f      	bcc.n	80a03a4 <loop+0x234>
 80a0364:	4b23      	ldr	r3, [pc, #140]	; (80a03f4 <loop+0x284>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0366:	4926      	ldr	r1, [pc, #152]	; (80a0400 <loop+0x290>)
 80a0368:	681a      	ldr	r2, [r3, #0]
 80a036a:	4b26      	ldr	r3, [pc, #152]	; (80a0404 <loop+0x294>)
 80a036c:	a816      	add	r0, sp, #88	; 0x58
 80a036e:	781b      	ldrb	r3, [r3, #0]
 80a0370:	f88d 3000 	strb.w	r3, [sp]
 80a0374:	233c      	movs	r3, #60	; 0x3c
 80a0376:	f001 fc91 	bl	80a1c9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a037a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a037c:	b17c      	cbz	r4, 80a039e <loop+0x22e>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a037e:	6863      	ldr	r3, [r4, #4]
 80a0380:	3b01      	subs	r3, #1
 80a0382:	6063      	str	r3, [r4, #4]
 80a0384:	b95b      	cbnz	r3, 80a039e <loop+0x22e>
        {
          _M_dispose();
 80a0386:	6823      	ldr	r3, [r4, #0]
 80a0388:	4620      	mov	r0, r4
 80a038a:	689b      	ldr	r3, [r3, #8]
 80a038c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a038e:	68a3      	ldr	r3, [r4, #8]
 80a0390:	3b01      	subs	r3, #1
 80a0392:	60a3      	str	r3, [r4, #8]
 80a0394:	b91b      	cbnz	r3, 80a039e <loop+0x22e>
            _M_destroy();
 80a0396:	6823      	ldr	r3, [r4, #0]
 80a0398:	4620      	mov	r0, r4
 80a039a:	68db      	ldr	r3, [r3, #12]
 80a039c:	4798      	blx	r3
 80a039e:	f000 fe6d 	bl	80a107c <HAL_Timer_Get_Milli_Seconds>
    Particle.publish("Publish", json, PRIVATE);
    msTimer = millis();
 80a03a2:	6028      	str	r0, [r5, #0]
  }

}
 80a03a4:	b01b      	add	sp, #108	; 0x6c
 80a03a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a03aa:	bf00      	nop
 80a03ac:	20000470 	.word	0x20000470
 80a03b0:	200003e4 	.word	0x200003e4
 80a03b4:	20000468 	.word	0x20000468
 80a03b8:	20000410 	.word	0x20000410
 80a03bc:	20000450 	.word	0x20000450
 80a03c0:	200003a0 	.word	0x200003a0
 80a03c4:	20000438 	.word	0x20000438
 80a03c8:	40590000 	.word	0x40590000
 80a03cc:	20000460 	.word	0x20000460
 80a03d0:	20000390 	.word	0x20000390
 80a03d4:	200003a8 	.word	0x200003a8
 80a03d8:	20000408 	.word	0x20000408
 80a03dc:	080a439e 	.word	0x080a439e
 80a03e0:	080a43b5 	.word	0x080a43b5
 80a03e4:	080a43c8 	.word	0x080a43c8
 80a03e8:	080a43d8 	.word	0x080a43d8
 80a03ec:	080a43f2 	.word	0x080a43f2
 80a03f0:	080a4408 	.word	0x080a4408
 80a03f4:	200003e8 	.word	0x200003e8
 80a03f8:	20000474 	.word	0x20000474
 80a03fc:	20000300 	.word	0x20000300
 80a0400:	080a445b 	.word	0x080a445b
 80a0404:	20000418 	.word	0x20000418
 80a0408:	20000398 	.word	0x20000398
 80a040c:	20000388 	.word	0x20000388
 80a0410:	20000448 	.word	0x20000448

080a0414 <_ZN10CloudClass8variableIA12_cIdEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a0414:	2300      	movs	r3, #0
 80a0416:	2209      	movs	r2, #9
 80a0418:	f000 bf9e 	b.w	80a1358 <spark_variable>

080a041c <setup>:
String json, bagna;

DFRobot_SHT20 sht20;

// setup() runs once, when the device is first turned on.
void setup() {
 80a041c:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
 80a041e:	f001 fe77 	bl	80a2110 <_Z16_fetch_usbserialv>
 80a0422:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0426:	f001 fe59 	bl	80a20dc <_ZN9USBSerial5beginEl>
  leds.init();
 80a042a:	4828      	ldr	r0, [pc, #160]	; (80a04cc <setup+0xb0>)
 80a042c:	f000 fa6e 	bl	80a090c <_ZN12ChainableLED4initEv>
{
public:
    void     checkSHT20(void);
    void     setResolution(byte resBits);
    void     writeUserRegister(byte val);
    void     initSHT20(TwoWire &wirePort = Wire);
 80a0430:	f002 f916 	bl	80a2660 <_Z19__fetch_global_Wirev>
  sht20.initSHT20();
 80a0434:	4601      	mov	r1, r0
 80a0436:	4826      	ldr	r0, [pc, #152]	; (80a04d0 <setup+0xb4>)
 80a0438:	f000 f8c4 	bl	80a05c4 <_ZN13DFRobot_SHT209initSHT20ER7TwoWire>
  delay(100);
 80a043c:	2064      	movs	r0, #100	; 0x64
 80a043e:	f001 fa0f 	bl	80a1860 <delay>
  sht20.checkSHT20();
 80a0442:	4823      	ldr	r0, [pc, #140]	; (80a04d0 <setup+0xb4>)
 80a0444:	f000 f98c 	bl	80a0760 <_ZN13DFRobot_SHT2010checkSHT20Ev>
  Particle.variable("Umidità Terra", humdTerra);
 80a0448:	4922      	ldr	r1, [pc, #136]	; (80a04d4 <setup+0xb8>)
 80a044a:	4823      	ldr	r0, [pc, #140]	; (80a04d8 <setup+0xbc>)
 80a044c:	f7ff ffe2 	bl	80a0414 <_ZN10CloudClass8variableIA12_cIdEEEbRKT_DpRKT0_>
  Particle.variable("Temperatura Terra", tempTerra);
 80a0450:	4922      	ldr	r1, [pc, #136]	; (80a04dc <setup+0xc0>)
 80a0452:	4823      	ldr	r0, [pc, #140]	; (80a04e0 <setup+0xc4>)
 80a0454:	f7ff ffde 	bl	80a0414 <_ZN10CloudClass8variableIA12_cIdEEEbRKT_DpRKT0_>
  Particle.variable("Umidità Amb", humdAmb);
 80a0458:	4922      	ldr	r1, [pc, #136]	; (80a04e4 <setup+0xc8>)
 80a045a:	4823      	ldr	r0, [pc, #140]	; (80a04e8 <setup+0xcc>)
 80a045c:	f7ff ffda 	bl	80a0414 <_ZN10CloudClass8variableIA12_cIdEEEbRKT_DpRKT0_>
  Particle.variable("Temperatura Amb", tempAmb);
 80a0460:	4922      	ldr	r1, [pc, #136]	; (80a04ec <setup+0xd0>)
 80a0462:	4823      	ldr	r0, [pc, #140]	; (80a04f0 <setup+0xd4>)
 80a0464:	f7ff ffd6 	bl	80a0414 <_ZN10CloudClass8variableIA12_cIdEEEbRKT_DpRKT0_>
  //Particle.variable("Soglia", soglia);
  Particle.variable("Luminosità", lum);
 80a0468:	4922      	ldr	r1, [pc, #136]	; (80a04f4 <setup+0xd8>)
 80a046a:	4823      	ldr	r0, [pc, #140]	; (80a04f8 <setup+0xdc>)
 80a046c:	f7ff ffd2 	bl	80a0414 <_ZN10CloudClass8variableIA12_cIdEEEbRKT_DpRKT0_>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a0470:	4a22      	ldr	r2, [pc, #136]	; (80a04fc <setup+0xe0>)
 80a0472:	4923      	ldr	r1, [pc, #140]	; (80a0500 <setup+0xe4>)
 80a0474:	4823      	ldr	r0, [pc, #140]	; (80a0504 <setup+0xe8>)
 80a0476:	f001 fb06 	bl	80a1a86 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  //Particle.function("modUmidità", modUm);
  Particle.function("Valori Publish", modValori);

  sht31.begin();
 80a047a:	2144      	movs	r1, #68	; 0x44
 80a047c:	4822      	ldr	r0, [pc, #136]	; (80a0508 <setup+0xec>)
 80a047e:	f000 fd24 	bl	80a0eca <_ZN5SHT315beginEh>
 */
class Adafruit_VEML7700
{
public:
  Adafruit_VEML7700();
  boolean begin(TwoWire *theWire = &Wire);
 80a0482:	f002 f8ed 	bl	80a2660 <_Z19__fetch_global_Wirev>

  if (!veml.begin()){
 80a0486:	4601      	mov	r1, r0
 80a0488:	4820      	ldr	r0, [pc, #128]	; (80a050c <setup+0xf0>)
 80a048a:	f000 fad4 	bl	80a0a36 <_ZN17Adafruit_VEML77005beginEP7TwoWire>
 80a048e:	b928      	cbnz	r0, 80a049c <setup+0x80>
    Serial.println("Sensore non trovato");
 80a0490:	f001 fe3e 	bl	80a2110 <_Z16_fetch_usbserialv>
 80a0494:	491e      	ldr	r1, [pc, #120]	; (80a0510 <setup+0xf4>)
 80a0496:	f001 f978 	bl	80a178a <_ZN5Print7printlnEPKc>
 80a049a:	e7fe      	b.n	80a049a <setup+0x7e>
    while (1);
  }

  veml.setGain(VEML7700_GAIN_1);
 80a049c:	2100      	movs	r1, #0
 80a049e:	481b      	ldr	r0, [pc, #108]	; (80a050c <setup+0xf0>)
 80a04a0:	f000 fa66 	bl	80a0970 <_ZN17Adafruit_VEML77007setGainEh>
  veml.setIntegrationTime(VEML7700_IT_800MS);
 80a04a4:	2103      	movs	r1, #3
 80a04a6:	4819      	ldr	r0, [pc, #100]	; (80a050c <setup+0xf0>)
 80a04a8:	f000 fa59 	bl	80a095e <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
  veml.setLowThreshold(10000);
 80a04ac:	f242 7110 	movw	r1, #10000	; 0x2710
 80a04b0:	4816      	ldr	r0, [pc, #88]	; (80a050c <setup+0xf0>)
 80a04b2:	f000 fba9 	bl	80a0c08 <_ZN17Adafruit_VEML770015setLowThresholdEt>
  veml.setHighThreshold(20000);
 80a04b6:	f644 6120 	movw	r1, #20000	; 0x4e20
 80a04ba:	4814      	ldr	r0, [pc, #80]	; (80a050c <setup+0xf0>)
 80a04bc:	f000 fba8 	bl	80a0c10 <_ZN17Adafruit_VEML770016setHighThresholdEt>
  veml.interruptEnable(true);
}
 80a04c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  veml.setGain(VEML7700_GAIN_1);
  veml.setIntegrationTime(VEML7700_IT_800MS);
  veml.setLowThreshold(10000);
  veml.setHighThreshold(20000);
  veml.interruptEnable(true);
 80a04c4:	2101      	movs	r1, #1
 80a04c6:	4811      	ldr	r0, [pc, #68]	; (80a050c <setup+0xf0>)
 80a04c8:	f000 ba43 	b.w	80a0952 <_ZN17Adafruit_VEML770015interruptEnableEb>
 80a04cc:	2000037c 	.word	0x2000037c
 80a04d0:	200003e4 	.word	0x200003e4
 80a04d4:	20000398 	.word	0x20000398
 80a04d8:	080a440a 	.word	0x080a440a
 80a04dc:	20000388 	.word	0x20000388
 80a04e0:	080a4419 	.word	0x080a4419
 80a04e4:	20000460 	.word	0x20000460
 80a04e8:	080a442b 	.word	0x080a442b
 80a04ec:	20000390 	.word	0x20000390
 80a04f0:	080a4438 	.word	0x080a4438
 80a04f4:	20000448 	.word	0x20000448
 80a04f8:	080a4448 	.word	0x080a4448
 80a04fc:	080a4454 	.word	0x080a4454
 80a0500:	080a00b5 	.word	0x080a00b5
 80a0504:	080a1a5b 	.word	0x080a1a5b
 80a0508:	20000450 	.word	0x20000450
 80a050c:	200003a8 	.word	0x200003a8
 80a0510:	080a4463 	.word	0x080a4463

080a0514 <_GLOBAL__sub_I_leds>:
    }else{
      return -1;
    }
  }
  return 1;
 80a0514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0516:	4b1d      	ldr	r3, [pc, #116]	; (80a058c <_GLOBAL__sub_I_leds+0x78>)
 80a0518:	2401      	movs	r4, #1
#include "Adafruit_VEML7700.h"
#include "SHT31.h"

#define NUM_LEDS  1

ChainableLED leds(D2, D3, NUM_LEDS);
 80a051a:	4d1d      	ldr	r5, [pc, #116]	; (80a0590 <_GLOBAL__sub_I_leds+0x7c>)
 80a051c:	701c      	strb	r4, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a051e:	f000 fd6d 	bl	80a0ffc <HAL_Pin_Map>
 80a0522:	4623      	mov	r3, r4
 80a0524:	4c1b      	ldr	r4, [pc, #108]	; (80a0594 <_GLOBAL__sub_I_leds+0x80>)
 80a0526:	2203      	movs	r2, #3
 80a0528:	2102      	movs	r1, #2
 80a052a:	4628      	mov	r0, r5
 80a052c:	f000 f93a 	bl	80a07a4 <_ZN12ChainableLEDC1Ehhh>
 80a0530:	4622      	mov	r2, r4
 80a0532:	4919      	ldr	r1, [pc, #100]	; (80a0598 <_GLOBAL__sub_I_leds+0x84>)
 80a0534:	4628      	mov	r0, r5
 80a0536:	f002 f8b3 	bl	80a26a0 <__aeabi_atexit>

Adafruit_VEML7700 veml;
 80a053a:	4818      	ldr	r0, [pc, #96]	; (80a059c <_GLOBAL__sub_I_leds+0x88>)
 80a053c:	f000 fa03 	bl	80a0946 <_ZN17Adafruit_VEML7700C1Ev>

SHT31 sht31 = SHT31();
 80a0540:	4817      	ldr	r0, [pc, #92]	; (80a05a0 <_GLOBAL__sub_I_leds+0x8c>)
 80a0542:	f000 fc8b 	bl	80a0e5c <_ZN5SHT31C1Ev>

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
      {
	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
	: allocator_type(__a), _M_p(__dat) { }
 80a0546:	4817      	ldr	r0, [pc, #92]	; (80a05a4 <_GLOBAL__sub_I_leds+0x90>)

const uint32_t msUm_CONST = 5000;
uint32_t msVal, msLed, msTimer,pubTimer = 60000, n, msBagna;
int status;
double humdTerra, tempTerra, humdTerraLunga, tempTerraLunga, lum, lumLunga, humdAmb, tempAmb, humdAmbLunga, tempAmbLunga;
String json, bagna;
 80a0548:	4f17      	ldr	r7, [pc, #92]	; (80a05a8 <_GLOBAL__sub_I_leds+0x94>)
 80a054a:	f100 0308 	add.w	r3, r0, #8
 80a054e:	4d17      	ldr	r5, [pc, #92]	; (80a05ac <_GLOBAL__sub_I_leds+0x98>)
 80a0550:	6003      	str	r3, [r0, #0]
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }
 80a0552:	2300      	movs	r3, #0
 80a0554:	6043      	str	r3, [r0, #4]
 80a0556:	7203      	strb	r3, [r0, #8]

Adafruit_VEML7700 veml;

SHT31 sht31 = SHT31();

std::string s;
 80a0558:	4622      	mov	r2, r4
 80a055a:	4915      	ldr	r1, [pc, #84]	; (80a05b0 <_GLOBAL__sub_I_leds+0x9c>)
 80a055c:	f002 f8a0 	bl	80a26a0 <__aeabi_atexit>

const uint32_t msUm_CONST = 5000;
uint32_t msVal, msLed, msTimer,pubTimer = 60000, n, msBagna;
int status;
double humdTerra, tempTerra, humdTerraLunga, tempTerraLunga, lum, lumLunga, humdAmb, tempAmb, humdAmbLunga, tempAmbLunga;
String json, bagna;
 80a0560:	4e14      	ldr	r6, [pc, #80]	; (80a05b4 <_GLOBAL__sub_I_leds+0xa0>)
 80a0562:	4639      	mov	r1, r7
 80a0564:	4628      	mov	r0, r5
 80a0566:	f001 f84e 	bl	80a1606 <_ZN6StringC1EPK19__FlashStringHelper>
 80a056a:	4628      	mov	r0, r5
 80a056c:	4d12      	ldr	r5, [pc, #72]	; (80a05b8 <_GLOBAL__sub_I_leds+0xa4>)
 80a056e:	4622      	mov	r2, r4
 80a0570:	4631      	mov	r1, r6
 80a0572:	f002 f895 	bl	80a26a0 <__aeabi_atexit>
 80a0576:	4639      	mov	r1, r7
 80a0578:	4628      	mov	r0, r5
 80a057a:	f001 f844 	bl	80a1606 <_ZN6StringC1EPK19__FlashStringHelper>
 80a057e:	4622      	mov	r2, r4
 80a0580:	4631      	mov	r1, r6
 80a0582:	4628      	mov	r0, r5
    }else{
      return -1;
    }
  }
  return 1;
 80a0584:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

const uint32_t msUm_CONST = 5000;
uint32_t msVal, msLed, msTimer,pubTimer = 60000, n, msBagna;
int status;
double humdTerra, tempTerra, humdTerraLunga, tempTerraLunga, lum, lumLunga, humdAmb, tempAmb, humdAmbLunga, tempAmbLunga;
String json, bagna;
 80a0588:	f002 b88a 	b.w	80a26a0 <__aeabi_atexit>
 80a058c:	20000418 	.word	0x20000418
 80a0590:	2000037c 	.word	0x2000037c
 80a0594:	20000378 	.word	0x20000378
 80a0598:	080a07bf 	.word	0x080a07bf
 80a059c:	200003a8 	.word	0x200003a8
 80a05a0:	20000450 	.word	0x20000450
 80a05a4:	2000041c 	.word	0x2000041c
 80a05a8:	080a44de 	.word	0x080a44de
 80a05ac:	200003e8 	.word	0x200003e8
 80a05b0:	080a284d 	.word	0x080a284d
 80a05b4:	080a1579 	.word	0x080a1579
 80a05b8:	200003f8 	.word	0x200003f8

080a05bc <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a05bc:	6803      	ldr	r3, [r0, #0]
 80a05be:	b2c9      	uxtb	r1, r1
 80a05c0:	689b      	ldr	r3, [r3, #8]
 80a05c2:	4718      	bx	r3

080a05c4 <_ZN13DFRobot_SHT209initSHT20ER7TwoWire>:
#include "DFRobot_SHT20.h"

void DFRobot_SHT20::initSHT20(TwoWire &wirePort)
{
    i2cPort = &wirePort;
 80a05c4:	6001      	str	r1, [r0, #0]
    i2cPort->begin();
 80a05c6:	4608      	mov	r0, r1
 80a05c8:	f001 bed8 	b.w	80a237c <_ZN7TwoWire5beginEv>

080a05cc <_ZN13DFRobot_SHT2016readUserRegisterEv>:
    userRegister |= resolution;
    writeUserRegister(userRegister);
}

byte DFRobot_SHT20::readUserRegister(void)
{
 80a05cc:	b510      	push	{r4, lr}
 80a05ce:	4604      	mov	r4, r0
    byte userRegister;
    i2cPort->beginTransmission(SLAVE_ADDRESS);
 80a05d0:	2140      	movs	r1, #64	; 0x40
 80a05d2:	6800      	ldr	r0, [r0, #0]
 80a05d4:	f001 feed 	bl	80a23b2 <_ZN7TwoWire17beginTransmissionEi>
    i2cPort->write(READ_USER_REG);
 80a05d8:	21e7      	movs	r1, #231	; 0xe7
 80a05da:	6820      	ldr	r0, [r4, #0]
 80a05dc:	f7ff ffee 	bl	80a05bc <_ZN7TwoWire5writeEi>
    i2cPort->endTransmission();
 80a05e0:	6820      	ldr	r0, [r4, #0]
 80a05e2:	f001 feed 	bl	80a23c0 <_ZN7TwoWire15endTransmissionEv>
    i2cPort->requestFrom(SLAVE_ADDRESS, 1);
 80a05e6:	2201      	movs	r2, #1
 80a05e8:	2140      	movs	r1, #64	; 0x40
 80a05ea:	6820      	ldr	r0, [r4, #0]
 80a05ec:	f001 fed8 	bl	80a23a0 <_ZN7TwoWire11requestFromEii>
    userRegister = i2cPort->read();
 80a05f0:	6820      	ldr	r0, [r4, #0]
 80a05f2:	6803      	ldr	r3, [r0, #0]
 80a05f4:	695b      	ldr	r3, [r3, #20]
 80a05f6:	4798      	blx	r3
    return (userRegister);
}
 80a05f8:	b2c0      	uxtb	r0, r0
 80a05fa:	bd10      	pop	{r4, pc}

080a05fc <_ZN13DFRobot_SHT208checkCRCEth>:
}

byte DFRobot_SHT20::checkCRC(uint16_t message_from_sensor, uint8_t check_value_from_sensor)
{
    uint32_t remainder = (uint32_t)message_from_sensor << 8;
    remainder |= check_value_from_sensor;
 80a05fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
 80a0600:	4907      	ldr	r1, [pc, #28]	; (80a0620 <_ZN13DFRobot_SHT208checkCRCEth+0x24>)
}

byte DFRobot_SHT20::checkCRC(uint16_t message_from_sensor, uint8_t check_value_from_sensor)
{
    uint32_t remainder = (uint32_t)message_from_sensor << 8;
    remainder |= check_value_from_sensor;
 80a0602:	2317      	movs	r3, #23
    uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
    for(int i = 0 ; i < 16 ; i++){
        if(remainder & (uint32_t)1 << (23 - i)){
 80a0604:	fa22 f003 	lsr.w	r0, r2, r3
 80a0608:	07c0      	lsls	r0, r0, #31
 80a060a:	f103 33ff 	add.w	r3, r3, #4294967295
            remainder ^= divsor;
 80a060e:	bf48      	it	mi
 80a0610:	404a      	eormi	r2, r1
byte DFRobot_SHT20::checkCRC(uint16_t message_from_sensor, uint8_t check_value_from_sensor)
{
    uint32_t remainder = (uint32_t)message_from_sensor << 8;
    remainder |= check_value_from_sensor;
    uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
    for(int i = 0 ; i < 16 ; i++){
 80a0612:	2b07      	cmp	r3, #7
        if(remainder & (uint32_t)1 << (23 - i)){
            remainder ^= divsor;
        }
        divsor >>= 1;
 80a0614:	ea4f 0151 	mov.w	r1, r1, lsr #1
byte DFRobot_SHT20::checkCRC(uint16_t message_from_sensor, uint8_t check_value_from_sensor)
{
    uint32_t remainder = (uint32_t)message_from_sensor << 8;
    remainder |= check_value_from_sensor;
    uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
    for(int i = 0 ; i < 16 ; i++){
 80a0618:	d1f4      	bne.n	80a0604 <_ZN13DFRobot_SHT208checkCRCEth+0x8>
            remainder ^= divsor;
        }
        divsor >>= 1;
    }
    return (byte)remainder;
}
 80a061a:	b2d0      	uxtb	r0, r2
 80a061c:	4770      	bx	lr
 80a061e:	bf00      	nop
 80a0620:	00988000 	.word	0x00988000

080a0624 <_ZN13DFRobot_SHT209readValueEh>:
    i2cPort = &wirePort;
    i2cPort->begin();
}

uint16_t DFRobot_SHT20::readValue(byte cmd)
{
 80a0624:	b570      	push	{r4, r5, r6, lr}
 80a0626:	4606      	mov	r6, r0
 80a0628:	460c      	mov	r4, r1
    i2cPort->beginTransmission(SLAVE_ADDRESS);
 80a062a:	6800      	ldr	r0, [r0, #0]
 80a062c:	2140      	movs	r1, #64	; 0x40
 80a062e:	f001 fec0 	bl	80a23b2 <_ZN7TwoWire17beginTransmissionEi>
    i2cPort->write(cmd);
 80a0632:	6830      	ldr	r0, [r6, #0]
 80a0634:	4621      	mov	r1, r4
 80a0636:	6803      	ldr	r3, [r0, #0]
    i2cPort->endTransmission();
 80a0638:	240a      	movs	r4, #10
}

uint16_t DFRobot_SHT20::readValue(byte cmd)
{
    i2cPort->beginTransmission(SLAVE_ADDRESS);
    i2cPort->write(cmd);
 80a063a:	689b      	ldr	r3, [r3, #8]
 80a063c:	4798      	blx	r3
    i2cPort->endTransmission();
 80a063e:	6830      	ldr	r0, [r6, #0]
 80a0640:	f001 febe 	bl	80a23c0 <_ZN7TwoWire15endTransmissionEv>
    byte toRead;
    byte counter;
    for(counter = 0, toRead = 0 ; counter < MAX_COUNTER && toRead != 3; counter++){
        delay(DELAY_INTERVAL);
 80a0644:	200a      	movs	r0, #10
 80a0646:	f001 f90b 	bl	80a1860 <delay>
 80a064a:	3c01      	subs	r4, #1
        toRead = i2cPort->requestFrom(SLAVE_ADDRESS, 3);
 80a064c:	2203      	movs	r2, #3
 80a064e:	2140      	movs	r1, #64	; 0x40
 80a0650:	6830      	ldr	r0, [r6, #0]
 80a0652:	f001 fea5 	bl	80a23a0 <_ZN7TwoWire11requestFromEii>
    i2cPort->beginTransmission(SLAVE_ADDRESS);
    i2cPort->write(cmd);
    i2cPort->endTransmission();
    byte toRead;
    byte counter;
    for(counter = 0, toRead = 0 ; counter < MAX_COUNTER && toRead != 3; counter++){
 80a0656:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a065a:	d002      	beq.n	80a0662 <_ZN13DFRobot_SHT209readValueEh+0x3e>
 80a065c:	2803      	cmp	r0, #3
 80a065e:	d1f1      	bne.n	80a0644 <_ZN13DFRobot_SHT209readValueEh+0x20>
 80a0660:	e002      	b.n	80a0668 <_ZN13DFRobot_SHT209readValueEh+0x44>
        delay(DELAY_INTERVAL);
        toRead = i2cPort->requestFrom(SLAVE_ADDRESS, 3);
    }
    if(counter == MAX_COUNTER){
        return (ERROR_I2C_TIMEOUT);
 80a0662:	f240 30e6 	movw	r0, #998	; 0x3e6
 80a0666:	bd70      	pop	{r4, r5, r6, pc}
    }
    byte msb, lsb, checksum;
    msb = i2cPort->read();
 80a0668:	6830      	ldr	r0, [r6, #0]
 80a066a:	6803      	ldr	r3, [r0, #0]
 80a066c:	695b      	ldr	r3, [r3, #20]
 80a066e:	4798      	blx	r3
 80a0670:	4605      	mov	r5, r0
    lsb = i2cPort->read();
 80a0672:	6830      	ldr	r0, [r6, #0]
    checksum = i2cPort->read();
    uint16_t rawValue = ((uint16_t) msb << 8) | (uint16_t) lsb;
 80a0674:	022d      	lsls	r5, r5, #8
    if(counter == MAX_COUNTER){
        return (ERROR_I2C_TIMEOUT);
    }
    byte msb, lsb, checksum;
    msb = i2cPort->read();
    lsb = i2cPort->read();
 80a0676:	6803      	ldr	r3, [r0, #0]
    checksum = i2cPort->read();
    uint16_t rawValue = ((uint16_t) msb << 8) | (uint16_t) lsb;
 80a0678:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    if(counter == MAX_COUNTER){
        return (ERROR_I2C_TIMEOUT);
    }
    byte msb, lsb, checksum;
    msb = i2cPort->read();
    lsb = i2cPort->read();
 80a067c:	695b      	ldr	r3, [r3, #20]
 80a067e:	4798      	blx	r3
 80a0680:	4604      	mov	r4, r0
    checksum = i2cPort->read();
 80a0682:	6830      	ldr	r0, [r6, #0]
    uint16_t rawValue = ((uint16_t) msb << 8) | (uint16_t) lsb;
 80a0684:	b2e4      	uxtb	r4, r4
        return (ERROR_I2C_TIMEOUT);
    }
    byte msb, lsb, checksum;
    msb = i2cPort->read();
    lsb = i2cPort->read();
    checksum = i2cPort->read();
 80a0686:	6803      	ldr	r3, [r0, #0]
    uint16_t rawValue = ((uint16_t) msb << 8) | (uint16_t) lsb;
 80a0688:	432c      	orrs	r4, r5
        return (ERROR_I2C_TIMEOUT);
    }
    byte msb, lsb, checksum;
    msb = i2cPort->read();
    lsb = i2cPort->read();
    checksum = i2cPort->read();
 80a068a:	695b      	ldr	r3, [r3, #20]
 80a068c:	4798      	blx	r3
    uint16_t rawValue = ((uint16_t) msb << 8) | (uint16_t) lsb;
    if(checkCRC(rawValue, checksum) != 0){
 80a068e:	4621      	mov	r1, r4
 80a0690:	b2c2      	uxtb	r2, r0
 80a0692:	4630      	mov	r0, r6
 80a0694:	f7ff ffb2 	bl	80a05fc <_ZN13DFRobot_SHT208checkCRCEth>
 80a0698:	b918      	cbnz	r0, 80a06a2 <_ZN13DFRobot_SHT209readValueEh+0x7e>
        return (ERROR_BAD_CRC);
    }
    return rawValue & 0xFFFC;
 80a069a:	f024 0003 	bic.w	r0, r4, #3
 80a069e:	b280      	uxth	r0, r0
 80a06a0:	bd70      	pop	{r4, r5, r6, pc}
    msb = i2cPort->read();
    lsb = i2cPort->read();
    checksum = i2cPort->read();
    uint16_t rawValue = ((uint16_t) msb << 8) | (uint16_t) lsb;
    if(checkCRC(rawValue, checksum) != 0){
        return (ERROR_BAD_CRC);
 80a06a2:	f240 30e7 	movw	r0, #999	; 0x3e7
 80a06a6:	bd70      	pop	{r4, r5, r6, pc}

080a06a8 <_ZN13DFRobot_SHT2012readHumidityEv>:
    }
    return rawValue & 0xFFFC;
}

float DFRobot_SHT20::readHumidity(void)
{
 80a06a8:	b508      	push	{r3, lr}
    uint16_t rawHumidity = readValue(TRIGGER_HUMD_MEASURE_NOHOLD);
 80a06aa:	21f5      	movs	r1, #245	; 0xf5
 80a06ac:	f7ff ffba 	bl	80a0624 <_ZN13DFRobot_SHT209readValueEh>
    if(rawHumidity == ERROR_I2C_TIMEOUT || rawHumidity == ERROR_BAD_CRC){
 80a06b0:	f2a0 33e6 	subw	r3, r0, #998	; 0x3e6
 80a06b4:	b29b      	uxth	r3, r3
 80a06b6:	2b01      	cmp	r3, #1
 80a06b8:	d802      	bhi.n	80a06c0 <_ZN13DFRobot_SHT2012readHumidityEv+0x18>
        return(rawHumidity);
 80a06ba:	f003 f9bb 	bl	80a3a34 <__aeabi_ui2f>
 80a06be:	bd08      	pop	{r3, pc}
    }
    float tempRH = rawHumidity * (125.0 / 65536.0);
    float rh = tempRH - 6.0;
 80a06c0:	f002 fd6a 	bl	80a3198 <__aeabi_i2d>
 80a06c4:	2200      	movs	r2, #0
 80a06c6:	4b04      	ldr	r3, [pc, #16]	; (80a06d8 <_ZN13DFRobot_SHT2012readHumidityEv+0x30>)
 80a06c8:	f002 fdcc 	bl	80a3264 <__aeabi_dmul>
 80a06cc:	f003 f8ac 	bl	80a3828 <__aeabi_d2f>
 80a06d0:	4902      	ldr	r1, [pc, #8]	; (80a06dc <_ZN13DFRobot_SHT2012readHumidityEv+0x34>)
 80a06d2:	f003 f8fd 	bl	80a38d0 <__aeabi_fsub>
    return (rh);
}
 80a06d6:	bd08      	pop	{r3, pc}
 80a06d8:	3f5f4000 	.word	0x3f5f4000
 80a06dc:	40c00000 	.word	0x40c00000

080a06e0 <_ZN13DFRobot_SHT2015readTemperatureEv>:

float DFRobot_SHT20::readTemperature(void)
{
 80a06e0:	b508      	push	{r3, lr}
    uint16_t rawTemperature = readValue(TRIGGER_TEMP_MEASURE_NOHOLD);
 80a06e2:	21f3      	movs	r1, #243	; 0xf3
 80a06e4:	f7ff ff9e 	bl	80a0624 <_ZN13DFRobot_SHT209readValueEh>
    if(rawTemperature == ERROR_I2C_TIMEOUT || rawTemperature == ERROR_BAD_CRC){
 80a06e8:	f2a0 33e6 	subw	r3, r0, #998	; 0x3e6
 80a06ec:	b29b      	uxth	r3, r3
 80a06ee:	2b01      	cmp	r3, #1
 80a06f0:	d802      	bhi.n	80a06f8 <_ZN13DFRobot_SHT2015readTemperatureEv+0x18>
        return(rawTemperature);
 80a06f2:	f003 f99f 	bl	80a3a34 <__aeabi_ui2f>
 80a06f6:	bd08      	pop	{r3, pc}
    }
    float tempTemperature = rawTemperature * (175.72 / 65536.0);
    float realTemperature = tempTemperature - 46.85;
 80a06f8:	f002 fd4e 	bl	80a3198 <__aeabi_i2d>
 80a06fc:	a308      	add	r3, pc, #32	; (adr r3, 80a0720 <_ZN13DFRobot_SHT2015readTemperatureEv+0x40>)
 80a06fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0702:	f002 fdaf 	bl	80a3264 <__aeabi_dmul>
 80a0706:	f003 f88f 	bl	80a3828 <__aeabi_d2f>
 80a070a:	f002 fd57 	bl	80a31bc <__aeabi_f2d>
 80a070e:	a306      	add	r3, pc, #24	; (adr r3, 80a0728 <_ZN13DFRobot_SHT2015readTemperatureEv+0x48>)
 80a0710:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0714:	f002 fbf2 	bl	80a2efc <__aeabi_dsub>
 80a0718:	f003 f886 	bl	80a3828 <__aeabi_d2f>
    return (realTemperature);
}
 80a071c:	bd08      	pop	{r3, pc}
 80a071e:	bf00      	nop
 80a0720:	3d70a3d7 	.word	0x3d70a3d7
 80a0724:	3f65f70a 	.word	0x3f65f70a
 80a0728:	cccccccd 	.word	0xcccccccd
 80a072c:	40476ccc 	.word	0x40476ccc

080a0730 <_ZN13DFRobot_SHT2010showReslutEPKci>:
    }
    return (byte)remainder;
}

void DFRobot_SHT20::showReslut(const char *prefix, int val)
{
 80a0730:	b538      	push	{r3, r4, r5, lr}
 80a0732:	460d      	mov	r5, r1
 80a0734:	4614      	mov	r4, r2
    Serial.print(prefix);
 80a0736:	f001 fceb 	bl	80a2110 <_Z16_fetch_usbserialv>
 80a073a:	4629      	mov	r1, r5
 80a073c:	f001 f812 	bl	80a1764 <_ZN5Print5printEPKc>
    if(val){
 80a0740:	b11c      	cbz	r4, 80a074a <_ZN13DFRobot_SHT2010showReslutEPKci+0x1a>
        Serial.println("yes");
 80a0742:	f001 fce5 	bl	80a2110 <_Z16_fetch_usbserialv>
 80a0746:	4904      	ldr	r1, [pc, #16]	; (80a0758 <_ZN13DFRobot_SHT2010showReslutEPKci+0x28>)
 80a0748:	e002      	b.n	80a0750 <_ZN13DFRobot_SHT2010showReslutEPKci+0x20>
    }else{
        Serial.println("no");
 80a074a:	f001 fce1 	bl	80a2110 <_Z16_fetch_usbserialv>
 80a074e:	4903      	ldr	r1, [pc, #12]	; (80a075c <_ZN13DFRobot_SHT2010showReslutEPKci+0x2c>)
    }
}
 80a0750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
    Serial.print(prefix);
    if(val){
        Serial.println("yes");
    }else{
        Serial.println("no");
 80a0754:	f001 b819 	b.w	80a178a <_ZN5Print7printlnEPKc>
 80a0758:	080a4477 	.word	0x080a4477
 80a075c:	080a447b 	.word	0x080a447b

080a0760 <_ZN13DFRobot_SHT2010checkSHT20Ev>:
    }
}

void DFRobot_SHT20::checkSHT20(void)
{
 80a0760:	b538      	push	{r3, r4, r5, lr}
 80a0762:	4604      	mov	r4, r0
    byte reg = readUserRegister();
 80a0764:	f7ff ff32 	bl	80a05cc <_ZN13DFRobot_SHT2016readUserRegisterEv>
 80a0768:	4605      	mov	r5, r0
    showReslut("End of battery: ", reg & USER_REGISTER_END_OF_BATTERY);
 80a076a:	f000 0240 	and.w	r2, r0, #64	; 0x40
 80a076e:	4909      	ldr	r1, [pc, #36]	; (80a0794 <_ZN13DFRobot_SHT2010checkSHT20Ev+0x34>)
 80a0770:	4620      	mov	r0, r4
 80a0772:	f7ff ffdd 	bl	80a0730 <_ZN13DFRobot_SHT2010showReslutEPKci>
    showReslut("Heater enabled: ", reg & USER_REGISTER_HEATER_ENABLED);
 80a0776:	f005 0204 	and.w	r2, r5, #4
 80a077a:	4620      	mov	r0, r4
 80a077c:	4906      	ldr	r1, [pc, #24]	; (80a0798 <_ZN13DFRobot_SHT2010checkSHT20Ev+0x38>)
 80a077e:	f7ff ffd7 	bl	80a0730 <_ZN13DFRobot_SHT2010showReslutEPKci>
    showReslut("Disable OTP reload: ", reg & USER_REGISTER_DISABLE_OTP_RELOAD);
 80a0782:	f005 0202 	and.w	r2, r5, #2
 80a0786:	4620      	mov	r0, r4
 80a0788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void DFRobot_SHT20::checkSHT20(void)
{
    byte reg = readUserRegister();
    showReslut("End of battery: ", reg & USER_REGISTER_END_OF_BATTERY);
    showReslut("Heater enabled: ", reg & USER_REGISTER_HEATER_ENABLED);
    showReslut("Disable OTP reload: ", reg & USER_REGISTER_DISABLE_OTP_RELOAD);
 80a078c:	4903      	ldr	r1, [pc, #12]	; (80a079c <_ZN13DFRobot_SHT2010checkSHT20Ev+0x3c>)
 80a078e:	f7ff bfcf 	b.w	80a0730 <_ZN13DFRobot_SHT2010showReslutEPKci>
 80a0792:	bf00      	nop
 80a0794:	080a447e 	.word	0x080a447e
 80a0798:	080a448f 	.word	0x080a448f
 80a079c:	080a44a0 	.word	0x080a44a0

080a07a0 <_GLOBAL__sub_I__ZN13DFRobot_SHT209initSHT20ER7TwoWire>:
 80a07a0:	f000 bc2c 	b.w	80a0ffc <HAL_Pin_Map>

080a07a4 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
 80a07a4:	b510      	push	{r4, lr}
 80a07a6:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
 80a07a8:	7001      	strb	r1, [r0, #0]
 80a07aa:	7042      	strb	r2, [r0, #1]
 80a07ac:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
 80a07ae:	2101      	movs	r1, #1
 80a07b0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80a07b4:	f003 fc9e 	bl	80a40f4 <calloc>
 80a07b8:	6060      	str	r0, [r4, #4]
}
 80a07ba:	4620      	mov	r0, r4
 80a07bc:	bd10      	pop	{r4, pc}

080a07be <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
 80a07be:	b510      	push	{r4, lr}
 80a07c0:	4604      	mov	r4, r0
{
    free(_led_state);
 80a07c2:	6840      	ldr	r0, [r0, #4]
 80a07c4:	f000 fdf0 	bl	80a13a8 <free>
}
 80a07c8:	4620      	mov	r0, r4
 80a07ca:	bd10      	pop	{r4, pc}

080a07cc <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
 80a07cc:	b510      	push	{r4, lr}
 80a07ce:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
 80a07d0:	2100      	movs	r1, #0
 80a07d2:	7800      	ldrb	r0, [r0, #0]
 80a07d4:	f001 fef1 	bl	80a25ba <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a07d8:	2014      	movs	r0, #20
 80a07da:	f000 fc47 	bl	80a106c <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
 80a07de:	7820      	ldrb	r0, [r4, #0]
 80a07e0:	2101      	movs	r1, #1
 80a07e2:	f001 feea 	bl	80a25ba <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
 80a07e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a07ea:	2014      	movs	r0, #20
 80a07ec:	f000 bc3e 	b.w	80a106c <HAL_Delay_Microseconds>

080a07f0 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
 80a07f0:	b570      	push	{r4, r5, r6, lr}
 80a07f2:	4606      	mov	r6, r0
 80a07f4:	460d      	mov	r5, r1
 80a07f6:	2408      	movs	r4, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
 80a07f8:	f015 0f80 	tst.w	r5, #128	; 0x80
            digitalWrite(_data_pin, HIGH);
 80a07fc:	bf14      	ite	ne
 80a07fe:	2101      	movne	r1, #1
        else
            digitalWrite(_data_pin, LOW);
 80a0800:	2100      	moveq	r1, #0
 80a0802:	7870      	ldrb	r0, [r6, #1]
 80a0804:	f001 fed9 	bl	80a25ba <digitalWrite>
 80a0808:	3c01      	subs	r4, #1
        clk();
 80a080a:	4630      	mov	r0, r6
 80a080c:	f7ff ffde 	bl	80a07cc <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
 80a0810:	006d      	lsls	r5, r5, #1
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
 80a0812:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
        else
            digitalWrite(_data_pin, LOW);
        clk();

        // Advance to the next bit to send
        b <<= 1;
 80a0816:	b2ed      	uxtb	r5, r5
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
 80a0818:	d1ee      	bne.n	80a07f8 <_ZN12ChainableLED8sendByteEh+0x8>
        clk();

        // Advance to the next bit to send
        b <<= 1;
    }
}
 80a081a:	bd70      	pop	{r4, r5, r6, pc}

080a081c <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
 80a081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a081e:	4616      	mov	r6, r2
 80a0820:	460d      	mov	r5, r1
 80a0822:	4604      	mov	r4, r0
 80a0824:	461f      	mov	r7, r3
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
 80a0826:	f013 0f80 	tst.w	r3, #128	; 0x80
 80a082a:	bf14      	ite	ne
 80a082c:	21c0      	movne	r1, #192	; 0xc0
 80a082e:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
 80a0830:	065a      	lsls	r2, r3, #25
 80a0832:	bf58      	it	pl
 80a0834:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
 80a0838:	0633      	lsls	r3, r6, #24
 80a083a:	bf58      	it	pl
 80a083c:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
 80a0840:	0670      	lsls	r0, r6, #25
 80a0842:	bf58      	it	pl
 80a0844:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
 80a0848:	062a      	lsls	r2, r5, #24
 80a084a:	bf58      	it	pl
 80a084c:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
 80a0850:	066b      	lsls	r3, r5, #25
 80a0852:	bf58      	it	pl
 80a0854:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
 80a0858:	4620      	mov	r0, r4
 80a085a:	f7ff ffc9 	bl	80a07f0 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
 80a085e:	4639      	mov	r1, r7
 80a0860:	4620      	mov	r0, r4
 80a0862:	f7ff ffc5 	bl	80a07f0 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
 80a0866:	4631      	mov	r1, r6
 80a0868:	4620      	mov	r0, r4
 80a086a:	f7ff ffc1 	bl	80a07f0 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
 80a086e:	4629      	mov	r1, r5
 80a0870:	4620      	mov	r0, r4
}
 80a0872:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    sendByte(prefix);

    // Now must send the 3 colors
    sendByte(blue);
    sendByte(green);
    sendByte(red);
 80a0876:	f7ff bfbb 	b.w	80a07f0 <_ZN12ChainableLED8sendByteEh>

080a087a <_ZN12ChainableLED11setColorRGBEhhhh>:
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
 80a087a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a087e:	4604      	mov	r4, r0
 80a0880:	460e      	mov	r6, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
 80a0882:	2100      	movs	r1, #0
    sendByte(green);
    sendByte(red);
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
 80a0884:	4690      	mov	r8, r2
 80a0886:	4699      	mov	r9, r3
 80a0888:	f89d a020 	ldrb.w	sl, [sp, #32]
    // Send data frame prefix (32x "0")
    sendByte(0x00);
 80a088c:	f7ff ffb0 	bl	80a07f0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0890:	2100      	movs	r1, #0
 80a0892:	4620      	mov	r0, r4
 80a0894:	f7ff ffac 	bl	80a07f0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0898:	2100      	movs	r1, #0
 80a089a:	4620      	mov	r0, r4
 80a089c:	f7ff ffa8 	bl	80a07f0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a08a0:	2100      	movs	r1, #0
 80a08a2:	4620      	mov	r0, r4
 80a08a4:	f7ff ffa4 	bl	80a07f0 <_ZN12ChainableLED8sendByteEh>
 80a08a8:	2500      	movs	r5, #0
    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
 80a08aa:	eb06 0746 	add.w	r7, r6, r6, lsl #1
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
 80a08ae:	78a2      	ldrb	r2, [r4, #2]
 80a08b0:	b2eb      	uxtb	r3, r5
 80a08b2:	429a      	cmp	r2, r3
 80a08b4:	d918      	bls.n	80a08e8 <_ZN12ChainableLED11setColorRGBEhhhh+0x6e>
    {
        if (i == led)
 80a08b6:	42b3      	cmp	r3, r6
 80a08b8:	d10a      	bne.n	80a08d0 <_ZN12ChainableLED11setColorRGBEhhhh+0x56>
        {
            _led_state[i*3 + _CL_RED] = red;
 80a08ba:	6862      	ldr	r2, [r4, #4]
 80a08bc:	f802 8007 	strb.w	r8, [r2, r7]
            _led_state[i*3 + _CL_GREEN] = green;
 80a08c0:	6862      	ldr	r2, [r4, #4]
 80a08c2:	443a      	add	r2, r7
 80a08c4:	f882 9001 	strb.w	r9, [r2, #1]
            _led_state[i*3 + _CL_BLUE] = blue;
 80a08c8:	6862      	ldr	r2, [r4, #4]
 80a08ca:	443a      	add	r2, r7
 80a08cc:	f882 a002 	strb.w	sl, [r2, #2]
        }

        sendColor(_led_state[i*3 + _CL_RED],
 80a08d0:	6860      	ldr	r0, [r4, #4]
 80a08d2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80a08d6:	1842      	adds	r2, r0, r1
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
 80a08d8:	7893      	ldrb	r3, [r2, #2]
 80a08da:	5c41      	ldrb	r1, [r0, r1]
 80a08dc:	7852      	ldrb	r2, [r2, #1]
 80a08de:	4620      	mov	r0, r4
 80a08e0:	f7ff ff9c 	bl	80a081c <_ZN12ChainableLED9sendColorEhhh>
 80a08e4:	3501      	adds	r5, #1
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
 80a08e6:	e7e2      	b.n	80a08ae <_ZN12ChainableLED11setColorRGBEhhhh+0x34>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
 80a08e8:	4620      	mov	r0, r4
 80a08ea:	2100      	movs	r1, #0
 80a08ec:	f7ff ff80 	bl	80a07f0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a08f0:	4620      	mov	r0, r4
 80a08f2:	2100      	movs	r1, #0
 80a08f4:	f7ff ff7c 	bl	80a07f0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a08f8:	4620      	mov	r0, r4
 80a08fa:	2100      	movs	r1, #0
 80a08fc:	f7ff ff78 	bl	80a07f0 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0900:	4620      	mov	r0, r4
}
 80a0902:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    // Terminate data frame (32x "0")
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
 80a0906:	2100      	movs	r1, #0
 80a0908:	f7ff bf72 	b.w	80a07f0 <_ZN12ChainableLED8sendByteEh>

080a090c <_ZN12ChainableLED4initEv>:
}

// --------------------------------------------------------------------------------------

void ChainableLED::init()
{
 80a090c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a090e:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
 80a0910:	2101      	movs	r1, #1
 80a0912:	7800      	ldrb	r0, [r0, #0]
 80a0914:	f001 fe40 	bl	80a2598 <pinMode>
    pinMode(_data_pin, OUTPUT);
 80a0918:	2500      	movs	r5, #0
 80a091a:	2101      	movs	r1, #1
 80a091c:	7860      	ldrb	r0, [r4, #1]
 80a091e:	f001 fe3b 	bl	80a2598 <pinMode>

    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
 80a0922:	462e      	mov	r6, r5
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
 80a0924:	78a3      	ldrb	r3, [r4, #2]
 80a0926:	b2e9      	uxtb	r1, r5
 80a0928:	428b      	cmp	r3, r1
 80a092a:	f105 0501 	add.w	r5, r5, #1
 80a092e:	d906      	bls.n	80a093e <_ZN12ChainableLED4initEv+0x32>
        setColorRGB(i, 0, 0, 0);
 80a0930:	2300      	movs	r3, #0
 80a0932:	9600      	str	r6, [sp, #0]
 80a0934:	461a      	mov	r2, r3
 80a0936:	4620      	mov	r0, r4
 80a0938:	f7ff ff9f 	bl	80a087a <_ZN12ChainableLED11setColorRGBEhhhh>
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
 80a093c:	e7f2      	b.n	80a0924 <_ZN12ChainableLED4initEv+0x18>
        setColorRGB(i, 0, 0, 0);
}
 80a093e:	b002      	add	sp, #8
 80a0940:	bd70      	pop	{r4, r5, r6, pc}

080a0942 <_GLOBAL__sub_I__ZN12ChainableLEDC2Ehhh>:
 80a0942:	f000 bb5b 	b.w	80a0ffc <HAL_Pin_Map>

080a0946 <_ZN17Adafruit_VEML7700C1Ev>:
#include "Adafruit_VEML7700.h"

/*!
 *    @brief  Instantiates a new VEML7700 class
 */
Adafruit_VEML7700::Adafruit_VEML7700(void) {}
 80a0946:	4770      	bx	lr

080a0948 <_ZN17Adafruit_VEML77006enableEb>:
 *    @brief Enable or disable the sensor
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::enable(bool enable)
{
  ALS_Shutdown->write(!enable);
 80a0948:	f081 0101 	eor.w	r1, r1, #1
 80a094c:	69c0      	ldr	r0, [r0, #28]
 80a094e:	f000 b9dd 	b.w	80a0d0c <_ZN24Adafruit_I2CRegisterBits5writeEm>

080a0952 <_ZN17Adafruit_VEML770015interruptEnableEb>:
 *    @brief Enable or disable the interrupt
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::interruptEnable(bool enable)
{
  ALS_Interrupt_Enable->write(enable);
 80a0952:	6a00      	ldr	r0, [r0, #32]
 80a0954:	f000 b9da 	b.w	80a0d0c <_ZN24Adafruit_I2CRegisterBits5writeEm>

080a0958 <_ZN17Adafruit_VEML770014setPersistenceEh>:
 *    @param pers Persistance constant, can be VEML7700_PERS_1, VEML7700_PERS_2,
 *    VEML7700_PERS_4 or VEML7700_PERS_8   
 */
void Adafruit_VEML7700::setPersistence(uint8_t pers)
{
  ALS_Persistence->write(pers);
 80a0958:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80a095a:	f000 b9d7 	b.w	80a0d0c <_ZN24Adafruit_I2CRegisterBits5writeEm>

080a095e <_ZN17Adafruit_VEML770018setIntegrationTimeEh>:
 *    @param it Can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
void Adafruit_VEML7700::setIntegrationTime(uint8_t it)
{
  ALS_Integration_Time->write(it);
 80a095e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80a0960:	f000 b9d4 	b.w	80a0d0c <_ZN24Adafruit_I2CRegisterBits5writeEm>

080a0964 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>:
 *    @brief Get ALS integration time
 *    @returns IT index, can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
uint8_t Adafruit_VEML7700::getIntegrationTime(void)
{
 80a0964:	b508      	push	{r3, lr}
  return ALS_Integration_Time->read();
 80a0966:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80a0968:	f000 f9c1 	bl	80a0cee <_ZN24Adafruit_I2CRegisterBits4readEv>
}
 80a096c:	b2c0      	uxtb	r0, r0
 80a096e:	bd08      	pop	{r3, pc}

080a0970 <_ZN17Adafruit_VEML77007setGainEh>:
 *    @brief Set ALS gain
 *    @param gain Can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
void Adafruit_VEML7700::setGain(uint8_t gain)
{
  ALS_Gain->write(gain);
 80a0970:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a0972:	f000 b9cb 	b.w	80a0d0c <_ZN24Adafruit_I2CRegisterBits5writeEm>

080a0976 <_ZN17Adafruit_VEML77007getGainEv>:
/*!
 *    @brief Get ALS gain
 *    @returns Gain index, can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
uint8_t Adafruit_VEML7700::getGain(void)
{
 80a0976:	b508      	push	{r3, lr}
  return ALS_Gain->read();
 80a0978:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80a097a:	f000 f9b8 	bl	80a0cee <_ZN24Adafruit_I2CRegisterBits4readEv>
}
 80a097e:	b2c0      	uxtb	r0, r0
 80a0980:	bd08      	pop	{r3, pc}

080a0982 <_ZN17Adafruit_VEML77009normalizeEf>:

  return true;
}

float Adafruit_VEML7700::normalize(float value)
{
 80a0982:	b538      	push	{r3, r4, r5, lr}
 80a0984:	4605      	mov	r5, r0
 80a0986:	460c      	mov	r4, r1
  // adjust for gain (1x is normalized)
  switch (getGain())
 80a0988:	f7ff fff5 	bl	80a0976 <_ZN17Adafruit_VEML77007getGainEv>
 80a098c:	2802      	cmp	r0, #2
 80a098e:	d009      	beq.n	80a09a4 <_ZN17Adafruit_VEML77009normalizeEf+0x22>
 80a0990:	2803      	cmp	r0, #3
 80a0992:	d004      	beq.n	80a099e <_ZN17Adafruit_VEML77009normalizeEf+0x1c>
 80a0994:	2801      	cmp	r0, #1
 80a0996:	d10b      	bne.n	80a09b0 <_ZN17Adafruit_VEML77009normalizeEf+0x2e>
  {
  case VEML7700_GAIN_2:
    value /= 2.0;
 80a0998:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a099c:	e004      	b.n	80a09a8 <_ZN17Adafruit_VEML77009normalizeEf+0x26>
    break;
  case VEML7700_GAIN_1_4:
    value *= 4;
 80a099e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80a09a2:	e001      	b.n	80a09a8 <_ZN17Adafruit_VEML77009normalizeEf+0x26>
    break;
  case VEML7700_GAIN_1_8:
    value *= 8;
 80a09a4:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80a09a8:	4620      	mov	r0, r4
 80a09aa:	f003 f89b 	bl	80a3ae4 <__aeabi_fmul>
 80a09ae:	4604      	mov	r4, r0
    break;
  }

  // adjust for integrationtime (100ms is normalized)
  switch (getIntegrationTime())
 80a09b0:	4628      	mov	r0, r5
 80a09b2:	f7ff ffd7 	bl	80a0964 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
 80a09b6:	3801      	subs	r0, #1
 80a09b8:	280b      	cmp	r0, #11
 80a09ba:	d81b      	bhi.n	80a09f4 <_ZN17Adafruit_VEML77009normalizeEf+0x72>
 80a09bc:	e8df f000 	tbb	[pc, r0]
 80a09c0:	1a14110e 	.word	0x1a14110e
 80a09c4:	091a1a1a 	.word	0x091a1a1a
 80a09c8:	061a1a1a 	.word	0x061a1a1a
  {
  case VEML7700_IT_25MS:
    value *= 4;
 80a09cc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80a09d0:	e00c      	b.n	80a09ec <_ZN17Adafruit_VEML77009normalizeEf+0x6a>
    break;
  case VEML7700_IT_50MS:
    value *= 2;
 80a09d2:	4621      	mov	r1, r4
 80a09d4:	4620      	mov	r0, r4
 80a09d6:	f002 ff7d 	bl	80a38d4 <__addsf3>
 80a09da:	e00a      	b.n	80a09f2 <_ZN17Adafruit_VEML77009normalizeEf+0x70>
    break;
  case VEML7700_IT_200MS:
    value /= 2.0;
 80a09dc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a09e0:	e004      	b.n	80a09ec <_ZN17Adafruit_VEML77009normalizeEf+0x6a>
    break;
  case VEML7700_IT_400MS:
    value /= 4.0;
 80a09e2:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80a09e6:	e001      	b.n	80a09ec <_ZN17Adafruit_VEML77009normalizeEf+0x6a>
    break;
  case VEML7700_IT_800MS:
    value /= 8.0;
 80a09e8:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80a09ec:	4620      	mov	r0, r4
 80a09ee:	f003 f879 	bl	80a3ae4 <__aeabi_fmul>
 80a09f2:	4604      	mov	r4, r0
    break;
  }

  return value;
}
 80a09f4:	4620      	mov	r0, r4
 80a09f6:	bd38      	pop	{r3, r4, r5, pc}

080a09f8 <_ZN17Adafruit_VEML77007readLuxEv>:
/*!
 *    @brief Read the calibrated lux value. See app note lux table on page 5
 *    @returns Floating point Lux data (ALS multiplied by 0.0576)
 */
float Adafruit_VEML7700::readLux()
{
 80a09f8:	b510      	push	{r4, lr}
 80a09fa:	4604      	mov	r4, r0
  return normalize(ALS_Data->read()) * 0.0576; // see app note lux table on page 5
 80a09fc:	6840      	ldr	r0, [r0, #4]
 80a09fe:	f000 f955 	bl	80a0cac <_ZN20Adafruit_I2CRegister4readEv>
 80a0a02:	f003 f817 	bl	80a3a34 <__aeabi_ui2f>
 80a0a06:	4601      	mov	r1, r0
 80a0a08:	4620      	mov	r0, r4
 80a0a0a:	f7ff ffba 	bl	80a0982 <_ZN17Adafruit_VEML77009normalizeEf>
 80a0a0e:	f002 fbd5 	bl	80a31bc <__aeabi_f2d>
 80a0a12:	a305      	add	r3, pc, #20	; (adr r3, 80a0a28 <_ZN17Adafruit_VEML77007readLuxEv+0x30>)
 80a0a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0a18:	f002 fc24 	bl	80a3264 <__aeabi_dmul>
 80a0a1c:	f002 ff04 	bl	80a3828 <__aeabi_d2f>
}
 80a0a20:	bd10      	pop	{r4, pc}
 80a0a22:	bf00      	nop
 80a0a24:	f3af 8000 	nop.w
 80a0a28:	487fcb92 	.word	0x487fcb92
 80a0a2c:	3fad7dbf 	.word	0x3fad7dbf

080a0a30 <_ZN17Adafruit_VEML770015powerSaveEnableEb>:
 *    @brief Enable power save mode
 *    @param enable True if power save should be enabled
 */
void Adafruit_VEML7700::powerSaveEnable(bool enable)
{
  PowerSave_Enable->write(enable);
 80a0a30:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80a0a32:	f000 b96b 	b.w	80a0d0c <_ZN24Adafruit_I2CRegisterBits5writeEm>

080a0a36 <_ZN17Adafruit_VEML77005beginEP7TwoWire>:
 *    @brief  Setups the hardware for talking to the VEML7700
 *    @param  theWire An optional pointer to an I2C interface
 *    @return True if initialization was successful, otherwise false.
 */
boolean Adafruit_VEML7700::begin(TwoWire *theWire)
{
 80a0a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0a38:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 80a0a3a:	200c      	movs	r0, #12
 *    @brief  Setups the hardware for talking to the VEML7700
 *    @param  theWire An optional pointer to an I2C interface
 *    @return True if initialization was successful, otherwise false.
 */
boolean Adafruit_VEML7700::begin(TwoWire *theWire)
{
 80a0a3c:	460e      	mov	r6, r1
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
 80a0a3e:	f7ff fb2c 	bl	80a009a <_Znwj>
 80a0a42:	4605      	mov	r5, r0
 80a0a44:	b118      	cbz	r0, 80a0a4e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x18>
 80a0a46:	4632      	mov	r2, r6
 80a0a48:	2110      	movs	r1, #16
 80a0a4a:	f000 f97b 	bl	80a0d44 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
 80a0a4e:	63a5      	str	r5, [r4, #56]	; 0x38

  if (!i2c_dev->begin())
 80a0a50:	4628      	mov	r0, r5
 80a0a52:	f000 f98e 	bl	80a0d72 <_ZN18Adafruit_I2CDevice5beginEv>
 80a0a56:	4605      	mov	r5, r0
 80a0a58:	2800      	cmp	r0, #0
 80a0a5a:	f000 80d2 	beq.w	80a0c02 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x1cc>
  {
    return false;
  }

  ALS_Config = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_CONFIG, 2, LSBFIRST);
 80a0a5e:	2010      	movs	r0, #16
 80a0a60:	f7ff fb1b 	bl	80a009a <_Znwj>
 80a0a64:	4606      	mov	r6, r0
 80a0a66:	b138      	cbz	r0, 80a0a78 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x42>
 80a0a68:	2301      	movs	r3, #1
 80a0a6a:	2200      	movs	r2, #0
 80a0a6c:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a0a70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0a72:	2302      	movs	r3, #2
 80a0a74:	f000 f8d2 	bl	80a0c1c <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
 80a0a78:	6026      	str	r6, [r4, #0]
  ALS_HighThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_HIGH, 2, LSBFIRST);
 80a0a7a:	2010      	movs	r0, #16
 80a0a7c:	f7ff fb0d 	bl	80a009a <_Znwj>
 80a0a80:	4606      	mov	r6, r0
 80a0a82:	b138      	cbz	r0, 80a0a94 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x5e>
 80a0a84:	2300      	movs	r3, #0
 80a0a86:	2201      	movs	r2, #1
 80a0a88:	9300      	str	r3, [sp, #0]
 80a0a8a:	9201      	str	r2, [sp, #4]
 80a0a8c:	2302      	movs	r3, #2
 80a0a8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0a90:	f000 f8c4 	bl	80a0c1c <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
 80a0a94:	60e6      	str	r6, [r4, #12]
  ALS_LowThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_LOW, 2, LSBFIRST);
 80a0a96:	2010      	movs	r0, #16
 80a0a98:	f7ff faff 	bl	80a009a <_Znwj>
 80a0a9c:	4606      	mov	r6, r0
 80a0a9e:	b140      	cbz	r0, 80a0ab2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x7c>
 80a0aa0:	2200      	movs	r2, #0
 80a0aa2:	2301      	movs	r3, #1
 80a0aa4:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a0aa8:	2302      	movs	r3, #2
 80a0aaa:	461a      	mov	r2, r3
 80a0aac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0aae:	f000 f8b5 	bl	80a0c1c <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
 80a0ab2:	6126      	str	r6, [r4, #16]
  Power_Saving = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_POWER_SAVE, 2, LSBFIRST);
 80a0ab4:	2010      	movs	r0, #16
 80a0ab6:	f7ff faf0 	bl	80a009a <_Znwj>
 80a0aba:	4606      	mov	r6, r0
 80a0abc:	b148      	cbz	r0, 80a0ad2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x9c>
 80a0abe:	2300      	movs	r3, #0
 80a0ac0:	f04f 0c01 	mov.w	ip, #1
 80a0ac4:	e88d 1008 	stmia.w	sp, {r3, ip}
 80a0ac8:	2203      	movs	r2, #3
 80a0aca:	2302      	movs	r3, #2
 80a0acc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0ace:	f000 f8a5 	bl	80a0c1c <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
 80a0ad2:	6166      	str	r6, [r4, #20]
  ALS_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_DATA, 2, LSBFIRST);
 80a0ad4:	2010      	movs	r0, #16
 80a0ad6:	f7ff fae0 	bl	80a009a <_Znwj>
 80a0ada:	4606      	mov	r6, r0
 80a0adc:	b148      	cbz	r0, 80a0af2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xbc>
 80a0ade:	2300      	movs	r3, #0
 80a0ae0:	f04f 0e01 	mov.w	lr, #1
 80a0ae4:	e88d 4008 	stmia.w	sp, {r3, lr}
 80a0ae8:	2204      	movs	r2, #4
 80a0aea:	2302      	movs	r3, #2
 80a0aec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0aee:	f000 f895 	bl	80a0c1c <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
 80a0af2:	6066      	str	r6, [r4, #4]
  White_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_WHITE_DATA, 2, LSBFIRST);
 80a0af4:	2010      	movs	r0, #16
 80a0af6:	f7ff fad0 	bl	80a009a <_Znwj>
 80a0afa:	4606      	mov	r6, r0
 80a0afc:	b140      	cbz	r0, 80a0b10 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xda>
 80a0afe:	2100      	movs	r1, #0
 80a0b00:	2301      	movs	r3, #1
 80a0b02:	e88d 000a 	stmia.w	sp, {r1, r3}
 80a0b06:	2205      	movs	r2, #5
 80a0b08:	2302      	movs	r3, #2
 80a0b0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0b0c:	f000 f886 	bl	80a0c1c <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
 80a0b10:	60a6      	str	r6, [r4, #8]
  Interrupt_Status = new Adafruit_I2CRegister(i2c_dev, VEML7700_INTERRUPTSTATUS, 2, LSBFIRST);
 80a0b12:	2010      	movs	r0, #16
 80a0b14:	f7ff fac1 	bl	80a009a <_Znwj>
 80a0b18:	4606      	mov	r6, r0
 80a0b1a:	b140      	cbz	r0, 80a0b2e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xf8>
 80a0b1c:	2200      	movs	r2, #0
 80a0b1e:	2301      	movs	r3, #1
 80a0b20:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a0b24:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0b26:	2302      	movs	r3, #2
 80a0b28:	2206      	movs	r2, #6
 80a0b2a:	f000 f877 	bl	80a0c1c <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
 80a0b2e:	61a6      	str	r6, [r4, #24]

  ALS_Shutdown = new Adafruit_I2CRegisterBits(ALS_Config, 1, 0); // # bits, bit_shift
 80a0b30:	2008      	movs	r0, #8
 80a0b32:	f7ff fab2 	bl	80a009a <_Znwj>
 80a0b36:	4606      	mov	r6, r0
 80a0b38:	b120      	cbz	r0, 80a0b44 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x10e>
 80a0b3a:	2300      	movs	r3, #0
 80a0b3c:	2201      	movs	r2, #1
 80a0b3e:	6821      	ldr	r1, [r4, #0]
 80a0b40:	f000 f8d0 	bl	80a0ce4 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
 80a0b44:	61e6      	str	r6, [r4, #28]
  ALS_Interrupt_Enable = new Adafruit_I2CRegisterBits(ALS_Config, 1, 1);
 80a0b46:	2008      	movs	r0, #8
 80a0b48:	f7ff faa7 	bl	80a009a <_Znwj>
 80a0b4c:	4606      	mov	r6, r0
 80a0b4e:	b120      	cbz	r0, 80a0b5a <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x124>
 80a0b50:	2301      	movs	r3, #1
 80a0b52:	461a      	mov	r2, r3
 80a0b54:	6821      	ldr	r1, [r4, #0]
 80a0b56:	f000 f8c5 	bl	80a0ce4 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
 80a0b5a:	6226      	str	r6, [r4, #32]
  ALS_Persistence = new Adafruit_I2CRegisterBits(ALS_Config, 2, 4);
 80a0b5c:	2008      	movs	r0, #8
 80a0b5e:	f7ff fa9c 	bl	80a009a <_Znwj>
 80a0b62:	4606      	mov	r6, r0
 80a0b64:	b120      	cbz	r0, 80a0b70 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x13a>
 80a0b66:	2304      	movs	r3, #4
 80a0b68:	2202      	movs	r2, #2
 80a0b6a:	6821      	ldr	r1, [r4, #0]
 80a0b6c:	f000 f8ba 	bl	80a0ce4 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
 80a0b70:	6266      	str	r6, [r4, #36]	; 0x24
  ALS_Integration_Time = new Adafruit_I2CRegisterBits(ALS_Config, 4, 6);
 80a0b72:	2008      	movs	r0, #8
 80a0b74:	f7ff fa91 	bl	80a009a <_Znwj>
 80a0b78:	4606      	mov	r6, r0
 80a0b7a:	b120      	cbz	r0, 80a0b86 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x150>
 80a0b7c:	2306      	movs	r3, #6
 80a0b7e:	2204      	movs	r2, #4
 80a0b80:	6821      	ldr	r1, [r4, #0]
 80a0b82:	f000 f8af 	bl	80a0ce4 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
 80a0b86:	62a6      	str	r6, [r4, #40]	; 0x28
  ALS_Gain = new Adafruit_I2CRegisterBits(ALS_Config, 2, 11);
 80a0b88:	2008      	movs	r0, #8
 80a0b8a:	f7ff fa86 	bl	80a009a <_Znwj>
 80a0b8e:	4606      	mov	r6, r0
 80a0b90:	b120      	cbz	r0, 80a0b9c <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x166>
 80a0b92:	230b      	movs	r3, #11
 80a0b94:	2202      	movs	r2, #2
 80a0b96:	6821      	ldr	r1, [r4, #0]
 80a0b98:	f000 f8a4 	bl	80a0ce4 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
 80a0b9c:	62e6      	str	r6, [r4, #44]	; 0x2c
  PowerSave_Enable = new Adafruit_I2CRegisterBits(Power_Saving, 1, 0);
 80a0b9e:	2008      	movs	r0, #8
 80a0ba0:	f7ff fa7b 	bl	80a009a <_Znwj>
 80a0ba4:	4606      	mov	r6, r0
 80a0ba6:	b120      	cbz	r0, 80a0bb2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x17c>
 80a0ba8:	2300      	movs	r3, #0
 80a0baa:	2201      	movs	r2, #1
 80a0bac:	6961      	ldr	r1, [r4, #20]
 80a0bae:	f000 f899 	bl	80a0ce4 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
 80a0bb2:	6326      	str	r6, [r4, #48]	; 0x30
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
 80a0bb4:	2008      	movs	r0, #8
 80a0bb6:	f7ff fa70 	bl	80a009a <_Znwj>
 80a0bba:	4606      	mov	r6, r0
 80a0bbc:	b120      	cbz	r0, 80a0bc8 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x192>
 80a0bbe:	2301      	movs	r3, #1
 80a0bc0:	2202      	movs	r2, #2
 80a0bc2:	6961      	ldr	r1, [r4, #20]
 80a0bc4:	f000 f88e 	bl	80a0ce4 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>

  enable(false);
 80a0bc8:	2100      	movs	r1, #0
 80a0bca:	4620      	mov	r0, r4
  ALS_Interrupt_Enable = new Adafruit_I2CRegisterBits(ALS_Config, 1, 1);
  ALS_Persistence = new Adafruit_I2CRegisterBits(ALS_Config, 2, 4);
  ALS_Integration_Time = new Adafruit_I2CRegisterBits(ALS_Config, 4, 6);
  ALS_Gain = new Adafruit_I2CRegisterBits(ALS_Config, 2, 11);
  PowerSave_Enable = new Adafruit_I2CRegisterBits(Power_Saving, 1, 0);
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
 80a0bcc:	6366      	str	r6, [r4, #52]	; 0x34

  enable(false);
 80a0bce:	f7ff febb 	bl	80a0948 <_ZN17Adafruit_VEML77006enableEb>
  interruptEnable(false);
 80a0bd2:	2100      	movs	r1, #0
 80a0bd4:	4620      	mov	r0, r4
 80a0bd6:	f7ff febc 	bl	80a0952 <_ZN17Adafruit_VEML770015interruptEnableEb>
  setPersistence(VEML7700_PERS_1);
 80a0bda:	2100      	movs	r1, #0
 80a0bdc:	4620      	mov	r0, r4
 80a0bde:	f7ff febb 	bl	80a0958 <_ZN17Adafruit_VEML770014setPersistenceEh>
  setGain(VEML7700_GAIN_1);
 80a0be2:	2100      	movs	r1, #0
 80a0be4:	4620      	mov	r0, r4
 80a0be6:	f7ff fec3 	bl	80a0970 <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(VEML7700_IT_100MS);
 80a0bea:	2100      	movs	r1, #0
 80a0bec:	4620      	mov	r0, r4
 80a0bee:	f7ff feb6 	bl	80a095e <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
  powerSaveEnable(false);
 80a0bf2:	2100      	movs	r1, #0
 80a0bf4:	4620      	mov	r0, r4
 80a0bf6:	f7ff ff1b 	bl	80a0a30 <_ZN17Adafruit_VEML770015powerSaveEnableEb>
  enable(true);
 80a0bfa:	2101      	movs	r1, #1
 80a0bfc:	4620      	mov	r0, r4
 80a0bfe:	f7ff fea3 	bl	80a0948 <_ZN17Adafruit_VEML77006enableEb>

  return true;
}
 80a0c02:	4628      	mov	r0, r5
 80a0c04:	b002      	add	sp, #8
 80a0c06:	bd70      	pop	{r4, r5, r6, pc}

080a0c08 <_ZN17Adafruit_VEML770015setLowThresholdEt>:
 *    @brief Assign the low threshold register data
 *    @param value The 16-bit data to write to VEML7700_ALS_THREHOLD_LOW
 */
void Adafruit_VEML7700::setLowThreshold(uint16_t value)
{
  ALS_LowThreshold->write(value);
 80a0c08:	2200      	movs	r2, #0
 80a0c0a:	6900      	ldr	r0, [r0, #16]
 80a0c0c:	f000 b823 	b.w	80a0c56 <_ZN20Adafruit_I2CRegister5writeEmh>

080a0c10 <_ZN17Adafruit_VEML770016setHighThresholdEt>:
 *    @brief Assign the high threshold register data
 *    @param value The 16-bit data to write to VEML7700_ALS_THREHOLD_HIGH
 */
void Adafruit_VEML7700::setHighThreshold(uint16_t value)
{
  ALS_HighThreshold->write(value);
 80a0c10:	2200      	movs	r2, #0
 80a0c12:	68c0      	ldr	r0, [r0, #12]
 80a0c14:	f000 b81f 	b.w	80a0c56 <_ZN20Adafruit_I2CRegister5writeEmh>

080a0c18 <_GLOBAL__sub_I__ZN17Adafruit_VEML7700C2Ev>:
 80a0c18:	f000 b9f0 	b.w	80a0ffc <HAL_Pin_Map>

080a0c1c <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>:
#include "Adafruit_I2CRegister.h"

Adafruit_I2CRegister::Adafruit_I2CRegister(Adafruit_I2CDevice *device, uint16_t reg_addr, uint8_t width, uint8_t bitorder, uint8_t address_width) {
 80a0c1c:	b510      	push	{r4, lr}
  _device = device;
 80a0c1e:	6001      	str	r1, [r0, #0]
  _addrwidth = address_width;
  _address = reg_addr;
 80a0c20:	8082      	strh	r2, [r0, #4]
#include "Adafruit_I2CRegister.h"

Adafruit_I2CRegister::Adafruit_I2CRegister(Adafruit_I2CDevice *device, uint16_t reg_addr, uint8_t width, uint8_t bitorder, uint8_t address_width) {
  _device = device;
  _addrwidth = address_width;
 80a0c22:	f89d 100c 	ldrb.w	r1, [sp, #12]
  _address = reg_addr;
  _bitorder = bitorder;
 80a0c26:	f89d 2008 	ldrb.w	r2, [sp, #8]
#include "Adafruit_I2CRegister.h"

Adafruit_I2CRegister::Adafruit_I2CRegister(Adafruit_I2CDevice *device, uint16_t reg_addr, uint8_t width, uint8_t bitorder, uint8_t address_width) {
  _device = device;
  _addrwidth = address_width;
 80a0c2a:	71c1      	strb	r1, [r0, #7]
  _address = reg_addr;
  _bitorder = bitorder;
 80a0c2c:	7202      	strb	r2, [r0, #8]
  _width = width;
 80a0c2e:	7183      	strb	r3, [r0, #6]
}
 80a0c30:	bd10      	pop	{r4, pc}

080a0c32 <_ZN20Adafruit_I2CRegister5writeEPhh>:


bool Adafruit_I2CRegister::write(uint8_t *buffer, uint8_t len) {
 80a0c32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF), (uint8_t)(_address>>8)};
 80a0c34:	8883      	ldrh	r3, [r0, #4]
 80a0c36:	f88d 300c 	strb.w	r3, [sp, #12]
 80a0c3a:	121b      	asrs	r3, r3, #8
 80a0c3c:	f88d 300d 	strb.w	r3, [sp, #13]
  if (! _device->write(buffer, len, true, addrbuffer, _addrwidth)) {
 80a0c40:	79c3      	ldrb	r3, [r0, #7]
 80a0c42:	9301      	str	r3, [sp, #4]
 80a0c44:	ab03      	add	r3, sp, #12
 80a0c46:	9300      	str	r3, [sp, #0]
 80a0c48:	6800      	ldr	r0, [r0, #0]
 80a0c4a:	2301      	movs	r3, #1
 80a0c4c:	f000 f89d 	bl	80a0d8a <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
    return false;
  }
  return true;
}
 80a0c50:	b005      	add	sp, #20
 80a0c52:	f85d fb04 	ldr.w	pc, [sp], #4

080a0c56 <_ZN20Adafruit_I2CRegister5writeEmh>:

bool Adafruit_I2CRegister::write(uint32_t value, uint8_t numbytes) {
 80a0c56:	b470      	push	{r4, r5, r6}
  if (numbytes == 0) {
 80a0c58:	b902      	cbnz	r2, 80a0c5c <_ZN20Adafruit_I2CRegister5writeEmh+0x6>
    numbytes = _width;
 80a0c5a:	7982      	ldrb	r2, [r0, #6]
  }
  if (numbytes > 4) {
 80a0c5c:	2a04      	cmp	r2, #4
 80a0c5e:	d812      	bhi.n	80a0c86 <_ZN20Adafruit_I2CRegister5writeEmh+0x30>
 80a0c60:	f100 0409 	add.w	r4, r0, #9
 80a0c64:	4625      	mov	r5, r4
 80a0c66:	1883      	adds	r3, r0, r2
    return false;
  }

  for (int i=0; i<numbytes; i++) {
 80a0c68:	4298      	cmp	r0, r3
 80a0c6a:	d008      	beq.n	80a0c7e <_ZN20Adafruit_I2CRegister5writeEmh+0x28>
    if (_bitorder == LSBFIRST) {
 80a0c6c:	7a06      	ldrb	r6, [r0, #8]
 80a0c6e:	b90e      	cbnz	r6, 80a0c74 <_ZN20Adafruit_I2CRegister5writeEmh+0x1e>
      _buffer[i] = value & 0xFF;
 80a0c70:	7021      	strb	r1, [r4, #0]
 80a0c72:	e000      	b.n	80a0c76 <_ZN20Adafruit_I2CRegister5writeEmh+0x20>
    } else {
      _buffer[numbytes-i-1] = value & 0xFF;
 80a0c74:	7219      	strb	r1, [r3, #8]
    }
    value >>= 8;
 80a0c76:	0a09      	lsrs	r1, r1, #8
 80a0c78:	3401      	adds	r4, #1
 80a0c7a:	3b01      	subs	r3, #1
  }
  if (numbytes > 4) {
    return false;
  }

  for (int i=0; i<numbytes; i++) {
 80a0c7c:	e7f4      	b.n	80a0c68 <_ZN20Adafruit_I2CRegister5writeEmh+0x12>
    } else {
      _buffer[numbytes-i-1] = value & 0xFF;
    }
    value >>= 8;
  }
  return write(_buffer, numbytes);
 80a0c7e:	4629      	mov	r1, r5
}
 80a0c80:	bc70      	pop	{r4, r5, r6}
    } else {
      _buffer[numbytes-i-1] = value & 0xFF;
    }
    value >>= 8;
  }
  return write(_buffer, numbytes);
 80a0c82:	f7ff bfd6 	b.w	80a0c32 <_ZN20Adafruit_I2CRegister5writeEPhh>
}
 80a0c86:	2000      	movs	r0, #0
 80a0c88:	bc70      	pop	{r4, r5, r6}
 80a0c8a:	4770      	bx	lr

080a0c8c <_ZN20Adafruit_I2CRegister4readEPhh>:

   return value;
}


bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
 80a0c8c:	b513      	push	{r0, r1, r4, lr}
  _buffer[0] = _address;
 80a0c8e:	4604      	mov	r4, r0
 80a0c90:	8883      	ldrh	r3, [r0, #4]
 80a0c92:	f804 3f09 	strb.w	r3, [r4, #9]!
  if (! _device->write_then_read(_buffer, 1, buffer, len)) {
 80a0c96:	2300      	movs	r3, #0
 80a0c98:	e88d 000c 	stmia.w	sp, {r2, r3}
 80a0c9c:	460b      	mov	r3, r1
 80a0c9e:	2201      	movs	r2, #1
 80a0ca0:	4621      	mov	r1, r4
 80a0ca2:	6800      	ldr	r0, [r0, #0]
 80a0ca4:	f000 f8c1 	bl	80a0e2a <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>
    return false;
  }
  return true;
}
 80a0ca8:	b002      	add	sp, #8
 80a0caa:	bd10      	pop	{r4, pc}

080a0cac <_ZN20Adafruit_I2CRegister4readEv>:
  }
  return write(_buffer, numbytes);
}

// This does not do any error checking! returns 0xFFFFFFFF on failure
uint32_t Adafruit_I2CRegister::read(void) {
 80a0cac:	b538      	push	{r3, r4, r5, lr}
  if (! read(_buffer, _width)) {
 80a0cae:	f100 0409 	add.w	r4, r0, #9
 80a0cb2:	7982      	ldrb	r2, [r0, #6]
 80a0cb4:	4621      	mov	r1, r4
  }
  return write(_buffer, numbytes);
}

// This does not do any error checking! returns 0xFFFFFFFF on failure
uint32_t Adafruit_I2CRegister::read(void) {
 80a0cb6:	4605      	mov	r5, r0
  if (! read(_buffer, _width)) {
 80a0cb8:	f7ff ffe8 	bl	80a0c8c <_ZN20Adafruit_I2CRegister4readEPhh>
 80a0cbc:	b178      	cbz	r0, 80a0cde <_ZN20Adafruit_I2CRegister4readEv+0x32>
 80a0cbe:	4621      	mov	r1, r4
 80a0cc0:	79ab      	ldrb	r3, [r5, #6]
    return -1;
  }

  uint32_t value = 0;

   for (int i=0; i < _width; i++) {
 80a0cc2:	2000      	movs	r0, #0
 80a0cc4:	442b      	add	r3, r5
 80a0cc6:	42ab      	cmp	r3, r5
 80a0cc8:	d00b      	beq.n	80a0ce2 <_ZN20Adafruit_I2CRegister4readEv+0x36>
     value <<= 8;
     if (_bitorder == LSBFIRST) {
 80a0cca:	7a2a      	ldrb	r2, [r5, #8]
  }

  uint32_t value = 0;

   for (int i=0; i < _width; i++) {
     value <<= 8;
 80a0ccc:	0200      	lsls	r0, r0, #8
     if (_bitorder == LSBFIRST) {
 80a0cce:	b90a      	cbnz	r2, 80a0cd4 <_ZN20Adafruit_I2CRegister4readEv+0x28>
       value |= _buffer[_width-i-1];
 80a0cd0:	7a1a      	ldrb	r2, [r3, #8]
 80a0cd2:	e000      	b.n	80a0cd6 <_ZN20Adafruit_I2CRegister4readEv+0x2a>
     } else {
       value |= _buffer[i];
 80a0cd4:	780a      	ldrb	r2, [r1, #0]
 80a0cd6:	4310      	orrs	r0, r2
 80a0cd8:	3b01      	subs	r3, #1
 80a0cda:	3101      	adds	r1, #1
 80a0cdc:	e7f3      	b.n	80a0cc6 <_ZN20Adafruit_I2CRegister4readEv+0x1a>
}

// This does not do any error checking! returns 0xFFFFFFFF on failure
uint32_t Adafruit_I2CRegister::read(void) {
  if (! read(_buffer, _width)) {
    return -1;
 80a0cde:	f04f 30ff 	mov.w	r0, #4294967295
       value |= _buffer[i];
     }
   }

   return value;
}
 80a0ce2:	bd38      	pop	{r3, r4, r5, pc}

080a0ce4 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>:
  print(s);
  s->println();
}


Adafruit_I2CRegisterBits::Adafruit_I2CRegisterBits(Adafruit_I2CRegister *reg, uint8_t bits, uint8_t shift) {
 80a0ce4:	b510      	push	{r4, lr}
  _register = reg;
 80a0ce6:	6001      	str	r1, [r0, #0]
  _bits = bits;
 80a0ce8:	7102      	strb	r2, [r0, #4]
  _shift = shift;
 80a0cea:	7143      	strb	r3, [r0, #5]
}
 80a0cec:	bd10      	pop	{r4, pc}

080a0cee <_ZN24Adafruit_I2CRegisterBits4readEv>:

uint32_t Adafruit_I2CRegisterBits::read(void) {
 80a0cee:	b510      	push	{r4, lr}
 80a0cf0:	4604      	mov	r4, r0
  uint32_t val = _register->read();
 80a0cf2:	6800      	ldr	r0, [r0, #0]
 80a0cf4:	f7ff ffda 	bl	80a0cac <_ZN20Adafruit_I2CRegister4readEv>
  val >>= _shift;
  return val & ((1 << (_bits+1)) - 1);
 80a0cf8:	7923      	ldrb	r3, [r4, #4]
 80a0cfa:	2201      	movs	r2, #1
 80a0cfc:	3301      	adds	r3, #1
 80a0cfe:	fa02 f303 	lsl.w	r3, r2, r3
 80a0d02:	7962      	ldrb	r2, [r4, #5]
 80a0d04:	3b01      	subs	r3, #1
 80a0d06:	40d0      	lsrs	r0, r2
}
 80a0d08:	4018      	ands	r0, r3
 80a0d0a:	bd10      	pop	{r4, pc}

080a0d0c <_ZN24Adafruit_I2CRegisterBits5writeEm>:

void Adafruit_I2CRegisterBits::write(uint32_t data) {
 80a0d0c:	b538      	push	{r3, r4, r5, lr}
 80a0d0e:	4605      	mov	r5, r0
  uint32_t val = _register->read();
 80a0d10:	6800      	ldr	r0, [r0, #0]
  uint32_t val = _register->read();
  val >>= _shift;
  return val & ((1 << (_bits+1)) - 1);
}

void Adafruit_I2CRegisterBits::write(uint32_t data) {
 80a0d12:	460c      	mov	r4, r1
  uint32_t val = _register->read();
 80a0d14:	f7ff ffca 	bl	80a0cac <_ZN20Adafruit_I2CRegister4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits+1)) - 1;
 80a0d18:	792b      	ldrb	r3, [r5, #4]
 80a0d1a:	2201      	movs	r2, #1
 80a0d1c:	3301      	adds	r3, #1
 80a0d1e:	fa02 f303 	lsl.w	r3, r2, r3
  data &= mask;

  mask <<= _shift;
 80a0d22:	796a      	ldrb	r2, [r5, #5]

void Adafruit_I2CRegisterBits::write(uint32_t data) {
  uint32_t val = _register->read();

  // mask off the data before writing
  uint32_t mask = (1 << (_bits+1)) - 1;
 80a0d24:	3b01      	subs	r3, #1
  data &= mask;

  mask <<= _shift;
  val &= ~mask;      // remove the current data at that spot
 80a0d26:	fa03 f102 	lsl.w	r1, r3, r2
 80a0d2a:	ea20 0101 	bic.w	r1, r0, r1
  val |= data << _shift; // and add in the new data
  
  _register->write(val, _register->width());
 80a0d2e:	4023      	ands	r3, r4
 80a0d30:	6828      	ldr	r0, [r5, #0]
 80a0d32:	4093      	lsls	r3, r2
 80a0d34:	4319      	orrs	r1, r3
 80a0d36:	7982      	ldrb	r2, [r0, #6]
 80a0d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  mask <<= _shift;
  val &= ~mask;      // remove the current data at that spot
  val |= data << _shift; // and add in the new data
  
  _register->write(val, _register->width());
 80a0d3c:	f7ff bf8b 	b.w	80a0c56 <_ZN20Adafruit_I2CRegister5writeEmh>

080a0d40 <_GLOBAL__sub_I__ZN20Adafruit_I2CRegisterC2EP18Adafruit_I2CDevicethhh>:
 80a0d40:	f000 b95c 	b.w	80a0ffc <HAL_Pin_Map>

080a0d44 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:

//#define DEBUG_SERIAL Serial

Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
 80a0d44:	6042      	str	r2, [r0, #4]
  _begun = false;
 80a0d46:	2200      	movs	r2, #0
#include "Adafruit_I2CDevice.h"

//#define DEBUG_SERIAL Serial

Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
 80a0d48:	7001      	strb	r1, [r0, #0]
  _wire = theWire;
  _begun = false;
 80a0d4a:	7202      	strb	r2, [r0, #8]
}
 80a0d4c:	4770      	bx	lr

080a0d4e <_ZN18Adafruit_I2CDevice8detectedEv>:
  _begun = true;

  return detected();
}

bool Adafruit_I2CDevice::detected(void) {
 80a0d4e:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 80a0d50:	7a03      	ldrb	r3, [r0, #8]
  _begun = true;

  return detected();
}

bool Adafruit_I2CDevice::detected(void) {
 80a0d52:	4604      	mov	r4, r0
  // Init I2C if not done yet
  if (!_begun && !begin()) {
 80a0d54:	b913      	cbnz	r3, 80a0d5c <_ZN18Adafruit_I2CDevice8detectedEv+0xe>
 80a0d56:	f000 f80c 	bl	80a0d72 <_ZN18Adafruit_I2CDevice5beginEv>
 80a0d5a:	b148      	cbz	r0, 80a0d70 <_ZN18Adafruit_I2CDevice8detectedEv+0x22>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
 80a0d5c:	7821      	ldrb	r1, [r4, #0]
 80a0d5e:	6860      	ldr	r0, [r4, #4]
 80a0d60:	f001 fb23 	bl	80a23aa <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission () == 0) {
 80a0d64:	6860      	ldr	r0, [r4, #4]
 80a0d66:	f001 fb2b 	bl	80a23c0 <_ZN7TwoWire15endTransmissionEv>
 80a0d6a:	fab0 f080 	clz	r0, r0
 80a0d6e:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
 80a0d70:	bd10      	pop	{r4, pc}

080a0d72 <_ZN18Adafruit_I2CDevice5beginEv>:
  _addr = addr;
  _wire = theWire;
  _begun = false;
}

bool Adafruit_I2CDevice::begin(void) {
 80a0d72:	b510      	push	{r4, lr}
 80a0d74:	4604      	mov	r4, r0
  _wire->begin();
 80a0d76:	6840      	ldr	r0, [r0, #4]
 80a0d78:	f001 fb00 	bl	80a237c <_ZN7TwoWire5beginEv>
  _begun = true;
 80a0d7c:	2301      	movs	r3, #1
 80a0d7e:	7223      	strb	r3, [r4, #8]

  return detected();
 80a0d80:	4620      	mov	r0, r4
}
 80a0d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

bool Adafruit_I2CDevice::begin(void) {
  _wire->begin();
  _begun = true;

  return detected();
 80a0d86:	f7ff bfe2 	b.w	80a0d4e <_ZN18Adafruit_I2CDevice8detectedEv>

080a0d8a <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>:
    return true;
  }
  return false;
}

bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
 80a0d8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0d8e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a0d90:	4698      	mov	r8, r3
  if ((len+prefix_len) > 32) {
 80a0d92:	1953      	adds	r3, r2, r5
 80a0d94:	2b20      	cmp	r3, #32
    return true;
  }
  return false;
}

bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
 80a0d96:	4604      	mov	r4, r0
 80a0d98:	4689      	mov	r9, r1
 80a0d9a:	4616      	mov	r6, r2
 80a0d9c:	9f08      	ldr	r7, [sp, #32]
  if ((len+prefix_len) > 32) {
 80a0d9e:	d902      	bls.n	80a0da6 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x1c>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
 80a0da0:	2000      	movs	r0, #0
 80a0da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }

  _wire->beginTransmission(_addr);
 80a0da6:	7801      	ldrb	r1, [r0, #0]
 80a0da8:	6840      	ldr	r0, [r0, #4]
 80a0daa:	f001 fafe 	bl	80a23aa <_ZN7TwoWire17beginTransmissionEh>

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 80a0dae:	b985      	cbnz	r5, 80a0dd2 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x48>
      return false;
    }
  }

  // Write the data itself
  if (_wire->write(buffer, len) != len) {
 80a0db0:	6860      	ldr	r0, [r4, #4]
 80a0db2:	4632      	mov	r2, r6
 80a0db4:	6803      	ldr	r3, [r0, #0]
 80a0db6:	4649      	mov	r1, r9
 80a0db8:	68db      	ldr	r3, [r3, #12]
 80a0dba:	4798      	blx	r3
 80a0dbc:	4286      	cmp	r6, r0
 80a0dbe:	d1ef      	bne.n	80a0da0 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
  }
  DEBUG_SERIAL.println();
#endif


  return (_wire -> endTransmission(stop) == 0);
 80a0dc0:	4641      	mov	r1, r8
 80a0dc2:	6860      	ldr	r0, [r4, #4]
 80a0dc4:	f001 faf8 	bl	80a23b8 <_ZN7TwoWire15endTransmissionEh>
 80a0dc8:	fab0 f080 	clz	r0, r0
 80a0dcc:	0940      	lsrs	r0, r0, #5
}
 80a0dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  }

  _wire->beginTransmission(_addr);

  // Write the prefix data (usually an address)
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
 80a0dd2:	2f00      	cmp	r7, #0
 80a0dd4:	d0ec      	beq.n	80a0db0 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
 80a0dd6:	6860      	ldr	r0, [r4, #4]
 80a0dd8:	462a      	mov	r2, r5
 80a0dda:	6803      	ldr	r3, [r0, #0]
 80a0ddc:	4639      	mov	r1, r7
 80a0dde:	68db      	ldr	r3, [r3, #12]
 80a0de0:	4798      	blx	r3
 80a0de2:	4285      	cmp	r5, r0
 80a0de4:	d1dc      	bne.n	80a0da0 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
 80a0de6:	e7e3      	b.n	80a0db0 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>

080a0de8 <_ZN18Adafruit_I2CDevice4readEPhjb>:

  return (_wire -> endTransmission(stop) == 0);
}

bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  if (len > 32) {
 80a0de8:	2a20      	cmp	r2, #32


  return (_wire -> endTransmission(stop) == 0);
}

bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
 80a0dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0dee:	4605      	mov	r5, r0
 80a0df0:	4688      	mov	r8, r1
 80a0df2:	4614      	mov	r4, r2
  if (len > 32) {
 80a0df4:	d813      	bhi.n	80a0e1e <_ZN18Adafruit_I2CDevice4readEPhjb+0x36>
    DEBUG_SERIAL.println(F("\tI2CDevice could not read such a large buffer"));
#endif
    return false;
  }

  if (_wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop) != len) {
 80a0df6:	7801      	ldrb	r1, [r0, #0]
 80a0df8:	b2d2      	uxtb	r2, r2
 80a0dfa:	6840      	ldr	r0, [r0, #4]
 80a0dfc:	f001 fac4 	bl	80a2388 <_ZN7TwoWire11requestFromEhhh>
 80a0e00:	4284      	cmp	r4, r0
 80a0e02:	d10c      	bne.n	80a0e1e <_ZN18Adafruit_I2CDevice4readEPhjb+0x36>
 80a0e04:	2600      	movs	r6, #0
    DEBUG_SERIAL.println(F("\tI2CDevice did not receive enough data"));
#endif
    return false;
  }

  for (uint16_t i=0; i<len; i++) {
 80a0e06:	b2b7      	uxth	r7, r6
 80a0e08:	42bc      	cmp	r4, r7
 80a0e0a:	f106 0601 	add.w	r6, r6, #1
 80a0e0e:	d909      	bls.n	80a0e24 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>
    buffer[i] = _wire->read();
 80a0e10:	6868      	ldr	r0, [r5, #4]
 80a0e12:	6803      	ldr	r3, [r0, #0]
 80a0e14:	695b      	ldr	r3, [r3, #20]
 80a0e16:	4798      	blx	r3
 80a0e18:	f808 0007 	strb.w	r0, [r8, r7]
 80a0e1c:	e7f3      	b.n	80a0e06 <_ZN18Adafruit_I2CDevice4readEPhjb+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not read such a large buffer"));
#endif
    return false;
 80a0e1e:	2000      	movs	r0, #0
 80a0e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DEBUG_SERIAL.println(F("\tI2CDevice did not receive enough data"));
#endif
    return false;
  }

  for (uint16_t i=0; i<len; i++) {
 80a0e24:	2001      	movs	r0, #1
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
 80a0e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0e2a <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>:


bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
 80a0e2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (! write(write_buffer, write_len, stop)) {
 80a0e2c:	2400      	movs	r4, #0

  return true;
}


bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
 80a0e2e:	461e      	mov	r6, r3
  if (! write(write_buffer, write_len, stop)) {
 80a0e30:	9401      	str	r4, [sp, #4]

  return true;
}


bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
 80a0e32:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
  if (! write(write_buffer, write_len, stop)) {
 80a0e36:	9400      	str	r4, [sp, #0]

  return true;
}


bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
 80a0e38:	4605      	mov	r5, r0
 80a0e3a:	9f08      	ldr	r7, [sp, #32]
  if (! write(write_buffer, write_len, stop)) {
 80a0e3c:	f7ff ffa5 	bl	80a0d8a <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
 80a0e40:	b140      	cbz	r0, 80a0e54 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb+0x2a>
    return false;
  }
  
  return read(read_buffer, read_len);
 80a0e42:	463a      	mov	r2, r7
 80a0e44:	4631      	mov	r1, r6
 80a0e46:	4628      	mov	r0, r5
 80a0e48:	2301      	movs	r3, #1
}
 80a0e4a:	b003      	add	sp, #12
 80a0e4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
  if (! write(write_buffer, write_len, stop)) {
    return false;
  }
  
  return read(read_buffer, read_len);
 80a0e50:	f7ff bfca 	b.w	80a0de8 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
 80a0e54:	b003      	add	sp, #12
 80a0e56:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0e58 <_GLOBAL__sub_I__ZN18Adafruit_I2CDeviceC2EhP7TwoWire>:
 80a0e58:	f000 b8d0 	b.w	80a0ffc <HAL_Pin_Map>

080a0e5c <_ZN5SHT31C1Ev>:
#include "SHT31.h"

SHT31::SHT31() {
}
 80a0e5c:	4770      	bx	lr

080a0e5e <_ZN5SHT314crc8EPKhi>:
    writeCommand(SHT31_HEATEREN);
  else
    writeCommand(SHT31_HEATERDIS);
}

uint8_t SHT31::crc8(const uint8_t *data, int len) {
 80a0e5e:	440a      	add	r2, r1
  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
 80a0e60:	20ff      	movs	r0, #255	; 0xff
  
  for ( int j = len; j; --j ) {
 80a0e62:	4291      	cmp	r1, r2
 80a0e64:	d00e      	beq.n	80a0e84 <_ZN5SHT314crc8EPKhi+0x26>
      crc ^= *data++;
 80a0e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a0e6a:	4058      	eors	r0, r3
 80a0e6c:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
 80a0e6e:	f010 0f80 	tst.w	r0, #128	; 0x80
 80a0e72:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80a0e76:	bf18      	it	ne
 80a0e78:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
 80a0e7c:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
 80a0e7e:	b2c0      	uxtb	r0, r0
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
      crc ^= *data++;

      for ( int i = 8; i; --i ) {
 80a0e80:	d1f5      	bne.n	80a0e6e <_ZN5SHT314crc8EPKhi+0x10>
 80a0e82:	e7ee      	b.n	80a0e62 <_ZN5SHT314crc8EPKhi+0x4>
	  ? (crc << 1) ^ POLYNOMIAL
	  : (crc << 1);
      }
  }
  return crc; 
}
 80a0e84:	4770      	bx	lr

080a0e86 <_ZN5SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void SHT31::writeCommand(uint16_t cmd) {
 80a0e86:	b538      	push	{r3, r4, r5, lr}
 80a0e88:	4605      	mov	r5, r0
 80a0e8a:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
 80a0e8c:	f001 fbe8 	bl	80a2660 <_Z19__fetch_global_Wirev>
 80a0e90:	7829      	ldrb	r1, [r5, #0]
 80a0e92:	f001 fa8a 	bl	80a23aa <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
 80a0e96:	f001 fbe3 	bl	80a2660 <_Z19__fetch_global_Wirev>
 80a0e9a:	0a21      	lsrs	r1, r4, #8
 80a0e9c:	f7ff fb8e 	bl	80a05bc <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
 80a0ea0:	f001 fbde 	bl	80a2660 <_Z19__fetch_global_Wirev>
 80a0ea4:	b2e1      	uxtb	r1, r4
 80a0ea6:	f7ff fb89 	bl	80a05bc <_ZN7TwoWire5writeEi>
  Wire.endTransmission();      
 80a0eaa:	f001 fbd9 	bl	80a2660 <_Z19__fetch_global_Wirev>
}
 80a0eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void SHT31::writeCommand(uint16_t cmd) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(cmd >> 8);
  Wire.write(cmd & 0xFF);
  Wire.endTransmission();      
 80a0eb2:	f001 ba85 	b.w	80a23c0 <_ZN7TwoWire15endTransmissionEv>

080a0eb6 <_ZN5SHT315resetEv>:
}

uint16_t SHT31::readStatus(void) {  
}

void SHT31::reset(void) {
 80a0eb6:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
 80a0eb8:	f243 01a2 	movw	r1, #12450	; 0x30a2
 80a0ebc:	f7ff ffe3 	bl	80a0e86 <_ZN5SHT3112writeCommandEt>
  delay(10);
}
 80a0ec0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
uint16_t SHT31::readStatus(void) {  
}

void SHT31::reset(void) {
  writeCommand(SHT31_SOFTRESET);
  delay(10);
 80a0ec4:	200a      	movs	r0, #10
 80a0ec6:	f000 bccb 	b.w	80a1860 <delay>

080a0eca <_ZN5SHT315beginEh>:
#include "SHT31.h"

SHT31::SHT31() {
}

boolean SHT31::begin(uint8_t i2caddr) {
 80a0eca:	b538      	push	{r3, r4, r5, lr}
 80a0ecc:	460d      	mov	r5, r1
 80a0ece:	4604      	mov	r4, r0
  Wire.begin();
 80a0ed0:	f001 fbc6 	bl	80a2660 <_Z19__fetch_global_Wirev>
 80a0ed4:	f001 fa52 	bl	80a237c <_ZN7TwoWire5beginEv>
  _i2caddr = i2caddr;
  reset();
 80a0ed8:	4620      	mov	r0, r4
SHT31::SHT31() {
}

boolean SHT31::begin(uint8_t i2caddr) {
  Wire.begin();
  _i2caddr = i2caddr;
 80a0eda:	7025      	strb	r5, [r4, #0]
  reset();
 80a0edc:	f7ff ffeb 	bl	80a0eb6 <_ZN5SHT315resetEv>
  //return (readStatus() == 0x40);
  return true;
}
 80a0ee0:	2001      	movs	r0, #1
 80a0ee2:	bd38      	pop	{r3, r4, r5, pc}
 80a0ee4:	0000      	movs	r0, r0
	...

080a0ee8 <_ZN5SHT3110getTempHumEv>:
  }
  return crc; 
}


boolean SHT31::getTempHum(void) {
 80a0ee8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0eea:	4604      	mov	r4, r0
  uint8_t readbuffer[6];

  writeCommand(SHT31_MEAS_HIGHREP);
 80a0eec:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 80a0ef0:	f7ff ffc9 	bl	80a0e86 <_ZN5SHT3112writeCommandEt>
  
  delay(50);
 80a0ef4:	2032      	movs	r0, #50	; 0x32
 80a0ef6:	f000 fcb3 	bl	80a1860 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
 80a0efa:	f001 fbb1 	bl	80a2660 <_Z19__fetch_global_Wirev>
 80a0efe:	2206      	movs	r2, #6
 80a0f00:	7821      	ldrb	r1, [r4, #0]
 80a0f02:	f001 fa4a 	bl	80a239a <_ZN7TwoWire11requestFromEhh>
  if (Wire.available() != 6) 
 80a0f06:	f001 fbab 	bl	80a2660 <_Z19__fetch_global_Wirev>
 80a0f0a:	6803      	ldr	r3, [r0, #0]
 80a0f0c:	691b      	ldr	r3, [r3, #16]
 80a0f0e:	4798      	blx	r3
 80a0f10:	2806      	cmp	r0, #6
 80a0f12:	d14a      	bne.n	80a0faa <_ZN5SHT3110getTempHumEv+0xc2>
 80a0f14:	2500      	movs	r5, #0
    return false;
  for (uint8_t i=0; i<6; i++) {
    readbuffer[i] = Wire.read();
 80a0f16:	f001 fba3 	bl	80a2660 <_Z19__fetch_global_Wirev>
 80a0f1a:	6803      	ldr	r3, [r0, #0]
 80a0f1c:	695b      	ldr	r3, [r3, #20]
 80a0f1e:	4798      	blx	r3
 80a0f20:	f80d 0005 	strb.w	r0, [sp, r5]
 80a0f24:	3501      	adds	r5, #1
  
  delay(50);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
  for (uint8_t i=0; i<6; i++) {
 80a0f26:	2d06      	cmp	r5, #6
 80a0f28:	d1f5      	bne.n	80a0f16 <_ZN5SHT3110getTempHumEv+0x2e>
  uint16_t ST, SRH;
  ST = readbuffer[0];
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
 80a0f2a:	2202      	movs	r2, #2
 80a0f2c:	4669      	mov	r1, sp
 80a0f2e:	4620      	mov	r0, r4
 80a0f30:	f7ff ff95 	bl	80a0e5e <_ZN5SHT314crc8EPKhi>
 80a0f34:	f89d 5002 	ldrb.w	r5, [sp, #2]
 80a0f38:	4285      	cmp	r5, r0
 80a0f3a:	d136      	bne.n	80a0faa <_ZN5SHT3110getTempHumEv+0xc2>

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
 80a0f3c:	2202      	movs	r2, #2
 80a0f3e:	f10d 0103 	add.w	r1, sp, #3
 80a0f42:	4620      	mov	r0, r4
 80a0f44:	f7ff ff8b 	bl	80a0e5e <_ZN5SHT314crc8EPKhi>
 80a0f48:	f89d 5005 	ldrb.w	r5, [sp, #5]
 80a0f4c:	4285      	cmp	r5, r0
 80a0f4e:	d12c      	bne.n	80a0faa <_ZN5SHT3110getTempHumEv+0xc2>
 
  double stemp = ST;
 80a0f50:	f8bd 0000 	ldrh.w	r0, [sp]
  ST <<= 8;
  ST |= readbuffer[1];

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
 80a0f54:	f89d 6003 	ldrb.w	r6, [sp, #3]
  SRH <<= 8;
  SRH |= readbuffer[4];

  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
 
  double stemp = ST;
 80a0f58:	ba40      	rev16	r0, r0
 80a0f5a:	b280      	uxth	r0, r0
 80a0f5c:	f002 f90c 	bl	80a3178 <__aeabi_ui2d>
  stemp *= 175;
 80a0f60:	a313      	add	r3, pc, #76	; (adr r3, 80a0fb0 <_ZN5SHT3110getTempHumEv+0xc8>)
 80a0f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0f66:	f002 f97d 	bl	80a3264 <__aeabi_dmul>
  stemp /= 0xffff;
 80a0f6a:	a313      	add	r3, pc, #76	; (adr r3, 80a0fb8 <_ZN5SHT3110getTempHumEv+0xd0>)
 80a0f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0f70:	f002 faa2 	bl	80a34b8 <__aeabi_ddiv>
  stemp = -45 + stemp;
  temp = stemp;
 80a0f74:	2200      	movs	r2, #0
 80a0f76:	4b12      	ldr	r3, [pc, #72]	; (80a0fc0 <_ZN5SHT3110getTempHumEv+0xd8>)
 80a0f78:	f001 ffc0 	bl	80a2efc <__aeabi_dsub>
 80a0f7c:	f002 fc54 	bl	80a3828 <__aeabi_d2f>

  if (readbuffer[2] != crc8(readbuffer, 2)) return false;

  SRH = readbuffer[3];
  SRH <<= 8;
  SRH |= readbuffer[4];
 80a0f80:	f89d 5004 	ldrb.w	r5, [sp, #4]
 
  double stemp = ST;
  stemp *= 175;
  stemp /= 0xffff;
  stemp = -45 + stemp;
  temp = stemp;
 80a0f84:	60a0      	str	r0, [r4, #8]
  
  double shum = SRH;
 80a0f86:	ea45 2006 	orr.w	r0, r5, r6, lsl #8
 80a0f8a:	f002 f8f5 	bl	80a3178 <__aeabi_ui2d>
  shum *= 100;
 80a0f8e:	2200      	movs	r2, #0
 80a0f90:	4b0c      	ldr	r3, [pc, #48]	; (80a0fc4 <_ZN5SHT3110getTempHumEv+0xdc>)
 80a0f92:	f002 f967 	bl	80a3264 <__aeabi_dmul>
  shum /= 0xFFFF;
  
  humidity = shum;
 80a0f96:	a308      	add	r3, pc, #32	; (adr r3, 80a0fb8 <_ZN5SHT3110getTempHumEv+0xd0>)
 80a0f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0f9c:	f002 fa8c 	bl	80a34b8 <__aeabi_ddiv>
 80a0fa0:	f002 fc42 	bl	80a3828 <__aeabi_d2f>
 80a0fa4:	6060      	str	r0, [r4, #4]
  
  return true;
 80a0fa6:	2001      	movs	r0, #1
 80a0fa8:	e000      	b.n	80a0fac <_ZN5SHT3110getTempHumEv+0xc4>
  writeCommand(SHT31_MEAS_HIGHREP);
  
  delay(50);
  Wire.requestFrom(_i2caddr, (uint8_t)6);
  if (Wire.available() != 6) 
    return false;
 80a0faa:	2000      	movs	r0, #0
  shum /= 0xFFFF;
  
  humidity = shum;
  
  return true;
}
 80a0fac:	b002      	add	sp, #8
 80a0fae:	bd70      	pop	{r4, r5, r6, pc}
 80a0fb0:	00000000 	.word	0x00000000
 80a0fb4:	4065e000 	.word	0x4065e000
 80a0fb8:	00000000 	.word	0x00000000
 80a0fbc:	40efffe0 	.word	0x40efffe0
 80a0fc0:	40468000 	.word	0x40468000
 80a0fc4:	40590000 	.word	0x40590000

080a0fc8 <_ZN5SHT3114getTemperatureEv>:
  reset();
  //return (readStatus() == 0x40);
  return true;
}

float SHT31::getTemperature(void) {
 80a0fc8:	b510      	push	{r4, lr}
 80a0fca:	4604      	mov	r4, r0
  if (! getTempHum()) return NAN;
 80a0fcc:	f7ff ff8c 	bl	80a0ee8 <_ZN5SHT3110getTempHumEv>
 80a0fd0:	b108      	cbz	r0, 80a0fd6 <_ZN5SHT3114getTemperatureEv+0xe>
  return temp;
 80a0fd2:	68a0      	ldr	r0, [r4, #8]
 80a0fd4:	bd10      	pop	{r4, pc}
  //return (readStatus() == 0x40);
  return true;
}

float SHT31::getTemperature(void) {
  if (! getTempHum()) return NAN;
 80a0fd6:	4801      	ldr	r0, [pc, #4]	; (80a0fdc <_ZN5SHT3114getTemperatureEv+0x14>)
  return temp;
}
 80a0fd8:	bd10      	pop	{r4, pc}
 80a0fda:	bf00      	nop
 80a0fdc:	7fc00000 	.word	0x7fc00000

080a0fe0 <_ZN5SHT3111getHumidityEv>:


float SHT31::getHumidity(void) {
 80a0fe0:	b510      	push	{r4, lr}
 80a0fe2:	4604      	mov	r4, r0
  if (! getTempHum()) return NAN;
 80a0fe4:	f7ff ff80 	bl	80a0ee8 <_ZN5SHT3110getTempHumEv>
 80a0fe8:	b108      	cbz	r0, 80a0fee <_ZN5SHT3111getHumidityEv+0xe>
  return humidity;
 80a0fea:	6860      	ldr	r0, [r4, #4]
 80a0fec:	bd10      	pop	{r4, pc}
  return temp;
}


float SHT31::getHumidity(void) {
  if (! getTempHum()) return NAN;
 80a0fee:	4801      	ldr	r0, [pc, #4]	; (80a0ff4 <_ZN5SHT3111getHumidityEv+0x14>)
  return humidity;
}
 80a0ff0:	bd10      	pop	{r4, pc}
 80a0ff2:	bf00      	nop
 80a0ff4:	7fc00000 	.word	0x7fc00000

080a0ff8 <_GLOBAL__sub_I__ZN5SHT31C2Ev>:
 80a0ff8:	f000 b800 	b.w	80a0ffc <HAL_Pin_Map>

080a0ffc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a0ffc:	b508      	push	{r3, lr}
 80a0ffe:	4b02      	ldr	r3, [pc, #8]	; (80a1008 <HAL_Pin_Map+0xc>)
 80a1000:	681b      	ldr	r3, [r3, #0]
 80a1002:	681b      	ldr	r3, [r3, #0]
 80a1004:	9301      	str	r3, [sp, #4]
 80a1006:	bd08      	pop	{r3, pc}
 80a1008:	080601b0 	.word	0x080601b0

080a100c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a100c:	b508      	push	{r3, lr}
 80a100e:	4b02      	ldr	r3, [pc, #8]	; (80a1018 <HAL_Pin_Mode+0xc>)
 80a1010:	681b      	ldr	r3, [r3, #0]
 80a1012:	689b      	ldr	r3, [r3, #8]
 80a1014:	9301      	str	r3, [sp, #4]
 80a1016:	bd08      	pop	{r3, pc}
 80a1018:	080601b0 	.word	0x080601b0

080a101c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a101c:	b508      	push	{r3, lr}
 80a101e:	4b02      	ldr	r3, [pc, #8]	; (80a1028 <HAL_Get_Pin_Mode+0xc>)
 80a1020:	681b      	ldr	r3, [r3, #0]
 80a1022:	68db      	ldr	r3, [r3, #12]
 80a1024:	9301      	str	r3, [sp, #4]
 80a1026:	bd08      	pop	{r3, pc}
 80a1028:	080601b0 	.word	0x080601b0

080a102c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a102c:	b508      	push	{r3, lr}
 80a102e:	4b02      	ldr	r3, [pc, #8]	; (80a1038 <HAL_GPIO_Write+0xc>)
 80a1030:	681b      	ldr	r3, [r3, #0]
 80a1032:	691b      	ldr	r3, [r3, #16]
 80a1034:	9301      	str	r3, [sp, #4]
 80a1036:	bd08      	pop	{r3, pc}
 80a1038:	080601b0 	.word	0x080601b0

080a103c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a103c:	b508      	push	{r3, lr}
 80a103e:	4b02      	ldr	r3, [pc, #8]	; (80a1048 <HAL_SPI_Init+0xc>)
 80a1040:	681b      	ldr	r3, [r3, #0]
 80a1042:	69db      	ldr	r3, [r3, #28]
 80a1044:	9301      	str	r3, [sp, #4]
 80a1046:	bd08      	pop	{r3, pc}
 80a1048:	080601b4 	.word	0x080601b4

080a104c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a104c:	b508      	push	{r3, lr}
 80a104e:	4b02      	ldr	r3, [pc, #8]	; (80a1058 <HAL_SPI_Is_Enabled+0xc>)
 80a1050:	681b      	ldr	r3, [r3, #0]
 80a1052:	6a1b      	ldr	r3, [r3, #32]
 80a1054:	9301      	str	r3, [sp, #4]
 80a1056:	bd08      	pop	{r3, pc}
 80a1058:	080601b4 	.word	0x080601b4

080a105c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a105c:	b508      	push	{r3, lr}
 80a105e:	4b02      	ldr	r3, [pc, #8]	; (80a1068 <HAL_RNG_GetRandomNumber+0xc>)
 80a1060:	681b      	ldr	r3, [r3, #0]
 80a1062:	685b      	ldr	r3, [r3, #4]
 80a1064:	9301      	str	r3, [sp, #4]
 80a1066:	bd08      	pop	{r3, pc}
 80a1068:	0806019c 	.word	0x0806019c

080a106c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a106c:	b508      	push	{r3, lr}
 80a106e:	4b02      	ldr	r3, [pc, #8]	; (80a1078 <HAL_Delay_Microseconds+0xc>)
 80a1070:	681b      	ldr	r3, [r3, #0]
 80a1072:	68db      	ldr	r3, [r3, #12]
 80a1074:	9301      	str	r3, [sp, #4]
 80a1076:	bd08      	pop	{r3, pc}
 80a1078:	0806019c 	.word	0x0806019c

080a107c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a107c:	b508      	push	{r3, lr}
 80a107e:	4b02      	ldr	r3, [pc, #8]	; (80a1088 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1080:	681b      	ldr	r3, [r3, #0]
 80a1082:	695b      	ldr	r3, [r3, #20]
 80a1084:	9301      	str	r3, [sp, #4]
 80a1086:	bd08      	pop	{r3, pc}
 80a1088:	0806019c 	.word	0x0806019c

080a108c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a108c:	b508      	push	{r3, lr}
 80a108e:	4b02      	ldr	r3, [pc, #8]	; (80a1098 <os_mutex_create+0xc>)
 80a1090:	681b      	ldr	r3, [r3, #0]
 80a1092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1094:	9301      	str	r3, [sp, #4]
 80a1096:	bd08      	pop	{r3, pc}
 80a1098:	080601d0 	.word	0x080601d0

080a109c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a109c:	b508      	push	{r3, lr}
 80a109e:	4b02      	ldr	r3, [pc, #8]	; (80a10a8 <HAL_USART_Init+0xc>)
 80a10a0:	681b      	ldr	r3, [r3, #0]
 80a10a2:	699b      	ldr	r3, [r3, #24]
 80a10a4:	9301      	str	r3, [sp, #4]
 80a10a6:	bd08      	pop	{r3, pc}
 80a10a8:	080601c4 	.word	0x080601c4

080a10ac <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a10ac:	b508      	push	{r3, lr}
 80a10ae:	4b02      	ldr	r3, [pc, #8]	; (80a10b8 <HAL_USART_Write_Data+0xc>)
 80a10b0:	681b      	ldr	r3, [r3, #0]
 80a10b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a10b4:	9301      	str	r3, [sp, #4]
 80a10b6:	bd08      	pop	{r3, pc}
 80a10b8:	080601c4 	.word	0x080601c4

080a10bc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a10bc:	b508      	push	{r3, lr}
 80a10be:	4b02      	ldr	r3, [pc, #8]	; (80a10c8 <HAL_USART_Available_Data+0xc>)
 80a10c0:	681b      	ldr	r3, [r3, #0]
 80a10c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a10c4:	9301      	str	r3, [sp, #4]
 80a10c6:	bd08      	pop	{r3, pc}
 80a10c8:	080601c4 	.word	0x080601c4

080a10cc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a10cc:	b508      	push	{r3, lr}
 80a10ce:	4b02      	ldr	r3, [pc, #8]	; (80a10d8 <HAL_USART_Read_Data+0xc>)
 80a10d0:	681b      	ldr	r3, [r3, #0]
 80a10d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a10d4:	9301      	str	r3, [sp, #4]
 80a10d6:	bd08      	pop	{r3, pc}
 80a10d8:	080601c4 	.word	0x080601c4

080a10dc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a10dc:	b508      	push	{r3, lr}
 80a10de:	4b02      	ldr	r3, [pc, #8]	; (80a10e8 <HAL_USART_Peek_Data+0xc>)
 80a10e0:	681b      	ldr	r3, [r3, #0]
 80a10e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a10e4:	9301      	str	r3, [sp, #4]
 80a10e6:	bd08      	pop	{r3, pc}
 80a10e8:	080601c4 	.word	0x080601c4

080a10ec <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a10ec:	b508      	push	{r3, lr}
 80a10ee:	4b02      	ldr	r3, [pc, #8]	; (80a10f8 <HAL_USART_Flush_Data+0xc>)
 80a10f0:	681b      	ldr	r3, [r3, #0]
 80a10f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a10f4:	9301      	str	r3, [sp, #4]
 80a10f6:	bd08      	pop	{r3, pc}
 80a10f8:	080601c4 	.word	0x080601c4

080a10fc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a10fc:	b508      	push	{r3, lr}
 80a10fe:	4b02      	ldr	r3, [pc, #8]	; (80a1108 <HAL_USART_Is_Enabled+0xc>)
 80a1100:	681b      	ldr	r3, [r3, #0]
 80a1102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1104:	9301      	str	r3, [sp, #4]
 80a1106:	bd08      	pop	{r3, pc}
 80a1108:	080601c4 	.word	0x080601c4

080a110c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a110c:	b508      	push	{r3, lr}
 80a110e:	4b02      	ldr	r3, [pc, #8]	; (80a1118 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1110:	681b      	ldr	r3, [r3, #0]
 80a1112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1114:	9301      	str	r3, [sp, #4]
 80a1116:	bd08      	pop	{r3, pc}
 80a1118:	080601c4 	.word	0x080601c4

080a111c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a111c:	b508      	push	{r3, lr}
 80a111e:	4b02      	ldr	r3, [pc, #8]	; (80a1128 <HAL_I2C_Begin+0xc>)
 80a1120:	681b      	ldr	r3, [r3, #0]
 80a1122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1124:	9301      	str	r3, [sp, #4]
 80a1126:	bd08      	pop	{r3, pc}
 80a1128:	080601ac 	.word	0x080601ac

080a112c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a112c:	b508      	push	{r3, lr}
 80a112e:	4b02      	ldr	r3, [pc, #8]	; (80a1138 <HAL_I2C_Request_Data+0xc>)
 80a1130:	681b      	ldr	r3, [r3, #0]
 80a1132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1134:	9301      	str	r3, [sp, #4]
 80a1136:	bd08      	pop	{r3, pc}
 80a1138:	080601ac 	.word	0x080601ac

080a113c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a113c:	b508      	push	{r3, lr}
 80a113e:	4b02      	ldr	r3, [pc, #8]	; (80a1148 <HAL_I2C_Begin_Transmission+0xc>)
 80a1140:	681b      	ldr	r3, [r3, #0]
 80a1142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1144:	9301      	str	r3, [sp, #4]
 80a1146:	bd08      	pop	{r3, pc}
 80a1148:	080601ac 	.word	0x080601ac

080a114c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a114c:	b508      	push	{r3, lr}
 80a114e:	4b02      	ldr	r3, [pc, #8]	; (80a1158 <HAL_I2C_End_Transmission+0xc>)
 80a1150:	681b      	ldr	r3, [r3, #0]
 80a1152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1154:	9301      	str	r3, [sp, #4]
 80a1156:	bd08      	pop	{r3, pc}
 80a1158:	080601ac 	.word	0x080601ac

080a115c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a115c:	b508      	push	{r3, lr}
 80a115e:	4b02      	ldr	r3, [pc, #8]	; (80a1168 <HAL_I2C_Write_Data+0xc>)
 80a1160:	681b      	ldr	r3, [r3, #0]
 80a1162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1164:	9301      	str	r3, [sp, #4]
 80a1166:	bd08      	pop	{r3, pc}
 80a1168:	080601ac 	.word	0x080601ac

080a116c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a116c:	b508      	push	{r3, lr}
 80a116e:	4b02      	ldr	r3, [pc, #8]	; (80a1178 <HAL_I2C_Available_Data+0xc>)
 80a1170:	681b      	ldr	r3, [r3, #0]
 80a1172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1174:	9301      	str	r3, [sp, #4]
 80a1176:	bd08      	pop	{r3, pc}
 80a1178:	080601ac 	.word	0x080601ac

080a117c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a117c:	b508      	push	{r3, lr}
 80a117e:	4b02      	ldr	r3, [pc, #8]	; (80a1188 <HAL_I2C_Read_Data+0xc>)
 80a1180:	681b      	ldr	r3, [r3, #0]
 80a1182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1184:	9301      	str	r3, [sp, #4]
 80a1186:	bd08      	pop	{r3, pc}
 80a1188:	080601ac 	.word	0x080601ac

080a118c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a118c:	b508      	push	{r3, lr}
 80a118e:	4b02      	ldr	r3, [pc, #8]	; (80a1198 <HAL_I2C_Peek_Data+0xc>)
 80a1190:	681b      	ldr	r3, [r3, #0]
 80a1192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1194:	9301      	str	r3, [sp, #4]
 80a1196:	bd08      	pop	{r3, pc}
 80a1198:	080601ac 	.word	0x080601ac

080a119c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a119c:	b508      	push	{r3, lr}
 80a119e:	4b02      	ldr	r3, [pc, #8]	; (80a11a8 <HAL_I2C_Flush_Data+0xc>)
 80a11a0:	681b      	ldr	r3, [r3, #0]
 80a11a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a11a4:	9301      	str	r3, [sp, #4]
 80a11a6:	bd08      	pop	{r3, pc}
 80a11a8:	080601ac 	.word	0x080601ac

080a11ac <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a11ac:	b508      	push	{r3, lr}
 80a11ae:	4b02      	ldr	r3, [pc, #8]	; (80a11b8 <HAL_I2C_Is_Enabled+0xc>)
 80a11b0:	681b      	ldr	r3, [r3, #0]
 80a11b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a11b4:	9301      	str	r3, [sp, #4]
 80a11b6:	bd08      	pop	{r3, pc}
 80a11b8:	080601ac 	.word	0x080601ac

080a11bc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a11bc:	b508      	push	{r3, lr}
 80a11be:	4b03      	ldr	r3, [pc, #12]	; (80a11cc <HAL_I2C_Init+0x10>)
 80a11c0:	681b      	ldr	r3, [r3, #0]
 80a11c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a11c6:	9301      	str	r3, [sp, #4]
 80a11c8:	bd08      	pop	{r3, pc}
 80a11ca:	0000      	.short	0x0000
 80a11cc:	080601ac 	.word	0x080601ac

080a11d0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a11d0:	b508      	push	{r3, lr}
 80a11d2:	4b02      	ldr	r3, [pc, #8]	; (80a11dc <HAL_USB_USART_Init+0xc>)
 80a11d4:	681b      	ldr	r3, [r3, #0]
 80a11d6:	681b      	ldr	r3, [r3, #0]
 80a11d8:	9301      	str	r3, [sp, #4]
 80a11da:	bd08      	pop	{r3, pc}
 80a11dc:	080601d8 	.word	0x080601d8

080a11e0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a11e0:	b508      	push	{r3, lr}
 80a11e2:	4b02      	ldr	r3, [pc, #8]	; (80a11ec <HAL_USB_USART_Begin+0xc>)
 80a11e4:	681b      	ldr	r3, [r3, #0]
 80a11e6:	685b      	ldr	r3, [r3, #4]
 80a11e8:	9301      	str	r3, [sp, #4]
 80a11ea:	bd08      	pop	{r3, pc}
 80a11ec:	080601d8 	.word	0x080601d8

080a11f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a11f0:	b508      	push	{r3, lr}
 80a11f2:	4b02      	ldr	r3, [pc, #8]	; (80a11fc <HAL_USB_USART_Available_Data+0xc>)
 80a11f4:	681b      	ldr	r3, [r3, #0]
 80a11f6:	691b      	ldr	r3, [r3, #16]
 80a11f8:	9301      	str	r3, [sp, #4]
 80a11fa:	bd08      	pop	{r3, pc}
 80a11fc:	080601d8 	.word	0x080601d8

080a1200 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1200:	b508      	push	{r3, lr}
 80a1202:	4b02      	ldr	r3, [pc, #8]	; (80a120c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1204:	681b      	ldr	r3, [r3, #0]
 80a1206:	695b      	ldr	r3, [r3, #20]
 80a1208:	9301      	str	r3, [sp, #4]
 80a120a:	bd08      	pop	{r3, pc}
 80a120c:	080601d8 	.word	0x080601d8

080a1210 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1210:	b508      	push	{r3, lr}
 80a1212:	4b02      	ldr	r3, [pc, #8]	; (80a121c <HAL_USB_USART_Receive_Data+0xc>)
 80a1214:	681b      	ldr	r3, [r3, #0]
 80a1216:	699b      	ldr	r3, [r3, #24]
 80a1218:	9301      	str	r3, [sp, #4]
 80a121a:	bd08      	pop	{r3, pc}
 80a121c:	080601d8 	.word	0x080601d8

080a1220 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1220:	b508      	push	{r3, lr}
 80a1222:	4b02      	ldr	r3, [pc, #8]	; (80a122c <HAL_USB_USART_Send_Data+0xc>)
 80a1224:	681b      	ldr	r3, [r3, #0]
 80a1226:	69db      	ldr	r3, [r3, #28]
 80a1228:	9301      	str	r3, [sp, #4]
 80a122a:	bd08      	pop	{r3, pc}
 80a122c:	080601d8 	.word	0x080601d8

080a1230 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1230:	b508      	push	{r3, lr}
 80a1232:	4b02      	ldr	r3, [pc, #8]	; (80a123c <HAL_USB_USART_Flush_Data+0xc>)
 80a1234:	681b      	ldr	r3, [r3, #0]
 80a1236:	6a1b      	ldr	r3, [r3, #32]
 80a1238:	9301      	str	r3, [sp, #4]
 80a123a:	bd08      	pop	{r3, pc}
 80a123c:	080601d8 	.word	0x080601d8

080a1240 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1240:	b508      	push	{r3, lr}
 80a1242:	4b02      	ldr	r3, [pc, #8]	; (80a124c <inet_gethostbyname+0xc>)
 80a1244:	681b      	ldr	r3, [r3, #0]
 80a1246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1248:	9301      	str	r3, [sp, #4]
 80a124a:	bd08      	pop	{r3, pc}
 80a124c:	080601c0 	.word	0x080601c0

080a1250 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1250:	b508      	push	{r3, lr}
 80a1252:	4b02      	ldr	r3, [pc, #8]	; (80a125c <set_system_mode+0xc>)
 80a1254:	681b      	ldr	r3, [r3, #0]
 80a1256:	685b      	ldr	r3, [r3, #4]
 80a1258:	9301      	str	r3, [sp, #4]
 80a125a:	bd08      	pop	{r3, pc}
 80a125c:	080601a4 	.word	0x080601a4

080a1260 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1260:	b508      	push	{r3, lr}
 80a1262:	4b02      	ldr	r3, [pc, #8]	; (80a126c <system_delay_ms+0xc>)
 80a1264:	681b      	ldr	r3, [r3, #0]
 80a1266:	695b      	ldr	r3, [r3, #20]
 80a1268:	9301      	str	r3, [sp, #4]
 80a126a:	bd08      	pop	{r3, pc}
 80a126c:	080601a4 	.word	0x080601a4

080a1270 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1270:	b508      	push	{r3, lr}
 80a1272:	4b02      	ldr	r3, [pc, #8]	; (80a127c <application_thread_current+0xc>)
 80a1274:	681b      	ldr	r3, [r3, #0]
 80a1276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1278:	9301      	str	r3, [sp, #4]
 80a127a:	bd08      	pop	{r3, pc}
 80a127c:	080601a4 	.word	0x080601a4

080a1280 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1280:	b508      	push	{r3, lr}
 80a1282:	4b02      	ldr	r3, [pc, #8]	; (80a128c <application_thread_invoke+0xc>)
 80a1284:	681b      	ldr	r3, [r3, #0]
 80a1286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1288:	9301      	str	r3, [sp, #4]
 80a128a:	bd08      	pop	{r3, pc}
 80a128c:	080601a4 	.word	0x080601a4

080a1290 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1290:	b508      	push	{r3, lr}
 80a1292:	4b03      	ldr	r3, [pc, #12]	; (80a12a0 <system_ctrl_set_app_request_handler+0x10>)
 80a1294:	681b      	ldr	r3, [r3, #0]
 80a1296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a129a:	9301      	str	r3, [sp, #4]
 80a129c:	bd08      	pop	{r3, pc}
 80a129e:	0000      	.short	0x0000
 80a12a0:	080601a4 	.word	0x080601a4

080a12a4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a12a4:	b508      	push	{r3, lr}
 80a12a6:	4b03      	ldr	r3, [pc, #12]	; (80a12b4 <system_ctrl_set_result+0x10>)
 80a12a8:	681b      	ldr	r3, [r3, #0]
 80a12aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a12ae:	9301      	str	r3, [sp, #4]
 80a12b0:	bd08      	pop	{r3, pc}
 80a12b2:	0000      	.short	0x0000
 80a12b4:	080601a4 	.word	0x080601a4

080a12b8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a12b8:	b508      	push	{r3, lr}
 80a12ba:	4b02      	ldr	r3, [pc, #8]	; (80a12c4 <network_connect+0xc>)
 80a12bc:	681b      	ldr	r3, [r3, #0]
 80a12be:	685b      	ldr	r3, [r3, #4]
 80a12c0:	9301      	str	r3, [sp, #4]
 80a12c2:	bd08      	pop	{r3, pc}
 80a12c4:	080601c8 	.word	0x080601c8

080a12c8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a12c8:	b508      	push	{r3, lr}
 80a12ca:	4b02      	ldr	r3, [pc, #8]	; (80a12d4 <network_connecting+0xc>)
 80a12cc:	681b      	ldr	r3, [r3, #0]
 80a12ce:	689b      	ldr	r3, [r3, #8]
 80a12d0:	9301      	str	r3, [sp, #4]
 80a12d2:	bd08      	pop	{r3, pc}
 80a12d4:	080601c8 	.word	0x080601c8

080a12d8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a12d8:	b508      	push	{r3, lr}
 80a12da:	4b02      	ldr	r3, [pc, #8]	; (80a12e4 <network_disconnect+0xc>)
 80a12dc:	681b      	ldr	r3, [r3, #0]
 80a12de:	68db      	ldr	r3, [r3, #12]
 80a12e0:	9301      	str	r3, [sp, #4]
 80a12e2:	bd08      	pop	{r3, pc}
 80a12e4:	080601c8 	.word	0x080601c8

080a12e8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a12e8:	b508      	push	{r3, lr}
 80a12ea:	4b02      	ldr	r3, [pc, #8]	; (80a12f4 <network_ready+0xc>)
 80a12ec:	681b      	ldr	r3, [r3, #0]
 80a12ee:	691b      	ldr	r3, [r3, #16]
 80a12f0:	9301      	str	r3, [sp, #4]
 80a12f2:	bd08      	pop	{r3, pc}
 80a12f4:	080601c8 	.word	0x080601c8

080a12f8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a12f8:	b508      	push	{r3, lr}
 80a12fa:	4b02      	ldr	r3, [pc, #8]	; (80a1304 <network_on+0xc>)
 80a12fc:	681b      	ldr	r3, [r3, #0]
 80a12fe:	695b      	ldr	r3, [r3, #20]
 80a1300:	9301      	str	r3, [sp, #4]
 80a1302:	bd08      	pop	{r3, pc}
 80a1304:	080601c8 	.word	0x080601c8

080a1308 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1308:	b508      	push	{r3, lr}
 80a130a:	4b02      	ldr	r3, [pc, #8]	; (80a1314 <network_off+0xc>)
 80a130c:	681b      	ldr	r3, [r3, #0]
 80a130e:	699b      	ldr	r3, [r3, #24]
 80a1310:	9301      	str	r3, [sp, #4]
 80a1312:	bd08      	pop	{r3, pc}
 80a1314:	080601c8 	.word	0x080601c8

080a1318 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1318:	b508      	push	{r3, lr}
 80a131a:	4b02      	ldr	r3, [pc, #8]	; (80a1324 <network_listen+0xc>)
 80a131c:	681b      	ldr	r3, [r3, #0]
 80a131e:	69db      	ldr	r3, [r3, #28]
 80a1320:	9301      	str	r3, [sp, #4]
 80a1322:	bd08      	pop	{r3, pc}
 80a1324:	080601c8 	.word	0x080601c8

080a1328 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1328:	b508      	push	{r3, lr}
 80a132a:	4b02      	ldr	r3, [pc, #8]	; (80a1334 <network_listening+0xc>)
 80a132c:	681b      	ldr	r3, [r3, #0]
 80a132e:	6a1b      	ldr	r3, [r3, #32]
 80a1330:	9301      	str	r3, [sp, #4]
 80a1332:	bd08      	pop	{r3, pc}
 80a1334:	080601c8 	.word	0x080601c8

080a1338 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1338:	b508      	push	{r3, lr}
 80a133a:	4b02      	ldr	r3, [pc, #8]	; (80a1344 <network_set_listen_timeout+0xc>)
 80a133c:	681b      	ldr	r3, [r3, #0]
 80a133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1340:	9301      	str	r3, [sp, #4]
 80a1342:	bd08      	pop	{r3, pc}
 80a1344:	080601c8 	.word	0x080601c8

080a1348 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1348:	b508      	push	{r3, lr}
 80a134a:	4b02      	ldr	r3, [pc, #8]	; (80a1354 <network_get_listen_timeout+0xc>)
 80a134c:	681b      	ldr	r3, [r3, #0]
 80a134e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1350:	9301      	str	r3, [sp, #4]
 80a1352:	bd08      	pop	{r3, pc}
 80a1354:	080601c8 	.word	0x080601c8

080a1358 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a1358:	b508      	push	{r3, lr}
 80a135a:	4b02      	ldr	r3, [pc, #8]	; (80a1364 <spark_variable+0xc>)
 80a135c:	681b      	ldr	r3, [r3, #0]
 80a135e:	681b      	ldr	r3, [r3, #0]
 80a1360:	9301      	str	r3, [sp, #4]
 80a1362:	bd08      	pop	{r3, pc}
 80a1364:	080601cc 	.word	0x080601cc

080a1368 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a1368:	b508      	push	{r3, lr}
 80a136a:	4b02      	ldr	r3, [pc, #8]	; (80a1374 <spark_function+0xc>)
 80a136c:	681b      	ldr	r3, [r3, #0]
 80a136e:	685b      	ldr	r3, [r3, #4]
 80a1370:	9301      	str	r3, [sp, #4]
 80a1372:	bd08      	pop	{r3, pc}
 80a1374:	080601cc 	.word	0x080601cc

080a1378 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1378:	b508      	push	{r3, lr}
 80a137a:	4b02      	ldr	r3, [pc, #8]	; (80a1384 <spark_send_event+0xc>)
 80a137c:	681b      	ldr	r3, [r3, #0]
 80a137e:	6a1b      	ldr	r3, [r3, #32]
 80a1380:	9301      	str	r3, [sp, #4]
 80a1382:	bd08      	pop	{r3, pc}
 80a1384:	080601cc 	.word	0x080601cc

080a1388 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1388:	b508      	push	{r3, lr}
 80a138a:	4b02      	ldr	r3, [pc, #8]	; (80a1394 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a138c:	681b      	ldr	r3, [r3, #0]
 80a138e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1390:	9301      	str	r3, [sp, #4]
 80a1392:	bd08      	pop	{r3, pc}
 80a1394:	080601cc 	.word	0x080601cc

080a1398 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1398:	b508      	push	{r3, lr}
 80a139a:	4b02      	ldr	r3, [pc, #8]	; (80a13a4 <malloc+0xc>)
 80a139c:	681b      	ldr	r3, [r3, #0]
 80a139e:	681b      	ldr	r3, [r3, #0]
 80a13a0:	9301      	str	r3, [sp, #4]
 80a13a2:	bd08      	pop	{r3, pc}
 80a13a4:	080601a0 	.word	0x080601a0

080a13a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a13a8:	b508      	push	{r3, lr}
 80a13aa:	4b02      	ldr	r3, [pc, #8]	; (80a13b4 <free+0xc>)
 80a13ac:	681b      	ldr	r3, [r3, #0]
 80a13ae:	685b      	ldr	r3, [r3, #4]
 80a13b0:	9301      	str	r3, [sp, #4]
 80a13b2:	bd08      	pop	{r3, pc}
 80a13b4:	080601a0 	.word	0x080601a0

080a13b8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a13b8:	b508      	push	{r3, lr}
 80a13ba:	4b02      	ldr	r3, [pc, #8]	; (80a13c4 <realloc+0xc>)
 80a13bc:	681b      	ldr	r3, [r3, #0]
 80a13be:	689b      	ldr	r3, [r3, #8]
 80a13c0:	9301      	str	r3, [sp, #4]
 80a13c2:	bd08      	pop	{r3, pc}
 80a13c4:	080601a0 	.word	0x080601a0

080a13c8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a13c8:	b508      	push	{r3, lr}
 80a13ca:	4b02      	ldr	r3, [pc, #8]	; (80a13d4 <abort+0xc>)
 80a13cc:	681b      	ldr	r3, [r3, #0]
 80a13ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a13d0:	9301      	str	r3, [sp, #4]
 80a13d2:	bd08      	pop	{r3, pc}
 80a13d4:	080601a0 	.word	0x080601a0

080a13d8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a13d8:	b508      	push	{r3, lr}
 80a13da:	4b02      	ldr	r3, [pc, #8]	; (80a13e4 <_malloc_r+0xc>)
 80a13dc:	681b      	ldr	r3, [r3, #0]
 80a13de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a13e0:	9301      	str	r3, [sp, #4]
 80a13e2:	bd08      	pop	{r3, pc}
 80a13e4:	080601a0 	.word	0x080601a0

080a13e8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a13e8:	4770      	bx	lr

080a13ea <_ZN8SPIClassD0Ev>:
 80a13ea:	b510      	push	{r4, lr}
 80a13ec:	4604      	mov	r4, r0
 80a13ee:	2110      	movs	r1, #16
 80a13f0:	f001 f95b 	bl	80a26aa <_ZdlPvj>
 80a13f4:	4620      	mov	r0, r4
 80a13f6:	bd10      	pop	{r4, pc}

080a13f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a13f8:	b570      	push	{r4, r5, r6, lr}
 80a13fa:	4604      	mov	r4, r0
 80a13fc:	460e      	mov	r6, r1
 80a13fe:	4b07      	ldr	r3, [pc, #28]	; (80a141c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1400:	2500      	movs	r5, #0
 80a1402:	6003      	str	r3, [r0, #0]
 80a1404:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1408:	f7ff fe40 	bl	80a108c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a140c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a140e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1410:	f7ff fe14 	bl	80a103c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1414:	60a5      	str	r5, [r4, #8]
}
 80a1416:	4620      	mov	r0, r4
 80a1418:	bd70      	pop	{r4, r5, r6, pc}
 80a141a:	bf00      	nop
 80a141c:	080a44c0 	.word	0x080a44c0

080a1420 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1420:	7900      	ldrb	r0, [r0, #4]
 80a1422:	f7ff be13 	b.w	80a104c <HAL_SPI_Is_Enabled>
	...

080a1428 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a142c:	4b03      	ldr	r3, [pc, #12]	; (80a143c <_GLOBAL__sub_I_System+0x14>)
 80a142e:	2000      	movs	r0, #0
 80a1430:	7018      	strb	r0, [r3, #0]
 80a1432:	8058      	strh	r0, [r3, #2]
 80a1434:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1436:	f7ff bf0b 	b.w	80a1250 <set_system_mode>
 80a143a:	bf00      	nop
 80a143c:	20000478 	.word	0x20000478

080a1440 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a1440:	b510      	push	{r4, lr}
 80a1442:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a1444:	f002 ff03 	bl	80a424e <strlen>
 80a1448:	3801      	subs	r0, #1
 80a144a:	1823      	adds	r3, r4, r0
 80a144c:	4620      	mov	r0, r4
	while(i<j){
 80a144e:	4298      	cmp	r0, r3
 80a1450:	d206      	bcs.n	80a1460 <_Z11str_reversePc+0x20>
		c = *i;
 80a1452:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a1454:	7819      	ldrb	r1, [r3, #0]
 80a1456:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a145a:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a145e:	e7f6      	b.n	80a144e <_Z11str_reversePc+0xe>
 80a1460:	bd10      	pop	{r4, pc}

080a1462 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a1462:	b570      	push	{r4, r5, r6, lr}
 80a1464:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a1466:	1e91      	subs	r1, r2, #2
 80a1468:	2922      	cmp	r1, #34	; 0x22
 80a146a:	d820      	bhi.n	80a14ae <ultoa+0x4c>
 80a146c:	4625      	mov	r5, r4
 80a146e:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a1470:	b910      	cbnz	r0, 80a1478 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1472:	4423      	add	r3, r4
            *ptr++ = '0';
 80a1474:	2230      	movs	r2, #48	; 0x30
 80a1476:	e00e      	b.n	80a1496 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a1478:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a147c:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a1480:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a1482:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a1484:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a1488:	bf94      	ite	ls
 80a148a:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a148c:	3157      	addhi	r1, #87	; 0x57
 80a148e:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a1492:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a1494:	e7eb      	b.n	80a146e <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1496:	4299      	cmp	r1, r3
 80a1498:	d202      	bcs.n	80a14a0 <ultoa+0x3e>
            *ptr++ = '0';
 80a149a:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a149e:	e7fa      	b.n	80a1496 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a14a0:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a14a2:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a14a4:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a14a6:	f7ff ffcb 	bl	80a1440 <_Z11str_reversePc>
	return buffer;
 80a14aa:	4620      	mov	r0, r4
 80a14ac:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a14ae:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a14b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a14b4 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a14b4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a14b8:	4680      	mov	r8, r0
 80a14ba:	460d      	mov	r5, r1
 80a14bc:	4617      	mov	r7, r2
 80a14be:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a14c0:	2200      	movs	r2, #0
 80a14c2:	2300      	movs	r3, #0
 80a14c4:	4640      	mov	r0, r8
 80a14c6:	4629      	mov	r1, r5
 80a14c8:	f002 f93e 	bl	80a3748 <__aeabi_dcmplt>
 80a14cc:	b120      	cbz	r0, 80a14d8 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a14ce:	232d      	movs	r3, #45	; 0x2d
 80a14d0:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a14d2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a14d6:	3601      	adds	r6, #1
 80a14d8:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a14da:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a14dc:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a14de:	b2d9      	uxtb	r1, r3
 80a14e0:	428f      	cmp	r7, r1
 80a14e2:	d902      	bls.n	80a14ea <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a14e4:	4354      	muls	r4, r2
 80a14e6:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a14e8:	e7f9      	b.n	80a14de <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a14ea:	4620      	mov	r0, r4
 80a14ec:	f001 fe54 	bl	80a3198 <__aeabi_i2d>
 80a14f0:	4642      	mov	r2, r8
 80a14f2:	462b      	mov	r3, r5
 80a14f4:	f001 feb6 	bl	80a3264 <__aeabi_dmul>
 80a14f8:	4682      	mov	sl, r0
 80a14fa:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a14fc:	f002 fc5a 	bl	80a3db4 <__aeabi_d2ulz>
 80a1500:	4680      	mov	r8, r0
 80a1502:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a1504:	f001 fe78 	bl	80a31f8 <__aeabi_ul2d>
 80a1508:	4602      	mov	r2, r0
 80a150a:	460b      	mov	r3, r1
 80a150c:	4650      	mov	r0, sl
 80a150e:	4659      	mov	r1, fp
 80a1510:	f001 fcf4 	bl	80a2efc <__aeabi_dsub>
 80a1514:	2200      	movs	r2, #0
 80a1516:	4b17      	ldr	r3, [pc, #92]	; (80a1574 <_Z4dtoadhPc+0xc0>)
 80a1518:	f002 f92a 	bl	80a3770 <__aeabi_dcmpge>
 80a151c:	b118      	cbz	r0, 80a1526 <_Z4dtoadhPc+0x72>
        fixed++;
 80a151e:	f118 0801 	adds.w	r8, r8, #1
 80a1522:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a1526:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a1528:	4622      	mov	r2, r4
 80a152a:	462b      	mov	r3, r5
 80a152c:	4640      	mov	r0, r8
 80a152e:	4649      	mov	r1, r9
 80a1530:	f002 fc28 	bl	80a3d84 <__aeabi_uldivmod>
 80a1534:	2301      	movs	r3, #1
 80a1536:	220a      	movs	r2, #10
 80a1538:	4631      	mov	r1, r6
 80a153a:	f7ff ff92 	bl	80a1462 <ultoa>
    if (prec) {
 80a153e:	b1af      	cbz	r7, 80a156c <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a1540:	4630      	mov	r0, r6
 80a1542:	f002 fe84 	bl	80a424e <strlen>
        *sout++ = '.';
 80a1546:	232e      	movs	r3, #46	; 0x2e
 80a1548:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a154a:	3001      	adds	r0, #1
 80a154c:	4406      	add	r6, r0
 80a154e:	4622      	mov	r2, r4
 80a1550:	462b      	mov	r3, r5
 80a1552:	4640      	mov	r0, r8
 80a1554:	4649      	mov	r1, r9
 80a1556:	f002 fc15 	bl	80a3d84 <__aeabi_uldivmod>
 80a155a:	463b      	mov	r3, r7
 80a155c:	4610      	mov	r0, r2
 80a155e:	4631      	mov	r1, r6
 80a1560:	220a      	movs	r2, #10
    }
}
 80a1562:	b001      	add	sp, #4
 80a1564:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a1568:	f7ff bf7b 	b.w	80a1462 <ultoa>
    }
}
 80a156c:	b001      	add	sp, #4
 80a156e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1572:	bf00      	nop
 80a1574:	3fe00000 	.word	0x3fe00000

080a1578 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1578:	b510      	push	{r4, lr}
 80a157a:	4604      	mov	r4, r0
{
	free(buffer);
 80a157c:	6800      	ldr	r0, [r0, #0]
 80a157e:	f7ff ff13 	bl	80a13a8 <free>
}
 80a1582:	4620      	mov	r0, r4
 80a1584:	bd10      	pop	{r4, pc}

080a1586 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1586:	b510      	push	{r4, lr}
 80a1588:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a158a:	6800      	ldr	r0, [r0, #0]
 80a158c:	b108      	cbz	r0, 80a1592 <_ZN6String10invalidateEv+0xc>
 80a158e:	f7ff ff0b 	bl	80a13a8 <free>
	buffer = NULL;
 80a1592:	2300      	movs	r3, #0
 80a1594:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1596:	60a3      	str	r3, [r4, #8]
 80a1598:	6063      	str	r3, [r4, #4]
 80a159a:	bd10      	pop	{r4, pc}

080a159c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a159c:	b538      	push	{r3, r4, r5, lr}
 80a159e:	4604      	mov	r4, r0
 80a15a0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a15a2:	6800      	ldr	r0, [r0, #0]
 80a15a4:	3101      	adds	r1, #1
 80a15a6:	f7ff ff07 	bl	80a13b8 <realloc>
	if (newbuffer) {
 80a15aa:	b110      	cbz	r0, 80a15b2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a15ac:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a15b0:	2001      	movs	r0, #1
	}
	return 0;
}
 80a15b2:	bd38      	pop	{r3, r4, r5, pc}

080a15b4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a15b4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a15b6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a15b8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a15ba:	b113      	cbz	r3, 80a15c2 <_ZN6String7reserveEj+0xe>
 80a15bc:	6843      	ldr	r3, [r0, #4]
 80a15be:	428b      	cmp	r3, r1
 80a15c0:	d207      	bcs.n	80a15d2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a15c2:	4620      	mov	r0, r4
 80a15c4:	f7ff ffea 	bl	80a159c <_ZN6String12changeBufferEj>
 80a15c8:	b120      	cbz	r0, 80a15d4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a15ca:	68a3      	ldr	r3, [r4, #8]
 80a15cc:	b90b      	cbnz	r3, 80a15d2 <_ZN6String7reserveEj+0x1e>
 80a15ce:	6822      	ldr	r2, [r4, #0]
 80a15d0:	7013      	strb	r3, [r2, #0]
 80a15d2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a15d4:	bd10      	pop	{r4, pc}

080a15d6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a15d6:	b570      	push	{r4, r5, r6, lr}
 80a15d8:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a15da:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a15dc:	4604      	mov	r4, r0
 80a15de:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a15e0:	f7ff ffe8 	bl	80a15b4 <_ZN6String7reserveEj>
 80a15e4:	b918      	cbnz	r0, 80a15ee <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a15e6:	4620      	mov	r0, r4
 80a15e8:	f7ff ffcd 	bl	80a1586 <_ZN6String10invalidateEv>
		return *this;
 80a15ec:	e009      	b.n	80a1602 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a15ee:	462a      	mov	r2, r5
 80a15f0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a15f2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a15f4:	6820      	ldr	r0, [r4, #0]
 80a15f6:	f002 fda2 	bl	80a413e <memcpy>
	buffer[len] = 0;
 80a15fa:	6822      	ldr	r2, [r4, #0]
 80a15fc:	68a3      	ldr	r3, [r4, #8]
 80a15fe:	2100      	movs	r1, #0
 80a1600:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1602:	4620      	mov	r0, r4
 80a1604:	bd70      	pop	{r4, r5, r6, pc}

080a1606 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1606:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1608:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a160a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a160c:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a160e:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1610:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1612:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1614:	460d      	mov	r5, r1
 80a1616:	b139      	cbz	r1, 80a1628 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1618:	4608      	mov	r0, r1
 80a161a:	f002 fe18 	bl	80a424e <strlen>
 80a161e:	4629      	mov	r1, r5
 80a1620:	4602      	mov	r2, r0
 80a1622:	4620      	mov	r0, r4
 80a1624:	f7ff ffd7 	bl	80a15d6 <_ZN6String4copyEPKcj>
}
 80a1628:	4620      	mov	r0, r4
 80a162a:	bd38      	pop	{r3, r4, r5, pc}

080a162c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a162c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a162e:	b510      	push	{r4, lr}
 80a1630:	460b      	mov	r3, r1
 80a1632:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1634:	d007      	beq.n	80a1646 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1636:	6809      	ldr	r1, [r1, #0]
 80a1638:	b119      	cbz	r1, 80a1642 <_ZN6StringaSERKS_+0x16>
 80a163a:	689a      	ldr	r2, [r3, #8]
 80a163c:	f7ff ffcb 	bl	80a15d6 <_ZN6String4copyEPKcj>
 80a1640:	e001      	b.n	80a1646 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a1642:	f7ff ffa0 	bl	80a1586 <_ZN6String10invalidateEv>

	return *this;
}
 80a1646:	4620      	mov	r0, r4
 80a1648:	bd10      	pop	{r4, pc}

080a164a <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a164a:	b510      	push	{r4, lr}
 80a164c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a164e:	2300      	movs	r3, #0
 80a1650:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1652:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1654:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1656:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1658:	f7ff ffe8 	bl	80a162c <_ZN6StringaSERKS_>
}
 80a165c:	4620      	mov	r0, r4
 80a165e:	bd10      	pop	{r4, pc}

080a1660 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1660:	b538      	push	{r3, r4, r5, lr}
 80a1662:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1664:	460c      	mov	r4, r1
 80a1666:	b141      	cbz	r1, 80a167a <_ZN6StringaSEPKc+0x1a>
 80a1668:	4608      	mov	r0, r1
 80a166a:	f002 fdf0 	bl	80a424e <strlen>
 80a166e:	4621      	mov	r1, r4
 80a1670:	4602      	mov	r2, r0
 80a1672:	4628      	mov	r0, r5
 80a1674:	f7ff ffaf 	bl	80a15d6 <_ZN6String4copyEPKcj>
 80a1678:	e001      	b.n	80a167e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a167a:	f7ff ff84 	bl	80a1586 <_ZN6String10invalidateEv>

	return *this;
}
 80a167e:	4628      	mov	r0, r5
 80a1680:	bd38      	pop	{r3, r4, r5, pc}

080a1682 <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 80a1682:	b510      	push	{r4, lr}
 80a1684:	4604      	mov	r4, r0
 80a1686:	b08a      	sub	sp, #40	; 0x28
 80a1688:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a168a:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 80a168c:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a168e:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a1690:	6063      	str	r3, [r4, #4]
	len = 0;
 80a1692:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1694:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a1696:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80a169a:	ab01      	add	r3, sp, #4
 80a169c:	f7ff ff0a 	bl	80a14b4 <_Z4dtoadhPc>
        *this = buf;
 80a16a0:	a901      	add	r1, sp, #4
 80a16a2:	4620      	mov	r0, r4
 80a16a4:	f7ff ffdc 	bl	80a1660 <_ZN6StringaSEPKc>
}
 80a16a8:	4620      	mov	r0, r4
 80a16aa:	b00a      	add	sp, #40	; 0x28
 80a16ac:	bd10      	pop	{r4, pc}

080a16ae <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a16ae:	b570      	push	{r4, r5, r6, lr}
 80a16b0:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a16b2:	460e      	mov	r6, r1
 80a16b4:	b909      	cbnz	r1, 80a16ba <_ZN6String6concatEPKcj+0xc>
 80a16b6:	2000      	movs	r0, #0
 80a16b8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a16ba:	b16a      	cbz	r2, 80a16d8 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a16bc:	6883      	ldr	r3, [r0, #8]
 80a16be:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a16c0:	4629      	mov	r1, r5
 80a16c2:	f7ff ff77 	bl	80a15b4 <_ZN6String7reserveEj>
 80a16c6:	2800      	cmp	r0, #0
 80a16c8:	d0f5      	beq.n	80a16b6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a16ca:	6820      	ldr	r0, [r4, #0]
 80a16cc:	68a3      	ldr	r3, [r4, #8]
 80a16ce:	4631      	mov	r1, r6
 80a16d0:	4418      	add	r0, r3
 80a16d2:	f002 fd99 	bl	80a4208 <strcpy>
	len = newlen;
 80a16d6:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a16d8:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a16da:	bd70      	pop	{r4, r5, r6, pc}

080a16dc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a16dc:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a16de:	688a      	ldr	r2, [r1, #8]
 80a16e0:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a16e2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a16e4:	f7ff ffe3 	bl	80a16ae <_ZN6String6concatEPKcj>
 80a16e8:	b910      	cbnz	r0, 80a16f0 <_ZplRK15StringSumHelperRK6String+0x14>
 80a16ea:	4620      	mov	r0, r4
 80a16ec:	f7ff ff4b 	bl	80a1586 <_ZN6String10invalidateEv>
	return a;
}
 80a16f0:	4620      	mov	r0, r4
 80a16f2:	bd10      	pop	{r4, pc}

080a16f4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a16f4:	b538      	push	{r3, r4, r5, lr}
 80a16f6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a16f8:	460d      	mov	r5, r1
 80a16fa:	b141      	cbz	r1, 80a170e <_ZplRK15StringSumHelperPKc+0x1a>
 80a16fc:	4608      	mov	r0, r1
 80a16fe:	f002 fda6 	bl	80a424e <strlen>
 80a1702:	4629      	mov	r1, r5
 80a1704:	4602      	mov	r2, r0
 80a1706:	4620      	mov	r0, r4
 80a1708:	f7ff ffd1 	bl	80a16ae <_ZN6String6concatEPKcj>
 80a170c:	b910      	cbnz	r0, 80a1714 <_ZplRK15StringSumHelperPKc+0x20>
 80a170e:	4620      	mov	r0, r4
 80a1710:	f7ff ff39 	bl	80a1586 <_ZN6String10invalidateEv>
	return a;
}
 80a1714:	4620      	mov	r0, r4
 80a1716:	bd38      	pop	{r3, r4, r5, pc}

080a1718 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a171a:	4606      	mov	r6, r0
 80a171c:	460d      	mov	r5, r1
 80a171e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1720:	2400      	movs	r4, #0
  while (size--) {
 80a1722:	42bd      	cmp	r5, r7
 80a1724:	d00c      	beq.n	80a1740 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1726:	6833      	ldr	r3, [r6, #0]
 80a1728:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a172c:	689b      	ldr	r3, [r3, #8]
 80a172e:	4630      	mov	r0, r6
 80a1730:	4798      	blx	r3
     if (chunk>=0)
 80a1732:	2800      	cmp	r0, #0
 80a1734:	db01      	blt.n	80a173a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1736:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1738:	e7f3      	b.n	80a1722 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a173a:	2c00      	cmp	r4, #0
 80a173c:	bf08      	it	eq
 80a173e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1740:	4620      	mov	r0, r4
 80a1742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1744 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1744:	b570      	push	{r4, r5, r6, lr}
 80a1746:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1748:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a174a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a174c:	b149      	cbz	r1, 80a1762 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a174e:	f002 fd7e 	bl	80a424e <strlen>
 80a1752:	682b      	ldr	r3, [r5, #0]
 80a1754:	4602      	mov	r2, r0
 80a1756:	4621      	mov	r1, r4
 80a1758:	4628      	mov	r0, r5
    }
 80a175a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a175e:	68db      	ldr	r3, [r3, #12]
 80a1760:	4718      	bx	r3
    }
 80a1762:	bd70      	pop	{r4, r5, r6, pc}

080a1764 <_ZN5Print5printEPKc>:
 80a1764:	b508      	push	{r3, lr}
 80a1766:	f7ff ffed 	bl	80a1744 <_ZN5Print5writeEPKc>
 80a176a:	bd08      	pop	{r3, pc}

080a176c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a176c:	6803      	ldr	r3, [r0, #0]
 80a176e:	689b      	ldr	r3, [r3, #8]
 80a1770:	4718      	bx	r3

080a1772 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1772:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1774:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1776:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1778:	f7ff fff8 	bl	80a176c <_ZN5Print5printEc>
  n += print('\n');
 80a177c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a177e:	4604      	mov	r4, r0
  n += print('\n');
 80a1780:	4628      	mov	r0, r5
 80a1782:	f7ff fff3 	bl	80a176c <_ZN5Print5printEc>
  return n;
}
 80a1786:	4420      	add	r0, r4
 80a1788:	bd38      	pop	{r3, r4, r5, pc}

080a178a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a178a:	b538      	push	{r3, r4, r5, lr}
 80a178c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a178e:	f7ff ffd9 	bl	80a1744 <_ZN5Print5writeEPKc>
 80a1792:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1794:	4628      	mov	r0, r5
 80a1796:	f7ff ffec 	bl	80a1772 <_ZN5Print7printlnEv>
  return n;
}
 80a179a:	4420      	add	r0, r4
 80a179c:	bd38      	pop	{r3, r4, r5, pc}

080a179e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a179e:	2a01      	cmp	r2, #1
 80a17a0:	bf98      	it	ls
 80a17a2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a17a4:	b530      	push	{r4, r5, lr}
 80a17a6:	460b      	mov	r3, r1
 80a17a8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a17aa:	2100      	movs	r1, #0
 80a17ac:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a17b0:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a17b4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a17b8:	fb05 3312 	mls	r3, r5, r2, r3
 80a17bc:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a17be:	2b09      	cmp	r3, #9
 80a17c0:	bf94      	ite	ls
 80a17c2:	3330      	addls	r3, #48	; 0x30
 80a17c4:	3337      	addhi	r3, #55	; 0x37
 80a17c6:	b2db      	uxtb	r3, r3
 80a17c8:	4621      	mov	r1, r4
 80a17ca:	f804 3901 	strb.w	r3, [r4], #-1
 80a17ce:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a17d0:	2d00      	cmp	r5, #0
 80a17d2:	d1ef      	bne.n	80a17b4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a17d4:	f7ff ffb6 	bl	80a1744 <_ZN5Print5writeEPKc>
}
 80a17d8:	b00b      	add	sp, #44	; 0x2c
 80a17da:	bd30      	pop	{r4, r5, pc}

080a17dc <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a17dc:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a17de:	b922      	cbnz	r2, 80a17ea <_ZN5Print5printEmi+0xe>
 80a17e0:	6803      	ldr	r3, [r0, #0]
 80a17e2:	b2c9      	uxtb	r1, r1
 80a17e4:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a17e6:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a17e8:	4718      	bx	r3
  else return printNumber(n, base);
 80a17ea:	b2d2      	uxtb	r2, r2
}
 80a17ec:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a17ee:	f7ff bfd6 	b.w	80a179e <_ZN5Print11printNumberEmh>

080a17f2 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a17f2:	f7ff bff3 	b.w	80a17dc <_ZN5Print5printEmi>

080a17f6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a17f6:	2300      	movs	r3, #0
 80a17f8:	461a      	mov	r2, r3
 80a17fa:	4619      	mov	r1, r3
 80a17fc:	6840      	ldr	r0, [r0, #4]
 80a17fe:	f7ff bd7b 	b.w	80a12f8 <network_on>

080a1802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a1802:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a1804:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a1806:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a1808:	b17c      	cbz	r4, 80a182a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a180a:	6863      	ldr	r3, [r4, #4]
 80a180c:	3b01      	subs	r3, #1
 80a180e:	6063      	str	r3, [r4, #4]
 80a1810:	b95b      	cbnz	r3, 80a182a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a1812:	6823      	ldr	r3, [r4, #0]
 80a1814:	4620      	mov	r0, r4
 80a1816:	689b      	ldr	r3, [r3, #8]
 80a1818:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a181a:	68a3      	ldr	r3, [r4, #8]
 80a181c:	3b01      	subs	r3, #1
 80a181e:	60a3      	str	r3, [r4, #8]
 80a1820:	b91b      	cbnz	r3, 80a182a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a1822:	6823      	ldr	r3, [r4, #0]
 80a1824:	4620      	mov	r0, r4
 80a1826:	68db      	ldr	r3, [r3, #12]
 80a1828:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a182a:	4628      	mov	r0, r5
 80a182c:	bd38      	pop	{r3, r4, r5, pc}

080a182e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a182e:	680b      	ldr	r3, [r1, #0]
 80a1830:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a1832:	b113      	cbz	r3, 80a183a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a1834:	685a      	ldr	r2, [r3, #4]
 80a1836:	3201      	adds	r2, #1
 80a1838:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a183a:	4770      	bx	lr

080a183c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a183c:	4a01      	ldr	r2, [pc, #4]	; (80a1844 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a183e:	4b02      	ldr	r3, [pc, #8]	; (80a1848 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1840:	601a      	str	r2, [r3, #0]
 80a1842:	4770      	bx	lr
 80a1844:	080a4580 	.word	0x080a4580
 80a1848:	20000480 	.word	0x20000480

080a184c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a184c:	4b02      	ldr	r3, [pc, #8]	; (80a1858 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a184e:	681a      	ldr	r2, [r3, #0]
 80a1850:	4b02      	ldr	r3, [pc, #8]	; (80a185c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1852:	601a      	str	r2, [r3, #0]
 80a1854:	4770      	bx	lr
 80a1856:	bf00      	nop
 80a1858:	20000304 	.word	0x20000304
 80a185c:	20000484 	.word	0x20000484

080a1860 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1860:	2100      	movs	r1, #0
 80a1862:	f7ff bcfd 	b.w	80a1260 <system_delay_ms>

080a1866 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1866:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1868:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a186a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a186c:	b113      	cbz	r3, 80a1874 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a186e:	2203      	movs	r2, #3
 80a1870:	4601      	mov	r1, r0
 80a1872:	4798      	blx	r3
    }
 80a1874:	4620      	mov	r0, r4
 80a1876:	bd10      	pop	{r4, pc}

080a1878 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1878:	b510      	push	{r4, lr}
 80a187a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a187c:	f7ff fff3 	bl	80a1866 <_ZNSt14_Function_baseD1Ev>
 80a1880:	4620      	mov	r0, r4
 80a1882:	bd10      	pop	{r4, pc}

080a1884 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a1884:	b513      	push	{r0, r1, r4, lr}
 80a1886:	460b      	mov	r3, r1
 80a1888:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a188a:	c803      	ldmia	r0, {r0, r1}
 80a188c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1890:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1894:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1898:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a189c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a18a0:	b002      	add	sp, #8
 80a18a2:	bd10      	pop	{r4, pc}

080a18a4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a18a4:	4803      	ldr	r0, [pc, #12]	; (80a18b4 <_GLOBAL__sub_I_RGB+0x10>)
 80a18a6:	2300      	movs	r3, #0
 80a18a8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a18aa:	4a03      	ldr	r2, [pc, #12]	; (80a18b8 <_GLOBAL__sub_I_RGB+0x14>)
 80a18ac:	4903      	ldr	r1, [pc, #12]	; (80a18bc <_GLOBAL__sub_I_RGB+0x18>)
 80a18ae:	f000 bef7 	b.w	80a26a0 <__aeabi_atexit>
 80a18b2:	bf00      	nop
 80a18b4:	20000488 	.word	0x20000488
 80a18b8:	20000378 	.word	0x20000378
 80a18bc:	080a1879 	.word	0x080a1879

080a18c0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a18c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a18c2:	4b14      	ldr	r3, [pc, #80]	; (80a1914 <serialEventRun+0x54>)
 80a18c4:	b133      	cbz	r3, 80a18d4 <serialEventRun+0x14>
 80a18c6:	f000 fc23 	bl	80a2110 <_Z16_fetch_usbserialv>
 80a18ca:	6803      	ldr	r3, [r0, #0]
 80a18cc:	691b      	ldr	r3, [r3, #16]
 80a18ce:	4798      	blx	r3
 80a18d0:	2800      	cmp	r0, #0
 80a18d2:	dc16      	bgt.n	80a1902 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a18d4:	4b10      	ldr	r3, [pc, #64]	; (80a1918 <serialEventRun+0x58>)
 80a18d6:	b133      	cbz	r3, 80a18e6 <serialEventRun+0x26>
 80a18d8:	f000 fcd8 	bl	80a228c <_Z22__fetch_global_Serial1v>
 80a18dc:	6803      	ldr	r3, [r0, #0]
 80a18de:	691b      	ldr	r3, [r3, #16]
 80a18e0:	4798      	blx	r3
 80a18e2:	2800      	cmp	r0, #0
 80a18e4:	dc10      	bgt.n	80a1908 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a18e6:	4b0d      	ldr	r3, [pc, #52]	; (80a191c <serialEventRun+0x5c>)
 80a18e8:	b10b      	cbz	r3, 80a18ee <serialEventRun+0x2e>
 80a18ea:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a18ee:	4b0c      	ldr	r3, [pc, #48]	; (80a1920 <serialEventRun+0x60>)
 80a18f0:	b17b      	cbz	r3, 80a1912 <serialEventRun+0x52>
 80a18f2:	f000 fc49 	bl	80a2188 <_Z17_fetch_usbserial1v>
 80a18f6:	6803      	ldr	r3, [r0, #0]
 80a18f8:	691b      	ldr	r3, [r3, #16]
 80a18fa:	4798      	blx	r3
 80a18fc:	2800      	cmp	r0, #0
 80a18fe:	dc06      	bgt.n	80a190e <serialEventRun+0x4e>
 80a1900:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1902:	f3af 8000 	nop.w
 80a1906:	e7e5      	b.n	80a18d4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1908:	f3af 8000 	nop.w
 80a190c:	e7eb      	b.n	80a18e6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a190e:	f3af 8000 	nop.w
 80a1912:	bd08      	pop	{r3, pc}
	...

080a1924 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1924:	b508      	push	{r3, lr}
	serialEventRun();
 80a1926:	f7ff ffcb 	bl	80a18c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a192a:	f7ff fba7 	bl	80a107c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a192e:	4b01      	ldr	r3, [pc, #4]	; (80a1934 <_post_loop+0x10>)
 80a1930:	6018      	str	r0, [r3, #0]
 80a1932:	bd08      	pop	{r3, pc}
 80a1934:	2000092c 	.word	0x2000092c

080a1938 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1938:	4802      	ldr	r0, [pc, #8]	; (80a1944 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a193a:	4a03      	ldr	r2, [pc, #12]	; (80a1948 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a193c:	4903      	ldr	r1, [pc, #12]	; (80a194c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a193e:	1a12      	subs	r2, r2, r0
 80a1940:	f002 bbfd 	b.w	80a413e <memcpy>
 80a1944:	40024000 	.word	0x40024000
 80a1948:	40024004 	.word	0x40024004
 80a194c:	080a4b68 	.word	0x080a4b68

080a1950 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1950:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1952:	2300      	movs	r3, #0
 80a1954:	9300      	str	r3, [sp, #0]
 80a1956:	461a      	mov	r2, r3
 80a1958:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a195c:	f7ff fca2 	bl	80a12a4 <system_ctrl_set_result>
}
 80a1960:	b003      	add	sp, #12
 80a1962:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1968 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1968:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a196a:	8843      	ldrh	r3, [r0, #2]
 80a196c:	2b0a      	cmp	r3, #10
 80a196e:	d008      	beq.n	80a1982 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1970:	2b50      	cmp	r3, #80	; 0x50
 80a1972:	d109      	bne.n	80a1988 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1974:	4b09      	ldr	r3, [pc, #36]	; (80a199c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1976:	681b      	ldr	r3, [r3, #0]
 80a1978:	b13b      	cbz	r3, 80a198a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a197a:	b003      	add	sp, #12
 80a197c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1980:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1982:	f7ff ffe5 	bl	80a1950 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1986:	e006      	b.n	80a1996 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1988:	2300      	movs	r3, #0
 80a198a:	9300      	str	r3, [sp, #0]
 80a198c:	461a      	mov	r2, r3
 80a198e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1992:	f7ff fc87 	bl	80a12a4 <system_ctrl_set_result>
        break;
    }
}
 80a1996:	b003      	add	sp, #12
 80a1998:	f85d fb04 	ldr.w	pc, [sp], #4
 80a199c:	20000498 	.word	0x20000498

080a19a0 <module_user_init_hook>:

void module_user_init_hook()
{
 80a19a0:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a19a2:	4c10      	ldr	r4, [pc, #64]	; (80a19e4 <module_user_init_hook+0x44>)
 80a19a4:	4d10      	ldr	r5, [pc, #64]	; (80a19e8 <module_user_init_hook+0x48>)
 80a19a6:	6823      	ldr	r3, [r4, #0]
 80a19a8:	42ab      	cmp	r3, r5
 80a19aa:	4b10      	ldr	r3, [pc, #64]	; (80a19ec <module_user_init_hook+0x4c>)
 80a19ac:	bf0c      	ite	eq
 80a19ae:	2201      	moveq	r2, #1
 80a19b0:	2200      	movne	r2, #0
 80a19b2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a19b4:	d002      	beq.n	80a19bc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a19b6:	f7ff ffbf 	bl	80a1938 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a19ba:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a19bc:	f7ff fb4e 	bl	80a105c <HAL_RNG_GetRandomNumber>
 80a19c0:	4604      	mov	r4, r0
    srand(seed);
 80a19c2:	f002 fbf9 	bl	80a41b8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a19c6:	4b0a      	ldr	r3, [pc, #40]	; (80a19f0 <module_user_init_hook+0x50>)
 80a19c8:	b113      	cbz	r3, 80a19d0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a19ca:	4620      	mov	r0, r4
 80a19cc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a19d0:	2100      	movs	r1, #0
 80a19d2:	4807      	ldr	r0, [pc, #28]	; (80a19f0 <module_user_init_hook+0x50>)
 80a19d4:	f7ff fcd8 	bl	80a1388 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a19d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a19dc:	2100      	movs	r1, #0
 80a19de:	4805      	ldr	r0, [pc, #20]	; (80a19f4 <module_user_init_hook+0x54>)
 80a19e0:	f7ff bc56 	b.w	80a1290 <system_ctrl_set_app_request_handler>
 80a19e4:	40024000 	.word	0x40024000
 80a19e8:	9a271c1e 	.word	0x9a271c1e
 80a19ec:	2000049c 	.word	0x2000049c
 80a19f0:	00000000 	.word	0x00000000
 80a19f4:	080a1969 	.word	0x080a1969

080a19f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a19f8:	4770      	bx	lr

080a19fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a19fa:	2000      	movs	r0, #0
 80a19fc:	4770      	bx	lr

080a19fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a19fe:	b510      	push	{r4, lr}
 80a1a00:	4604      	mov	r4, r0
 80a1a02:	2110      	movs	r1, #16
 80a1a04:	f000 fe51 	bl	80a26aa <_ZdlPvj>
 80a1a08:	4620      	mov	r0, r4
 80a1a0a:	bd10      	pop	{r4, pc}

080a1a0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1a0c:	b508      	push	{r3, lr}
      { delete this; }
 80a1a0e:	b108      	cbz	r0, 80a1a14 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a1a10:	f7ff fff5 	bl	80a19fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1a14:	bd08      	pop	{r3, pc}

080a1a16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a1a16:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1a18:	68c4      	ldr	r4, [r0, #12]
 80a1a1a:	b1ec      	cbz	r4, 80a1a58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x42>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a1a1c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1a1e:	2b02      	cmp	r3, #2
 80a1a20:	d102      	bne.n	80a1a28 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1a22:	68e0      	ldr	r0, [r4, #12]
 80a1a24:	f7ff fcc0 	bl	80a13a8 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a1a28:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1a2a:	b135      	cbz	r5, 80a1a3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x24>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1a2c:	4628      	mov	r0, r5
 80a1a2e:	f7ff ff1a 	bl	80a1866 <_ZNSt14_Function_baseD1Ev>
 80a1a32:	2110      	movs	r1, #16
 80a1a34:	4628      	mov	r0, r5
 80a1a36:	f000 fe38 	bl	80a26aa <_ZdlPvj>
 80a1a3a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1a3c:	b135      	cbz	r5, 80a1a4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x36>
 80a1a3e:	4628      	mov	r0, r5
 80a1a40:	f7ff ff11 	bl	80a1866 <_ZNSt14_Function_baseD1Ev>
 80a1a44:	2110      	movs	r1, #16
 80a1a46:	4628      	mov	r0, r5
 80a1a48:	f000 fe2f 	bl	80a26aa <_ZdlPvj>
 80a1a4c:	4620      	mov	r0, r4
 80a1a4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1a52:	2114      	movs	r1, #20
 80a1a54:	f000 be29 	b.w	80a26aa <_ZdlPvj>
 80a1a58:	bd38      	pop	{r3, r4, r5, pc}

080a1a5a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a1a5a:	b510      	push	{r4, lr}
 80a1a5c:	b088      	sub	sp, #32
 80a1a5e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1a60:	4668      	mov	r0, sp
 80a1a62:	f7ff fdd0 	bl	80a1606 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a1a66:	4669      	mov	r1, sp
 80a1a68:	a804      	add	r0, sp, #16
 80a1a6a:	f7ff fdee 	bl	80a164a <_ZN6StringC1ERKS_>
 80a1a6e:	a804      	add	r0, sp, #16
 80a1a70:	47a0      	blx	r4
 80a1a72:	4604      	mov	r4, r0
 80a1a74:	a804      	add	r0, sp, #16
 80a1a76:	f7ff fd7f 	bl	80a1578 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1a7a:	4668      	mov	r0, sp
 80a1a7c:	f7ff fd7c 	bl	80a1578 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a1a80:	4620      	mov	r0, r4
 80a1a82:	b008      	add	sp, #32
 80a1a84:	bd10      	pop	{r4, pc}

080a1a86 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a1a86:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1a88:	4607      	mov	r7, r0
 80a1a8a:	460e      	mov	r6, r1
 80a1a8c:	4615      	mov	r5, r2
 80a1a8e:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a1a90:	2410      	movs	r4, #16
 80a1a92:	4622      	mov	r2, r4
 80a1a94:	2100      	movs	r1, #0
 80a1a96:	4668      	mov	r0, sp
 80a1a98:	f002 fb77 	bl	80a418a <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1a9c:	2200      	movs	r2, #0
 80a1a9e:	4669      	mov	r1, sp
 80a1aa0:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a1aa2:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a1aa6:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a1aa8:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a1aaa:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1aac:	f7ff fc5c 	bl	80a1368 <spark_function>
}
 80a1ab0:	b005      	add	sp, #20
 80a1ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1ab4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a1ab4:	b513      	push	{r0, r1, r4, lr}
 80a1ab6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1ab8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a1abc:	2300      	movs	r3, #0
 80a1abe:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1ac0:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1ac2:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1ac4:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1ac6:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1ac8:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1aca:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1acc:	f7ff fe99 	bl	80a1802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1ad0:	4620      	mov	r0, r4
 80a1ad2:	b002      	add	sp, #8
 80a1ad4:	bd10      	pop	{r4, pc}

080a1ad6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1ad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1ad8:	460c      	mov	r4, r1
 80a1ada:	4606      	mov	r6, r0
 80a1adc:	460f      	mov	r7, r1
 80a1ade:	f854 3b04 	ldr.w	r3, [r4], #4
 80a1ae2:	ad02      	add	r5, sp, #8
 80a1ae4:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a1ae8:	4621      	mov	r1, r4
 80a1aea:	a801      	add	r0, sp, #4
 80a1aec:	f7ff fe9f 	bl	80a182e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a1af0:	4629      	mov	r1, r5
 80a1af2:	4630      	mov	r0, r6
 80a1af4:	f7ff ffde 	bl	80a1ab4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1af8:	a801      	add	r0, sp, #4
 80a1afa:	f7ff fe82 	bl	80a1802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1afe:	4620      	mov	r0, r4
 80a1b00:	f7ff fe7f 	bl	80a1802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a1b04:	4638      	mov	r0, r7
 80a1b06:	2108      	movs	r1, #8
 80a1b08:	f000 fdcf 	bl	80a26aa <_ZdlPvj>
        return p;
    }
 80a1b0c:	4630      	mov	r0, r6
 80a1b0e:	b003      	add	sp, #12
 80a1b10:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1b12 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1b12:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1b14:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1b16:	b90a      	cbnz	r2, 80a1b1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a1b18:	f000 fdea 	bl	80a26f0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1b1c:	68c3      	ldr	r3, [r0, #12]
    }
 80a1b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1b22:	4718      	bx	r3

080a1b24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1b24:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1b26:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1b28:	f100 0110 	add.w	r1, r0, #16
 80a1b2c:	f7ff fff1 	bl	80a1b12 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1b30:	bd08      	pop	{r3, pc}

080a1b32 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1b32:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a1b34:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1b36:	b90a      	cbnz	r2, 80a1b3c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a1b38:	f000 fdda 	bl	80a26f0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1b3c:	68c3      	ldr	r3, [r0, #12]
    }
 80a1b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1b42:	4718      	bx	r3

080a1b44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1b44:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1b46:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a1b48:	f100 0110 	add.w	r1, r0, #16
 80a1b4c:	f7ff fff1 	bl	80a1b32 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1b50:	bd08      	pop	{r3, pc}

080a1b52 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1b52:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1b54:	2300      	movs	r3, #0
 80a1b56:	6083      	str	r3, [r0, #8]
 80a1b58:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1b5a:	4604      	mov	r4, r0
 80a1b5c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1b5e:	b12b      	cbz	r3, 80a1b6c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1b60:	2202      	movs	r2, #2
 80a1b62:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1b64:	68eb      	ldr	r3, [r5, #12]
 80a1b66:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1b68:	68ab      	ldr	r3, [r5, #8]
 80a1b6a:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1b6c:	4620      	mov	r0, r4
 80a1b6e:	bd38      	pop	{r3, r4, r5, pc}

080a1b70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a1b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a1b74:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1b78:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1b7a:	f04f 0002 	mov.w	r0, #2
 80a1b7e:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1b80:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1b84:	808b      	strh	r3, [r1, #4]
 80a1b86:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1b88:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1b8a:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1b8e:	600b      	str	r3, [r1, #0]
 80a1b90:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a1b94:	4299      	cmp	r1, r3
 80a1b96:	d103      	bne.n	80a1ba0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a1b98:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a1b9c:	2d00      	cmp	r5, #0
 80a1b9e:	d1f7      	bne.n	80a1b90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a1ba0:	d002      	beq.n	80a1ba8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a1ba2:	f88d 1000 	strb.w	r1, [sp]
 80a1ba6:	e06c      	b.n	80a1c82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x112>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a1ba8:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1bac:	bf1c      	itt	ne
 80a1bae:	60e7      	strne	r7, [r4, #12]
 80a1bb0:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1bb2:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a1bb6:	bf18      	it	ne
 80a1bb8:	461f      	movne	r7, r3
 80a1bba:	2301      	movs	r3, #1
 80a1bbc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1bbe:	f3bf 8f5f 	dmb	sy
 80a1bc2:	f104 0308 	add.w	r3, r4, #8
 80a1bc6:	2000      	movs	r0, #0
 80a1bc8:	e853 6f00 	ldrex	r6, [r3]
 80a1bcc:	e843 0200 	strex	r2, r0, [r3]
 80a1bd0:	2a00      	cmp	r2, #0
 80a1bd2:	d1f9      	bne.n	80a1bc8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a1bd4:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1bd8:	2e00      	cmp	r6, #0
 80a1bda:	d052      	beq.n	80a1c82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x112>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1bdc:	f7ff fb48 	bl	80a1270 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1be0:	b120      	cbz	r0, 80a1bec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1be2:	4629      	mov	r1, r5
 80a1be4:	4630      	mov	r0, r6
 80a1be6:	f7ff ff94 	bl	80a1b12 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1bea:	e043      	b.n	80a1c74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1bec:	4631      	mov	r1, r6
 80a1bee:	4668      	mov	r0, sp
 80a1bf0:	f7ff ffaf 	bl	80a1b52 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1bf4:	68e0      	ldr	r0, [r4, #12]
 80a1bf6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1bfa:	b108      	cbz	r0, 80a1c00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a1bfc:	f002 fb0c 	bl	80a4218 <strdup>
 80a1c00:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1c02:	2010      	movs	r0, #16
 80a1c04:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a1c08:	f7fe fa47 	bl	80a009a <_Znwj>
 80a1c0c:	4605      	mov	r5, r0
 80a1c0e:	b330      	cbz	r0, 80a1c5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1c10:	f04f 0800 	mov.w	r8, #0
 80a1c14:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1c18:	2018      	movs	r0, #24
 80a1c1a:	f7fe fa3e 	bl	80a009a <_Znwj>
 80a1c1e:	4604      	mov	r4, r0
 80a1c20:	b1c0      	cbz	r0, 80a1c54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1c22:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1c26:	4601      	mov	r1, r0
 80a1c28:	4668      	mov	r0, sp
 80a1c2a:	f7ff fe2b 	bl	80a1884 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1c2e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a1c30:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c32:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1c34:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1c36:	9202      	str	r2, [sp, #8]
 80a1c38:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c3a:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1c3c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a1c40:	9203      	str	r2, [sp, #12]
 80a1c42:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c44:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1c48:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1c4c:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1c4e:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1c52:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1c54:	4b0e      	ldr	r3, [pc, #56]	; (80a1c90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1c56:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1c58:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1c5a:	4b0e      	ldr	r3, [pc, #56]	; (80a1c94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a1c5c:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1c5e:	9804      	ldr	r0, [sp, #16]
 80a1c60:	f7ff fba2 	bl	80a13a8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1c64:	4668      	mov	r0, sp
 80a1c66:	f7ff fdfe 	bl	80a1866 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1c6a:	2200      	movs	r2, #0
 80a1c6c:	4629      	mov	r1, r5
 80a1c6e:	480a      	ldr	r0, [pc, #40]	; (80a1c98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x128>)
 80a1c70:	f7ff fb06 	bl	80a1280 <application_thread_invoke>
 80a1c74:	4630      	mov	r0, r6
 80a1c76:	f7ff fdf6 	bl	80a1866 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1c7a:	2110      	movs	r1, #16
 80a1c7c:	4630      	mov	r0, r6
 80a1c7e:	f000 fd14 	bl	80a26aa <_ZdlPvj>
 80a1c82:	4638      	mov	r0, r7
 80a1c84:	f7ff fb90 	bl	80a13a8 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a1c88:	b006      	add	sp, #24
 80a1c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1c8e:	bf00      	nop
 80a1c90:	080a1b25 	.word	0x080a1b25
 80a1c94:	080a1d85 	.word	0x080a1d85
 80a1c98:	080a22d9 	.word	0x080a22d9

080a1c9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1ca0:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1ca2:	ad07      	add	r5, sp, #28
 80a1ca4:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1ca8:	4606      	mov	r6, r0
 80a1caa:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a1cac:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1cae:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1cb0:	460f      	mov	r7, r1
 80a1cb2:	4690      	mov	r8, r2
 80a1cb4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a1cb8:	f8c5 b004 	str.w	fp, [r5, #4]
 80a1cbc:	f8c5 b008 	str.w	fp, [r5, #8]
 80a1cc0:	9307      	str	r3, [sp, #28]
 80a1cc2:	f7fe f9ea 	bl	80a009a <_Znwj>
 80a1cc6:	4604      	mov	r4, r0
 80a1cc8:	b138      	cbz	r0, 80a1cda <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1cca:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1cce:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1cd2:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1cd6:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1cda:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1cdc:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a1cde:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a1ce0:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1ce2:	f7fe f9da 	bl	80a009a <_Znwj>
 80a1ce6:	b128      	cbz	r0, 80a1cf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1ce8:	2301      	movs	r3, #1
 80a1cea:	6043      	str	r3, [r0, #4]
 80a1cec:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a1cee:	4b23      	ldr	r3, [pc, #140]	; (80a1d7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a1cf0:	60c4      	str	r4, [r0, #12]
 80a1cf2:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1cf4:	4b22      	ldr	r3, [pc, #136]	; (80a1d80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a1cf6:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1cf8:	2008      	movs	r0, #8
 80a1cfa:	9308      	str	r3, [sp, #32]
 80a1cfc:	f7fe f9cd 	bl	80a009a <_Znwj>
 80a1d00:	4604      	mov	r4, r0
 80a1d02:	b128      	cbz	r0, 80a1d10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1d04:	9b03      	ldr	r3, [sp, #12]
 80a1d06:	a904      	add	r1, sp, #16
 80a1d08:	f840 3b04 	str.w	r3, [r0], #4
 80a1d0c:	f7ff fd8f 	bl	80a182e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1d10:	9500      	str	r5, [sp, #0]
 80a1d12:	fa5f f38a 	uxtb.w	r3, sl
 80a1d16:	464a      	mov	r2, r9
 80a1d18:	4641      	mov	r1, r8
 80a1d1a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1d1c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1d1e:	f7ff fb2b 	bl	80a1378 <spark_send_event>
 80a1d22:	b9b8      	cbnz	r0, 80a1d54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1d24:	9b03      	ldr	r3, [sp, #12]
 80a1d26:	785b      	ldrb	r3, [r3, #1]
 80a1d28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1d2c:	b993      	cbnz	r3, 80a1d54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1d2e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1d32:	a905      	add	r1, sp, #20
 80a1d34:	a803      	add	r0, sp, #12
 80a1d36:	9205      	str	r2, [sp, #20]
 80a1d38:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1d3c:	f7ff ff18 	bl	80a1b70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1d40:	9805      	ldr	r0, [sp, #20]
 80a1d42:	f7ff fb31 	bl	80a13a8 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1d46:	a805      	add	r0, sp, #20
 80a1d48:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1d4a:	f7ff fec4 	bl	80a1ad6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1d4e:	a806      	add	r0, sp, #24
 80a1d50:	f7ff fd57 	bl	80a1802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1d54:	9b03      	ldr	r3, [sp, #12]
 80a1d56:	a904      	add	r1, sp, #16
 80a1d58:	a806      	add	r0, sp, #24
 80a1d5a:	9305      	str	r3, [sp, #20]
 80a1d5c:	f7ff fd67 	bl	80a182e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1d60:	a905      	add	r1, sp, #20
 80a1d62:	4630      	mov	r0, r6
 80a1d64:	f7ff fea6 	bl	80a1ab4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1d68:	a806      	add	r0, sp, #24
 80a1d6a:	f7ff fd4a 	bl	80a1802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1d6e:	a804      	add	r0, sp, #16
 80a1d70:	f7ff fd47 	bl	80a1802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a1d74:	4630      	mov	r0, r6
 80a1d76:	b00b      	add	sp, #44	; 0x2c
 80a1d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1d7c:	080a45dc 	.word	0x080a45dc
 80a1d80:	080a1ef1 	.word	0x080a1ef1

080a1d84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1d84:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1d88:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1d8a:	d006      	beq.n	80a1d9a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1d8c:	2a03      	cmp	r2, #3
 80a1d8e:	d017      	beq.n	80a1dc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a1d90:	2a01      	cmp	r2, #1
 80a1d92:	d121      	bne.n	80a1dd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1d94:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1d96:	6003      	str	r3, [r0, #0]
	      break;
 80a1d98:	e01e      	b.n	80a1dd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1d9a:	2018      	movs	r0, #24
 80a1d9c:	680e      	ldr	r6, [r1, #0]
 80a1d9e:	f7fe f97c 	bl	80a009a <_Znwj>
 80a1da2:	4605      	mov	r5, r0
 80a1da4:	b150      	cbz	r0, 80a1dbc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1da6:	4631      	mov	r1, r6
 80a1da8:	f7ff fed3 	bl	80a1b52 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1dac:	6930      	ldr	r0, [r6, #16]
 80a1dae:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1db2:	b108      	cbz	r0, 80a1db8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a1db4:	f002 fa30 	bl	80a4218 <strdup>
 80a1db8:	6128      	str	r0, [r5, #16]
 80a1dba:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1dbc:	6025      	str	r5, [r4, #0]
 80a1dbe:	e00b      	b.n	80a1dd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1dc0:	6804      	ldr	r4, [r0, #0]
 80a1dc2:	b14c      	cbz	r4, 80a1dd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1dc4:	6920      	ldr	r0, [r4, #16]
 80a1dc6:	f7ff faef 	bl	80a13a8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1dca:	4620      	mov	r0, r4
 80a1dcc:	f7ff fd4b 	bl	80a1866 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1dd0:	2118      	movs	r1, #24
 80a1dd2:	4620      	mov	r0, r4
 80a1dd4:	f000 fc69 	bl	80a26aa <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1dd8:	2000      	movs	r0, #0
 80a1dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1ddc <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1ddc:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1dde:	2300      	movs	r3, #0
 80a1de0:	6083      	str	r3, [r0, #8]
 80a1de2:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1de4:	4604      	mov	r4, r0
 80a1de6:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1de8:	b12b      	cbz	r3, 80a1df6 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1dea:	2202      	movs	r2, #2
 80a1dec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1dee:	68eb      	ldr	r3, [r5, #12]
 80a1df0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1df2:	68ab      	ldr	r3, [r5, #8]
 80a1df4:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1df6:	4620      	mov	r0, r4
 80a1df8:	bd38      	pop	{r3, r4, r5, pc}

080a1dfa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1dfa:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1dfc:	b570      	push	{r4, r5, r6, lr}
 80a1dfe:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1e00:	d006      	beq.n	80a1e10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1e02:	2a03      	cmp	r2, #3
 80a1e04:	d011      	beq.n	80a1e2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1e06:	2a01      	cmp	r2, #1
 80a1e08:	d118      	bne.n	80a1e3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1e0a:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1e0c:	6003      	str	r3, [r0, #0]
	      break;
 80a1e0e:	e015      	b.n	80a1e3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1e10:	2014      	movs	r0, #20
 80a1e12:	680e      	ldr	r6, [r1, #0]
 80a1e14:	f7fe f941 	bl	80a009a <_Znwj>
 80a1e18:	4605      	mov	r5, r0
 80a1e1a:	b120      	cbz	r0, 80a1e26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1e1c:	4631      	mov	r1, r6
 80a1e1e:	f7ff ffdd 	bl	80a1ddc <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1e22:	7c33      	ldrb	r3, [r6, #16]
 80a1e24:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1e26:	6025      	str	r5, [r4, #0]
 80a1e28:	e008      	b.n	80a1e3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1e2a:	6804      	ldr	r4, [r0, #0]
 80a1e2c:	b134      	cbz	r4, 80a1e3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1e2e:	4620      	mov	r0, r4
 80a1e30:	f7ff fd19 	bl	80a1866 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1e34:	2114      	movs	r1, #20
 80a1e36:	4620      	mov	r0, r4
 80a1e38:	f000 fc37 	bl	80a26aa <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1e3c:	2000      	movs	r0, #0
 80a1e3e:	bd70      	pop	{r4, r5, r6, pc}

080a1e40 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1e42:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1e44:	f3bf 8f5f 	dmb	sy
 80a1e48:	b087      	sub	sp, #28
 80a1e4a:	2300      	movs	r3, #0
 80a1e4c:	e850 6f00 	ldrex	r6, [r0]
 80a1e50:	e840 3200 	strex	r2, r3, [r0]
 80a1e54:	2a00      	cmp	r2, #0
 80a1e56:	d1f9      	bne.n	80a1e4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1e58:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1e5c:	2e00      	cmp	r6, #0
 80a1e5e:	d03f      	beq.n	80a1ee0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1e60:	4618      	mov	r0, r3
 80a1e62:	f7ff fa05 	bl	80a1270 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1e66:	4607      	mov	r7, r0
 80a1e68:	b120      	cbz	r0, 80a1e74 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1e6a:	4621      	mov	r1, r4
 80a1e6c:	4630      	mov	r0, r6
 80a1e6e:	f7ff fe60 	bl	80a1b32 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1e72:	e02e      	b.n	80a1ed2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1e74:	4631      	mov	r1, r6
 80a1e76:	a801      	add	r0, sp, #4
 80a1e78:	f7ff ffb0 	bl	80a1ddc <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1e7c:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1e7e:	2010      	movs	r0, #16
 80a1e80:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1e84:	f7fe f909 	bl	80a009a <_Znwj>
 80a1e88:	4605      	mov	r5, r0
 80a1e8a:	b1d0      	cbz	r0, 80a1ec2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1e8c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1e8e:	2014      	movs	r0, #20
 80a1e90:	f7fe f903 	bl	80a009a <_Znwj>
 80a1e94:	4604      	mov	r4, r0
 80a1e96:	b178      	cbz	r0, 80a1eb8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1e98:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1e9a:	4601      	mov	r1, r0
 80a1e9c:	a801      	add	r0, sp, #4
 80a1e9e:	f7ff fcf1 	bl	80a1884 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ea2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1ea4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1ea6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ea8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1eaa:	9203      	str	r2, [sp, #12]
 80a1eac:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1eae:	60e3      	str	r3, [r4, #12]
 80a1eb0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1eb4:	9204      	str	r2, [sp, #16]
 80a1eb6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1eb8:	4b0a      	ldr	r3, [pc, #40]	; (80a1ee4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1eba:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1ebc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1ebe:	4b0a      	ldr	r3, [pc, #40]	; (80a1ee8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1ec0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1ec2:	a801      	add	r0, sp, #4
 80a1ec4:	f7ff fccf 	bl	80a1866 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1ec8:	2200      	movs	r2, #0
 80a1eca:	4629      	mov	r1, r5
 80a1ecc:	4807      	ldr	r0, [pc, #28]	; (80a1eec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a1ece:	f7ff f9d7 	bl	80a1280 <application_thread_invoke>
 80a1ed2:	4630      	mov	r0, r6
 80a1ed4:	f7ff fcc7 	bl	80a1866 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1ed8:	2110      	movs	r1, #16
 80a1eda:	4630      	mov	r0, r6
 80a1edc:	f000 fbe5 	bl	80a26aa <_ZdlPvj>
        }
    }
 80a1ee0:	b007      	add	sp, #28
 80a1ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1ee4:	080a1b45 	.word	0x080a1b45
 80a1ee8:	080a1dfb 	.word	0x080a1dfb
 80a1eec:	080a22d9 	.word	0x080a22d9

080a1ef0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1ef0:	b530      	push	{r4, r5, lr}
 80a1ef2:	4604      	mov	r4, r0
 80a1ef4:	b085      	sub	sp, #20
 80a1ef6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1ef8:	4668      	mov	r0, sp
 80a1efa:	4611      	mov	r1, r2
 80a1efc:	f7ff fdeb 	bl	80a1ad6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1f00:	b17c      	cbz	r4, 80a1f22 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1f02:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1f04:	4628      	mov	r0, r5
 80a1f06:	b10d      	cbz	r5, 80a1f0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1f08:	f002 f986 	bl	80a4218 <strdup>
 80a1f0c:	9002      	str	r0, [sp, #8]
 80a1f0e:	a902      	add	r1, sp, #8
 80a1f10:	4668      	mov	r0, sp
 80a1f12:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1f16:	f7ff fe2b 	bl	80a1b70 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1f1a:	9802      	ldr	r0, [sp, #8]
 80a1f1c:	f7ff fa44 	bl	80a13a8 <free>
 80a1f20:	e01d      	b.n	80a1f5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1f22:	f04f 0201 	mov.w	r2, #1
 80a1f26:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1f28:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1f2c:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1f30:	42a3      	cmp	r3, r4
 80a1f32:	d103      	bne.n	80a1f3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1f34:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1f38:	2900      	cmp	r1, #0
 80a1f3a:	d1f7      	bne.n	80a1f2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1f3c:	d002      	beq.n	80a1f44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a1f3e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1f42:	e00c      	b.n	80a1f5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1f44:	f110 010c 	adds.w	r1, r0, #12
 80a1f48:	f04f 0301 	mov.w	r3, #1
 80a1f4c:	bf18      	it	ne
 80a1f4e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1f50:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1f54:	3004      	adds	r0, #4
 80a1f56:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1f5a:	f7ff ff71 	bl	80a1e40 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a1f5e:	a801      	add	r0, sp, #4
 80a1f60:	f7ff fc4f 	bl	80a1802 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a1f64:	b005      	add	sp, #20
 80a1f66:	bd30      	pop	{r4, r5, pc}

080a1f68 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1f68:	4770      	bx	lr

080a1f6a <_ZN9IPAddressD0Ev>:
 80a1f6a:	b510      	push	{r4, lr}
 80a1f6c:	4604      	mov	r4, r0
 80a1f6e:	2118      	movs	r1, #24
 80a1f70:	f000 fb9b 	bl	80a26aa <_ZdlPvj>
 80a1f74:	4620      	mov	r0, r4
 80a1f76:	bd10      	pop	{r4, pc}

080a1f78 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1f7a:	460f      	mov	r7, r1
 80a1f7c:	f100 0608 	add.w	r6, r0, #8
 80a1f80:	1d05      	adds	r5, r0, #4
 80a1f82:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1f84:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1f88:	220a      	movs	r2, #10
 80a1f8a:	4638      	mov	r0, r7
 80a1f8c:	f7ff fc31 	bl	80a17f2 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1f90:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1f92:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1f94:	d007      	beq.n	80a1fa6 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1f96:	2c00      	cmp	r4, #0
 80a1f98:	d0f4      	beq.n	80a1f84 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1f9a:	212e      	movs	r1, #46	; 0x2e
 80a1f9c:	4638      	mov	r0, r7
 80a1f9e:	f7ff fbe5 	bl	80a176c <_ZN5Print5printEc>
 80a1fa2:	4404      	add	r4, r0
 80a1fa4:	e7ee      	b.n	80a1f84 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1fa6:	4620      	mov	r0, r4
 80a1fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1fac <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1fac:	b510      	push	{r4, lr}
 80a1fae:	4604      	mov	r4, r0
 80a1fb0:	4b04      	ldr	r3, [pc, #16]	; (80a1fc4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1fb2:	2211      	movs	r2, #17
 80a1fb4:	f840 3b04 	str.w	r3, [r0], #4
 80a1fb8:	2100      	movs	r1, #0
 80a1fba:	f002 f8e6 	bl	80a418a <memset>
{
    clear();
}
 80a1fbe:	4620      	mov	r0, r4
 80a1fc0:	bd10      	pop	{r4, pc}
 80a1fc2:	bf00      	nop
 80a1fc4:	080a45f8 	.word	0x080a45f8

080a1fc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1fc8:	4603      	mov	r3, r0
 80a1fca:	4a07      	ldr	r2, [pc, #28]	; (80a1fe8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1fcc:	b510      	push	{r4, lr}
 80a1fce:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1fd2:	f101 0210 	add.w	r2, r1, #16
 80a1fd6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1fda:	4291      	cmp	r1, r2
 80a1fdc:	f843 4b04 	str.w	r4, [r3], #4
 80a1fe0:	d1f9      	bne.n	80a1fd6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1fe2:	780a      	ldrb	r2, [r1, #0]
 80a1fe4:	701a      	strb	r2, [r3, #0]
}
 80a1fe6:	bd10      	pop	{r4, pc}
 80a1fe8:	080a45f8 	.word	0x080a45f8

080a1fec <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1fec:	4a02      	ldr	r2, [pc, #8]	; (80a1ff8 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1fee:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1ff0:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1ff2:	2204      	movs	r2, #4
 80a1ff4:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1ff6:	4770      	bx	lr
 80a1ff8:	080a45f8 	.word	0x080a45f8

080a1ffc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1ffc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1ffe:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2002:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2006:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a200a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a200e:	2304      	movs	r3, #4
 80a2010:	6041      	str	r1, [r0, #4]
 80a2012:	7503      	strb	r3, [r0, #20]
 80a2014:	bd10      	pop	{r4, pc}
	...

080a2018 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a201a:	4d04      	ldr	r5, [pc, #16]	; (80a202c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a201c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a201e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2022:	9500      	str	r5, [sp, #0]
 80a2024:	f7ff ffea 	bl	80a1ffc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2028:	b003      	add	sp, #12
 80a202a:	bd30      	pop	{r4, r5, pc}
 80a202c:	080a45f8 	.word	0x080a45f8

080a2030 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2030:	7441      	strb	r1, [r0, #17]
 80a2032:	4770      	bx	lr

080a2034 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2034:	4770      	bx	lr

080a2036 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2036:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2038:	2100      	movs	r1, #0
 80a203a:	7c00      	ldrb	r0, [r0, #16]
 80a203c:	f7ff f8e8 	bl	80a1210 <HAL_USB_USART_Receive_Data>
}
 80a2040:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2044:	bf28      	it	cs
 80a2046:	f04f 30ff 	movcs.w	r0, #4294967295
 80a204a:	bd08      	pop	{r3, pc}

080a204c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a204c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a204e:	2101      	movs	r1, #1
 80a2050:	7c00      	ldrb	r0, [r0, #16]
 80a2052:	f7ff f8dd 	bl	80a1210 <HAL_USB_USART_Receive_Data>
}
 80a2056:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a205a:	bf28      	it	cs
 80a205c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2060:	bd08      	pop	{r3, pc}

080a2062 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2062:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2064:	7c00      	ldrb	r0, [r0, #16]
 80a2066:	f7ff f8cb 	bl	80a1200 <HAL_USB_USART_Available_Data_For_Write>
}
 80a206a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a206e:	bd08      	pop	{r3, pc}

080a2070 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2070:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2072:	7c00      	ldrb	r0, [r0, #16]
 80a2074:	f7ff f8bc 	bl	80a11f0 <HAL_USB_USART_Available_Data>
}
 80a2078:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a207c:	bd08      	pop	{r3, pc}

080a207e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a207e:	7c00      	ldrb	r0, [r0, #16]
 80a2080:	f7ff b8d6 	b.w	80a1230 <HAL_USB_USART_Flush_Data>

080a2084 <_ZN9USBSerialD0Ev>:
 80a2084:	b510      	push	{r4, lr}
 80a2086:	4604      	mov	r4, r0
 80a2088:	2114      	movs	r1, #20
 80a208a:	f000 fb0e 	bl	80a26aa <_ZdlPvj>
 80a208e:	4620      	mov	r0, r4
 80a2090:	bd10      	pop	{r4, pc}

080a2092 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2092:	b538      	push	{r3, r4, r5, lr}
 80a2094:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2096:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2098:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a209a:	f7ff f8b1 	bl	80a1200 <HAL_USB_USART_Available_Data_For_Write>
 80a209e:	2800      	cmp	r0, #0
 80a20a0:	dc01      	bgt.n	80a20a6 <_ZN9USBSerial5writeEh+0x14>
 80a20a2:	7c60      	ldrb	r0, [r4, #17]
 80a20a4:	b128      	cbz	r0, 80a20b2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a20a6:	4629      	mov	r1, r5
 80a20a8:	7c20      	ldrb	r0, [r4, #16]
 80a20aa:	f7ff f8b9 	bl	80a1220 <HAL_USB_USART_Send_Data>
 80a20ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a20b2:	bd38      	pop	{r3, r4, r5, pc}

080a20b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a20b4:	b510      	push	{r4, lr}
 80a20b6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a20b8:	2300      	movs	r3, #0
 80a20ba:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a20bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a20c0:	60a3      	str	r3, [r4, #8]
 80a20c2:	4b05      	ldr	r3, [pc, #20]	; (80a20d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a20c4:	4608      	mov	r0, r1
 80a20c6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a20c8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a20ca:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a20cc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a20ce:	4611      	mov	r1, r2
 80a20d0:	f7ff f87e 	bl	80a11d0 <HAL_USB_USART_Init>
}
 80a20d4:	4620      	mov	r0, r4
 80a20d6:	bd10      	pop	{r4, pc}
 80a20d8:	080a460c 	.word	0x080a460c

080a20dc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a20dc:	2200      	movs	r2, #0
 80a20de:	7c00      	ldrb	r0, [r0, #16]
 80a20e0:	f7ff b87e 	b.w	80a11e0 <HAL_USB_USART_Begin>

080a20e4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a20e4:	b510      	push	{r4, lr}
 80a20e6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a20e8:	2214      	movs	r2, #20
 80a20ea:	2100      	movs	r1, #0
 80a20ec:	f002 f84d 	bl	80a418a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a20f0:	4b05      	ldr	r3, [pc, #20]	; (80a2108 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a20f2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a20f4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a20f6:	4b05      	ldr	r3, [pc, #20]	; (80a210c <_Z19acquireSerialBufferv+0x28>)
 80a20f8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a20fa:	f240 1301 	movw	r3, #257	; 0x101
 80a20fe:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2100:	2381      	movs	r3, #129	; 0x81
 80a2102:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2104:	bd10      	pop	{r4, pc}
 80a2106:	bf00      	nop
 80a2108:	20000525 	.word	0x20000525
 80a210c:	200004a4 	.word	0x200004a4

080a2110 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2110:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2112:	4d0e      	ldr	r5, [pc, #56]	; (80a214c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2114:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2116:	a801      	add	r0, sp, #4
 80a2118:	f7ff ffe4 	bl	80a20e4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a211c:	6829      	ldr	r1, [r5, #0]
 80a211e:	f011 0401 	ands.w	r4, r1, #1
 80a2122:	d110      	bne.n	80a2146 <_Z16_fetch_usbserialv+0x36>
 80a2124:	4628      	mov	r0, r5
 80a2126:	f7fd ffbc 	bl	80a00a2 <__cxa_guard_acquire>
 80a212a:	b160      	cbz	r0, 80a2146 <_Z16_fetch_usbserialv+0x36>
 80a212c:	aa01      	add	r2, sp, #4
 80a212e:	4621      	mov	r1, r4
 80a2130:	4807      	ldr	r0, [pc, #28]	; (80a2150 <_Z16_fetch_usbserialv+0x40>)
 80a2132:	f7ff ffbf 	bl	80a20b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2136:	4628      	mov	r0, r5
 80a2138:	f7fd ffb8 	bl	80a00ac <__cxa_guard_release>
 80a213c:	4a05      	ldr	r2, [pc, #20]	; (80a2154 <_Z16_fetch_usbserialv+0x44>)
 80a213e:	4906      	ldr	r1, [pc, #24]	; (80a2158 <_Z16_fetch_usbserialv+0x48>)
 80a2140:	4803      	ldr	r0, [pc, #12]	; (80a2150 <_Z16_fetch_usbserialv+0x40>)
 80a2142:	f000 faad 	bl	80a26a0 <__aeabi_atexit>
	return _usbserial;
}
 80a2146:	4802      	ldr	r0, [pc, #8]	; (80a2150 <_Z16_fetch_usbserialv+0x40>)
 80a2148:	b007      	add	sp, #28
 80a214a:	bd30      	pop	{r4, r5, pc}
 80a214c:	200004a0 	.word	0x200004a0
 80a2150:	20000628 	.word	0x20000628
 80a2154:	20000378 	.word	0x20000378
 80a2158:	080a2035 	.word	0x080a2035

080a215c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a215c:	b510      	push	{r4, lr}
 80a215e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2160:	2214      	movs	r2, #20
 80a2162:	2100      	movs	r1, #0
 80a2164:	f002 f811 	bl	80a418a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2168:	4b05      	ldr	r3, [pc, #20]	; (80a2180 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a216a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a216c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a216e:	4b05      	ldr	r3, [pc, #20]	; (80a2184 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2170:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2172:	f240 1301 	movw	r3, #257	; 0x101
 80a2176:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2178:	2381      	movs	r3, #129	; 0x81
 80a217a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a217c:	bd10      	pop	{r4, pc}
 80a217e:	bf00      	nop
 80a2180:	200006d8 	.word	0x200006d8
 80a2184:	20000640 	.word	0x20000640

080a2188 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2188:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a218a:	4c0e      	ldr	r4, [pc, #56]	; (80a21c4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a218c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a218e:	a801      	add	r0, sp, #4
 80a2190:	f7ff ffe4 	bl	80a215c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2194:	6823      	ldr	r3, [r4, #0]
 80a2196:	07db      	lsls	r3, r3, #31
 80a2198:	d410      	bmi.n	80a21bc <_Z17_fetch_usbserial1v+0x34>
 80a219a:	4620      	mov	r0, r4
 80a219c:	f7fd ff81 	bl	80a00a2 <__cxa_guard_acquire>
 80a21a0:	b160      	cbz	r0, 80a21bc <_Z17_fetch_usbserial1v+0x34>
 80a21a2:	aa01      	add	r2, sp, #4
 80a21a4:	2101      	movs	r1, #1
 80a21a6:	4808      	ldr	r0, [pc, #32]	; (80a21c8 <_Z17_fetch_usbserial1v+0x40>)
 80a21a8:	f7ff ff84 	bl	80a20b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a21ac:	4620      	mov	r0, r4
 80a21ae:	f7fd ff7d 	bl	80a00ac <__cxa_guard_release>
 80a21b2:	4a06      	ldr	r2, [pc, #24]	; (80a21cc <_Z17_fetch_usbserial1v+0x44>)
 80a21b4:	4906      	ldr	r1, [pc, #24]	; (80a21d0 <_Z17_fetch_usbserial1v+0x48>)
 80a21b6:	4804      	ldr	r0, [pc, #16]	; (80a21c8 <_Z17_fetch_usbserial1v+0x40>)
 80a21b8:	f000 fa72 	bl	80a26a0 <__aeabi_atexit>
  return _usbserial1;
}
 80a21bc:	4802      	ldr	r0, [pc, #8]	; (80a21c8 <_Z17_fetch_usbserial1v+0x40>)
 80a21be:	b006      	add	sp, #24
 80a21c0:	bd10      	pop	{r4, pc}
 80a21c2:	bf00      	nop
 80a21c4:	2000063c 	.word	0x2000063c
 80a21c8:	200006c4 	.word	0x200006c4
 80a21cc:	20000378 	.word	0x20000378
 80a21d0:	080a2035 	.word	0x080a2035

080a21d4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a21d4:	4770      	bx	lr

080a21d6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a21d6:	7441      	strb	r1, [r0, #17]
 80a21d8:	4770      	bx	lr

080a21da <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a21da:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a21dc:	7c00      	ldrb	r0, [r0, #16]
 80a21de:	f7fe ff95 	bl	80a110c <HAL_USART_Available_Data_For_Write>
}
 80a21e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a21e6:	bd08      	pop	{r3, pc}

080a21e8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a21e8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a21ea:	7c00      	ldrb	r0, [r0, #16]
 80a21ec:	f7fe ff66 	bl	80a10bc <HAL_USART_Available_Data>
}
 80a21f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a21f4:	bd08      	pop	{r3, pc}

080a21f6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a21f6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a21f8:	7c00      	ldrb	r0, [r0, #16]
 80a21fa:	f7fe ff6f 	bl	80a10dc <HAL_USART_Peek_Data>
}
 80a21fe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2202:	bf28      	it	cs
 80a2204:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2208:	bd08      	pop	{r3, pc}

080a220a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a220a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a220c:	7c00      	ldrb	r0, [r0, #16]
 80a220e:	f7fe ff5d 	bl	80a10cc <HAL_USART_Read_Data>
}
 80a2212:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2216:	bf28      	it	cs
 80a2218:	f04f 30ff 	movcs.w	r0, #4294967295
 80a221c:	bd08      	pop	{r3, pc}

080a221e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a221e:	7c00      	ldrb	r0, [r0, #16]
 80a2220:	f7fe bf64 	b.w	80a10ec <HAL_USART_Flush_Data>

080a2224 <_ZN11USARTSerialD0Ev>:
 80a2224:	b510      	push	{r4, lr}
 80a2226:	4604      	mov	r4, r0
 80a2228:	2114      	movs	r1, #20
 80a222a:	f000 fa3e 	bl	80a26aa <_ZdlPvj>
 80a222e:	4620      	mov	r0, r4
 80a2230:	bd10      	pop	{r4, pc}

080a2232 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2232:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2234:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2236:	4604      	mov	r4, r0
 80a2238:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a223a:	b925      	cbnz	r5, 80a2246 <_ZN11USARTSerial5writeEh+0x14>
 80a223c:	7c00      	ldrb	r0, [r0, #16]
 80a223e:	f7fe ff65 	bl	80a110c <HAL_USART_Available_Data_For_Write>
 80a2242:	2800      	cmp	r0, #0
 80a2244:	dd05      	ble.n	80a2252 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2246:	4631      	mov	r1, r6
 80a2248:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a224a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a224e:	f7fe bf2d 	b.w	80a10ac <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2252:	4628      	mov	r0, r5
 80a2254:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2258 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2258:	b510      	push	{r4, lr}
 80a225a:	4604      	mov	r4, r0
 80a225c:	4608      	mov	r0, r1
 80a225e:	4611      	mov	r1, r2
 80a2260:	2200      	movs	r2, #0
 80a2262:	6062      	str	r2, [r4, #4]
 80a2264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2268:	60a2      	str	r2, [r4, #8]
 80a226a:	4a05      	ldr	r2, [pc, #20]	; (80a2280 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a226c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a226e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2270:	2201      	movs	r2, #1
 80a2272:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2274:	461a      	mov	r2, r3
 80a2276:	f7fe ff11 	bl	80a109c <HAL_USART_Init>
}
 80a227a:	4620      	mov	r0, r4
 80a227c:	bd10      	pop	{r4, pc}
 80a227e:	bf00      	nop
 80a2280:	080a463c 	.word	0x080a463c

080a2284 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2284:	7c00      	ldrb	r0, [r0, #16]
 80a2286:	f7fe bf39 	b.w	80a10fc <HAL_USART_Is_Enabled>
	...

080a228c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a228c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a228e:	4d0c      	ldr	r5, [pc, #48]	; (80a22c0 <_Z22__fetch_global_Serial1v+0x34>)
 80a2290:	6829      	ldr	r1, [r5, #0]
 80a2292:	f011 0401 	ands.w	r4, r1, #1
 80a2296:	d111      	bne.n	80a22bc <_Z22__fetch_global_Serial1v+0x30>
 80a2298:	4628      	mov	r0, r5
 80a229a:	f7fd ff02 	bl	80a00a2 <__cxa_guard_acquire>
 80a229e:	b168      	cbz	r0, 80a22bc <_Z22__fetch_global_Serial1v+0x30>
 80a22a0:	4a08      	ldr	r2, [pc, #32]	; (80a22c4 <_Z22__fetch_global_Serial1v+0x38>)
 80a22a2:	4621      	mov	r1, r4
 80a22a4:	4b08      	ldr	r3, [pc, #32]	; (80a22c8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a22a6:	4809      	ldr	r0, [pc, #36]	; (80a22cc <_Z22__fetch_global_Serial1v+0x40>)
 80a22a8:	f7ff ffd6 	bl	80a2258 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a22ac:	4628      	mov	r0, r5
 80a22ae:	f7fd fefd 	bl	80a00ac <__cxa_guard_release>
 80a22b2:	4a07      	ldr	r2, [pc, #28]	; (80a22d0 <_Z22__fetch_global_Serial1v+0x44>)
 80a22b4:	4907      	ldr	r1, [pc, #28]	; (80a22d4 <_Z22__fetch_global_Serial1v+0x48>)
 80a22b6:	4805      	ldr	r0, [pc, #20]	; (80a22cc <_Z22__fetch_global_Serial1v+0x40>)
 80a22b8:	f000 f9f2 	bl	80a26a0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a22bc:	4803      	ldr	r0, [pc, #12]	; (80a22cc <_Z22__fetch_global_Serial1v+0x40>)
 80a22be:	bd38      	pop	{r3, r4, r5, pc}
 80a22c0:	20000874 	.word	0x20000874
 80a22c4:	20000878 	.word	0x20000878
 80a22c8:	200007f0 	.word	0x200007f0
 80a22cc:	200007dc 	.word	0x200007dc
 80a22d0:	20000378 	.word	0x20000378
 80a22d4:	080a21d5 	.word	0x080a21d5

080a22d8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a22d8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a22da:	6883      	ldr	r3, [r0, #8]
 80a22dc:	4604      	mov	r4, r0
 80a22de:	b90b      	cbnz	r3, 80a22e4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a22e0:	f000 fa06 	bl	80a26f0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a22e4:	68c3      	ldr	r3, [r0, #12]
 80a22e6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a22e8:	68a3      	ldr	r3, [r4, #8]
 80a22ea:	b11b      	cbz	r3, 80a22f4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a22ec:	2203      	movs	r2, #3
 80a22ee:	4621      	mov	r1, r4
 80a22f0:	4620      	mov	r0, r4
 80a22f2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a22f4:	4620      	mov	r0, r4
}
 80a22f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a22fa:	2110      	movs	r1, #16
 80a22fc:	f000 b9d5 	b.w	80a26aa <_ZdlPvj>

080a2300 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2300:	4770      	bx	lr

080a2302 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2304:	4606      	mov	r6, r0
 80a2306:	4615      	mov	r5, r2
 80a2308:	460c      	mov	r4, r1
 80a230a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a230c:	42bc      	cmp	r4, r7
 80a230e:	d006      	beq.n	80a231e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2310:	6833      	ldr	r3, [r6, #0]
 80a2312:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2316:	689b      	ldr	r3, [r3, #8]
 80a2318:	4630      	mov	r0, r6
 80a231a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a231c:	e7f6      	b.n	80a230c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a231e:	4628      	mov	r0, r5
 80a2320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2322 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2322:	2200      	movs	r2, #0
 80a2324:	7c00      	ldrb	r0, [r0, #16]
 80a2326:	f7fe bf19 	b.w	80a115c <HAL_I2C_Write_Data>

080a232a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a232a:	2100      	movs	r1, #0
 80a232c:	7c00      	ldrb	r0, [r0, #16]
 80a232e:	f7fe bf1d 	b.w	80a116c <HAL_I2C_Available_Data>

080a2332 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2332:	2100      	movs	r1, #0
 80a2334:	7c00      	ldrb	r0, [r0, #16]
 80a2336:	f7fe bf21 	b.w	80a117c <HAL_I2C_Read_Data>

080a233a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a233a:	2100      	movs	r1, #0
 80a233c:	7c00      	ldrb	r0, [r0, #16]
 80a233e:	f7fe bf25 	b.w	80a118c <HAL_I2C_Peek_Data>

080a2342 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2342:	2100      	movs	r1, #0
 80a2344:	7c00      	ldrb	r0, [r0, #16]
 80a2346:	f7fe bf29 	b.w	80a119c <HAL_I2C_Flush_Data>

080a234a <_ZN7TwoWireD0Ev>:
 80a234a:	b510      	push	{r4, lr}
 80a234c:	4604      	mov	r4, r0
 80a234e:	2114      	movs	r1, #20
 80a2350:	f000 f9ab 	bl	80a26aa <_ZdlPvj>
 80a2354:	4620      	mov	r0, r4
 80a2356:	bd10      	pop	{r4, pc}

080a2358 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2358:	b510      	push	{r4, lr}
 80a235a:	4604      	mov	r4, r0
 80a235c:	4608      	mov	r0, r1
 80a235e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2362:	60a3      	str	r3, [r4, #8]
 80a2364:	4b04      	ldr	r3, [pc, #16]	; (80a2378 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a2366:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2368:	7420      	strb	r0, [r4, #16]
 80a236a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a236c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a236e:	f7fe ff25 	bl	80a11bc <HAL_I2C_Init>

}
 80a2372:	4620      	mov	r0, r4
 80a2374:	bd10      	pop	{r4, pc}
 80a2376:	bf00      	nop
 80a2378:	080a466c 	.word	0x080a466c

080a237c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a237c:	2300      	movs	r3, #0
 80a237e:	461a      	mov	r2, r3
 80a2380:	4619      	mov	r1, r3
 80a2382:	7c00      	ldrb	r0, [r0, #16]
 80a2384:	f7fe beca 	b.w	80a111c <HAL_I2C_Begin>

080a2388 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a2388:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a238a:	2400      	movs	r4, #0
 80a238c:	7c00      	ldrb	r0, [r0, #16]
 80a238e:	9400      	str	r4, [sp, #0]
 80a2390:	f7fe fecc 	bl	80a112c <HAL_I2C_Request_Data>
  return result;
}
 80a2394:	b2c0      	uxtb	r0, r0
 80a2396:	b002      	add	sp, #8
 80a2398:	bd10      	pop	{r4, pc}

080a239a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a239a:	2301      	movs	r3, #1
 80a239c:	f7ff bff4 	b.w	80a2388 <_ZN7TwoWire11requestFromEhhh>

080a23a0 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a23a0:	2301      	movs	r3, #1
 80a23a2:	b2d2      	uxtb	r2, r2
 80a23a4:	b2c9      	uxtb	r1, r1
 80a23a6:	f7ff bfef 	b.w	80a2388 <_ZN7TwoWire11requestFromEhhh>

080a23aa <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a23aa:	2200      	movs	r2, #0
 80a23ac:	7c00      	ldrb	r0, [r0, #16]
 80a23ae:	f7fe bec5 	b.w	80a113c <HAL_I2C_Begin_Transmission>

080a23b2 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a23b2:	b2c9      	uxtb	r1, r1
 80a23b4:	f7ff bff9 	b.w	80a23aa <_ZN7TwoWire17beginTransmissionEh>

080a23b8 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a23b8:	2200      	movs	r2, #0
 80a23ba:	7c00      	ldrb	r0, [r0, #16]
 80a23bc:	f7fe bec6 	b.w	80a114c <HAL_I2C_End_Transmission>

080a23c0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a23c0:	2101      	movs	r1, #1
 80a23c2:	f7ff bff9 	b.w	80a23b8 <_ZN7TwoWire15endTransmissionEh>

080a23c6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a23c6:	2100      	movs	r1, #0
 80a23c8:	7c00      	ldrb	r0, [r0, #16]
 80a23ca:	f7fe beef 	b.w	80a11ac <HAL_I2C_Is_Enabled>

080a23ce <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a23ce:	2200      	movs	r2, #0
 80a23d0:	4611      	mov	r1, r2
 80a23d2:	6840      	ldr	r0, [r0, #4]
 80a23d4:	f7fe bf88 	b.w	80a12e8 <network_ready>

080a23d8 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a23d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a23da:	4616      	mov	r6, r2
 80a23dc:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a23de:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a23e0:	460f      	mov	r7, r1
 80a23e2:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a23e4:	2100      	movs	r1, #0
 80a23e6:	a803      	add	r0, sp, #12
 80a23e8:	f001 fecf 	bl	80a418a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a23ec:	4630      	mov	r0, r6
 80a23ee:	f001 ff2e 	bl	80a424e <strlen>
 80a23f2:	2500      	movs	r5, #0
 80a23f4:	9500      	str	r5, [sp, #0]
 80a23f6:	b281      	uxth	r1, r0
 80a23f8:	687b      	ldr	r3, [r7, #4]
 80a23fa:	aa03      	add	r2, sp, #12
 80a23fc:	4630      	mov	r0, r6
 80a23fe:	f7fe ff1f 	bl	80a1240 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2402:	b120      	cbz	r0, 80a240e <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a2404:	4629      	mov	r1, r5
 80a2406:	4620      	mov	r0, r4
 80a2408:	f7ff fdf0 	bl	80a1fec <_ZN9IPAddressC1Em>
 80a240c:	e003      	b.n	80a2416 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a240e:	a903      	add	r1, sp, #12
 80a2410:	4620      	mov	r0, r4
 80a2412:	f7ff fdd9 	bl	80a1fc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2416:	4620      	mov	r0, r4
 80a2418:	b009      	add	sp, #36	; 0x24
 80a241a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a241c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a241c:	2200      	movs	r2, #0
 80a241e:	4611      	mov	r1, r2
 80a2420:	6840      	ldr	r0, [r0, #4]
 80a2422:	f7fe bf81 	b.w	80a1328 <network_listening>

080a2426 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2426:	2200      	movs	r2, #0
 80a2428:	4611      	mov	r1, r2
 80a242a:	6840      	ldr	r0, [r0, #4]
 80a242c:	f7fe bf8c 	b.w	80a1348 <network_get_listen_timeout>

080a2430 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2430:	2200      	movs	r2, #0
 80a2432:	6840      	ldr	r0, [r0, #4]
 80a2434:	f7fe bf80 	b.w	80a1338 <network_set_listen_timeout>

080a2438 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2438:	2200      	movs	r2, #0
 80a243a:	f081 0101 	eor.w	r1, r1, #1
 80a243e:	6840      	ldr	r0, [r0, #4]
 80a2440:	f7fe bf6a 	b.w	80a1318 <network_listen>

080a2444 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2444:	2300      	movs	r3, #0
 80a2446:	461a      	mov	r2, r3
 80a2448:	4619      	mov	r1, r3
 80a244a:	6840      	ldr	r0, [r0, #4]
 80a244c:	f7fe bf5c 	b.w	80a1308 <network_off>

080a2450 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2450:	2200      	movs	r2, #0
 80a2452:	4611      	mov	r1, r2
 80a2454:	6840      	ldr	r0, [r0, #4]
 80a2456:	f7fe bf37 	b.w	80a12c8 <network_connecting>

080a245a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a245a:	2200      	movs	r2, #0
 80a245c:	2102      	movs	r1, #2
 80a245e:	6840      	ldr	r0, [r0, #4]
 80a2460:	f7fe bf3a 	b.w	80a12d8 <network_disconnect>

080a2464 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2464:	2300      	movs	r3, #0
 80a2466:	461a      	mov	r2, r3
 80a2468:	6840      	ldr	r0, [r0, #4]
 80a246a:	f7fe bf25 	b.w	80a12b8 <network_connect>
	...

080a2470 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2470:	4b02      	ldr	r3, [pc, #8]	; (80a247c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2472:	2204      	movs	r2, #4
 80a2474:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2476:	4a02      	ldr	r2, [pc, #8]	; (80a2480 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2478:	601a      	str	r2, [r3, #0]
 80a247a:	4770      	bx	lr
 80a247c:	200008fc 	.word	0x200008fc
 80a2480:	080a4694 	.word	0x080a4694

080a2484 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2484:	2300      	movs	r3, #0
 80a2486:	461a      	mov	r2, r3
 80a2488:	6840      	ldr	r0, [r0, #4]
 80a248a:	f7fe bf15 	b.w	80a12b8 <network_connect>

080a248e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a248e:	2200      	movs	r2, #0
 80a2490:	2102      	movs	r1, #2
 80a2492:	6840      	ldr	r0, [r0, #4]
 80a2494:	f7fe bf20 	b.w	80a12d8 <network_disconnect>

080a2498 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2498:	2200      	movs	r2, #0
 80a249a:	4611      	mov	r1, r2
 80a249c:	6840      	ldr	r0, [r0, #4]
 80a249e:	f7fe bf13 	b.w	80a12c8 <network_connecting>

080a24a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a24a2:	2200      	movs	r2, #0
 80a24a4:	4611      	mov	r1, r2
 80a24a6:	6840      	ldr	r0, [r0, #4]
 80a24a8:	f7fe bf1e 	b.w	80a12e8 <network_ready>

080a24ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a24ac:	2300      	movs	r3, #0
 80a24ae:	461a      	mov	r2, r3
 80a24b0:	4619      	mov	r1, r3
 80a24b2:	6840      	ldr	r0, [r0, #4]
 80a24b4:	f7fe bf20 	b.w	80a12f8 <network_on>

080a24b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a24b8:	2300      	movs	r3, #0
 80a24ba:	461a      	mov	r2, r3
 80a24bc:	4619      	mov	r1, r3
 80a24be:	6840      	ldr	r0, [r0, #4]
 80a24c0:	f7fe bf22 	b.w	80a1308 <network_off>

080a24c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a24c4:	2200      	movs	r2, #0
 80a24c6:	f081 0101 	eor.w	r1, r1, #1
 80a24ca:	6840      	ldr	r0, [r0, #4]
 80a24cc:	f7fe bf24 	b.w	80a1318 <network_listen>

080a24d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a24d0:	2200      	movs	r2, #0
 80a24d2:	6840      	ldr	r0, [r0, #4]
 80a24d4:	f7fe bf30 	b.w	80a1338 <network_set_listen_timeout>

080a24d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a24d8:	2200      	movs	r2, #0
 80a24da:	4611      	mov	r1, r2
 80a24dc:	6840      	ldr	r0, [r0, #4]
 80a24de:	f7fe bf33 	b.w	80a1348 <network_get_listen_timeout>

080a24e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a24e2:	2200      	movs	r2, #0
 80a24e4:	4611      	mov	r1, r2
 80a24e6:	6840      	ldr	r0, [r0, #4]
 80a24e8:	f7fe bf1e 	b.w	80a1328 <network_listening>

080a24ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a24ec:	b570      	push	{r4, r5, r6, lr}
 80a24ee:	4616      	mov	r6, r2
 80a24f0:	b08e      	sub	sp, #56	; 0x38
 80a24f2:	4604      	mov	r4, r0
    IPAddress addr;
 80a24f4:	a808      	add	r0, sp, #32
 80a24f6:	f7ff fd59 	bl	80a1fac <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a24fa:	2211      	movs	r2, #17
 80a24fc:	2100      	movs	r1, #0
 80a24fe:	a803      	add	r0, sp, #12
 80a2500:	f001 fe43 	bl	80a418a <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2504:	4630      	mov	r0, r6
 80a2506:	f001 fea2 	bl	80a424e <strlen>
 80a250a:	2500      	movs	r5, #0
 80a250c:	4b0a      	ldr	r3, [pc, #40]	; (80a2538 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a250e:	9500      	str	r5, [sp, #0]
 80a2510:	b281      	uxth	r1, r0
 80a2512:	685b      	ldr	r3, [r3, #4]
 80a2514:	aa03      	add	r2, sp, #12
 80a2516:	4630      	mov	r0, r6
 80a2518:	f7fe fe92 	bl	80a1240 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a251c:	b120      	cbz	r0, 80a2528 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a251e:	4629      	mov	r1, r5
 80a2520:	4620      	mov	r0, r4
 80a2522:	f7ff fd63 	bl	80a1fec <_ZN9IPAddressC1Em>
 80a2526:	e003      	b.n	80a2530 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2528:	a903      	add	r1, sp, #12
 80a252a:	4620      	mov	r0, r4
 80a252c:	f7ff fd4c 	bl	80a1fc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2530:	4620      	mov	r0, r4
 80a2532:	b00e      	add	sp, #56	; 0x38
 80a2534:	bd70      	pop	{r4, r5, r6, pc}
 80a2536:	bf00      	nop
 80a2538:	200008fc 	.word	0x200008fc

080a253c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a253c:	4b02      	ldr	r3, [pc, #8]	; (80a2548 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a253e:	4a03      	ldr	r2, [pc, #12]	; (80a254c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2540:	601a      	str	r2, [r3, #0]
 80a2542:	2200      	movs	r2, #0
 80a2544:	605a      	str	r2, [r3, #4]
 80a2546:	4770      	bx	lr
 80a2548:	20000904 	.word	0x20000904
 80a254c:	080a46c8 	.word	0x080a46c8

080a2550 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2550:	b510      	push	{r4, lr}
 80a2552:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2554:	480f      	ldr	r0, [pc, #60]	; (80a2594 <pinAvailable+0x44>)
 80a2556:	f7fe ff63 	bl	80a1420 <_ZN8SPIClass9isEnabledEv>
 80a255a:	b128      	cbz	r0, 80a2568 <pinAvailable+0x18>
 80a255c:	f1a4 030d 	sub.w	r3, r4, #13
 80a2560:	2b02      	cmp	r3, #2
 80a2562:	d801      	bhi.n	80a2568 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2564:	2000      	movs	r0, #0
 80a2566:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2568:	f000 f87a 	bl	80a2660 <_Z19__fetch_global_Wirev>
 80a256c:	f7ff ff2b 	bl	80a23c6 <_ZN7TwoWire9isEnabledEv>
 80a2570:	b108      	cbz	r0, 80a2576 <pinAvailable+0x26>
 80a2572:	2c01      	cmp	r4, #1
 80a2574:	d9f6      	bls.n	80a2564 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2576:	f7ff fe89 	bl	80a228c <_Z22__fetch_global_Serial1v>
 80a257a:	f7ff fe83 	bl	80a2284 <_ZN11USARTSerial9isEnabledEv>
 80a257e:	b118      	cbz	r0, 80a2588 <pinAvailable+0x38>
 80a2580:	f1a4 0312 	sub.w	r3, r4, #18
 80a2584:	2b01      	cmp	r3, #1
 80a2586:	d9ed      	bls.n	80a2564 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2588:	2c17      	cmp	r4, #23
 80a258a:	bf8c      	ite	hi
 80a258c:	2000      	movhi	r0, #0
 80a258e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2590:	bd10      	pop	{r4, pc}
 80a2592:	bf00      	nop
 80a2594:	2000090c 	.word	0x2000090c

080a2598 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2598:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a259a:	b538      	push	{r3, r4, r5, lr}
 80a259c:	4604      	mov	r4, r0
 80a259e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a25a0:	d80a      	bhi.n	80a25b8 <pinMode+0x20>
 80a25a2:	29ff      	cmp	r1, #255	; 0xff
 80a25a4:	d008      	beq.n	80a25b8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a25a6:	f7ff ffd3 	bl	80a2550 <pinAvailable>
 80a25aa:	b128      	cbz	r0, 80a25b8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a25ac:	4629      	mov	r1, r5
 80a25ae:	4620      	mov	r0, r4
}
 80a25b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a25b4:	f7fe bd2a 	b.w	80a100c <HAL_Pin_Mode>
 80a25b8:	bd38      	pop	{r3, r4, r5, pc}

080a25ba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a25ba:	b538      	push	{r3, r4, r5, lr}
 80a25bc:	4604      	mov	r4, r0
 80a25be:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a25c0:	f7fe fd2c 	bl	80a101c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a25c4:	28ff      	cmp	r0, #255	; 0xff
 80a25c6:	d010      	beq.n	80a25ea <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a25c8:	2806      	cmp	r0, #6
 80a25ca:	d804      	bhi.n	80a25d6 <digitalWrite+0x1c>
 80a25cc:	234d      	movs	r3, #77	; 0x4d
 80a25ce:	fa23 f000 	lsr.w	r0, r3, r0
 80a25d2:	07c3      	lsls	r3, r0, #31
 80a25d4:	d409      	bmi.n	80a25ea <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a25d6:	4620      	mov	r0, r4
 80a25d8:	f7ff ffba 	bl	80a2550 <pinAvailable>
 80a25dc:	b128      	cbz	r0, 80a25ea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a25de:	4629      	mov	r1, r5
 80a25e0:	4620      	mov	r0, r4
}
 80a25e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a25e6:	f7fe bd21 	b.w	80a102c <HAL_GPIO_Write>
 80a25ea:	bd38      	pop	{r3, r4, r5, pc}

080a25ec <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a25ec:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a25ee:	4c0c      	ldr	r4, [pc, #48]	; (80a2620 <_GLOBAL__sub_I_SPI+0x34>)
 80a25f0:	4e0c      	ldr	r6, [pc, #48]	; (80a2624 <_GLOBAL__sub_I_SPI+0x38>)
 80a25f2:	4d0d      	ldr	r5, [pc, #52]	; (80a2628 <_GLOBAL__sub_I_SPI+0x3c>)
 80a25f4:	2100      	movs	r1, #0
 80a25f6:	4620      	mov	r0, r4
 80a25f8:	f7fe fefe 	bl	80a13f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a25fc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a25fe:	4c0b      	ldr	r4, [pc, #44]	; (80a262c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2600:	4632      	mov	r2, r6
 80a2602:	4629      	mov	r1, r5
 80a2604:	f000 f84c 	bl	80a26a0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2608:	2101      	movs	r1, #1
 80a260a:	4620      	mov	r0, r4
 80a260c:	f7fe fef4 	bl	80a13f8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2610:	4632      	mov	r2, r6
 80a2612:	4629      	mov	r1, r5
 80a2614:	4620      	mov	r0, r4
 80a2616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a261a:	f000 b841 	b.w	80a26a0 <__aeabi_atexit>
 80a261e:	bf00      	nop
 80a2620:	2000090c 	.word	0x2000090c
 80a2624:	20000378 	.word	0x20000378
 80a2628:	080a13e9 	.word	0x080a13e9
 80a262c:	2000091c 	.word	0x2000091c

080a2630 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2630:	b513      	push	{r0, r1, r4, lr}
 80a2632:	4c08      	ldr	r4, [pc, #32]	; (80a2654 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2634:	2300      	movs	r3, #0
 80a2636:	461a      	mov	r2, r3
 80a2638:	4619      	mov	r1, r3
 80a263a:	9300      	str	r3, [sp, #0]
 80a263c:	4620      	mov	r0, r4
 80a263e:	f7ff fceb 	bl	80a2018 <_ZN9IPAddressC1Ehhhh>
 80a2642:	4620      	mov	r0, r4
 80a2644:	4a04      	ldr	r2, [pc, #16]	; (80a2658 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2646:	4905      	ldr	r1, [pc, #20]	; (80a265c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2648:	b002      	add	sp, #8
 80a264a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a264e:	f000 b827 	b.w	80a26a0 <__aeabi_atexit>
 80a2652:	bf00      	nop
 80a2654:	20000930 	.word	0x20000930
 80a2658:	20000378 	.word	0x20000378
 80a265c:	080a1f69 	.word	0x080a1f69

080a2660 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2660:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2662:	4d0b      	ldr	r5, [pc, #44]	; (80a2690 <_Z19__fetch_global_Wirev+0x30>)
 80a2664:	6829      	ldr	r1, [r5, #0]
 80a2666:	f011 0401 	ands.w	r4, r1, #1
 80a266a:	d10f      	bne.n	80a268c <_Z19__fetch_global_Wirev+0x2c>
 80a266c:	4628      	mov	r0, r5
 80a266e:	f7fd fd18 	bl	80a00a2 <__cxa_guard_acquire>
 80a2672:	b158      	cbz	r0, 80a268c <_Z19__fetch_global_Wirev+0x2c>
 80a2674:	4621      	mov	r1, r4
 80a2676:	4807      	ldr	r0, [pc, #28]	; (80a2694 <_Z19__fetch_global_Wirev+0x34>)
 80a2678:	f7ff fe6e 	bl	80a2358 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a267c:	4628      	mov	r0, r5
 80a267e:	f7fd fd15 	bl	80a00ac <__cxa_guard_release>
 80a2682:	4a05      	ldr	r2, [pc, #20]	; (80a2698 <_Z19__fetch_global_Wirev+0x38>)
 80a2684:	4905      	ldr	r1, [pc, #20]	; (80a269c <_Z19__fetch_global_Wirev+0x3c>)
 80a2686:	4803      	ldr	r0, [pc, #12]	; (80a2694 <_Z19__fetch_global_Wirev+0x34>)
 80a2688:	f000 f80a 	bl	80a26a0 <__aeabi_atexit>
	return wire;
}
 80a268c:	4801      	ldr	r0, [pc, #4]	; (80a2694 <_Z19__fetch_global_Wirev+0x34>)
 80a268e:	bd38      	pop	{r3, r4, r5, pc}
 80a2690:	20000948 	.word	0x20000948
 80a2694:	2000094c 	.word	0x2000094c
 80a2698:	20000378 	.word	0x20000378
 80a269c:	080a2301 	.word	0x080a2301

080a26a0 <__aeabi_atexit>:
 80a26a0:	460b      	mov	r3, r1
 80a26a2:	4601      	mov	r1, r0
 80a26a4:	4618      	mov	r0, r3
 80a26a6:	f001 bd2d 	b.w	80a4104 <__cxa_atexit>

080a26aa <_ZdlPvj>:
 80a26aa:	f7fd bcf8 	b.w	80a009e <_ZdlPv>

080a26ae <_ZSt19__throw_logic_errorPKc>:
 80a26ae:	b508      	push	{r3, lr}
 80a26b0:	f7fe fe8a 	bl	80a13c8 <abort>

080a26b4 <_ZSt20__throw_length_errorPKc>:
 80a26b4:	b508      	push	{r3, lr}
 80a26b6:	f7fe fe87 	bl	80a13c8 <abort>

080a26ba <_ZSt24__throw_out_of_range_fmtPKcz>:
 80a26ba:	b40f      	push	{r0, r1, r2, r3}
 80a26bc:	b580      	push	{r7, lr}
 80a26be:	b082      	sub	sp, #8
 80a26c0:	af00      	add	r7, sp, #0
 80a26c2:	f107 0410 	add.w	r4, r7, #16
 80a26c6:	f854 5b04 	ldr.w	r5, [r4], #4
 80a26ca:	4628      	mov	r0, r5
 80a26cc:	f001 fdbf 	bl	80a424e <strlen>
 80a26d0:	f200 230e 	addw	r3, r0, #526	; 0x20e
 80a26d4:	f023 0307 	bic.w	r3, r3, #7
 80a26d8:	ebad 0d03 	sub.w	sp, sp, r3
 80a26dc:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80a26e0:	4623      	mov	r3, r4
 80a26e2:	462a      	mov	r2, r5
 80a26e4:	4668      	mov	r0, sp
 80a26e6:	607c      	str	r4, [r7, #4]
 80a26e8:	f000 fa2a 	bl	80a2b40 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80a26ec:	f7fe fe6c 	bl	80a13c8 <abort>

080a26f0 <_ZSt25__throw_bad_function_callv>:
 80a26f0:	b508      	push	{r3, lr}
 80a26f2:	f7fe fe69 	bl	80a13c8 <abort>

080a26f6 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 80a26f6:	b10a      	cbz	r2, 80a26fc <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 80a26f8:	f001 bd12 	b.w	80a4120 <memcmp>
 80a26fc:	4610      	mov	r0, r2
 80a26fe:	4770      	bx	lr

080a2700 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80a2700:	b10a      	cbz	r2, 80a2706 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80a2702:	f001 bd1c 	b.w	80a413e <memcpy>
 80a2706:	4770      	bx	lr

080a2708 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80a2708:	b508      	push	{r3, lr}
 80a270a:	680b      	ldr	r3, [r1, #0]
 80a270c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2710:	d302      	bcc.n	80a2718 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80a2712:	480a      	ldr	r0, [pc, #40]	; (80a273c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x34>)
 80a2714:	f7ff ffce 	bl	80a26b4 <_ZSt20__throw_length_errorPKc>
 80a2718:	4293      	cmp	r3, r2
 80a271a:	d909      	bls.n	80a2730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x28>
 80a271c:	0052      	lsls	r2, r2, #1
 80a271e:	4293      	cmp	r3, r2
 80a2720:	d206      	bcs.n	80a2730 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x28>
 80a2722:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a2726:	bf2a      	itet	cs
 80a2728:	f06f 4300 	mvncs.w	r3, #2147483648	; 0x80000000
 80a272c:	600a      	strcc	r2, [r1, #0]
 80a272e:	600b      	strcs	r3, [r1, #0]
 80a2730:	6808      	ldr	r0, [r1, #0]
 80a2732:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a2736:	3001      	adds	r0, #1
 80a2738:	f7fd bcaf 	b.w	80a009a <_Znwj>
 80a273c:	080a46f4 	.word	0x080a46f4

080a2740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80a2740:	4603      	mov	r3, r0
 80a2742:	f853 0b08 	ldr.w	r0, [r3], #8
 80a2746:	4298      	cmp	r0, r3
 80a2748:	d001      	beq.n	80a274e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80a274a:	f7fd bca8 	b.w	80a009e <_ZdlPv>
 80a274e:	4770      	bx	lr

080a2750 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80a2750:	6843      	ldr	r3, [r0, #4]
 80a2752:	b510      	push	{r4, lr}
 80a2754:	4299      	cmp	r1, r3
 80a2756:	4614      	mov	r4, r2
 80a2758:	d904      	bls.n	80a2764 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 80a275a:	460a      	mov	r2, r1
 80a275c:	4802      	ldr	r0, [pc, #8]	; (80a2768 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80a275e:	4621      	mov	r1, r4
 80a2760:	f7ff ffab 	bl	80a26ba <_ZSt24__throw_out_of_range_fmtPKcz>
 80a2764:	4608      	mov	r0, r1
 80a2766:	bd10      	pop	{r4, pc}
 80a2768:	080a470c 	.word	0x080a470c

080a276c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80a276c:	b510      	push	{r4, lr}
 80a276e:	6844      	ldr	r4, [r0, #4]
 80a2770:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80a2774:	1b00      	subs	r0, r0, r4
 80a2776:	4401      	add	r1, r0
 80a2778:	4291      	cmp	r1, r2
 80a277a:	d202      	bcs.n	80a2782 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80a277c:	4618      	mov	r0, r3
 80a277e:	f7ff ff99 	bl	80a26b4 <_ZSt20__throw_length_errorPKc>
 80a2782:	bd10      	pop	{r4, pc}

080a2784 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80a2784:	6802      	ldr	r2, [r0, #0]
 80a2786:	428a      	cmp	r2, r1
 80a2788:	d806      	bhi.n	80a2798 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80a278a:	6843      	ldr	r3, [r0, #4]
 80a278c:	18d0      	adds	r0, r2, r3
 80a278e:	4281      	cmp	r1, r0
 80a2790:	bf94      	ite	ls
 80a2792:	2000      	movls	r0, #0
 80a2794:	2001      	movhi	r0, #1
 80a2796:	4770      	bx	lr
 80a2798:	2001      	movs	r0, #1
 80a279a:	4770      	bx	lr

080a279c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80a279c:	2a01      	cmp	r2, #1
 80a279e:	b510      	push	{r4, lr}
 80a27a0:	d102      	bne.n	80a27a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80a27a2:	780a      	ldrb	r2, [r1, #0]
 80a27a4:	7002      	strb	r2, [r0, #0]
 80a27a6:	bd10      	pop	{r4, pc}
 80a27a8:	f7ff ffaa 	bl	80a2700 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80a27ac:	bd10      	pop	{r4, pc}

080a27ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80a27ae:	2a01      	cmp	r2, #1
 80a27b0:	b430      	push	{r4, r5}
 80a27b2:	d102      	bne.n	80a27ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xc>
 80a27b4:	780b      	ldrb	r3, [r1, #0]
 80a27b6:	7003      	strb	r3, [r0, #0]
 80a27b8:	e003      	b.n	80a27c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0x14>
 80a27ba:	b112      	cbz	r2, 80a27c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0x14>
 80a27bc:	bc30      	pop	{r4, r5}
 80a27be:	f001 bcc9 	b.w	80a4154 <memmove>
 80a27c2:	bc30      	pop	{r4, r5}
 80a27c4:	4770      	bx	lr

080a27c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80a27c6:	b508      	push	{r3, lr}
 80a27c8:	1a52      	subs	r2, r2, r1
 80a27ca:	f7ff ffe7 	bl	80a279c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80a27ce:	bd08      	pop	{r3, pc}

080a27d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80a27d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a27d4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a27d6:	4699      	mov	r9, r3
 80a27d8:	6843      	ldr	r3, [r0, #4]
 80a27da:	4617      	mov	r7, r2
 80a27dc:	ebc1 0803 	rsb	r8, r1, r3
 80a27e0:	442b      	add	r3, r5
 80a27e2:	1a9b      	subs	r3, r3, r2
 80a27e4:	ebc2 0808 	rsb	r8, r2, r8
 80a27e8:	6802      	ldr	r2, [r0, #0]
 80a27ea:	9301      	str	r3, [sp, #4]
 80a27ec:	f100 0308 	add.w	r3, r0, #8
 80a27f0:	429a      	cmp	r2, r3
 80a27f2:	460e      	mov	r6, r1
 80a27f4:	bf14      	ite	ne
 80a27f6:	6882      	ldrne	r2, [r0, #8]
 80a27f8:	220f      	moveq	r2, #15
 80a27fa:	a901      	add	r1, sp, #4
 80a27fc:	4604      	mov	r4, r0
 80a27fe:	f7ff ff83 	bl	80a2708 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80a2802:	4682      	mov	sl, r0
 80a2804:	b11e      	cbz	r6, 80a280e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80a2806:	4632      	mov	r2, r6
 80a2808:	6821      	ldr	r1, [r4, #0]
 80a280a:	f7ff ffc7 	bl	80a279c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80a280e:	f1b9 0f00 	cmp.w	r9, #0
 80a2812:	d006      	beq.n	80a2822 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x52>
 80a2814:	b12d      	cbz	r5, 80a2822 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x52>
 80a2816:	462a      	mov	r2, r5
 80a2818:	4649      	mov	r1, r9
 80a281a:	eb0a 0006 	add.w	r0, sl, r6
 80a281e:	f7ff ffbd 	bl	80a279c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80a2822:	f1b8 0f00 	cmp.w	r8, #0
 80a2826:	d007      	beq.n	80a2838 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x68>
 80a2828:	6821      	ldr	r1, [r4, #0]
 80a282a:	4437      	add	r7, r6
 80a282c:	1970      	adds	r0, r6, r5
 80a282e:	4642      	mov	r2, r8
 80a2830:	4439      	add	r1, r7
 80a2832:	4450      	add	r0, sl
 80a2834:	f7ff ffb2 	bl	80a279c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80a2838:	4620      	mov	r0, r4
 80a283a:	f7ff ff81 	bl	80a2740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80a283e:	9b01      	ldr	r3, [sp, #4]
 80a2840:	f8c4 a000 	str.w	sl, [r4]
 80a2844:	60a3      	str	r3, [r4, #8]
 80a2846:	b002      	add	sp, #8
 80a2848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a284c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80a284c:	b510      	push	{r4, lr}
 80a284e:	4604      	mov	r4, r0
 80a2850:	f7ff ff76 	bl	80a2740 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80a2854:	4620      	mov	r0, r4
 80a2856:	bd10      	pop	{r4, pc}

080a2858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80a2858:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a285c:	4616      	mov	r6, r2
 80a285e:	4681      	mov	r9, r0
 80a2860:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a2862:	460f      	mov	r7, r1
 80a2864:	4698      	mov	r8, r3
 80a2866:	4631      	mov	r1, r6
 80a2868:	4b37      	ldr	r3, [pc, #220]	; (80a2948 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 80a286a:	4622      	mov	r2, r4
 80a286c:	f7ff ff7e 	bl	80a276c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80a2870:	464b      	mov	r3, r9
 80a2872:	f853 5b08 	ldr.w	r5, [r3], #8
 80a2876:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a287a:	429d      	cmp	r5, r3
 80a287c:	eb04 0a01 	add.w	sl, r4, r1
 80a2880:	bf18      	it	ne
 80a2882:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 80a2886:	ebc6 0a0a 	rsb	sl, r6, sl
 80a288a:	bf08      	it	eq
 80a288c:	230f      	moveq	r3, #15
 80a288e:	4553      	cmp	r3, sl
 80a2890:	d330      	bcc.n	80a28f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x9c>
 80a2892:	1bc9      	subs	r1, r1, r7
 80a2894:	443d      	add	r5, r7
 80a2896:	4648      	mov	r0, r9
 80a2898:	1b8f      	subs	r7, r1, r6
 80a289a:	4641      	mov	r1, r8
 80a289c:	f7ff ff72 	bl	80a2784 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80a28a0:	b158      	cbz	r0, 80a28ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 80a28a2:	b137      	cbz	r7, 80a28b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80a28a4:	42a6      	cmp	r6, r4
 80a28a6:	d004      	beq.n	80a28b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80a28a8:	463a      	mov	r2, r7
 80a28aa:	19a9      	adds	r1, r5, r6
 80a28ac:	1928      	adds	r0, r5, r4
 80a28ae:	f7ff ff7e 	bl	80a27ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80a28b2:	b3ec      	cbz	r4, 80a2930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80a28b4:	4622      	mov	r2, r4
 80a28b6:	4641      	mov	r1, r8
 80a28b8:	e00d      	b.n	80a28d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 80a28ba:	b3b4      	cbz	r4, 80a292a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd2>
 80a28bc:	42a6      	cmp	r6, r4
 80a28be:	d321      	bcc.n	80a2904 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xac>
 80a28c0:	4622      	mov	r2, r4
 80a28c2:	4641      	mov	r1, r8
 80a28c4:	4628      	mov	r0, r5
 80a28c6:	f7ff ff72 	bl	80a27ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80a28ca:	e02e      	b.n	80a292a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd2>
 80a28cc:	4598      	cmp	r8, r3
 80a28ce:	d304      	bcc.n	80a28da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x82>
 80a28d0:	4622      	mov	r2, r4
 80a28d2:	1ba1      	subs	r1, r4, r6
 80a28d4:	4441      	add	r1, r8
 80a28d6:	4628      	mov	r0, r5
 80a28d8:	e009      	b.n	80a28ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 80a28da:	ebc8 0603 	rsb	r6, r8, r3
 80a28de:	4632      	mov	r2, r6
 80a28e0:	4641      	mov	r1, r8
 80a28e2:	4628      	mov	r0, r5
 80a28e4:	f7ff ff63 	bl	80a27ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80a28e8:	1ba2      	subs	r2, r4, r6
 80a28ea:	1929      	adds	r1, r5, r4
 80a28ec:	19a8      	adds	r0, r5, r6
 80a28ee:	f7ff ff55 	bl	80a279c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80a28f2:	e01d      	b.n	80a2930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80a28f4:	9400      	str	r4, [sp, #0]
 80a28f6:	4643      	mov	r3, r8
 80a28f8:	4632      	mov	r2, r6
 80a28fa:	4639      	mov	r1, r7
 80a28fc:	4648      	mov	r0, r9
 80a28fe:	f7ff ff67 	bl	80a27d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80a2902:	e015      	b.n	80a2930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80a2904:	b137      	cbz	r7, 80a2914 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 80a2906:	463a      	mov	r2, r7
 80a2908:	19a9      	adds	r1, r5, r6
 80a290a:	1928      	adds	r0, r5, r4
 80a290c:	f7ff ff4f 	bl	80a27ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80a2910:	42a6      	cmp	r6, r4
 80a2912:	d20d      	bcs.n	80a2930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80a2914:	19ab      	adds	r3, r5, r6
 80a2916:	eb08 0204 	add.w	r2, r8, r4
 80a291a:	4293      	cmp	r3, r2
 80a291c:	d3d6      	bcc.n	80a28cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x74>
 80a291e:	4622      	mov	r2, r4
 80a2920:	4641      	mov	r1, r8
 80a2922:	4628      	mov	r0, r5
 80a2924:	f7ff ff43 	bl	80a27ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80a2928:	e002      	b.n	80a2930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80a292a:	b10f      	cbz	r7, 80a2930 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80a292c:	42a6      	cmp	r6, r4
 80a292e:	d1ea      	bne.n	80a2906 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xae>
 80a2930:	4648      	mov	r0, r9
 80a2932:	f8d9 3000 	ldr.w	r3, [r9]
 80a2936:	2200      	movs	r2, #0
 80a2938:	f8c9 a004 	str.w	sl, [r9, #4]
 80a293c:	f803 200a 	strb.w	r2, [r3, sl]
 80a2940:	b002      	add	sp, #8
 80a2942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2946:	bf00      	nop
 80a2948:	080a47e3 	.word	0x080a47e3

080a294c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 80a294c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a294e:	4604      	mov	r4, r0
 80a2950:	4608      	mov	r0, r1
 80a2952:	460d      	mov	r5, r1
 80a2954:	f001 fc7b 	bl	80a424e <strlen>
 80a2958:	462b      	mov	r3, r5
 80a295a:	9000      	str	r0, [sp, #0]
 80a295c:	6862      	ldr	r2, [r4, #4]
 80a295e:	2100      	movs	r1, #0
 80a2960:	4620      	mov	r0, r4
 80a2962:	f7ff ff79 	bl	80a2858 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80a2966:	b003      	add	sp, #12
 80a2968:	bd30      	pop	{r4, r5, pc}

080a296a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80a296a:	b508      	push	{r3, lr}
 80a296c:	f7ff ffee 	bl	80a294c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80a2970:	bd08      	pop	{r3, pc}

080a2972 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
 80a2972:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a2976:	4614      	mov	r4, r2
 80a2978:	4688      	mov	r8, r1
 80a297a:	6842      	ldr	r2, [r0, #4]
 80a297c:	b933      	cbnz	r3, 80a298c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x1a>
 80a297e:	42a2      	cmp	r2, r4
 80a2980:	bf2c      	ite	cs
 80a2982:	4620      	movcs	r0, r4
 80a2984:	f04f 30ff 	movcc.w	r0, #4294967295
 80a2988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a298c:	4293      	cmp	r3, r2
 80a298e:	d816      	bhi.n	80a29be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x4c>
 80a2990:	6806      	ldr	r6, [r0, #0]
 80a2992:	1ad7      	subs	r7, r2, r3
 80a2994:	4426      	add	r6, r4
 80a2996:	1e5d      	subs	r5, r3, #1
 80a2998:	f101 0901 	add.w	r9, r1, #1
 80a299c:	42a7      	cmp	r7, r4
 80a299e:	d30e      	bcc.n	80a29be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x4c>
 80a29a0:	f816 3b01 	ldrb.w	r3, [r6], #1
 80a29a4:	f898 2000 	ldrb.w	r2, [r8]
 80a29a8:	429a      	cmp	r2, r3
 80a29aa:	d10c      	bne.n	80a29c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
 80a29ac:	462a      	mov	r2, r5
 80a29ae:	4649      	mov	r1, r9
 80a29b0:	4630      	mov	r0, r6
 80a29b2:	f7ff fea0 	bl	80a26f6 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80a29b6:	b930      	cbnz	r0, 80a29c6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
 80a29b8:	4620      	mov	r0, r4
 80a29ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a29be:	f04f 30ff 	mov.w	r0, #4294967295
 80a29c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a29c6:	3401      	adds	r4, #1
 80a29c8:	e7e8      	b.n	80a299c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x2a>

080a29ca <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>:
 80a29ca:	b508      	push	{r3, lr}
 80a29cc:	c90a      	ldmia	r1, {r1, r3}
 80a29ce:	f7ff ffd0 	bl	80a2972 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
 80a29d2:	bd08      	pop	{r3, pc}

080a29d4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 80a29d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a29d6:	6845      	ldr	r5, [r0, #4]
 80a29d8:	4606      	mov	r6, r0
 80a29da:	4608      	mov	r0, r1
 80a29dc:	460f      	mov	r7, r1
 80a29de:	f001 fc36 	bl	80a424e <strlen>
 80a29e2:	4285      	cmp	r5, r0
 80a29e4:	4604      	mov	r4, r0
 80a29e6:	462a      	mov	r2, r5
 80a29e8:	4639      	mov	r1, r7
 80a29ea:	bf28      	it	cs
 80a29ec:	4602      	movcs	r2, r0
 80a29ee:	6830      	ldr	r0, [r6, #0]
 80a29f0:	f7ff fe81 	bl	80a26f6 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80a29f4:	b900      	cbnz	r0, 80a29f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 80a29f6:	1b28      	subs	r0, r5, r4
 80a29f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a29fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80a29fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a29fe:	4604      	mov	r4, r0
 80a2a00:	4616      	mov	r6, r2
 80a2a02:	460d      	mov	r5, r1
 80a2a04:	b901      	cbnz	r1, 80a2a08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc>
 80a2a06:	b9ba      	cbnz	r2, 80a2a38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x3c>
 80a2a08:	1b73      	subs	r3, r6, r5
 80a2a0a:	2b0f      	cmp	r3, #15
 80a2a0c:	9301      	str	r3, [sp, #4]
 80a2a0e:	d907      	bls.n	80a2a20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x24>
 80a2a10:	2200      	movs	r2, #0
 80a2a12:	a901      	add	r1, sp, #4
 80a2a14:	4620      	mov	r0, r4
 80a2a16:	f7ff fe77 	bl	80a2708 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80a2a1a:	9b01      	ldr	r3, [sp, #4]
 80a2a1c:	6020      	str	r0, [r4, #0]
 80a2a1e:	60a3      	str	r3, [r4, #8]
 80a2a20:	4632      	mov	r2, r6
 80a2a22:	4629      	mov	r1, r5
 80a2a24:	6820      	ldr	r0, [r4, #0]
 80a2a26:	f7ff fece 	bl	80a27c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80a2a2a:	9b01      	ldr	r3, [sp, #4]
 80a2a2c:	6822      	ldr	r2, [r4, #0]
 80a2a2e:	2100      	movs	r1, #0
 80a2a30:	6063      	str	r3, [r4, #4]
 80a2a32:	54d1      	strb	r1, [r2, r3]
 80a2a34:	b002      	add	sp, #8
 80a2a36:	bd70      	pop	{r4, r5, r6, pc}
 80a2a38:	4801      	ldr	r0, [pc, #4]	; (80a2a40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80a2a3a:	f7ff fe38 	bl	80a26ae <_ZSt19__throw_logic_errorPKc>
 80a2a3e:	bf00      	nop
 80a2a40:	080a484f 	.word	0x080a484f

080a2a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 80a2a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2a46:	460d      	mov	r5, r1
 80a2a48:	4616      	mov	r6, r2
 80a2a4a:	461f      	mov	r7, r3
 80a2a4c:	f100 0308 	add.w	r3, r0, #8
 80a2a50:	4604      	mov	r4, r0
 80a2a52:	6003      	str	r3, [r0, #0]
 80a2a54:	4631      	mov	r1, r6
 80a2a56:	4a09      	ldr	r2, [pc, #36]	; (80a2a7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x38>)
 80a2a58:	4628      	mov	r0, r5
 80a2a5a:	f7ff fe79 	bl	80a2750 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80a2a5e:	6829      	ldr	r1, [r5, #0]
 80a2a60:	686a      	ldr	r2, [r5, #4]
 80a2a62:	4401      	add	r1, r0
 80a2a64:	1b92      	subs	r2, r2, r6
 80a2a66:	4620      	mov	r0, r4
 80a2a68:	f04f 0300 	mov.w	r3, #0
 80a2a6c:	42ba      	cmp	r2, r7
 80a2a6e:	bf94      	ite	ls
 80a2a70:	188a      	addls	r2, r1, r2
 80a2a72:	19ca      	addhi	r2, r1, r7
 80a2a74:	f7ff ffc2 	bl	80a29fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80a2a78:	4620      	mov	r0, r4
 80a2a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2a7c:	080a4879 	.word	0x080a4879

080a2a80 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 80a2a80:	b570      	push	{r4, r5, r6, lr}
 80a2a82:	460d      	mov	r5, r1
 80a2a84:	4604      	mov	r4, r0
 80a2a86:	4611      	mov	r1, r2
 80a2a88:	4628      	mov	r0, r5
 80a2a8a:	4a06      	ldr	r2, [pc, #24]	; (80a2aa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 80a2a8c:	461e      	mov	r6, r3
 80a2a8e:	f7ff fe5f 	bl	80a2750 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80a2a92:	4633      	mov	r3, r6
 80a2a94:	4602      	mov	r2, r0
 80a2a96:	4629      	mov	r1, r5
 80a2a98:	4620      	mov	r0, r4
 80a2a9a:	f7ff ffd3 	bl	80a2a44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 80a2a9e:	4620      	mov	r0, r4
 80a2aa0:	bd70      	pop	{r4, r5, r6, pc}
 80a2aa2:	bf00      	nop
 80a2aa4:	080a4894 	.word	0x080a4894

080a2aa8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80a2aa8:	4680      	mov	r8, r0
 80a2aaa:	b580      	push	{r7, lr}
 80a2aac:	b09c      	sub	sp, #112	; 0x70
 80a2aae:	af00      	add	r7, sp, #0
 80a2ab0:	1a0e      	subs	r6, r1, r0
 80a2ab2:	226c      	movs	r2, #108	; 0x6c
 80a2ab4:	490e      	ldr	r1, [pc, #56]	; (80a2af0 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80a2ab6:	1d38      	adds	r0, r7, #4
 80a2ab8:	f001 fb41 	bl	80a413e <memcpy>
 80a2abc:	f106 037a 	add.w	r3, r6, #122	; 0x7a
 80a2ac0:	f023 0307 	bic.w	r3, r3, #7
 80a2ac4:	ebad 0d03 	sub.w	sp, sp, r3
 80a2ac8:	226b      	movs	r2, #107	; 0x6b
 80a2aca:	1d39      	adds	r1, r7, #4
 80a2acc:	4668      	mov	r0, sp
 80a2ace:	f001 fb36 	bl	80a413e <memcpy>
 80a2ad2:	1c75      	adds	r5, r6, #1
 80a2ad4:	4632      	mov	r2, r6
 80a2ad6:	4641      	mov	r1, r8
 80a2ad8:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
 80a2adc:	f001 fb2f 	bl	80a413e <memcpy>
 80a2ae0:	446d      	add	r5, sp
 80a2ae2:	2300      	movs	r3, #0
 80a2ae4:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
 80a2ae8:	4668      	mov	r0, sp
 80a2aea:	f7ff fde0 	bl	80a26ae <_ZSt19__throw_logic_errorPKc>
 80a2aee:	bf00      	nop
 80a2af0:	080a48b8 	.word	0x080a48b8

080a2af4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80a2af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2af8:	b084      	sub	sp, #16
 80a2afa:	2301      	movs	r3, #1
 80a2afc:	af04      	add	r7, sp, #16
 80a2afe:	b088      	sub	sp, #32
 80a2b00:	9302      	str	r3, [sp, #8]
 80a2b02:	2302      	movs	r3, #2
 80a2b04:	9301      	str	r3, [sp, #4]
 80a2b06:	4b0d      	ldr	r3, [pc, #52]	; (80a2b3c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x48>)
 80a2b08:	4606      	mov	r6, r0
 80a2b0a:	681b      	ldr	r3, [r3, #0]
 80a2b0c:	a80a      	add	r0, sp, #40	; 0x28
 80a2b0e:	9300      	str	r3, [sp, #0]
 80a2b10:	2300      	movs	r3, #0
 80a2b12:	4688      	mov	r8, r1
 80a2b14:	f000 f8fa 	bl	80a2d0c <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb>
 80a2b18:	4540      	cmp	r0, r8
 80a2b1a:	ad04      	add	r5, sp, #16
 80a2b1c:	4604      	mov	r4, r0
 80a2b1e:	d807      	bhi.n	80a2b30 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3c>
 80a2b20:	f1c0 0118 	rsb	r1, r0, #24
 80a2b24:	4602      	mov	r2, r0
 80a2b26:	4429      	add	r1, r5
 80a2b28:	4630      	mov	r0, r6
 80a2b2a:	f001 fb08 	bl	80a413e <memcpy>
 80a2b2e:	e001      	b.n	80a2b34 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x40>
 80a2b30:	f04f 34ff 	mov.w	r4, #4294967295
 80a2b34:	4620      	mov	r0, r4
 80a2b36:	46bd      	mov	sp, r7
 80a2b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2b3c:	20000308 	.word	0x20000308

080a2b40 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80a2b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2b44:	4606      	mov	r6, r0
 80a2b46:	4615      	mov	r5, r2
 80a2b48:	4604      	mov	r4, r0
 80a2b4a:	3901      	subs	r1, #1
 80a2b4c:	1847      	adds	r7, r0, r1
 80a2b4e:	782a      	ldrb	r2, [r5, #0]
 80a2b50:	b3a2      	cbz	r2, 80a2bbc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7c>
 80a2b52:	42bc      	cmp	r4, r7
 80a2b54:	d22e      	bcs.n	80a2bb4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 80a2b56:	2a25      	cmp	r2, #37	; 0x25
 80a2b58:	d123      	bne.n	80a2ba2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
 80a2b5a:	786a      	ldrb	r2, [r5, #1]
 80a2b5c:	2a73      	cmp	r2, #115	; 0x73
 80a2b5e:	d005      	beq.n	80a2b6c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80a2b60:	2a7a      	cmp	r2, #122	; 0x7a
 80a2b62:	d00e      	beq.n	80a2b82 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x42>
 80a2b64:	2a25      	cmp	r2, #37	; 0x25
 80a2b66:	d11c      	bne.n	80a2ba2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
 80a2b68:	3501      	adds	r5, #1
 80a2b6a:	e01a      	b.n	80a2ba2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
 80a2b6c:	1d19      	adds	r1, r3, #4
 80a2b6e:	681b      	ldr	r3, [r3, #0]
 80a2b70:	3b01      	subs	r3, #1
 80a2b72:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80a2b76:	b1d2      	cbz	r2, 80a2bae <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80a2b78:	42bc      	cmp	r4, r7
 80a2b7a:	d01b      	beq.n	80a2bb4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 80a2b7c:	f804 2b01 	strb.w	r2, [r4], #1
 80a2b80:	e7f7      	b.n	80a2b72 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x32>
 80a2b82:	78aa      	ldrb	r2, [r5, #2]
 80a2b84:	2a75      	cmp	r2, #117	; 0x75
 80a2b86:	d10c      	bne.n	80a2ba2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
 80a2b88:	681a      	ldr	r2, [r3, #0]
 80a2b8a:	1b39      	subs	r1, r7, r4
 80a2b8c:	4620      	mov	r0, r4
 80a2b8e:	f103 0804 	add.w	r8, r3, #4
 80a2b92:	f7ff ffaf 	bl	80a2af4 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80a2b96:	2800      	cmp	r0, #0
 80a2b98:	dd0c      	ble.n	80a2bb4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 80a2b9a:	4404      	add	r4, r0
 80a2b9c:	3503      	adds	r5, #3
 80a2b9e:	4643      	mov	r3, r8
 80a2ba0:	e7d5      	b.n	80a2b4e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80a2ba2:	782a      	ldrb	r2, [r5, #0]
 80a2ba4:	3401      	adds	r4, #1
 80a2ba6:	f804 2c01 	strb.w	r2, [r4, #-1]
 80a2baa:	3501      	adds	r5, #1
 80a2bac:	e7cf      	b.n	80a2b4e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80a2bae:	3502      	adds	r5, #2
 80a2bb0:	460b      	mov	r3, r1
 80a2bb2:	e7cc      	b.n	80a2b4e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80a2bb4:	4621      	mov	r1, r4
 80a2bb6:	4630      	mov	r0, r6
 80a2bb8:	f7ff ff76 	bl	80a2aa8 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80a2bbc:	7022      	strb	r2, [r4, #0]
 80a2bbe:	1ba0      	subs	r0, r4, r6
 80a2bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2bc4:	4b18      	ldr	r3, [pc, #96]	; (80a2c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2bc6:	681a      	ldr	r2, [r3, #0]
 80a2bc8:	07d1      	lsls	r1, r2, #31
 80a2bca:	bf5c      	itt	pl
 80a2bcc:	2201      	movpl	r2, #1
 80a2bce:	601a      	strpl	r2, [r3, #0]
 80a2bd0:	4b16      	ldr	r3, [pc, #88]	; (80a2c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2bd2:	681a      	ldr	r2, [r3, #0]
 80a2bd4:	07d2      	lsls	r2, r2, #31
 80a2bd6:	bf5c      	itt	pl
 80a2bd8:	2201      	movpl	r2, #1
 80a2bda:	601a      	strpl	r2, [r3, #0]
 80a2bdc:	4b14      	ldr	r3, [pc, #80]	; (80a2c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2bde:	681a      	ldr	r2, [r3, #0]
 80a2be0:	07d0      	lsls	r0, r2, #31
 80a2be2:	bf5c      	itt	pl
 80a2be4:	2201      	movpl	r2, #1
 80a2be6:	601a      	strpl	r2, [r3, #0]
 80a2be8:	4b12      	ldr	r3, [pc, #72]	; (80a2c34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2bea:	681a      	ldr	r2, [r3, #0]
 80a2bec:	07d1      	lsls	r1, r2, #31
 80a2bee:	bf5c      	itt	pl
 80a2bf0:	2201      	movpl	r2, #1
 80a2bf2:	601a      	strpl	r2, [r3, #0]
 80a2bf4:	4b10      	ldr	r3, [pc, #64]	; (80a2c38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2bf6:	681a      	ldr	r2, [r3, #0]
 80a2bf8:	07d2      	lsls	r2, r2, #31
 80a2bfa:	bf5c      	itt	pl
 80a2bfc:	2201      	movpl	r2, #1
 80a2bfe:	601a      	strpl	r2, [r3, #0]
 80a2c00:	4b0e      	ldr	r3, [pc, #56]	; (80a2c3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2c02:	681a      	ldr	r2, [r3, #0]
 80a2c04:	07d0      	lsls	r0, r2, #31
 80a2c06:	bf5c      	itt	pl
 80a2c08:	2201      	movpl	r2, #1
 80a2c0a:	601a      	strpl	r2, [r3, #0]
 80a2c0c:	4b0c      	ldr	r3, [pc, #48]	; (80a2c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2c0e:	681a      	ldr	r2, [r3, #0]
 80a2c10:	07d1      	lsls	r1, r2, #31
 80a2c12:	bf5c      	itt	pl
 80a2c14:	2201      	movpl	r2, #1
 80a2c16:	601a      	strpl	r2, [r3, #0]
 80a2c18:	4b0a      	ldr	r3, [pc, #40]	; (80a2c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2c1a:	681a      	ldr	r2, [r3, #0]
 80a2c1c:	07d2      	lsls	r2, r2, #31
 80a2c1e:	bf5c      	itt	pl
 80a2c20:	2201      	movpl	r2, #1
 80a2c22:	601a      	strpl	r2, [r3, #0]
 80a2c24:	4770      	bx	lr
 80a2c26:	bf00      	nop
 80a2c28:	2000097c 	.word	0x2000097c
 80a2c2c:	20000978 	.word	0x20000978
 80a2c30:	20000974 	.word	0x20000974
 80a2c34:	20000970 	.word	0x20000970
 80a2c38:	2000096c 	.word	0x2000096c
 80a2c3c:	20000968 	.word	0x20000968
 80a2c40:	20000964 	.word	0x20000964
 80a2c44:	20000960 	.word	0x20000960

080a2c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2c48:	4b24      	ldr	r3, [pc, #144]	; (80a2cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2c4a:	681a      	ldr	r2, [r3, #0]
 80a2c4c:	07d0      	lsls	r0, r2, #31
 80a2c4e:	bf5c      	itt	pl
 80a2c50:	2201      	movpl	r2, #1
 80a2c52:	601a      	strpl	r2, [r3, #0]
 80a2c54:	4b22      	ldr	r3, [pc, #136]	; (80a2ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2c56:	681a      	ldr	r2, [r3, #0]
 80a2c58:	07d1      	lsls	r1, r2, #31
 80a2c5a:	bf5c      	itt	pl
 80a2c5c:	2201      	movpl	r2, #1
 80a2c5e:	601a      	strpl	r2, [r3, #0]
 80a2c60:	4b20      	ldr	r3, [pc, #128]	; (80a2ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2c62:	681a      	ldr	r2, [r3, #0]
 80a2c64:	07d2      	lsls	r2, r2, #31
 80a2c66:	bf5c      	itt	pl
 80a2c68:	2201      	movpl	r2, #1
 80a2c6a:	601a      	strpl	r2, [r3, #0]
 80a2c6c:	4b1e      	ldr	r3, [pc, #120]	; (80a2ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2c6e:	681a      	ldr	r2, [r3, #0]
 80a2c70:	07d0      	lsls	r0, r2, #31
 80a2c72:	bf5c      	itt	pl
 80a2c74:	2201      	movpl	r2, #1
 80a2c76:	601a      	strpl	r2, [r3, #0]
 80a2c78:	4b1c      	ldr	r3, [pc, #112]	; (80a2cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2c7a:	681a      	ldr	r2, [r3, #0]
 80a2c7c:	07d1      	lsls	r1, r2, #31
 80a2c7e:	bf5c      	itt	pl
 80a2c80:	2201      	movpl	r2, #1
 80a2c82:	601a      	strpl	r2, [r3, #0]
 80a2c84:	4b1a      	ldr	r3, [pc, #104]	; (80a2cf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2c86:	681a      	ldr	r2, [r3, #0]
 80a2c88:	07d2      	lsls	r2, r2, #31
 80a2c8a:	bf5c      	itt	pl
 80a2c8c:	2201      	movpl	r2, #1
 80a2c8e:	601a      	strpl	r2, [r3, #0]
 80a2c90:	4b18      	ldr	r3, [pc, #96]	; (80a2cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2c92:	681a      	ldr	r2, [r3, #0]
 80a2c94:	07d0      	lsls	r0, r2, #31
 80a2c96:	bf5c      	itt	pl
 80a2c98:	2201      	movpl	r2, #1
 80a2c9a:	601a      	strpl	r2, [r3, #0]
 80a2c9c:	4b16      	ldr	r3, [pc, #88]	; (80a2cf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2c9e:	681a      	ldr	r2, [r3, #0]
 80a2ca0:	07d1      	lsls	r1, r2, #31
 80a2ca2:	bf5c      	itt	pl
 80a2ca4:	2201      	movpl	r2, #1
 80a2ca6:	601a      	strpl	r2, [r3, #0]
 80a2ca8:	4b14      	ldr	r3, [pc, #80]	; (80a2cfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2caa:	681a      	ldr	r2, [r3, #0]
 80a2cac:	07d2      	lsls	r2, r2, #31
 80a2cae:	bf5c      	itt	pl
 80a2cb0:	2201      	movpl	r2, #1
 80a2cb2:	601a      	strpl	r2, [r3, #0]
 80a2cb4:	4b12      	ldr	r3, [pc, #72]	; (80a2d00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2cb6:	681a      	ldr	r2, [r3, #0]
 80a2cb8:	07d0      	lsls	r0, r2, #31
 80a2cba:	bf5c      	itt	pl
 80a2cbc:	2201      	movpl	r2, #1
 80a2cbe:	601a      	strpl	r2, [r3, #0]
 80a2cc0:	4b10      	ldr	r3, [pc, #64]	; (80a2d04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2cc2:	681a      	ldr	r2, [r3, #0]
 80a2cc4:	07d1      	lsls	r1, r2, #31
 80a2cc6:	bf5c      	itt	pl
 80a2cc8:	2201      	movpl	r2, #1
 80a2cca:	601a      	strpl	r2, [r3, #0]
 80a2ccc:	4b0e      	ldr	r3, [pc, #56]	; (80a2d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2cce:	681a      	ldr	r2, [r3, #0]
 80a2cd0:	07d2      	lsls	r2, r2, #31
 80a2cd2:	bf5c      	itt	pl
 80a2cd4:	2201      	movpl	r2, #1
 80a2cd6:	601a      	strpl	r2, [r3, #0]
 80a2cd8:	4770      	bx	lr
 80a2cda:	bf00      	nop
 80a2cdc:	200009ac 	.word	0x200009ac
 80a2ce0:	200009a8 	.word	0x200009a8
 80a2ce4:	200009a4 	.word	0x200009a4
 80a2ce8:	200009a0 	.word	0x200009a0
 80a2cec:	2000099c 	.word	0x2000099c
 80a2cf0:	20000998 	.word	0x20000998
 80a2cf4:	20000994 	.word	0x20000994
 80a2cf8:	20000990 	.word	0x20000990
 80a2cfc:	2000098c 	.word	0x2000098c
 80a2d00:	20000988 	.word	0x20000988
 80a2d04:	20000984 	.word	0x20000984
 80a2d08:	20000980 	.word	0x20000980

080a2d0c <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb>:
 80a2d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2d10:	4614      	mov	r4, r2
 80a2d12:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80a2d16:	461d      	mov	r5, r3
 80a2d18:	4607      	mov	r7, r0
 80a2d1a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a2d1e:	9b07      	ldr	r3, [sp, #28]
 80a2d20:	b1b2      	cbz	r2, 80a2d50 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x44>
 80a2d22:	4606      	mov	r6, r0
 80a2d24:	4620      	mov	r0, r4
 80a2d26:	4629      	mov	r1, r5
 80a2d28:	220a      	movs	r2, #10
 80a2d2a:	2300      	movs	r3, #0
 80a2d2c:	f001 f82a 	bl	80a3d84 <__aeabi_uldivmod>
 80a2d30:	4442      	add	r2, r8
 80a2d32:	7913      	ldrb	r3, [r2, #4]
 80a2d34:	4620      	mov	r0, r4
 80a2d36:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80a2d3a:	4629      	mov	r1, r5
 80a2d3c:	2300      	movs	r3, #0
 80a2d3e:	220a      	movs	r2, #10
 80a2d40:	f001 f820 	bl	80a3d84 <__aeabi_uldivmod>
 80a2d44:	4604      	mov	r4, r0
 80a2d46:	460d      	mov	r5, r1
 80a2d48:	ea54 0305 	orrs.w	r3, r4, r5
 80a2d4c:	d1ea      	bne.n	80a2d24 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x18>
 80a2d4e:	e029      	b.n	80a2da4 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x98>
 80a2d50:	f003 024a 	and.w	r2, r3, #74	; 0x4a
 80a2d54:	2a40      	cmp	r2, #64	; 0x40
 80a2d56:	d110      	bne.n	80a2d7a <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x6e>
 80a2d58:	4606      	mov	r6, r0
 80a2d5a:	f004 0307 	and.w	r3, r4, #7
 80a2d5e:	4443      	add	r3, r8
 80a2d60:	791b      	ldrb	r3, [r3, #4]
 80a2d62:	08ea      	lsrs	r2, r5, #3
 80a2d64:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80a2d68:	08e3      	lsrs	r3, r4, #3
 80a2d6a:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
 80a2d6e:	461c      	mov	r4, r3
 80a2d70:	4615      	mov	r5, r2
 80a2d72:	ea54 0305 	orrs.w	r3, r4, r5
 80a2d76:	d1f0      	bne.n	80a2d5a <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x4e>
 80a2d78:	e014      	b.n	80a2da4 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x98>
 80a2d7a:	4606      	mov	r6, r0
 80a2d7c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80a2d80:	bf14      	ite	ne
 80a2d82:	2214      	movne	r2, #20
 80a2d84:	2204      	moveq	r2, #4
 80a2d86:	4442      	add	r2, r8
 80a2d88:	f004 030f 	and.w	r3, r4, #15
 80a2d8c:	5cd3      	ldrb	r3, [r2, r3]
 80a2d8e:	0929      	lsrs	r1, r5, #4
 80a2d90:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80a2d94:	0923      	lsrs	r3, r4, #4
 80a2d96:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80a2d9a:	461c      	mov	r4, r3
 80a2d9c:	460d      	mov	r5, r1
 80a2d9e:	ea54 0305 	orrs.w	r3, r4, r5
 80a2da2:	d1f1      	bne.n	80a2d88 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x7c>
 80a2da4:	1bb8      	subs	r0, r7, r6
 80a2da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a2dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2dac:	4b24      	ldr	r3, [pc, #144]	; (80a2e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2dae:	681a      	ldr	r2, [r3, #0]
 80a2db0:	07d0      	lsls	r0, r2, #31
 80a2db2:	bf5c      	itt	pl
 80a2db4:	2201      	movpl	r2, #1
 80a2db6:	601a      	strpl	r2, [r3, #0]
 80a2db8:	4b22      	ldr	r3, [pc, #136]	; (80a2e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2dba:	681a      	ldr	r2, [r3, #0]
 80a2dbc:	07d1      	lsls	r1, r2, #31
 80a2dbe:	bf5c      	itt	pl
 80a2dc0:	2201      	movpl	r2, #1
 80a2dc2:	601a      	strpl	r2, [r3, #0]
 80a2dc4:	4b20      	ldr	r3, [pc, #128]	; (80a2e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2dc6:	681a      	ldr	r2, [r3, #0]
 80a2dc8:	07d2      	lsls	r2, r2, #31
 80a2dca:	bf5c      	itt	pl
 80a2dcc:	2201      	movpl	r2, #1
 80a2dce:	601a      	strpl	r2, [r3, #0]
 80a2dd0:	4b1e      	ldr	r3, [pc, #120]	; (80a2e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2dd2:	681a      	ldr	r2, [r3, #0]
 80a2dd4:	07d0      	lsls	r0, r2, #31
 80a2dd6:	bf5c      	itt	pl
 80a2dd8:	2201      	movpl	r2, #1
 80a2dda:	601a      	strpl	r2, [r3, #0]
 80a2ddc:	4b1c      	ldr	r3, [pc, #112]	; (80a2e50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2dde:	681a      	ldr	r2, [r3, #0]
 80a2de0:	07d1      	lsls	r1, r2, #31
 80a2de2:	bf5c      	itt	pl
 80a2de4:	2201      	movpl	r2, #1
 80a2de6:	601a      	strpl	r2, [r3, #0]
 80a2de8:	4b1a      	ldr	r3, [pc, #104]	; (80a2e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2dea:	681a      	ldr	r2, [r3, #0]
 80a2dec:	07d2      	lsls	r2, r2, #31
 80a2dee:	bf5c      	itt	pl
 80a2df0:	2201      	movpl	r2, #1
 80a2df2:	601a      	strpl	r2, [r3, #0]
 80a2df4:	4b18      	ldr	r3, [pc, #96]	; (80a2e58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2df6:	681a      	ldr	r2, [r3, #0]
 80a2df8:	07d0      	lsls	r0, r2, #31
 80a2dfa:	bf5c      	itt	pl
 80a2dfc:	2201      	movpl	r2, #1
 80a2dfe:	601a      	strpl	r2, [r3, #0]
 80a2e00:	4b16      	ldr	r3, [pc, #88]	; (80a2e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2e02:	681a      	ldr	r2, [r3, #0]
 80a2e04:	07d1      	lsls	r1, r2, #31
 80a2e06:	bf5c      	itt	pl
 80a2e08:	2201      	movpl	r2, #1
 80a2e0a:	601a      	strpl	r2, [r3, #0]
 80a2e0c:	4b14      	ldr	r3, [pc, #80]	; (80a2e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2e0e:	681a      	ldr	r2, [r3, #0]
 80a2e10:	07d2      	lsls	r2, r2, #31
 80a2e12:	bf5c      	itt	pl
 80a2e14:	2201      	movpl	r2, #1
 80a2e16:	601a      	strpl	r2, [r3, #0]
 80a2e18:	4b12      	ldr	r3, [pc, #72]	; (80a2e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2e1a:	681a      	ldr	r2, [r3, #0]
 80a2e1c:	07d0      	lsls	r0, r2, #31
 80a2e1e:	bf5c      	itt	pl
 80a2e20:	2201      	movpl	r2, #1
 80a2e22:	601a      	strpl	r2, [r3, #0]
 80a2e24:	4b10      	ldr	r3, [pc, #64]	; (80a2e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2e26:	681a      	ldr	r2, [r3, #0]
 80a2e28:	07d1      	lsls	r1, r2, #31
 80a2e2a:	bf5c      	itt	pl
 80a2e2c:	2201      	movpl	r2, #1
 80a2e2e:	601a      	strpl	r2, [r3, #0]
 80a2e30:	4b0e      	ldr	r3, [pc, #56]	; (80a2e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2e32:	681a      	ldr	r2, [r3, #0]
 80a2e34:	07d2      	lsls	r2, r2, #31
 80a2e36:	bf5c      	itt	pl
 80a2e38:	2201      	movpl	r2, #1
 80a2e3a:	601a      	strpl	r2, [r3, #0]
 80a2e3c:	4770      	bx	lr
 80a2e3e:	bf00      	nop
 80a2e40:	200009dc 	.word	0x200009dc
 80a2e44:	200009d8 	.word	0x200009d8
 80a2e48:	200009d4 	.word	0x200009d4
 80a2e4c:	200009d0 	.word	0x200009d0
 80a2e50:	200009cc 	.word	0x200009cc
 80a2e54:	200009c8 	.word	0x200009c8
 80a2e58:	200009c4 	.word	0x200009c4
 80a2e5c:	200009c0 	.word	0x200009c0
 80a2e60:	200009bc 	.word	0x200009bc
 80a2e64:	200009b8 	.word	0x200009b8
 80a2e68:	200009b4 	.word	0x200009b4
 80a2e6c:	200009b0 	.word	0x200009b0

080a2e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2e70:	4b18      	ldr	r3, [pc, #96]	; (80a2ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2e72:	681a      	ldr	r2, [r3, #0]
 80a2e74:	07d1      	lsls	r1, r2, #31
 80a2e76:	bf5c      	itt	pl
 80a2e78:	2201      	movpl	r2, #1
 80a2e7a:	601a      	strpl	r2, [r3, #0]
 80a2e7c:	4b16      	ldr	r3, [pc, #88]	; (80a2ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2e7e:	681a      	ldr	r2, [r3, #0]
 80a2e80:	07d2      	lsls	r2, r2, #31
 80a2e82:	bf5c      	itt	pl
 80a2e84:	2201      	movpl	r2, #1
 80a2e86:	601a      	strpl	r2, [r3, #0]
 80a2e88:	4b14      	ldr	r3, [pc, #80]	; (80a2edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2e8a:	681a      	ldr	r2, [r3, #0]
 80a2e8c:	07d0      	lsls	r0, r2, #31
 80a2e8e:	bf5c      	itt	pl
 80a2e90:	2201      	movpl	r2, #1
 80a2e92:	601a      	strpl	r2, [r3, #0]
 80a2e94:	4b12      	ldr	r3, [pc, #72]	; (80a2ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2e96:	681a      	ldr	r2, [r3, #0]
 80a2e98:	07d1      	lsls	r1, r2, #31
 80a2e9a:	bf5c      	itt	pl
 80a2e9c:	2201      	movpl	r2, #1
 80a2e9e:	601a      	strpl	r2, [r3, #0]
 80a2ea0:	4b10      	ldr	r3, [pc, #64]	; (80a2ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2ea2:	681a      	ldr	r2, [r3, #0]
 80a2ea4:	07d2      	lsls	r2, r2, #31
 80a2ea6:	bf5c      	itt	pl
 80a2ea8:	2201      	movpl	r2, #1
 80a2eaa:	601a      	strpl	r2, [r3, #0]
 80a2eac:	4b0e      	ldr	r3, [pc, #56]	; (80a2ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2eae:	681a      	ldr	r2, [r3, #0]
 80a2eb0:	07d0      	lsls	r0, r2, #31
 80a2eb2:	bf5c      	itt	pl
 80a2eb4:	2201      	movpl	r2, #1
 80a2eb6:	601a      	strpl	r2, [r3, #0]
 80a2eb8:	4b0c      	ldr	r3, [pc, #48]	; (80a2eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2eba:	681a      	ldr	r2, [r3, #0]
 80a2ebc:	07d1      	lsls	r1, r2, #31
 80a2ebe:	bf5c      	itt	pl
 80a2ec0:	2201      	movpl	r2, #1
 80a2ec2:	601a      	strpl	r2, [r3, #0]
 80a2ec4:	4b0a      	ldr	r3, [pc, #40]	; (80a2ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2ec6:	681a      	ldr	r2, [r3, #0]
 80a2ec8:	07d2      	lsls	r2, r2, #31
 80a2eca:	bf5c      	itt	pl
 80a2ecc:	2201      	movpl	r2, #1
 80a2ece:	601a      	strpl	r2, [r3, #0]
 80a2ed0:	4770      	bx	lr
 80a2ed2:	bf00      	nop
 80a2ed4:	200009fc 	.word	0x200009fc
 80a2ed8:	200009f8 	.word	0x200009f8
 80a2edc:	200009f4 	.word	0x200009f4
 80a2ee0:	200009f0 	.word	0x200009f0
 80a2ee4:	200009ec 	.word	0x200009ec
 80a2ee8:	200009e8 	.word	0x200009e8
 80a2eec:	200009e4 	.word	0x200009e4
 80a2ef0:	200009e0 	.word	0x200009e0

080a2ef4 <__aeabi_drsub>:
 80a2ef4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2ef8:	e002      	b.n	80a2f00 <__adddf3>
 80a2efa:	bf00      	nop

080a2efc <__aeabi_dsub>:
 80a2efc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2f00 <__adddf3>:
 80a2f00:	b530      	push	{r4, r5, lr}
 80a2f02:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2f06:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2f0a:	ea94 0f05 	teq	r4, r5
 80a2f0e:	bf08      	it	eq
 80a2f10:	ea90 0f02 	teqeq	r0, r2
 80a2f14:	bf1f      	itttt	ne
 80a2f16:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2f1a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2f1e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a2f22:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2f26:	f000 80e2 	beq.w	80a30ee <__adddf3+0x1ee>
 80a2f2a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2f2e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a2f32:	bfb8      	it	lt
 80a2f34:	426d      	neglt	r5, r5
 80a2f36:	dd0c      	ble.n	80a2f52 <__adddf3+0x52>
 80a2f38:	442c      	add	r4, r5
 80a2f3a:	ea80 0202 	eor.w	r2, r0, r2
 80a2f3e:	ea81 0303 	eor.w	r3, r1, r3
 80a2f42:	ea82 0000 	eor.w	r0, r2, r0
 80a2f46:	ea83 0101 	eor.w	r1, r3, r1
 80a2f4a:	ea80 0202 	eor.w	r2, r0, r2
 80a2f4e:	ea81 0303 	eor.w	r3, r1, r3
 80a2f52:	2d36      	cmp	r5, #54	; 0x36
 80a2f54:	bf88      	it	hi
 80a2f56:	bd30      	pophi	{r4, r5, pc}
 80a2f58:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2f5c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2f60:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2f64:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2f68:	d002      	beq.n	80a2f70 <__adddf3+0x70>
 80a2f6a:	4240      	negs	r0, r0
 80a2f6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2f70:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2f74:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2f78:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2f7c:	d002      	beq.n	80a2f84 <__adddf3+0x84>
 80a2f7e:	4252      	negs	r2, r2
 80a2f80:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2f84:	ea94 0f05 	teq	r4, r5
 80a2f88:	f000 80a7 	beq.w	80a30da <__adddf3+0x1da>
 80a2f8c:	f1a4 0401 	sub.w	r4, r4, #1
 80a2f90:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2f94:	db0d      	blt.n	80a2fb2 <__adddf3+0xb2>
 80a2f96:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2f9a:	fa22 f205 	lsr.w	r2, r2, r5
 80a2f9e:	1880      	adds	r0, r0, r2
 80a2fa0:	f141 0100 	adc.w	r1, r1, #0
 80a2fa4:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2fa8:	1880      	adds	r0, r0, r2
 80a2faa:	fa43 f305 	asr.w	r3, r3, r5
 80a2fae:	4159      	adcs	r1, r3
 80a2fb0:	e00e      	b.n	80a2fd0 <__adddf3+0xd0>
 80a2fb2:	f1a5 0520 	sub.w	r5, r5, #32
 80a2fb6:	f10e 0e20 	add.w	lr, lr, #32
 80a2fba:	2a01      	cmp	r2, #1
 80a2fbc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a2fc0:	bf28      	it	cs
 80a2fc2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2fc6:	fa43 f305 	asr.w	r3, r3, r5
 80a2fca:	18c0      	adds	r0, r0, r3
 80a2fcc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a2fd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2fd4:	d507      	bpl.n	80a2fe6 <__adddf3+0xe6>
 80a2fd6:	f04f 0e00 	mov.w	lr, #0
 80a2fda:	f1dc 0c00 	rsbs	ip, ip, #0
 80a2fde:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a2fe2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2fe6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2fea:	d31b      	bcc.n	80a3024 <__adddf3+0x124>
 80a2fec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a2ff0:	d30c      	bcc.n	80a300c <__adddf3+0x10c>
 80a2ff2:	0849      	lsrs	r1, r1, #1
 80a2ff4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2ff8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2ffc:	f104 0401 	add.w	r4, r4, #1
 80a3000:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3004:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3008:	f080 809a 	bcs.w	80a3140 <__adddf3+0x240>
 80a300c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3010:	bf08      	it	eq
 80a3012:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3016:	f150 0000 	adcs.w	r0, r0, #0
 80a301a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a301e:	ea41 0105 	orr.w	r1, r1, r5
 80a3022:	bd30      	pop	{r4, r5, pc}
 80a3024:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3028:	4140      	adcs	r0, r0
 80a302a:	eb41 0101 	adc.w	r1, r1, r1
 80a302e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3032:	f1a4 0401 	sub.w	r4, r4, #1
 80a3036:	d1e9      	bne.n	80a300c <__adddf3+0x10c>
 80a3038:	f091 0f00 	teq	r1, #0
 80a303c:	bf04      	itt	eq
 80a303e:	4601      	moveq	r1, r0
 80a3040:	2000      	moveq	r0, #0
 80a3042:	fab1 f381 	clz	r3, r1
 80a3046:	bf08      	it	eq
 80a3048:	3320      	addeq	r3, #32
 80a304a:	f1a3 030b 	sub.w	r3, r3, #11
 80a304e:	f1b3 0220 	subs.w	r2, r3, #32
 80a3052:	da0c      	bge.n	80a306e <__adddf3+0x16e>
 80a3054:	320c      	adds	r2, #12
 80a3056:	dd08      	ble.n	80a306a <__adddf3+0x16a>
 80a3058:	f102 0c14 	add.w	ip, r2, #20
 80a305c:	f1c2 020c 	rsb	r2, r2, #12
 80a3060:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3064:	fa21 f102 	lsr.w	r1, r1, r2
 80a3068:	e00c      	b.n	80a3084 <__adddf3+0x184>
 80a306a:	f102 0214 	add.w	r2, r2, #20
 80a306e:	bfd8      	it	le
 80a3070:	f1c2 0c20 	rsble	ip, r2, #32
 80a3074:	fa01 f102 	lsl.w	r1, r1, r2
 80a3078:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a307c:	bfdc      	itt	le
 80a307e:	ea41 010c 	orrle.w	r1, r1, ip
 80a3082:	4090      	lslle	r0, r2
 80a3084:	1ae4      	subs	r4, r4, r3
 80a3086:	bfa2      	ittt	ge
 80a3088:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a308c:	4329      	orrge	r1, r5
 80a308e:	bd30      	popge	{r4, r5, pc}
 80a3090:	ea6f 0404 	mvn.w	r4, r4
 80a3094:	3c1f      	subs	r4, #31
 80a3096:	da1c      	bge.n	80a30d2 <__adddf3+0x1d2>
 80a3098:	340c      	adds	r4, #12
 80a309a:	dc0e      	bgt.n	80a30ba <__adddf3+0x1ba>
 80a309c:	f104 0414 	add.w	r4, r4, #20
 80a30a0:	f1c4 0220 	rsb	r2, r4, #32
 80a30a4:	fa20 f004 	lsr.w	r0, r0, r4
 80a30a8:	fa01 f302 	lsl.w	r3, r1, r2
 80a30ac:	ea40 0003 	orr.w	r0, r0, r3
 80a30b0:	fa21 f304 	lsr.w	r3, r1, r4
 80a30b4:	ea45 0103 	orr.w	r1, r5, r3
 80a30b8:	bd30      	pop	{r4, r5, pc}
 80a30ba:	f1c4 040c 	rsb	r4, r4, #12
 80a30be:	f1c4 0220 	rsb	r2, r4, #32
 80a30c2:	fa20 f002 	lsr.w	r0, r0, r2
 80a30c6:	fa01 f304 	lsl.w	r3, r1, r4
 80a30ca:	ea40 0003 	orr.w	r0, r0, r3
 80a30ce:	4629      	mov	r1, r5
 80a30d0:	bd30      	pop	{r4, r5, pc}
 80a30d2:	fa21 f004 	lsr.w	r0, r1, r4
 80a30d6:	4629      	mov	r1, r5
 80a30d8:	bd30      	pop	{r4, r5, pc}
 80a30da:	f094 0f00 	teq	r4, #0
 80a30de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a30e2:	bf06      	itte	eq
 80a30e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a30e8:	3401      	addeq	r4, #1
 80a30ea:	3d01      	subne	r5, #1
 80a30ec:	e74e      	b.n	80a2f8c <__adddf3+0x8c>
 80a30ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a30f2:	bf18      	it	ne
 80a30f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a30f8:	d029      	beq.n	80a314e <__adddf3+0x24e>
 80a30fa:	ea94 0f05 	teq	r4, r5
 80a30fe:	bf08      	it	eq
 80a3100:	ea90 0f02 	teqeq	r0, r2
 80a3104:	d005      	beq.n	80a3112 <__adddf3+0x212>
 80a3106:	ea54 0c00 	orrs.w	ip, r4, r0
 80a310a:	bf04      	itt	eq
 80a310c:	4619      	moveq	r1, r3
 80a310e:	4610      	moveq	r0, r2
 80a3110:	bd30      	pop	{r4, r5, pc}
 80a3112:	ea91 0f03 	teq	r1, r3
 80a3116:	bf1e      	ittt	ne
 80a3118:	2100      	movne	r1, #0
 80a311a:	2000      	movne	r0, #0
 80a311c:	bd30      	popne	{r4, r5, pc}
 80a311e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3122:	d105      	bne.n	80a3130 <__adddf3+0x230>
 80a3124:	0040      	lsls	r0, r0, #1
 80a3126:	4149      	adcs	r1, r1
 80a3128:	bf28      	it	cs
 80a312a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a312e:	bd30      	pop	{r4, r5, pc}
 80a3130:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3134:	bf3c      	itt	cc
 80a3136:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a313a:	bd30      	popcc	{r4, r5, pc}
 80a313c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3140:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3144:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3148:	f04f 0000 	mov.w	r0, #0
 80a314c:	bd30      	pop	{r4, r5, pc}
 80a314e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3152:	bf1a      	itte	ne
 80a3154:	4619      	movne	r1, r3
 80a3156:	4610      	movne	r0, r2
 80a3158:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a315c:	bf1c      	itt	ne
 80a315e:	460b      	movne	r3, r1
 80a3160:	4602      	movne	r2, r0
 80a3162:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3166:	bf06      	itte	eq
 80a3168:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a316c:	ea91 0f03 	teqeq	r1, r3
 80a3170:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3174:	bd30      	pop	{r4, r5, pc}
 80a3176:	bf00      	nop

080a3178 <__aeabi_ui2d>:
 80a3178:	f090 0f00 	teq	r0, #0
 80a317c:	bf04      	itt	eq
 80a317e:	2100      	moveq	r1, #0
 80a3180:	4770      	bxeq	lr
 80a3182:	b530      	push	{r4, r5, lr}
 80a3184:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3188:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a318c:	f04f 0500 	mov.w	r5, #0
 80a3190:	f04f 0100 	mov.w	r1, #0
 80a3194:	e750      	b.n	80a3038 <__adddf3+0x138>
 80a3196:	bf00      	nop

080a3198 <__aeabi_i2d>:
 80a3198:	f090 0f00 	teq	r0, #0
 80a319c:	bf04      	itt	eq
 80a319e:	2100      	moveq	r1, #0
 80a31a0:	4770      	bxeq	lr
 80a31a2:	b530      	push	{r4, r5, lr}
 80a31a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a31a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a31ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a31b0:	bf48      	it	mi
 80a31b2:	4240      	negmi	r0, r0
 80a31b4:	f04f 0100 	mov.w	r1, #0
 80a31b8:	e73e      	b.n	80a3038 <__adddf3+0x138>
 80a31ba:	bf00      	nop

080a31bc <__aeabi_f2d>:
 80a31bc:	0042      	lsls	r2, r0, #1
 80a31be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a31c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a31c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a31ca:	bf1f      	itttt	ne
 80a31cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a31d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a31d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a31d8:	4770      	bxne	lr
 80a31da:	f092 0f00 	teq	r2, #0
 80a31de:	bf14      	ite	ne
 80a31e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a31e4:	4770      	bxeq	lr
 80a31e6:	b530      	push	{r4, r5, lr}
 80a31e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a31ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a31f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a31f4:	e720      	b.n	80a3038 <__adddf3+0x138>
 80a31f6:	bf00      	nop

080a31f8 <__aeabi_ul2d>:
 80a31f8:	ea50 0201 	orrs.w	r2, r0, r1
 80a31fc:	bf08      	it	eq
 80a31fe:	4770      	bxeq	lr
 80a3200:	b530      	push	{r4, r5, lr}
 80a3202:	f04f 0500 	mov.w	r5, #0
 80a3206:	e00a      	b.n	80a321e <__aeabi_l2d+0x16>

080a3208 <__aeabi_l2d>:
 80a3208:	ea50 0201 	orrs.w	r2, r0, r1
 80a320c:	bf08      	it	eq
 80a320e:	4770      	bxeq	lr
 80a3210:	b530      	push	{r4, r5, lr}
 80a3212:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3216:	d502      	bpl.n	80a321e <__aeabi_l2d+0x16>
 80a3218:	4240      	negs	r0, r0
 80a321a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a321e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3222:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3226:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a322a:	f43f aedc 	beq.w	80a2fe6 <__adddf3+0xe6>
 80a322e:	f04f 0203 	mov.w	r2, #3
 80a3232:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3236:	bf18      	it	ne
 80a3238:	3203      	addne	r2, #3
 80a323a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a323e:	bf18      	it	ne
 80a3240:	3203      	addne	r2, #3
 80a3242:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3246:	f1c2 0320 	rsb	r3, r2, #32
 80a324a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a324e:	fa20 f002 	lsr.w	r0, r0, r2
 80a3252:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3256:	ea40 000e 	orr.w	r0, r0, lr
 80a325a:	fa21 f102 	lsr.w	r1, r1, r2
 80a325e:	4414      	add	r4, r2
 80a3260:	e6c1      	b.n	80a2fe6 <__adddf3+0xe6>
 80a3262:	bf00      	nop

080a3264 <__aeabi_dmul>:
 80a3264:	b570      	push	{r4, r5, r6, lr}
 80a3266:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a326a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a326e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3272:	bf1d      	ittte	ne
 80a3274:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3278:	ea94 0f0c 	teqne	r4, ip
 80a327c:	ea95 0f0c 	teqne	r5, ip
 80a3280:	f000 f8de 	bleq	80a3440 <__aeabi_dmul+0x1dc>
 80a3284:	442c      	add	r4, r5
 80a3286:	ea81 0603 	eor.w	r6, r1, r3
 80a328a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a328e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a3292:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a3296:	bf18      	it	ne
 80a3298:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a329c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a32a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a32a4:	d038      	beq.n	80a3318 <__aeabi_dmul+0xb4>
 80a32a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a32aa:	f04f 0500 	mov.w	r5, #0
 80a32ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a32b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a32b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a32ba:	f04f 0600 	mov.w	r6, #0
 80a32be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a32c2:	f09c 0f00 	teq	ip, #0
 80a32c6:	bf18      	it	ne
 80a32c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a32cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a32d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a32d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a32d8:	d204      	bcs.n	80a32e4 <__aeabi_dmul+0x80>
 80a32da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a32de:	416d      	adcs	r5, r5
 80a32e0:	eb46 0606 	adc.w	r6, r6, r6
 80a32e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a32e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a32ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a32f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a32f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a32f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a32fc:	bf88      	it	hi
 80a32fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3302:	d81e      	bhi.n	80a3342 <__aeabi_dmul+0xde>
 80a3304:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3308:	bf08      	it	eq
 80a330a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a330e:	f150 0000 	adcs.w	r0, r0, #0
 80a3312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3316:	bd70      	pop	{r4, r5, r6, pc}
 80a3318:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a331c:	ea46 0101 	orr.w	r1, r6, r1
 80a3320:	ea40 0002 	orr.w	r0, r0, r2
 80a3324:	ea81 0103 	eor.w	r1, r1, r3
 80a3328:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a332c:	bfc2      	ittt	gt
 80a332e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3332:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3336:	bd70      	popgt	{r4, r5, r6, pc}
 80a3338:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a333c:	f04f 0e00 	mov.w	lr, #0
 80a3340:	3c01      	subs	r4, #1
 80a3342:	f300 80ab 	bgt.w	80a349c <__aeabi_dmul+0x238>
 80a3346:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a334a:	bfde      	ittt	le
 80a334c:	2000      	movle	r0, #0
 80a334e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3352:	bd70      	pople	{r4, r5, r6, pc}
 80a3354:	f1c4 0400 	rsb	r4, r4, #0
 80a3358:	3c20      	subs	r4, #32
 80a335a:	da35      	bge.n	80a33c8 <__aeabi_dmul+0x164>
 80a335c:	340c      	adds	r4, #12
 80a335e:	dc1b      	bgt.n	80a3398 <__aeabi_dmul+0x134>
 80a3360:	f104 0414 	add.w	r4, r4, #20
 80a3364:	f1c4 0520 	rsb	r5, r4, #32
 80a3368:	fa00 f305 	lsl.w	r3, r0, r5
 80a336c:	fa20 f004 	lsr.w	r0, r0, r4
 80a3370:	fa01 f205 	lsl.w	r2, r1, r5
 80a3374:	ea40 0002 	orr.w	r0, r0, r2
 80a3378:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a337c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3384:	fa21 f604 	lsr.w	r6, r1, r4
 80a3388:	eb42 0106 	adc.w	r1, r2, r6
 80a338c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3390:	bf08      	it	eq
 80a3392:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3396:	bd70      	pop	{r4, r5, r6, pc}
 80a3398:	f1c4 040c 	rsb	r4, r4, #12
 80a339c:	f1c4 0520 	rsb	r5, r4, #32
 80a33a0:	fa00 f304 	lsl.w	r3, r0, r4
 80a33a4:	fa20 f005 	lsr.w	r0, r0, r5
 80a33a8:	fa01 f204 	lsl.w	r2, r1, r4
 80a33ac:	ea40 0002 	orr.w	r0, r0, r2
 80a33b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a33b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a33b8:	f141 0100 	adc.w	r1, r1, #0
 80a33bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a33c0:	bf08      	it	eq
 80a33c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a33c6:	bd70      	pop	{r4, r5, r6, pc}
 80a33c8:	f1c4 0520 	rsb	r5, r4, #32
 80a33cc:	fa00 f205 	lsl.w	r2, r0, r5
 80a33d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a33d4:	fa20 f304 	lsr.w	r3, r0, r4
 80a33d8:	fa01 f205 	lsl.w	r2, r1, r5
 80a33dc:	ea43 0302 	orr.w	r3, r3, r2
 80a33e0:	fa21 f004 	lsr.w	r0, r1, r4
 80a33e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a33e8:	fa21 f204 	lsr.w	r2, r1, r4
 80a33ec:	ea20 0002 	bic.w	r0, r0, r2
 80a33f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a33f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a33f8:	bf08      	it	eq
 80a33fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a33fe:	bd70      	pop	{r4, r5, r6, pc}
 80a3400:	f094 0f00 	teq	r4, #0
 80a3404:	d10f      	bne.n	80a3426 <__aeabi_dmul+0x1c2>
 80a3406:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a340a:	0040      	lsls	r0, r0, #1
 80a340c:	eb41 0101 	adc.w	r1, r1, r1
 80a3410:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3414:	bf08      	it	eq
 80a3416:	3c01      	subeq	r4, #1
 80a3418:	d0f7      	beq.n	80a340a <__aeabi_dmul+0x1a6>
 80a341a:	ea41 0106 	orr.w	r1, r1, r6
 80a341e:	f095 0f00 	teq	r5, #0
 80a3422:	bf18      	it	ne
 80a3424:	4770      	bxne	lr
 80a3426:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a342a:	0052      	lsls	r2, r2, #1
 80a342c:	eb43 0303 	adc.w	r3, r3, r3
 80a3430:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3434:	bf08      	it	eq
 80a3436:	3d01      	subeq	r5, #1
 80a3438:	d0f7      	beq.n	80a342a <__aeabi_dmul+0x1c6>
 80a343a:	ea43 0306 	orr.w	r3, r3, r6
 80a343e:	4770      	bx	lr
 80a3440:	ea94 0f0c 	teq	r4, ip
 80a3444:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3448:	bf18      	it	ne
 80a344a:	ea95 0f0c 	teqne	r5, ip
 80a344e:	d00c      	beq.n	80a346a <__aeabi_dmul+0x206>
 80a3450:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3454:	bf18      	it	ne
 80a3456:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a345a:	d1d1      	bne.n	80a3400 <__aeabi_dmul+0x19c>
 80a345c:	ea81 0103 	eor.w	r1, r1, r3
 80a3460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3464:	f04f 0000 	mov.w	r0, #0
 80a3468:	bd70      	pop	{r4, r5, r6, pc}
 80a346a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a346e:	bf06      	itte	eq
 80a3470:	4610      	moveq	r0, r2
 80a3472:	4619      	moveq	r1, r3
 80a3474:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3478:	d019      	beq.n	80a34ae <__aeabi_dmul+0x24a>
 80a347a:	ea94 0f0c 	teq	r4, ip
 80a347e:	d102      	bne.n	80a3486 <__aeabi_dmul+0x222>
 80a3480:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3484:	d113      	bne.n	80a34ae <__aeabi_dmul+0x24a>
 80a3486:	ea95 0f0c 	teq	r5, ip
 80a348a:	d105      	bne.n	80a3498 <__aeabi_dmul+0x234>
 80a348c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3490:	bf1c      	itt	ne
 80a3492:	4610      	movne	r0, r2
 80a3494:	4619      	movne	r1, r3
 80a3496:	d10a      	bne.n	80a34ae <__aeabi_dmul+0x24a>
 80a3498:	ea81 0103 	eor.w	r1, r1, r3
 80a349c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a34a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a34a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a34a8:	f04f 0000 	mov.w	r0, #0
 80a34ac:	bd70      	pop	{r4, r5, r6, pc}
 80a34ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a34b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a34b6:	bd70      	pop	{r4, r5, r6, pc}

080a34b8 <__aeabi_ddiv>:
 80a34b8:	b570      	push	{r4, r5, r6, lr}
 80a34ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a34be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a34c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a34c6:	bf1d      	ittte	ne
 80a34c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a34cc:	ea94 0f0c 	teqne	r4, ip
 80a34d0:	ea95 0f0c 	teqne	r5, ip
 80a34d4:	f000 f8a7 	bleq	80a3626 <__aeabi_ddiv+0x16e>
 80a34d8:	eba4 0405 	sub.w	r4, r4, r5
 80a34dc:	ea81 0e03 	eor.w	lr, r1, r3
 80a34e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a34e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a34e8:	f000 8088 	beq.w	80a35fc <__aeabi_ddiv+0x144>
 80a34ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a34f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a34f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a34f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a34fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3500:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3504:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3508:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a350c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3510:	429d      	cmp	r5, r3
 80a3512:	bf08      	it	eq
 80a3514:	4296      	cmpeq	r6, r2
 80a3516:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a351a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a351e:	d202      	bcs.n	80a3526 <__aeabi_ddiv+0x6e>
 80a3520:	085b      	lsrs	r3, r3, #1
 80a3522:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3526:	1ab6      	subs	r6, r6, r2
 80a3528:	eb65 0503 	sbc.w	r5, r5, r3
 80a352c:	085b      	lsrs	r3, r3, #1
 80a352e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3532:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3536:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a353a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a353e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3542:	bf22      	ittt	cs
 80a3544:	1ab6      	subcs	r6, r6, r2
 80a3546:	4675      	movcs	r5, lr
 80a3548:	ea40 000c 	orrcs.w	r0, r0, ip
 80a354c:	085b      	lsrs	r3, r3, #1
 80a354e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3552:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3556:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a355a:	bf22      	ittt	cs
 80a355c:	1ab6      	subcs	r6, r6, r2
 80a355e:	4675      	movcs	r5, lr
 80a3560:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3564:	085b      	lsrs	r3, r3, #1
 80a3566:	ea4f 0232 	mov.w	r2, r2, rrx
 80a356a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a356e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3572:	bf22      	ittt	cs
 80a3574:	1ab6      	subcs	r6, r6, r2
 80a3576:	4675      	movcs	r5, lr
 80a3578:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a357c:	085b      	lsrs	r3, r3, #1
 80a357e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3582:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3586:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a358a:	bf22      	ittt	cs
 80a358c:	1ab6      	subcs	r6, r6, r2
 80a358e:	4675      	movcs	r5, lr
 80a3590:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3594:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3598:	d018      	beq.n	80a35cc <__aeabi_ddiv+0x114>
 80a359a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a359e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a35a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a35a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a35aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a35ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a35b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a35b6:	d1c0      	bne.n	80a353a <__aeabi_ddiv+0x82>
 80a35b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a35bc:	d10b      	bne.n	80a35d6 <__aeabi_ddiv+0x11e>
 80a35be:	ea41 0100 	orr.w	r1, r1, r0
 80a35c2:	f04f 0000 	mov.w	r0, #0
 80a35c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a35ca:	e7b6      	b.n	80a353a <__aeabi_ddiv+0x82>
 80a35cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a35d0:	bf04      	itt	eq
 80a35d2:	4301      	orreq	r1, r0
 80a35d4:	2000      	moveq	r0, #0
 80a35d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a35da:	bf88      	it	hi
 80a35dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a35e0:	f63f aeaf 	bhi.w	80a3342 <__aeabi_dmul+0xde>
 80a35e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a35e8:	bf04      	itt	eq
 80a35ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a35ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a35f2:	f150 0000 	adcs.w	r0, r0, #0
 80a35f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a35fa:	bd70      	pop	{r4, r5, r6, pc}
 80a35fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3600:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3604:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3608:	bfc2      	ittt	gt
 80a360a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a360e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3612:	bd70      	popgt	{r4, r5, r6, pc}
 80a3614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3618:	f04f 0e00 	mov.w	lr, #0
 80a361c:	3c01      	subs	r4, #1
 80a361e:	e690      	b.n	80a3342 <__aeabi_dmul+0xde>
 80a3620:	ea45 0e06 	orr.w	lr, r5, r6
 80a3624:	e68d      	b.n	80a3342 <__aeabi_dmul+0xde>
 80a3626:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a362a:	ea94 0f0c 	teq	r4, ip
 80a362e:	bf08      	it	eq
 80a3630:	ea95 0f0c 	teqeq	r5, ip
 80a3634:	f43f af3b 	beq.w	80a34ae <__aeabi_dmul+0x24a>
 80a3638:	ea94 0f0c 	teq	r4, ip
 80a363c:	d10a      	bne.n	80a3654 <__aeabi_ddiv+0x19c>
 80a363e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3642:	f47f af34 	bne.w	80a34ae <__aeabi_dmul+0x24a>
 80a3646:	ea95 0f0c 	teq	r5, ip
 80a364a:	f47f af25 	bne.w	80a3498 <__aeabi_dmul+0x234>
 80a364e:	4610      	mov	r0, r2
 80a3650:	4619      	mov	r1, r3
 80a3652:	e72c      	b.n	80a34ae <__aeabi_dmul+0x24a>
 80a3654:	ea95 0f0c 	teq	r5, ip
 80a3658:	d106      	bne.n	80a3668 <__aeabi_ddiv+0x1b0>
 80a365a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a365e:	f43f aefd 	beq.w	80a345c <__aeabi_dmul+0x1f8>
 80a3662:	4610      	mov	r0, r2
 80a3664:	4619      	mov	r1, r3
 80a3666:	e722      	b.n	80a34ae <__aeabi_dmul+0x24a>
 80a3668:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a366c:	bf18      	it	ne
 80a366e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3672:	f47f aec5 	bne.w	80a3400 <__aeabi_dmul+0x19c>
 80a3676:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a367a:	f47f af0d 	bne.w	80a3498 <__aeabi_dmul+0x234>
 80a367e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a3682:	f47f aeeb 	bne.w	80a345c <__aeabi_dmul+0x1f8>
 80a3686:	e712      	b.n	80a34ae <__aeabi_dmul+0x24a>

080a3688 <__gedf2>:
 80a3688:	f04f 3cff 	mov.w	ip, #4294967295
 80a368c:	e006      	b.n	80a369c <__cmpdf2+0x4>
 80a368e:	bf00      	nop

080a3690 <__ledf2>:
 80a3690:	f04f 0c01 	mov.w	ip, #1
 80a3694:	e002      	b.n	80a369c <__cmpdf2+0x4>
 80a3696:	bf00      	nop

080a3698 <__cmpdf2>:
 80a3698:	f04f 0c01 	mov.w	ip, #1
 80a369c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a36a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a36a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a36a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a36ac:	bf18      	it	ne
 80a36ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a36b2:	d01b      	beq.n	80a36ec <__cmpdf2+0x54>
 80a36b4:	b001      	add	sp, #4
 80a36b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a36ba:	bf0c      	ite	eq
 80a36bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a36c0:	ea91 0f03 	teqne	r1, r3
 80a36c4:	bf02      	ittt	eq
 80a36c6:	ea90 0f02 	teqeq	r0, r2
 80a36ca:	2000      	moveq	r0, #0
 80a36cc:	4770      	bxeq	lr
 80a36ce:	f110 0f00 	cmn.w	r0, #0
 80a36d2:	ea91 0f03 	teq	r1, r3
 80a36d6:	bf58      	it	pl
 80a36d8:	4299      	cmppl	r1, r3
 80a36da:	bf08      	it	eq
 80a36dc:	4290      	cmpeq	r0, r2
 80a36de:	bf2c      	ite	cs
 80a36e0:	17d8      	asrcs	r0, r3, #31
 80a36e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a36e6:	f040 0001 	orr.w	r0, r0, #1
 80a36ea:	4770      	bx	lr
 80a36ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a36f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a36f4:	d102      	bne.n	80a36fc <__cmpdf2+0x64>
 80a36f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a36fa:	d107      	bne.n	80a370c <__cmpdf2+0x74>
 80a36fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3700:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3704:	d1d6      	bne.n	80a36b4 <__cmpdf2+0x1c>
 80a3706:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a370a:	d0d3      	beq.n	80a36b4 <__cmpdf2+0x1c>
 80a370c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3710:	4770      	bx	lr
 80a3712:	bf00      	nop

080a3714 <__aeabi_cdrcmple>:
 80a3714:	4684      	mov	ip, r0
 80a3716:	4610      	mov	r0, r2
 80a3718:	4662      	mov	r2, ip
 80a371a:	468c      	mov	ip, r1
 80a371c:	4619      	mov	r1, r3
 80a371e:	4663      	mov	r3, ip
 80a3720:	e000      	b.n	80a3724 <__aeabi_cdcmpeq>
 80a3722:	bf00      	nop

080a3724 <__aeabi_cdcmpeq>:
 80a3724:	b501      	push	{r0, lr}
 80a3726:	f7ff ffb7 	bl	80a3698 <__cmpdf2>
 80a372a:	2800      	cmp	r0, #0
 80a372c:	bf48      	it	mi
 80a372e:	f110 0f00 	cmnmi.w	r0, #0
 80a3732:	bd01      	pop	{r0, pc}

080a3734 <__aeabi_dcmpeq>:
 80a3734:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3738:	f7ff fff4 	bl	80a3724 <__aeabi_cdcmpeq>
 80a373c:	bf0c      	ite	eq
 80a373e:	2001      	moveq	r0, #1
 80a3740:	2000      	movne	r0, #0
 80a3742:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3746:	bf00      	nop

080a3748 <__aeabi_dcmplt>:
 80a3748:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a374c:	f7ff ffea 	bl	80a3724 <__aeabi_cdcmpeq>
 80a3750:	bf34      	ite	cc
 80a3752:	2001      	movcc	r0, #1
 80a3754:	2000      	movcs	r0, #0
 80a3756:	f85d fb08 	ldr.w	pc, [sp], #8
 80a375a:	bf00      	nop

080a375c <__aeabi_dcmple>:
 80a375c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3760:	f7ff ffe0 	bl	80a3724 <__aeabi_cdcmpeq>
 80a3764:	bf94      	ite	ls
 80a3766:	2001      	movls	r0, #1
 80a3768:	2000      	movhi	r0, #0
 80a376a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a376e:	bf00      	nop

080a3770 <__aeabi_dcmpge>:
 80a3770:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3774:	f7ff ffce 	bl	80a3714 <__aeabi_cdrcmple>
 80a3778:	bf94      	ite	ls
 80a377a:	2001      	movls	r0, #1
 80a377c:	2000      	movhi	r0, #0
 80a377e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3782:	bf00      	nop

080a3784 <__aeabi_dcmpgt>:
 80a3784:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3788:	f7ff ffc4 	bl	80a3714 <__aeabi_cdrcmple>
 80a378c:	bf34      	ite	cc
 80a378e:	2001      	movcc	r0, #1
 80a3790:	2000      	movcs	r0, #0
 80a3792:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3796:	bf00      	nop

080a3798 <__aeabi_d2iz>:
 80a3798:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a379c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a37a0:	d215      	bcs.n	80a37ce <__aeabi_d2iz+0x36>
 80a37a2:	d511      	bpl.n	80a37c8 <__aeabi_d2iz+0x30>
 80a37a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a37a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a37ac:	d912      	bls.n	80a37d4 <__aeabi_d2iz+0x3c>
 80a37ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a37b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a37b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a37ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a37be:	fa23 f002 	lsr.w	r0, r3, r2
 80a37c2:	bf18      	it	ne
 80a37c4:	4240      	negne	r0, r0
 80a37c6:	4770      	bx	lr
 80a37c8:	f04f 0000 	mov.w	r0, #0
 80a37cc:	4770      	bx	lr
 80a37ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a37d2:	d105      	bne.n	80a37e0 <__aeabi_d2iz+0x48>
 80a37d4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a37d8:	bf08      	it	eq
 80a37da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a37de:	4770      	bx	lr
 80a37e0:	f04f 0000 	mov.w	r0, #0
 80a37e4:	4770      	bx	lr
 80a37e6:	bf00      	nop

080a37e8 <__aeabi_d2uiz>:
 80a37e8:	004a      	lsls	r2, r1, #1
 80a37ea:	d211      	bcs.n	80a3810 <__aeabi_d2uiz+0x28>
 80a37ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a37f0:	d211      	bcs.n	80a3816 <__aeabi_d2uiz+0x2e>
 80a37f2:	d50d      	bpl.n	80a3810 <__aeabi_d2uiz+0x28>
 80a37f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a37f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a37fc:	d40e      	bmi.n	80a381c <__aeabi_d2uiz+0x34>
 80a37fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3802:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3806:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a380a:	fa23 f002 	lsr.w	r0, r3, r2
 80a380e:	4770      	bx	lr
 80a3810:	f04f 0000 	mov.w	r0, #0
 80a3814:	4770      	bx	lr
 80a3816:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a381a:	d102      	bne.n	80a3822 <__aeabi_d2uiz+0x3a>
 80a381c:	f04f 30ff 	mov.w	r0, #4294967295
 80a3820:	4770      	bx	lr
 80a3822:	f04f 0000 	mov.w	r0, #0
 80a3826:	4770      	bx	lr

080a3828 <__aeabi_d2f>:
 80a3828:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a382c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a3830:	bf24      	itt	cs
 80a3832:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a3836:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a383a:	d90d      	bls.n	80a3858 <__aeabi_d2f+0x30>
 80a383c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3840:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a3844:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a3848:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a384c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a3850:	bf08      	it	eq
 80a3852:	f020 0001 	biceq.w	r0, r0, #1
 80a3856:	4770      	bx	lr
 80a3858:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a385c:	d121      	bne.n	80a38a2 <__aeabi_d2f+0x7a>
 80a385e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a3862:	bfbc      	itt	lt
 80a3864:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a3868:	4770      	bxlt	lr
 80a386a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a386e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a3872:	f1c2 0218 	rsb	r2, r2, #24
 80a3876:	f1c2 0c20 	rsb	ip, r2, #32
 80a387a:	fa10 f30c 	lsls.w	r3, r0, ip
 80a387e:	fa20 f002 	lsr.w	r0, r0, r2
 80a3882:	bf18      	it	ne
 80a3884:	f040 0001 	orrne.w	r0, r0, #1
 80a3888:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a388c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a3890:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a3894:	ea40 000c 	orr.w	r0, r0, ip
 80a3898:	fa23 f302 	lsr.w	r3, r3, r2
 80a389c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a38a0:	e7cc      	b.n	80a383c <__aeabi_d2f+0x14>
 80a38a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a38a6:	d107      	bne.n	80a38b8 <__aeabi_d2f+0x90>
 80a38a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a38ac:	bf1e      	ittt	ne
 80a38ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a38b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a38b6:	4770      	bxne	lr
 80a38b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a38bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a38c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a38c4:	4770      	bx	lr
 80a38c6:	bf00      	nop

080a38c8 <__aeabi_frsub>:
 80a38c8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a38cc:	e002      	b.n	80a38d4 <__addsf3>
 80a38ce:	bf00      	nop

080a38d0 <__aeabi_fsub>:
 80a38d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a38d4 <__addsf3>:
 80a38d4:	0042      	lsls	r2, r0, #1
 80a38d6:	bf1f      	itttt	ne
 80a38d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a38dc:	ea92 0f03 	teqne	r2, r3
 80a38e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a38e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a38e8:	d06a      	beq.n	80a39c0 <__addsf3+0xec>
 80a38ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a38ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a38f2:	bfc1      	itttt	gt
 80a38f4:	18d2      	addgt	r2, r2, r3
 80a38f6:	4041      	eorgt	r1, r0
 80a38f8:	4048      	eorgt	r0, r1
 80a38fa:	4041      	eorgt	r1, r0
 80a38fc:	bfb8      	it	lt
 80a38fe:	425b      	neglt	r3, r3
 80a3900:	2b19      	cmp	r3, #25
 80a3902:	bf88      	it	hi
 80a3904:	4770      	bxhi	lr
 80a3906:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a390a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a390e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3912:	bf18      	it	ne
 80a3914:	4240      	negne	r0, r0
 80a3916:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a391a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a391e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3922:	bf18      	it	ne
 80a3924:	4249      	negne	r1, r1
 80a3926:	ea92 0f03 	teq	r2, r3
 80a392a:	d03f      	beq.n	80a39ac <__addsf3+0xd8>
 80a392c:	f1a2 0201 	sub.w	r2, r2, #1
 80a3930:	fa41 fc03 	asr.w	ip, r1, r3
 80a3934:	eb10 000c 	adds.w	r0, r0, ip
 80a3938:	f1c3 0320 	rsb	r3, r3, #32
 80a393c:	fa01 f103 	lsl.w	r1, r1, r3
 80a3940:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3944:	d502      	bpl.n	80a394c <__addsf3+0x78>
 80a3946:	4249      	negs	r1, r1
 80a3948:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a394c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3950:	d313      	bcc.n	80a397a <__addsf3+0xa6>
 80a3952:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a3956:	d306      	bcc.n	80a3966 <__addsf3+0x92>
 80a3958:	0840      	lsrs	r0, r0, #1
 80a395a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a395e:	f102 0201 	add.w	r2, r2, #1
 80a3962:	2afe      	cmp	r2, #254	; 0xfe
 80a3964:	d251      	bcs.n	80a3a0a <__addsf3+0x136>
 80a3966:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a396a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a396e:	bf08      	it	eq
 80a3970:	f020 0001 	biceq.w	r0, r0, #1
 80a3974:	ea40 0003 	orr.w	r0, r0, r3
 80a3978:	4770      	bx	lr
 80a397a:	0049      	lsls	r1, r1, #1
 80a397c:	eb40 0000 	adc.w	r0, r0, r0
 80a3980:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a3984:	f1a2 0201 	sub.w	r2, r2, #1
 80a3988:	d1ed      	bne.n	80a3966 <__addsf3+0x92>
 80a398a:	fab0 fc80 	clz	ip, r0
 80a398e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a3992:	ebb2 020c 	subs.w	r2, r2, ip
 80a3996:	fa00 f00c 	lsl.w	r0, r0, ip
 80a399a:	bfaa      	itet	ge
 80a399c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a39a0:	4252      	neglt	r2, r2
 80a39a2:	4318      	orrge	r0, r3
 80a39a4:	bfbc      	itt	lt
 80a39a6:	40d0      	lsrlt	r0, r2
 80a39a8:	4318      	orrlt	r0, r3
 80a39aa:	4770      	bx	lr
 80a39ac:	f092 0f00 	teq	r2, #0
 80a39b0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a39b4:	bf06      	itte	eq
 80a39b6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a39ba:	3201      	addeq	r2, #1
 80a39bc:	3b01      	subne	r3, #1
 80a39be:	e7b5      	b.n	80a392c <__addsf3+0x58>
 80a39c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a39c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a39c8:	bf18      	it	ne
 80a39ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a39ce:	d021      	beq.n	80a3a14 <__addsf3+0x140>
 80a39d0:	ea92 0f03 	teq	r2, r3
 80a39d4:	d004      	beq.n	80a39e0 <__addsf3+0x10c>
 80a39d6:	f092 0f00 	teq	r2, #0
 80a39da:	bf08      	it	eq
 80a39dc:	4608      	moveq	r0, r1
 80a39de:	4770      	bx	lr
 80a39e0:	ea90 0f01 	teq	r0, r1
 80a39e4:	bf1c      	itt	ne
 80a39e6:	2000      	movne	r0, #0
 80a39e8:	4770      	bxne	lr
 80a39ea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a39ee:	d104      	bne.n	80a39fa <__addsf3+0x126>
 80a39f0:	0040      	lsls	r0, r0, #1
 80a39f2:	bf28      	it	cs
 80a39f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a39f8:	4770      	bx	lr
 80a39fa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a39fe:	bf3c      	itt	cc
 80a3a00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3a04:	4770      	bxcc	lr
 80a3a06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3a0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3a12:	4770      	bx	lr
 80a3a14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3a18:	bf16      	itet	ne
 80a3a1a:	4608      	movne	r0, r1
 80a3a1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3a20:	4601      	movne	r1, r0
 80a3a22:	0242      	lsls	r2, r0, #9
 80a3a24:	bf06      	itte	eq
 80a3a26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a3a2a:	ea90 0f01 	teqeq	r0, r1
 80a3a2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3a32:	4770      	bx	lr

080a3a34 <__aeabi_ui2f>:
 80a3a34:	f04f 0300 	mov.w	r3, #0
 80a3a38:	e004      	b.n	80a3a44 <__aeabi_i2f+0x8>
 80a3a3a:	bf00      	nop

080a3a3c <__aeabi_i2f>:
 80a3a3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3a40:	bf48      	it	mi
 80a3a42:	4240      	negmi	r0, r0
 80a3a44:	ea5f 0c00 	movs.w	ip, r0
 80a3a48:	bf08      	it	eq
 80a3a4a:	4770      	bxeq	lr
 80a3a4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3a50:	4601      	mov	r1, r0
 80a3a52:	f04f 0000 	mov.w	r0, #0
 80a3a56:	e01c      	b.n	80a3a92 <__aeabi_l2f+0x2a>

080a3a58 <__aeabi_ul2f>:
 80a3a58:	ea50 0201 	orrs.w	r2, r0, r1
 80a3a5c:	bf08      	it	eq
 80a3a5e:	4770      	bxeq	lr
 80a3a60:	f04f 0300 	mov.w	r3, #0
 80a3a64:	e00a      	b.n	80a3a7c <__aeabi_l2f+0x14>
 80a3a66:	bf00      	nop

080a3a68 <__aeabi_l2f>:
 80a3a68:	ea50 0201 	orrs.w	r2, r0, r1
 80a3a6c:	bf08      	it	eq
 80a3a6e:	4770      	bxeq	lr
 80a3a70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3a74:	d502      	bpl.n	80a3a7c <__aeabi_l2f+0x14>
 80a3a76:	4240      	negs	r0, r0
 80a3a78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3a7c:	ea5f 0c01 	movs.w	ip, r1
 80a3a80:	bf02      	ittt	eq
 80a3a82:	4684      	moveq	ip, r0
 80a3a84:	4601      	moveq	r1, r0
 80a3a86:	2000      	moveq	r0, #0
 80a3a88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3a8c:	bf08      	it	eq
 80a3a8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a3a92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a3a96:	fabc f28c 	clz	r2, ip
 80a3a9a:	3a08      	subs	r2, #8
 80a3a9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a3aa0:	db10      	blt.n	80a3ac4 <__aeabi_l2f+0x5c>
 80a3aa2:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3aa6:	4463      	add	r3, ip
 80a3aa8:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3aac:	f1c2 0220 	rsb	r2, r2, #32
 80a3ab0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3ab4:	fa20 f202 	lsr.w	r2, r0, r2
 80a3ab8:	eb43 0002 	adc.w	r0, r3, r2
 80a3abc:	bf08      	it	eq
 80a3abe:	f020 0001 	biceq.w	r0, r0, #1
 80a3ac2:	4770      	bx	lr
 80a3ac4:	f102 0220 	add.w	r2, r2, #32
 80a3ac8:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3acc:	f1c2 0220 	rsb	r2, r2, #32
 80a3ad0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3ad4:	fa21 f202 	lsr.w	r2, r1, r2
 80a3ad8:	eb43 0002 	adc.w	r0, r3, r2
 80a3adc:	bf08      	it	eq
 80a3ade:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3ae2:	4770      	bx	lr

080a3ae4 <__aeabi_fmul>:
 80a3ae4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3ae8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3aec:	bf1e      	ittt	ne
 80a3aee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3af2:	ea92 0f0c 	teqne	r2, ip
 80a3af6:	ea93 0f0c 	teqne	r3, ip
 80a3afa:	d06f      	beq.n	80a3bdc <__aeabi_fmul+0xf8>
 80a3afc:	441a      	add	r2, r3
 80a3afe:	ea80 0c01 	eor.w	ip, r0, r1
 80a3b02:	0240      	lsls	r0, r0, #9
 80a3b04:	bf18      	it	ne
 80a3b06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3b0a:	d01e      	beq.n	80a3b4a <__aeabi_fmul+0x66>
 80a3b0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3b10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3b14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3b18:	fba0 3101 	umull	r3, r1, r0, r1
 80a3b1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3b20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3b24:	bf3e      	ittt	cc
 80a3b26:	0049      	lslcc	r1, r1, #1
 80a3b28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3b2c:	005b      	lslcc	r3, r3, #1
 80a3b2e:	ea40 0001 	orr.w	r0, r0, r1
 80a3b32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a3b36:	2afd      	cmp	r2, #253	; 0xfd
 80a3b38:	d81d      	bhi.n	80a3b76 <__aeabi_fmul+0x92>
 80a3b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3b42:	bf08      	it	eq
 80a3b44:	f020 0001 	biceq.w	r0, r0, #1
 80a3b48:	4770      	bx	lr
 80a3b4a:	f090 0f00 	teq	r0, #0
 80a3b4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3b52:	bf08      	it	eq
 80a3b54:	0249      	lsleq	r1, r1, #9
 80a3b56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3b5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3b5e:	3a7f      	subs	r2, #127	; 0x7f
 80a3b60:	bfc2      	ittt	gt
 80a3b62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3b66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3b6a:	4770      	bxgt	lr
 80a3b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3b70:	f04f 0300 	mov.w	r3, #0
 80a3b74:	3a01      	subs	r2, #1
 80a3b76:	dc5d      	bgt.n	80a3c34 <__aeabi_fmul+0x150>
 80a3b78:	f112 0f19 	cmn.w	r2, #25
 80a3b7c:	bfdc      	itt	le
 80a3b7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a3b82:	4770      	bxle	lr
 80a3b84:	f1c2 0200 	rsb	r2, r2, #0
 80a3b88:	0041      	lsls	r1, r0, #1
 80a3b8a:	fa21 f102 	lsr.w	r1, r1, r2
 80a3b8e:	f1c2 0220 	rsb	r2, r2, #32
 80a3b92:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3b96:	ea5f 0031 	movs.w	r0, r1, rrx
 80a3b9a:	f140 0000 	adc.w	r0, r0, #0
 80a3b9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a3ba2:	bf08      	it	eq
 80a3ba4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3ba8:	4770      	bx	lr
 80a3baa:	f092 0f00 	teq	r2, #0
 80a3bae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3bb2:	bf02      	ittt	eq
 80a3bb4:	0040      	lsleq	r0, r0, #1
 80a3bb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3bba:	3a01      	subeq	r2, #1
 80a3bbc:	d0f9      	beq.n	80a3bb2 <__aeabi_fmul+0xce>
 80a3bbe:	ea40 000c 	orr.w	r0, r0, ip
 80a3bc2:	f093 0f00 	teq	r3, #0
 80a3bc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3bca:	bf02      	ittt	eq
 80a3bcc:	0049      	lsleq	r1, r1, #1
 80a3bce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3bd2:	3b01      	subeq	r3, #1
 80a3bd4:	d0f9      	beq.n	80a3bca <__aeabi_fmul+0xe6>
 80a3bd6:	ea41 010c 	orr.w	r1, r1, ip
 80a3bda:	e78f      	b.n	80a3afc <__aeabi_fmul+0x18>
 80a3bdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3be0:	ea92 0f0c 	teq	r2, ip
 80a3be4:	bf18      	it	ne
 80a3be6:	ea93 0f0c 	teqne	r3, ip
 80a3bea:	d00a      	beq.n	80a3c02 <__aeabi_fmul+0x11e>
 80a3bec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3bf0:	bf18      	it	ne
 80a3bf2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3bf6:	d1d8      	bne.n	80a3baa <__aeabi_fmul+0xc6>
 80a3bf8:	ea80 0001 	eor.w	r0, r0, r1
 80a3bfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3c00:	4770      	bx	lr
 80a3c02:	f090 0f00 	teq	r0, #0
 80a3c06:	bf17      	itett	ne
 80a3c08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a3c0c:	4608      	moveq	r0, r1
 80a3c0e:	f091 0f00 	teqne	r1, #0
 80a3c12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a3c16:	d014      	beq.n	80a3c42 <__aeabi_fmul+0x15e>
 80a3c18:	ea92 0f0c 	teq	r2, ip
 80a3c1c:	d101      	bne.n	80a3c22 <__aeabi_fmul+0x13e>
 80a3c1e:	0242      	lsls	r2, r0, #9
 80a3c20:	d10f      	bne.n	80a3c42 <__aeabi_fmul+0x15e>
 80a3c22:	ea93 0f0c 	teq	r3, ip
 80a3c26:	d103      	bne.n	80a3c30 <__aeabi_fmul+0x14c>
 80a3c28:	024b      	lsls	r3, r1, #9
 80a3c2a:	bf18      	it	ne
 80a3c2c:	4608      	movne	r0, r1
 80a3c2e:	d108      	bne.n	80a3c42 <__aeabi_fmul+0x15e>
 80a3c30:	ea80 0001 	eor.w	r0, r0, r1
 80a3c34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a3c38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3c3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3c40:	4770      	bx	lr
 80a3c42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3c46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a3c4a:	4770      	bx	lr

080a3c4c <__aeabi_fdiv>:
 80a3c4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3c50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3c54:	bf1e      	ittt	ne
 80a3c56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3c5a:	ea92 0f0c 	teqne	r2, ip
 80a3c5e:	ea93 0f0c 	teqne	r3, ip
 80a3c62:	d069      	beq.n	80a3d38 <__aeabi_fdiv+0xec>
 80a3c64:	eba2 0203 	sub.w	r2, r2, r3
 80a3c68:	ea80 0c01 	eor.w	ip, r0, r1
 80a3c6c:	0249      	lsls	r1, r1, #9
 80a3c6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a3c72:	d037      	beq.n	80a3ce4 <__aeabi_fdiv+0x98>
 80a3c74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a3c78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a3c7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a3c80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3c84:	428b      	cmp	r3, r1
 80a3c86:	bf38      	it	cc
 80a3c88:	005b      	lslcc	r3, r3, #1
 80a3c8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a3c8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a3c92:	428b      	cmp	r3, r1
 80a3c94:	bf24      	itt	cs
 80a3c96:	1a5b      	subcs	r3, r3, r1
 80a3c98:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3c9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a3ca0:	bf24      	itt	cs
 80a3ca2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a3ca6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3caa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a3cae:	bf24      	itt	cs
 80a3cb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a3cb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3cb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a3cbc:	bf24      	itt	cs
 80a3cbe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a3cc2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3cc6:	011b      	lsls	r3, r3, #4
 80a3cc8:	bf18      	it	ne
 80a3cca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a3cce:	d1e0      	bne.n	80a3c92 <__aeabi_fdiv+0x46>
 80a3cd0:	2afd      	cmp	r2, #253	; 0xfd
 80a3cd2:	f63f af50 	bhi.w	80a3b76 <__aeabi_fmul+0x92>
 80a3cd6:	428b      	cmp	r3, r1
 80a3cd8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3cdc:	bf08      	it	eq
 80a3cde:	f020 0001 	biceq.w	r0, r0, #1
 80a3ce2:	4770      	bx	lr
 80a3ce4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3ce8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3cec:	327f      	adds	r2, #127	; 0x7f
 80a3cee:	bfc2      	ittt	gt
 80a3cf0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3cf4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3cf8:	4770      	bxgt	lr
 80a3cfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3cfe:	f04f 0300 	mov.w	r3, #0
 80a3d02:	3a01      	subs	r2, #1
 80a3d04:	e737      	b.n	80a3b76 <__aeabi_fmul+0x92>
 80a3d06:	f092 0f00 	teq	r2, #0
 80a3d0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3d0e:	bf02      	ittt	eq
 80a3d10:	0040      	lsleq	r0, r0, #1
 80a3d12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a3d16:	3a01      	subeq	r2, #1
 80a3d18:	d0f9      	beq.n	80a3d0e <__aeabi_fdiv+0xc2>
 80a3d1a:	ea40 000c 	orr.w	r0, r0, ip
 80a3d1e:	f093 0f00 	teq	r3, #0
 80a3d22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3d26:	bf02      	ittt	eq
 80a3d28:	0049      	lsleq	r1, r1, #1
 80a3d2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a3d2e:	3b01      	subeq	r3, #1
 80a3d30:	d0f9      	beq.n	80a3d26 <__aeabi_fdiv+0xda>
 80a3d32:	ea41 010c 	orr.w	r1, r1, ip
 80a3d36:	e795      	b.n	80a3c64 <__aeabi_fdiv+0x18>
 80a3d38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a3d3c:	ea92 0f0c 	teq	r2, ip
 80a3d40:	d108      	bne.n	80a3d54 <__aeabi_fdiv+0x108>
 80a3d42:	0242      	lsls	r2, r0, #9
 80a3d44:	f47f af7d 	bne.w	80a3c42 <__aeabi_fmul+0x15e>
 80a3d48:	ea93 0f0c 	teq	r3, ip
 80a3d4c:	f47f af70 	bne.w	80a3c30 <__aeabi_fmul+0x14c>
 80a3d50:	4608      	mov	r0, r1
 80a3d52:	e776      	b.n	80a3c42 <__aeabi_fmul+0x15e>
 80a3d54:	ea93 0f0c 	teq	r3, ip
 80a3d58:	d104      	bne.n	80a3d64 <__aeabi_fdiv+0x118>
 80a3d5a:	024b      	lsls	r3, r1, #9
 80a3d5c:	f43f af4c 	beq.w	80a3bf8 <__aeabi_fmul+0x114>
 80a3d60:	4608      	mov	r0, r1
 80a3d62:	e76e      	b.n	80a3c42 <__aeabi_fmul+0x15e>
 80a3d64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a3d68:	bf18      	it	ne
 80a3d6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a3d6e:	d1ca      	bne.n	80a3d06 <__aeabi_fdiv+0xba>
 80a3d70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a3d74:	f47f af5c 	bne.w	80a3c30 <__aeabi_fmul+0x14c>
 80a3d78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a3d7c:	f47f af3c 	bne.w	80a3bf8 <__aeabi_fmul+0x114>
 80a3d80:	e75f      	b.n	80a3c42 <__aeabi_fmul+0x15e>
 80a3d82:	bf00      	nop

080a3d84 <__aeabi_uldivmod>:
 80a3d84:	b953      	cbnz	r3, 80a3d9c <__aeabi_uldivmod+0x18>
 80a3d86:	b94a      	cbnz	r2, 80a3d9c <__aeabi_uldivmod+0x18>
 80a3d88:	2900      	cmp	r1, #0
 80a3d8a:	bf08      	it	eq
 80a3d8c:	2800      	cmpeq	r0, #0
 80a3d8e:	bf1c      	itt	ne
 80a3d90:	f04f 31ff 	movne.w	r1, #4294967295
 80a3d94:	f04f 30ff 	movne.w	r0, #4294967295
 80a3d98:	f000 b9a6 	b.w	80a40e8 <__aeabi_idiv0>
 80a3d9c:	f1ad 0c08 	sub.w	ip, sp, #8
 80a3da0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a3da4:	f000 f82a 	bl	80a3dfc <__udivmoddi4>
 80a3da8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a3dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3db0:	b004      	add	sp, #16
 80a3db2:	4770      	bx	lr

080a3db4 <__aeabi_d2ulz>:
 80a3db4:	b5d0      	push	{r4, r6, r7, lr}
 80a3db6:	2200      	movs	r2, #0
 80a3db8:	4b0e      	ldr	r3, [pc, #56]	; (80a3df4 <__aeabi_d2ulz+0x40>)
 80a3dba:	4606      	mov	r6, r0
 80a3dbc:	460f      	mov	r7, r1
 80a3dbe:	f7ff fa51 	bl	80a3264 <__aeabi_dmul>
 80a3dc2:	f7ff fd11 	bl	80a37e8 <__aeabi_d2uiz>
 80a3dc6:	4604      	mov	r4, r0
 80a3dc8:	f7ff f9d6 	bl	80a3178 <__aeabi_ui2d>
 80a3dcc:	2200      	movs	r2, #0
 80a3dce:	4b0a      	ldr	r3, [pc, #40]	; (80a3df8 <__aeabi_d2ulz+0x44>)
 80a3dd0:	f7ff fa48 	bl	80a3264 <__aeabi_dmul>
 80a3dd4:	4602      	mov	r2, r0
 80a3dd6:	460b      	mov	r3, r1
 80a3dd8:	4630      	mov	r0, r6
 80a3dda:	4639      	mov	r1, r7
 80a3ddc:	f7ff f88e 	bl	80a2efc <__aeabi_dsub>
 80a3de0:	f7ff fd02 	bl	80a37e8 <__aeabi_d2uiz>
 80a3de4:	4623      	mov	r3, r4
 80a3de6:	2200      	movs	r2, #0
 80a3de8:	ea42 0200 	orr.w	r2, r2, r0
 80a3dec:	4610      	mov	r0, r2
 80a3dee:	4619      	mov	r1, r3
 80a3df0:	bdd0      	pop	{r4, r6, r7, pc}
 80a3df2:	bf00      	nop
 80a3df4:	3df00000 	.word	0x3df00000
 80a3df8:	41f00000 	.word	0x41f00000

080a3dfc <__udivmoddi4>:
 80a3dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3e00:	468c      	mov	ip, r1
 80a3e02:	460c      	mov	r4, r1
 80a3e04:	4605      	mov	r5, r0
 80a3e06:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a3e08:	2b00      	cmp	r3, #0
 80a3e0a:	d14f      	bne.n	80a3eac <__udivmoddi4+0xb0>
 80a3e0c:	428a      	cmp	r2, r1
 80a3e0e:	4617      	mov	r7, r2
 80a3e10:	d96b      	bls.n	80a3eea <__udivmoddi4+0xee>
 80a3e12:	fab2 fe82 	clz	lr, r2
 80a3e16:	f1be 0f00 	cmp.w	lr, #0
 80a3e1a:	d00b      	beq.n	80a3e34 <__udivmoddi4+0x38>
 80a3e1c:	f1ce 0520 	rsb	r5, lr, #32
 80a3e20:	fa20 f505 	lsr.w	r5, r0, r5
 80a3e24:	fa01 f30e 	lsl.w	r3, r1, lr
 80a3e28:	ea45 0c03 	orr.w	ip, r5, r3
 80a3e2c:	fa02 f70e 	lsl.w	r7, r2, lr
 80a3e30:	fa00 f50e 	lsl.w	r5, r0, lr
 80a3e34:	0c39      	lsrs	r1, r7, #16
 80a3e36:	fbbc f0f1 	udiv	r0, ip, r1
 80a3e3a:	b2ba      	uxth	r2, r7
 80a3e3c:	fb01 c310 	mls	r3, r1, r0, ip
 80a3e40:	fb00 f802 	mul.w	r8, r0, r2
 80a3e44:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a3e48:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a3e4c:	45a0      	cmp	r8, r4
 80a3e4e:	d909      	bls.n	80a3e64 <__udivmoddi4+0x68>
 80a3e50:	19e4      	adds	r4, r4, r7
 80a3e52:	f100 33ff 	add.w	r3, r0, #4294967295
 80a3e56:	f080 8128 	bcs.w	80a40aa <__udivmoddi4+0x2ae>
 80a3e5a:	45a0      	cmp	r8, r4
 80a3e5c:	f240 8125 	bls.w	80a40aa <__udivmoddi4+0x2ae>
 80a3e60:	3802      	subs	r0, #2
 80a3e62:	443c      	add	r4, r7
 80a3e64:	ebc8 0404 	rsb	r4, r8, r4
 80a3e68:	fbb4 f3f1 	udiv	r3, r4, r1
 80a3e6c:	fb01 4c13 	mls	ip, r1, r3, r4
 80a3e70:	fb03 f202 	mul.w	r2, r3, r2
 80a3e74:	b2ac      	uxth	r4, r5
 80a3e76:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a3e7a:	428a      	cmp	r2, r1
 80a3e7c:	d909      	bls.n	80a3e92 <__udivmoddi4+0x96>
 80a3e7e:	19c9      	adds	r1, r1, r7
 80a3e80:	f103 34ff 	add.w	r4, r3, #4294967295
 80a3e84:	f080 810f 	bcs.w	80a40a6 <__udivmoddi4+0x2aa>
 80a3e88:	428a      	cmp	r2, r1
 80a3e8a:	f240 810c 	bls.w	80a40a6 <__udivmoddi4+0x2aa>
 80a3e8e:	3b02      	subs	r3, #2
 80a3e90:	4439      	add	r1, r7
 80a3e92:	1a8a      	subs	r2, r1, r2
 80a3e94:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a3e98:	2100      	movs	r1, #0
 80a3e9a:	2e00      	cmp	r6, #0
 80a3e9c:	d063      	beq.n	80a3f66 <__udivmoddi4+0x16a>
 80a3e9e:	fa22 f20e 	lsr.w	r2, r2, lr
 80a3ea2:	2300      	movs	r3, #0
 80a3ea4:	e886 000c 	stmia.w	r6, {r2, r3}
 80a3ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3eac:	428b      	cmp	r3, r1
 80a3eae:	d907      	bls.n	80a3ec0 <__udivmoddi4+0xc4>
 80a3eb0:	2e00      	cmp	r6, #0
 80a3eb2:	d056      	beq.n	80a3f62 <__udivmoddi4+0x166>
 80a3eb4:	2100      	movs	r1, #0
 80a3eb6:	e886 0011 	stmia.w	r6, {r0, r4}
 80a3eba:	4608      	mov	r0, r1
 80a3ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3ec0:	fab3 f183 	clz	r1, r3
 80a3ec4:	2900      	cmp	r1, #0
 80a3ec6:	f040 8093 	bne.w	80a3ff0 <__udivmoddi4+0x1f4>
 80a3eca:	42a3      	cmp	r3, r4
 80a3ecc:	d302      	bcc.n	80a3ed4 <__udivmoddi4+0xd8>
 80a3ece:	4282      	cmp	r2, r0
 80a3ed0:	f200 80fe 	bhi.w	80a40d0 <__udivmoddi4+0x2d4>
 80a3ed4:	1a85      	subs	r5, r0, r2
 80a3ed6:	eb64 0303 	sbc.w	r3, r4, r3
 80a3eda:	469c      	mov	ip, r3
 80a3edc:	2001      	movs	r0, #1
 80a3ede:	2e00      	cmp	r6, #0
 80a3ee0:	d041      	beq.n	80a3f66 <__udivmoddi4+0x16a>
 80a3ee2:	e886 1020 	stmia.w	r6, {r5, ip}
 80a3ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3eea:	b912      	cbnz	r2, 80a3ef2 <__udivmoddi4+0xf6>
 80a3eec:	2701      	movs	r7, #1
 80a3eee:	fbb7 f7f2 	udiv	r7, r7, r2
 80a3ef2:	fab7 fe87 	clz	lr, r7
 80a3ef6:	f1be 0f00 	cmp.w	lr, #0
 80a3efa:	d136      	bne.n	80a3f6a <__udivmoddi4+0x16e>
 80a3efc:	1be4      	subs	r4, r4, r7
 80a3efe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a3f02:	fa1f f987 	uxth.w	r9, r7
 80a3f06:	2101      	movs	r1, #1
 80a3f08:	fbb4 f3f8 	udiv	r3, r4, r8
 80a3f0c:	fb08 4413 	mls	r4, r8, r3, r4
 80a3f10:	fb09 f203 	mul.w	r2, r9, r3
 80a3f14:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a3f18:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a3f1c:	42a2      	cmp	r2, r4
 80a3f1e:	d907      	bls.n	80a3f30 <__udivmoddi4+0x134>
 80a3f20:	19e4      	adds	r4, r4, r7
 80a3f22:	f103 30ff 	add.w	r0, r3, #4294967295
 80a3f26:	d202      	bcs.n	80a3f2e <__udivmoddi4+0x132>
 80a3f28:	42a2      	cmp	r2, r4
 80a3f2a:	f200 80d3 	bhi.w	80a40d4 <__udivmoddi4+0x2d8>
 80a3f2e:	4603      	mov	r3, r0
 80a3f30:	1aa4      	subs	r4, r4, r2
 80a3f32:	fbb4 f0f8 	udiv	r0, r4, r8
 80a3f36:	fb08 4810 	mls	r8, r8, r0, r4
 80a3f3a:	fb09 f900 	mul.w	r9, r9, r0
 80a3f3e:	b2ac      	uxth	r4, r5
 80a3f40:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a3f44:	4591      	cmp	r9, r2
 80a3f46:	d907      	bls.n	80a3f58 <__udivmoddi4+0x15c>
 80a3f48:	19d2      	adds	r2, r2, r7
 80a3f4a:	f100 34ff 	add.w	r4, r0, #4294967295
 80a3f4e:	d202      	bcs.n	80a3f56 <__udivmoddi4+0x15a>
 80a3f50:	4591      	cmp	r9, r2
 80a3f52:	f200 80ba 	bhi.w	80a40ca <__udivmoddi4+0x2ce>
 80a3f56:	4620      	mov	r0, r4
 80a3f58:	ebc9 0202 	rsb	r2, r9, r2
 80a3f5c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a3f60:	e79b      	b.n	80a3e9a <__udivmoddi4+0x9e>
 80a3f62:	4631      	mov	r1, r6
 80a3f64:	4630      	mov	r0, r6
 80a3f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3f6a:	fa07 f70e 	lsl.w	r7, r7, lr
 80a3f6e:	f1ce 0c20 	rsb	ip, lr, #32
 80a3f72:	fa24 f30c 	lsr.w	r3, r4, ip
 80a3f76:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a3f7a:	fbb3 faf8 	udiv	sl, r3, r8
 80a3f7e:	fa1f f987 	uxth.w	r9, r7
 80a3f82:	fb08 351a 	mls	r5, r8, sl, r3
 80a3f86:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3f8a:	fa04 f40e 	lsl.w	r4, r4, lr
 80a3f8e:	fb0a fb09 	mul.w	fp, sl, r9
 80a3f92:	ea4c 0c04 	orr.w	ip, ip, r4
 80a3f96:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a3f9a:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a3f9e:	459b      	cmp	fp, r3
 80a3fa0:	fa00 f50e 	lsl.w	r5, r0, lr
 80a3fa4:	d90a      	bls.n	80a3fbc <__udivmoddi4+0x1c0>
 80a3fa6:	19db      	adds	r3, r3, r7
 80a3fa8:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a3fac:	f080 808b 	bcs.w	80a40c6 <__udivmoddi4+0x2ca>
 80a3fb0:	459b      	cmp	fp, r3
 80a3fb2:	f240 8088 	bls.w	80a40c6 <__udivmoddi4+0x2ca>
 80a3fb6:	f1aa 0a02 	sub.w	sl, sl, #2
 80a3fba:	443b      	add	r3, r7
 80a3fbc:	ebcb 0303 	rsb	r3, fp, r3
 80a3fc0:	fbb3 f0f8 	udiv	r0, r3, r8
 80a3fc4:	fb08 3310 	mls	r3, r8, r0, r3
 80a3fc8:	fb00 f409 	mul.w	r4, r0, r9
 80a3fcc:	fa1f fc8c 	uxth.w	ip, ip
 80a3fd0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a3fd4:	429c      	cmp	r4, r3
 80a3fd6:	d907      	bls.n	80a3fe8 <__udivmoddi4+0x1ec>
 80a3fd8:	19db      	adds	r3, r3, r7
 80a3fda:	f100 32ff 	add.w	r2, r0, #4294967295
 80a3fde:	d26e      	bcs.n	80a40be <__udivmoddi4+0x2c2>
 80a3fe0:	429c      	cmp	r4, r3
 80a3fe2:	d96c      	bls.n	80a40be <__udivmoddi4+0x2c2>
 80a3fe4:	3802      	subs	r0, #2
 80a3fe6:	443b      	add	r3, r7
 80a3fe8:	1b1c      	subs	r4, r3, r4
 80a3fea:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a3fee:	e78b      	b.n	80a3f08 <__udivmoddi4+0x10c>
 80a3ff0:	f1c1 0e20 	rsb	lr, r1, #32
 80a3ff4:	408b      	lsls	r3, r1
 80a3ff6:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a3ffa:	ea4c 0c03 	orr.w	ip, ip, r3
 80a3ffe:	fa24 f70e 	lsr.w	r7, r4, lr
 80a4002:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a4006:	fbb7 faf9 	udiv	sl, r7, r9
 80a400a:	fa1f f38c 	uxth.w	r3, ip
 80a400e:	fb09 771a 	mls	r7, r9, sl, r7
 80a4012:	fa20 f80e 	lsr.w	r8, r0, lr
 80a4016:	408c      	lsls	r4, r1
 80a4018:	fb0a f503 	mul.w	r5, sl, r3
 80a401c:	ea48 0404 	orr.w	r4, r8, r4
 80a4020:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a4024:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a4028:	42bd      	cmp	r5, r7
 80a402a:	fa02 f201 	lsl.w	r2, r2, r1
 80a402e:	fa00 fb01 	lsl.w	fp, r0, r1
 80a4032:	d909      	bls.n	80a4048 <__udivmoddi4+0x24c>
 80a4034:	eb17 070c 	adds.w	r7, r7, ip
 80a4038:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a403c:	d241      	bcs.n	80a40c2 <__udivmoddi4+0x2c6>
 80a403e:	42bd      	cmp	r5, r7
 80a4040:	d93f      	bls.n	80a40c2 <__udivmoddi4+0x2c6>
 80a4042:	f1aa 0a02 	sub.w	sl, sl, #2
 80a4046:	4467      	add	r7, ip
 80a4048:	1b7f      	subs	r7, r7, r5
 80a404a:	fbb7 f5f9 	udiv	r5, r7, r9
 80a404e:	fb09 7715 	mls	r7, r9, r5, r7
 80a4052:	fb05 f303 	mul.w	r3, r5, r3
 80a4056:	b2a4      	uxth	r4, r4
 80a4058:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a405c:	42bb      	cmp	r3, r7
 80a405e:	d908      	bls.n	80a4072 <__udivmoddi4+0x276>
 80a4060:	eb17 070c 	adds.w	r7, r7, ip
 80a4064:	f105 30ff 	add.w	r0, r5, #4294967295
 80a4068:	d227      	bcs.n	80a40ba <__udivmoddi4+0x2be>
 80a406a:	42bb      	cmp	r3, r7
 80a406c:	d925      	bls.n	80a40ba <__udivmoddi4+0x2be>
 80a406e:	3d02      	subs	r5, #2
 80a4070:	4467      	add	r7, ip
 80a4072:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a4076:	fba0 8902 	umull	r8, r9, r0, r2
 80a407a:	1aff      	subs	r7, r7, r3
 80a407c:	454f      	cmp	r7, r9
 80a407e:	4645      	mov	r5, r8
 80a4080:	464c      	mov	r4, r9
 80a4082:	d314      	bcc.n	80a40ae <__udivmoddi4+0x2b2>
 80a4084:	d029      	beq.n	80a40da <__udivmoddi4+0x2de>
 80a4086:	b366      	cbz	r6, 80a40e2 <__udivmoddi4+0x2e6>
 80a4088:	ebbb 0305 	subs.w	r3, fp, r5
 80a408c:	eb67 0704 	sbc.w	r7, r7, r4
 80a4090:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a4094:	40cb      	lsrs	r3, r1
 80a4096:	40cf      	lsrs	r7, r1
 80a4098:	ea4e 0303 	orr.w	r3, lr, r3
 80a409c:	e886 0088 	stmia.w	r6, {r3, r7}
 80a40a0:	2100      	movs	r1, #0
 80a40a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a40a6:	4623      	mov	r3, r4
 80a40a8:	e6f3      	b.n	80a3e92 <__udivmoddi4+0x96>
 80a40aa:	4618      	mov	r0, r3
 80a40ac:	e6da      	b.n	80a3e64 <__udivmoddi4+0x68>
 80a40ae:	ebb8 0502 	subs.w	r5, r8, r2
 80a40b2:	eb69 040c 	sbc.w	r4, r9, ip
 80a40b6:	3801      	subs	r0, #1
 80a40b8:	e7e5      	b.n	80a4086 <__udivmoddi4+0x28a>
 80a40ba:	4605      	mov	r5, r0
 80a40bc:	e7d9      	b.n	80a4072 <__udivmoddi4+0x276>
 80a40be:	4610      	mov	r0, r2
 80a40c0:	e792      	b.n	80a3fe8 <__udivmoddi4+0x1ec>
 80a40c2:	4682      	mov	sl, r0
 80a40c4:	e7c0      	b.n	80a4048 <__udivmoddi4+0x24c>
 80a40c6:	4692      	mov	sl, r2
 80a40c8:	e778      	b.n	80a3fbc <__udivmoddi4+0x1c0>
 80a40ca:	3802      	subs	r0, #2
 80a40cc:	443a      	add	r2, r7
 80a40ce:	e743      	b.n	80a3f58 <__udivmoddi4+0x15c>
 80a40d0:	4608      	mov	r0, r1
 80a40d2:	e704      	b.n	80a3ede <__udivmoddi4+0xe2>
 80a40d4:	3b02      	subs	r3, #2
 80a40d6:	443c      	add	r4, r7
 80a40d8:	e72a      	b.n	80a3f30 <__udivmoddi4+0x134>
 80a40da:	45c3      	cmp	fp, r8
 80a40dc:	d3e7      	bcc.n	80a40ae <__udivmoddi4+0x2b2>
 80a40de:	463c      	mov	r4, r7
 80a40e0:	e7d1      	b.n	80a4086 <__udivmoddi4+0x28a>
 80a40e2:	4631      	mov	r1, r6
 80a40e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a40e8 <__aeabi_idiv0>:
 80a40e8:	4770      	bx	lr
 80a40ea:	bf00      	nop

080a40ec <atoi>:
 80a40ec:	220a      	movs	r2, #10
 80a40ee:	2100      	movs	r1, #0
 80a40f0:	f000 b93c 	b.w	80a436c <strtol>

080a40f4 <calloc>:
 80a40f4:	4b02      	ldr	r3, [pc, #8]	; (80a4100 <calloc+0xc>)
 80a40f6:	460a      	mov	r2, r1
 80a40f8:	4601      	mov	r1, r0
 80a40fa:	6818      	ldr	r0, [r3, #0]
 80a40fc:	f000 b84d 	b.w	80a419a <_calloc_r>
 80a4100:	20000370 	.word	0x20000370

080a4104 <__cxa_atexit>:
 80a4104:	b510      	push	{r4, lr}
 80a4106:	4c05      	ldr	r4, [pc, #20]	; (80a411c <__cxa_atexit+0x18>)
 80a4108:	4613      	mov	r3, r2
 80a410a:	b12c      	cbz	r4, 80a4118 <__cxa_atexit+0x14>
 80a410c:	460a      	mov	r2, r1
 80a410e:	4601      	mov	r1, r0
 80a4110:	2002      	movs	r0, #2
 80a4112:	f3af 8000 	nop.w
 80a4116:	bd10      	pop	{r4, pc}
 80a4118:	4620      	mov	r0, r4
 80a411a:	bd10      	pop	{r4, pc}
 80a411c:	00000000 	.word	0x00000000

080a4120 <memcmp>:
 80a4120:	b510      	push	{r4, lr}
 80a4122:	3901      	subs	r1, #1
 80a4124:	4402      	add	r2, r0
 80a4126:	4290      	cmp	r0, r2
 80a4128:	d007      	beq.n	80a413a <memcmp+0x1a>
 80a412a:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a412e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a4132:	42a3      	cmp	r3, r4
 80a4134:	d0f7      	beq.n	80a4126 <memcmp+0x6>
 80a4136:	1b18      	subs	r0, r3, r4
 80a4138:	bd10      	pop	{r4, pc}
 80a413a:	2000      	movs	r0, #0
 80a413c:	bd10      	pop	{r4, pc}

080a413e <memcpy>:
 80a413e:	b510      	push	{r4, lr}
 80a4140:	1e43      	subs	r3, r0, #1
 80a4142:	440a      	add	r2, r1
 80a4144:	4291      	cmp	r1, r2
 80a4146:	d004      	beq.n	80a4152 <memcpy+0x14>
 80a4148:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a414c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4150:	e7f8      	b.n	80a4144 <memcpy+0x6>
 80a4152:	bd10      	pop	{r4, pc}

080a4154 <memmove>:
 80a4154:	4288      	cmp	r0, r1
 80a4156:	b510      	push	{r4, lr}
 80a4158:	eb01 0302 	add.w	r3, r1, r2
 80a415c:	d801      	bhi.n	80a4162 <memmove+0xe>
 80a415e:	1e42      	subs	r2, r0, #1
 80a4160:	e00b      	b.n	80a417a <memmove+0x26>
 80a4162:	4298      	cmp	r0, r3
 80a4164:	d2fb      	bcs.n	80a415e <memmove+0xa>
 80a4166:	1881      	adds	r1, r0, r2
 80a4168:	1ad2      	subs	r2, r2, r3
 80a416a:	42d3      	cmn	r3, r2
 80a416c:	d004      	beq.n	80a4178 <memmove+0x24>
 80a416e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a4172:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80a4176:	e7f8      	b.n	80a416a <memmove+0x16>
 80a4178:	bd10      	pop	{r4, pc}
 80a417a:	4299      	cmp	r1, r3
 80a417c:	d004      	beq.n	80a4188 <memmove+0x34>
 80a417e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4182:	f802 4f01 	strb.w	r4, [r2, #1]!
 80a4186:	e7f8      	b.n	80a417a <memmove+0x26>
 80a4188:	bd10      	pop	{r4, pc}

080a418a <memset>:
 80a418a:	4603      	mov	r3, r0
 80a418c:	4402      	add	r2, r0
 80a418e:	4293      	cmp	r3, r2
 80a4190:	d002      	beq.n	80a4198 <memset+0xe>
 80a4192:	f803 1b01 	strb.w	r1, [r3], #1
 80a4196:	e7fa      	b.n	80a418e <memset+0x4>
 80a4198:	4770      	bx	lr

080a419a <_calloc_r>:
 80a419a:	b538      	push	{r3, r4, r5, lr}
 80a419c:	fb02 f401 	mul.w	r4, r2, r1
 80a41a0:	4621      	mov	r1, r4
 80a41a2:	f7fd f919 	bl	80a13d8 <_malloc_r>
 80a41a6:	4605      	mov	r5, r0
 80a41a8:	b118      	cbz	r0, 80a41b2 <_calloc_r+0x18>
 80a41aa:	4622      	mov	r2, r4
 80a41ac:	2100      	movs	r1, #0
 80a41ae:	f7ff ffec 	bl	80a418a <memset>
 80a41b2:	4628      	mov	r0, r5
 80a41b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a41b8 <srand>:
 80a41b8:	b538      	push	{r3, r4, r5, lr}
 80a41ba:	4b12      	ldr	r3, [pc, #72]	; (80a4204 <srand+0x4c>)
 80a41bc:	4605      	mov	r5, r0
 80a41be:	681c      	ldr	r4, [r3, #0]
 80a41c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a41c2:	b9d3      	cbnz	r3, 80a41fa <srand+0x42>
 80a41c4:	2018      	movs	r0, #24
 80a41c6:	f7fd f8e7 	bl	80a1398 <malloc>
 80a41ca:	f243 330e 	movw	r3, #13070	; 0x330e
 80a41ce:	63a0      	str	r0, [r4, #56]	; 0x38
 80a41d0:	8003      	strh	r3, [r0, #0]
 80a41d2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a41d6:	8043      	strh	r3, [r0, #2]
 80a41d8:	f241 2334 	movw	r3, #4660	; 0x1234
 80a41dc:	8083      	strh	r3, [r0, #4]
 80a41de:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a41e2:	80c3      	strh	r3, [r0, #6]
 80a41e4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a41e8:	8103      	strh	r3, [r0, #8]
 80a41ea:	2305      	movs	r3, #5
 80a41ec:	8143      	strh	r3, [r0, #10]
 80a41ee:	230b      	movs	r3, #11
 80a41f0:	8183      	strh	r3, [r0, #12]
 80a41f2:	2201      	movs	r2, #1
 80a41f4:	2300      	movs	r3, #0
 80a41f6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a41fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a41fc:	2200      	movs	r2, #0
 80a41fe:	611d      	str	r5, [r3, #16]
 80a4200:	615a      	str	r2, [r3, #20]
 80a4202:	bd38      	pop	{r3, r4, r5, pc}
 80a4204:	20000370 	.word	0x20000370

080a4208 <strcpy>:
 80a4208:	4603      	mov	r3, r0
 80a420a:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a420e:	f803 2b01 	strb.w	r2, [r3], #1
 80a4212:	2a00      	cmp	r2, #0
 80a4214:	d1f9      	bne.n	80a420a <strcpy+0x2>
 80a4216:	4770      	bx	lr

080a4218 <strdup>:
 80a4218:	4b02      	ldr	r3, [pc, #8]	; (80a4224 <strdup+0xc>)
 80a421a:	4601      	mov	r1, r0
 80a421c:	6818      	ldr	r0, [r3, #0]
 80a421e:	f000 b803 	b.w	80a4228 <_strdup_r>
 80a4222:	bf00      	nop
 80a4224:	20000370 	.word	0x20000370

080a4228 <_strdup_r>:
 80a4228:	b570      	push	{r4, r5, r6, lr}
 80a422a:	4606      	mov	r6, r0
 80a422c:	4608      	mov	r0, r1
 80a422e:	460c      	mov	r4, r1
 80a4230:	f000 f80d 	bl	80a424e <strlen>
 80a4234:	1c45      	adds	r5, r0, #1
 80a4236:	4629      	mov	r1, r5
 80a4238:	4630      	mov	r0, r6
 80a423a:	f7fd f8cd 	bl	80a13d8 <_malloc_r>
 80a423e:	4606      	mov	r6, r0
 80a4240:	b118      	cbz	r0, 80a424a <_strdup_r+0x22>
 80a4242:	462a      	mov	r2, r5
 80a4244:	4621      	mov	r1, r4
 80a4246:	f7ff ff7a 	bl	80a413e <memcpy>
 80a424a:	4630      	mov	r0, r6
 80a424c:	bd70      	pop	{r4, r5, r6, pc}

080a424e <strlen>:
 80a424e:	4603      	mov	r3, r0
 80a4250:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4254:	2a00      	cmp	r2, #0
 80a4256:	d1fb      	bne.n	80a4250 <strlen+0x2>
 80a4258:	1a18      	subs	r0, r3, r0
 80a425a:	3801      	subs	r0, #1
 80a425c:	4770      	bx	lr
	...

080a4260 <_strtol_r>:
 80a4260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4264:	460f      	mov	r7, r1
 80a4266:	4680      	mov	r8, r0
 80a4268:	483f      	ldr	r0, [pc, #252]	; (80a4368 <_strtol_r+0x108>)
 80a426a:	f8d0 9000 	ldr.w	r9, [r0]
 80a426e:	463d      	mov	r5, r7
 80a4270:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a4274:	eb09 0004 	add.w	r0, r9, r4
 80a4278:	7840      	ldrb	r0, [r0, #1]
 80a427a:	f000 0008 	and.w	r0, r0, #8
 80a427e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a4282:	b108      	cbz	r0, 80a4288 <_strtol_r+0x28>
 80a4284:	462f      	mov	r7, r5
 80a4286:	e7f2      	b.n	80a426e <_strtol_r+0xe>
 80a4288:	2c2d      	cmp	r4, #45	; 0x2d
 80a428a:	d103      	bne.n	80a4294 <_strtol_r+0x34>
 80a428c:	1cbd      	adds	r5, r7, #2
 80a428e:	787c      	ldrb	r4, [r7, #1]
 80a4290:	2601      	movs	r6, #1
 80a4292:	e003      	b.n	80a429c <_strtol_r+0x3c>
 80a4294:	2c2b      	cmp	r4, #43	; 0x2b
 80a4296:	bf04      	itt	eq
 80a4298:	787c      	ldrbeq	r4, [r7, #1]
 80a429a:	1cbd      	addeq	r5, r7, #2
 80a429c:	b113      	cbz	r3, 80a42a4 <_strtol_r+0x44>
 80a429e:	2b10      	cmp	r3, #16
 80a42a0:	d10a      	bne.n	80a42b8 <_strtol_r+0x58>
 80a42a2:	e05b      	b.n	80a435c <_strtol_r+0xfc>
 80a42a4:	2c30      	cmp	r4, #48	; 0x30
 80a42a6:	d157      	bne.n	80a4358 <_strtol_r+0xf8>
 80a42a8:	7828      	ldrb	r0, [r5, #0]
 80a42aa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a42ae:	2858      	cmp	r0, #88	; 0x58
 80a42b0:	d14d      	bne.n	80a434e <_strtol_r+0xee>
 80a42b2:	786c      	ldrb	r4, [r5, #1]
 80a42b4:	2310      	movs	r3, #16
 80a42b6:	3502      	adds	r5, #2
 80a42b8:	2e00      	cmp	r6, #0
 80a42ba:	bf14      	ite	ne
 80a42bc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a42c0:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a42c4:	fbbc faf3 	udiv	sl, ip, r3
 80a42c8:	2700      	movs	r7, #0
 80a42ca:	4638      	mov	r0, r7
 80a42cc:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a42d0:	eb09 0e04 	add.w	lr, r9, r4
 80a42d4:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a42d8:	f01e 0f04 	tst.w	lr, #4
 80a42dc:	d001      	beq.n	80a42e2 <_strtol_r+0x82>
 80a42de:	3c30      	subs	r4, #48	; 0x30
 80a42e0:	e00b      	b.n	80a42fa <_strtol_r+0x9a>
 80a42e2:	f01e 0e03 	ands.w	lr, lr, #3
 80a42e6:	d01b      	beq.n	80a4320 <_strtol_r+0xc0>
 80a42e8:	f1be 0f01 	cmp.w	lr, #1
 80a42ec:	bf0c      	ite	eq
 80a42ee:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a42f2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a42f6:	ebce 0404 	rsb	r4, lr, r4
 80a42fa:	42a3      	cmp	r3, r4
 80a42fc:	dd10      	ble.n	80a4320 <_strtol_r+0xc0>
 80a42fe:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a4302:	d00a      	beq.n	80a431a <_strtol_r+0xba>
 80a4304:	4550      	cmp	r0, sl
 80a4306:	d806      	bhi.n	80a4316 <_strtol_r+0xb6>
 80a4308:	d101      	bne.n	80a430e <_strtol_r+0xae>
 80a430a:	4564      	cmp	r4, ip
 80a430c:	dc03      	bgt.n	80a4316 <_strtol_r+0xb6>
 80a430e:	fb03 4000 	mla	r0, r3, r0, r4
 80a4312:	2701      	movs	r7, #1
 80a4314:	e001      	b.n	80a431a <_strtol_r+0xba>
 80a4316:	f04f 37ff 	mov.w	r7, #4294967295
 80a431a:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a431e:	e7d7      	b.n	80a42d0 <_strtol_r+0x70>
 80a4320:	1c7b      	adds	r3, r7, #1
 80a4322:	d10c      	bne.n	80a433e <_strtol_r+0xde>
 80a4324:	2e00      	cmp	r6, #0
 80a4326:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a432a:	bf14      	ite	ne
 80a432c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a4330:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4334:	f8c8 3000 	str.w	r3, [r8]
 80a4338:	b92a      	cbnz	r2, 80a4346 <_strtol_r+0xe6>
 80a433a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a433e:	b106      	cbz	r6, 80a4342 <_strtol_r+0xe2>
 80a4340:	4240      	negs	r0, r0
 80a4342:	b172      	cbz	r2, 80a4362 <_strtol_r+0x102>
 80a4344:	b107      	cbz	r7, 80a4348 <_strtol_r+0xe8>
 80a4346:	1e69      	subs	r1, r5, #1
 80a4348:	6011      	str	r1, [r2, #0]
 80a434a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a434e:	2430      	movs	r4, #48	; 0x30
 80a4350:	2b00      	cmp	r3, #0
 80a4352:	d1b1      	bne.n	80a42b8 <_strtol_r+0x58>
 80a4354:	2308      	movs	r3, #8
 80a4356:	e7af      	b.n	80a42b8 <_strtol_r+0x58>
 80a4358:	230a      	movs	r3, #10
 80a435a:	e7ad      	b.n	80a42b8 <_strtol_r+0x58>
 80a435c:	2c30      	cmp	r4, #48	; 0x30
 80a435e:	d0a3      	beq.n	80a42a8 <_strtol_r+0x48>
 80a4360:	e7aa      	b.n	80a42b8 <_strtol_r+0x58>
 80a4362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4366:	bf00      	nop
 80a4368:	2000030c 	.word	0x2000030c

080a436c <strtol>:
 80a436c:	4613      	mov	r3, r2
 80a436e:	460a      	mov	r2, r1
 80a4370:	4601      	mov	r1, r0
 80a4372:	4802      	ldr	r0, [pc, #8]	; (80a437c <strtol+0x10>)
 80a4374:	6800      	ldr	r0, [r0, #0]
 80a4376:	f7ff bf73 	b.w	80a4260 <_strtol_r>
 80a437a:	bf00      	nop
 80a437c:	20000370 	.word	0x20000370

080a4380 <dynalib_user>:
 80a4380:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a4390:	00000000 7570003d 73696c62 227b0068     ....=.publish.{"
 80a43a0:	706d6574 74617265 5f617275 72726574     temperatura_terr
 80a43b0:	203a2261 75222c00 6964696d 745f6174     a": .,"umidita_t
 80a43c0:	61727265 00203a22 756c222c 6f6e696d     erra": .,"lumino
 80a43d0:	61746973 00203a22 6574222c 7265706d     sita": .,"temper
 80a43e0:	72757461 6d615f61 6e656962 3a226574     atura_ambiente":
 80a43f0:	222c0020 64696d75 5f617469 69626d61      .,"umidita_ambi
 80a4400:	65746e65 00203a22 6d55007d 74696469     ente": .}.Umidit
 80a4410:	5420a0c3 61727265 6d655400 61726570     .. Terra.Tempera
 80a4420:	61727574 72655420 55006172 6964696d     tura Terra.Umidi
 80a4430:	20a0c374 00626d41 706d6554 74617265     t.. Amb.Temperat
 80a4440:	20617275 00626d41 696d754c 69736f6e     ura Amb.Luminosi
 80a4450:	00a0c374 6f6c6156 50206972 696c6275     t...Valori Publi
 80a4460:	53006873 6f736e65 6e206572 74206e6f     sh.Sensore non t
 80a4470:	61766f72 79006f74 6e007365 6e45006f     rovato.yes.no.En
 80a4480:	666f2064 74616220 79726574 4800203a     d of battery: .H
 80a4490:	65746165 6e652072 656c6261 00203a64     eater enabled: .
 80a44a0:	61736944 20656c62 2050544f 6f6c6572     Disable OTP relo
 80a44b0:	203a6461 00000000                       ad: ....

080a44b8 <_ZTV8SPIClass>:
	...
 80a44c0:	080a13e9 080a13eb 6e6c0066 006e6600     ........f.ln.fn.
 80a44d0:	65646f63 74656400 006c6961 25000a0d     code.detail....%
 80a44e0:	75303130 205d0020 00642500 2800202c     010u .] .%d., .(
 80a44f0:	00203a29 63005b20 2065646f 2500203d     ): . [.code = .%
 80a4500:	65640069 6c696174 203d2073 75616200     i.details = .bau
 80a4510:	65530064 6c616972 42535500 69726553     d.Serial.USBSeri
 80a4520:	00316c61 65707974 72617000 63006d61     al1.type.param.c
 80a4530:	6800646d 7300646e 006d7274 746c6966     md.hnd.strm.filt
 80a4540:	6c766c00 64646100 646e6148 0072656c     .lvl.addHandler.
 80a4550:	6f6d6572 61486576 656c646e 6e650072     removeHandler.en
 80a4560:	61486d75 656c646e 4a007372 534e4f53     umHandlers.JSONS
 80a4570:	61657274 676f4c6d 646e6148 0072656c     treamLogHandler.
 80a4580:	00707061 656e6f6e 61727400 69006563     app.none.trace.i
 80a4590:	006f666e 6e726177 72726500 7000726f     nfo.warn.error.p
 80a45a0:	63696e61 6c6c6100 25005a00 6433302b     anic.all.Z.%+03d
 80a45b0:	3230253a 59250075 2d6d252d 25546425     :%02u.%Y-%m-%dT%
 80a45c0:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
 80a45d0:	00000065                                e...

080a45d4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a45dc:	080a19f9 080a19ff 080a1a17 080a1a0d     ................
 80a45ec:	080a19fb                                ....

080a45f0 <_ZTV9IPAddress>:
	...
 80a45f8:	080a1f79 080a1f69 080a1f6b              y...i...k...

080a4604 <_ZTV9USBSerial>:
	...
 80a460c:	080a2035 080a2085 080a2093 080a1719     5 ... ... ......
 80a461c:	080a2071 080a2037 080a204d 080a207f     q ..7 ..M ... ..
 80a462c:	080a2063 080a2031                       c ..1 ..

080a4634 <_ZTV11USARTSerial>:
	...
 80a463c:	080a21d5 080a2225 080a2233 080a1719     .!..%"..3"......
 80a464c:	080a21e9 080a220b 080a21f7 080a221f     .!..."...!..."..
 80a465c:	080a21d7 080a21db                       .!...!..

080a4664 <_ZTV7TwoWire>:
	...
 80a466c:	080a2301 080a234b 080a2323 080a2303     .#..K#..##...#..
 80a467c:	080a232b 080a2333 080a233b 080a2343     +#..3#..;#..C#..

080a468c <_ZTVN5spark9WiFiClassE>:
	...
 80a4694:	080a2465 080a245b 080a2451 080a23cf     e$..[$..Q$...#..
 80a46a4:	080a17f7 080a2445 080a2439 080a2431     ....E$..9$..1$..
 80a46b4:	080a2427 080a241d 080a23d9              '$...$...#..

080a46c0 <_ZTVN5spark12NetworkClassE>:
	...
 80a46c8:	080a2485 080a248f 080a2499 080a24a3     .$...$...$...$..
 80a46d8:	080a24ad 080a24b9 080a24c5 080a24d1     .$...$...$...$..
 80a46e8:	080a24d9 080a24e3 080a24ed 69736162     .$...$...$..basi
 80a46f8:	74735f63 676e6972 4d5f3a3a 6572635f     c_string::_M_cre
 80a4708:	00657461 203a7325 6f705f5f 77282073     ate.%s: __pos (w
 80a4718:	68636968 20736920 29757a25 74203e20     hich is %zu) > t
 80a4728:	2d736968 7a69733e 20292865 69687728     his->size() (whi
 80a4738:	69206863 7a252073 62002975 63697361     ch is %zu).basic
 80a4748:	7274735f 3a676e69 3a74613a 6e5f5f20     _string::at: __n
 80a4758:	68772820 20686369 25207369 2029757a      (which is %zu) 
 80a4768:	74203d3e 2d736968 7a69733e 20292865     >= this->size() 
 80a4778:	69687728 69206863 7a252073 62002975     (which is %zu).b
 80a4788:	63697361 7274735f 3a676e69 6172653a     asic_string::era
 80a4798:	62006573 63697361 7274735f 3a676e69     se.basic_string:
 80a47a8:	5f4d5f3a 6c706572 5f656361 00787561     :_M_replace_aux.
 80a47b8:	69736162 74735f63 676e6972 6e693a3a     basic_string::in
 80a47c8:	74726573 73616200 735f6369 6e697274     sert.basic_strin
 80a47d8:	723a3a67 616c7065 62006563 63697361     g::replace.basic
 80a47e8:	7274735f 3a676e69 5f4d5f3a 6c706572     _string::_M_repl
 80a47f8:	00656361 69736162 74735f63 676e6972     ace.basic_string
 80a4808:	73613a3a 6e676973 73616200 735f6369     ::assign.basic_s
 80a4818:	6e697274 613a3a67 6e657070 61620064     tring::append.ba
 80a4828:	5f636973 69727473 3a3a676e 79706f63     sic_string::copy
 80a4838:	73616200 735f6369 6e697274 633a3a67     .basic_string::c
 80a4848:	61706d6f 62006572 63697361 7274735f     ompare.basic_str
 80a4858:	3a676e69 5f4d5f3a 736e6f63 63757274     ing::_M_construc
 80a4868:	756e2074 6e206c6c 7620746f 64696c61     t null not valid
 80a4878:	73616200 735f6369 6e697274 623a3a67     .basic_string::b
 80a4888:	63697361 7274735f 00676e69 69736162     asic_string.basi
 80a4898:	74735f63 676e6972 75733a3a 72747362     c_string::substr
 80a48a8:	72747300 3a676e69 7274733a 00676e69     .string::string.
 80a48b8:	20746f6e 756f6e65 73206867 65636170     not enough space
 80a48c8:	726f6620 726f6620 2074616d 61707865      for format expa
 80a48d8:	6f69736e 5028206e 7361656c 75732065     nsion (Please su
 80a48e8:	74696d62 6c756620 7562206c 65722067     bmit full bug re
 80a48f8:	74726f70 20746120 70747468 672f2f3a     port at http://g
 80a4908:	672e6363 6f2e756e 622f6772 2e736775     cc.gnu.org/bugs.
 80a4918:	6c6d7468 200a3a29 00202020 58782b2d     html):.    .-+xX
 80a4928:	33323130 37363534 62613938 66656463     0123456789abcdef
 80a4938:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 80a4948:	782b2d00 32313058 36353433 61393837     .-+xX0123456789a
 80a4958:	65646362 43424166 00464544 3231302d     bcdefABCDEF.-012
 80a4968:	36353433 00393837 00544d47 00545348     3456789.GMT.HST.
 80a4978:	54534b41 54535000 54534d00 54534300     AKST.PST.MST.CST
 80a4988:	54534500 54534100 54534e00 54454300     .EST.AST.NST.CET
 80a4998:	54534900 54454500 54534a00 20200000              .IST.EET.JST.

080a49a5 <_ctype_>:
 80a49a5:	20202000 20202020 28282020 20282828     .         ((((( 
 80a49b5:	20202020 20202020 20202020 20202020                     
 80a49c5:	10108820 10101010 10101010 10101010      ...............
 80a49d5:	04040410 04040404 10040404 10101010     ................
 80a49e5:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a49f5:	01010101 01010101 01010101 10101010     ................
 80a4a05:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a4a15:	02020202 02020202 02020202 10101010     ................
 80a4a25:	00000020 00000000 00000000 00000000      ...............
	...

080a4aa8 <__sf_fake_stdin>:
	...

080a4ac8 <__sf_fake_stdout>:
	...

080a4ae8 <__sf_fake_stderr>:
	...
 80a4b08:	00000043                                         C.

080a4b0a <link_const_variable_data_end>:
	...

080a4b0c <link_constructors_location>:
 80a4b0c:	080a0515 	.word	0x080a0515
 80a4b10:	080a07a1 	.word	0x080a07a1
 80a4b14:	080a0943 	.word	0x080a0943
 80a4b18:	080a0c19 	.word	0x080a0c19
 80a4b1c:	080a0d41 	.word	0x080a0d41
 80a4b20:	080a0e59 	.word	0x080a0e59
 80a4b24:	080a0ff9 	.word	0x080a0ff9
 80a4b28:	080a1429 	.word	0x080a1429
 80a4b2c:	080a183d 	.word	0x080a183d
 80a4b30:	080a184d 	.word	0x080a184d
 80a4b34:	080a18a5 	.word	0x080a18a5
 80a4b38:	080a2471 	.word	0x080a2471
 80a4b3c:	080a253d 	.word	0x080a253d
 80a4b40:	080a25ed 	.word	0x080a25ed
 80a4b44:	080a2631 	.word	0x080a2631
 80a4b48:	080a2bc5 	.word	0x080a2bc5
 80a4b4c:	080a2c49 	.word	0x080a2c49
 80a4b50:	080a2dad 	.word	0x080a2dad
 80a4b54:	080a2e71 	.word	0x080a2e71

080a4b58 <link_constructors_end>:
	...
