
c:/IOT/termostato/target/2.0.1/photon/termostato.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000025b4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a25d0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  20000000  080a25d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000530  20000078  20000078  00030078  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a2648  080a2648  00022648  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2670  080a2670  00022670  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00117426  00000000  00000000  00022674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000144c3  00000000  00000000  00139a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000153ca  00000000  00000000  0014df5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001d70  00000000  00000000  00163327  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000044a0  00000000  00000000  00165097  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00027e9a  00000000  00000000  00169537  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002c199  00000000  00000000  001913d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ab5d0  00000000  00000000  001bd56a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004af8  00000000  00000000  00268b3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 f9cb 	bl	80a23c8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 f9d3 	bl	80a23e4 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a25d4 	.word	0x080a25d4
 80a004c:	20000074 	.word	0x20000074
 80a0050:	20000078 	.word	0x20000078
 80a0054:	200005a8 	.word	0x200005a8
 80a0058:	200005a8 	.word	0x200005a8

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fec1 	bl	80a0de4 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a25a8 	.word	0x080a25a8
 80a0080:	080a25c8 	.word	0x080a25c8

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b816 	b.w	80a00b4 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f89f 	bl	80a01cc <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f000 be69 	b.w	80a0d68 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 bd49 	b.w	80a0b2c <malloc>

080a009a <_Znaj>:
 80a009a:	f000 bd47 	b.w	80a0b2c <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 bd4d 	b.w	80a0b3c <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:

double celsius;
uint32_t msLastMetric;
uint32_t msLastSample;

void setup() {
 80a00b4:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  pinMode(D3, INPUT);
 80a00b6:	2100      	movs	r1, #0
 80a00b8:	2003      	movs	r0, #3
 80a00ba:	f001 f9c3 	bl	80a1444 <pinMode>
  pinMode(latchPin, OUTPUT);
 80a00be:	4b11      	ldr	r3, [pc, #68]	; (80a0104 <setup+0x50>)
 80a00c0:	2101      	movs	r1, #1
 80a00c2:	8818      	ldrh	r0, [r3, #0]
 80a00c4:	f001 f9be 	bl	80a1444 <pinMode>
  pinMode(dataPin, OUTPUT);
 80a00c8:	4b0f      	ldr	r3, [pc, #60]	; (80a0108 <setup+0x54>)
 80a00ca:	2101      	movs	r1, #1
 80a00cc:	8818      	ldrh	r0, [r3, #0]
 80a00ce:	f001 f9b9 	bl	80a1444 <pinMode>
  pinMode(clockPin, OUTPUT);
 80a00d2:	4b0e      	ldr	r3, [pc, #56]	; (80a010c <setup+0x58>)
 80a00d4:	2101      	movs	r1, #1
 80a00d6:	8818      	ldrh	r0, [r3, #0]
 80a00d8:	f001 f9b4 	bl	80a1444 <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a00dc:	2300      	movs	r3, #0
 80a00de:	2209      	movs	r2, #9
 80a00e0:	490b      	ldr	r1, [pc, #44]	; (80a0110 <setup+0x5c>)
 80a00e2:	480c      	ldr	r0, [pc, #48]	; (80a0114 <setup+0x60>)
 80a00e4:	f000 fd12 	bl	80a0b0c <spark_variable>
 80a00e8:	2300      	movs	r3, #0
 80a00ea:	490b      	ldr	r1, [pc, #44]	; (80a0118 <setup+0x64>)
 80a00ec:	2202      	movs	r2, #2
 80a00ee:	480b      	ldr	r0, [pc, #44]	; (80a011c <setup+0x68>)
 80a00f0:	f000 fd0c 	bl	80a0b0c <spark_variable>
  Particle.variable("soglia", soglia);
  Particle.variable("bottone", button);
  //Particle.function("setPoint", setPoint);

  Serial.begin(9600);
 80a00f4:	f000 ff76 	bl	80a0fe4 <_Z16_fetch_usbserialv>
}
 80a00f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.begin(9600);
 80a00fc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0100:	f000 bf56 	b.w	80a0fb0 <_ZN9USBSerial5beginEl>
 80a0104:	20000008 	.word	0x20000008
 80a0108:	20000004 	.word	0x20000004
 80a010c:	20000000 	.word	0x20000000
 80a0110:	200000c8 	.word	0x200000c8
 80a0114:	080a2460 	.word	0x080a2460
 80a0118:	20000088 	.word	0x20000088
 80a011c:	080a2467 	.word	0x080a2467

080a0120 <_Z13registerWritev>:
    }
  }

}

void registerWrite() {
 80a0120:	b538      	push	{r3, r4, r5, lr}

    shiftStatus = 8*relay1;
 80a0122:	4b0c      	ldr	r3, [pc, #48]	; (80a0154 <_Z13registerWritev+0x34>)

    digitalWrite(latchPin, LOW);
 80a0124:	4c0c      	ldr	r4, [pc, #48]	; (80a0158 <_Z13registerWritev+0x38>)
    shiftStatus = 8*relay1;
 80a0126:	681b      	ldr	r3, [r3, #0]
 80a0128:	4d0c      	ldr	r5, [pc, #48]	; (80a015c <_Z13registerWritev+0x3c>)
    digitalWrite(latchPin, LOW);
 80a012a:	8820      	ldrh	r0, [r4, #0]
    shiftStatus = 8*relay1;
 80a012c:	00db      	lsls	r3, r3, #3
    digitalWrite(latchPin, LOW);
 80a012e:	2100      	movs	r1, #0
    shiftStatus = 8*relay1;
 80a0130:	602b      	str	r3, [r5, #0]
    digitalWrite(latchPin, LOW);
 80a0132:	f001 f998 	bl	80a1466 <digitalWrite>
    shiftOut(dataPin, clockPin, MSBFIRST, shiftStatus);
 80a0136:	490a      	ldr	r1, [pc, #40]	; (80a0160 <_Z13registerWritev+0x40>)
 80a0138:	480a      	ldr	r0, [pc, #40]	; (80a0164 <_Z13registerWritev+0x44>)
 80a013a:	782b      	ldrb	r3, [r5, #0]
 80a013c:	7809      	ldrb	r1, [r1, #0]
 80a013e:	7800      	ldrb	r0, [r0, #0]
 80a0140:	2201      	movs	r2, #1
 80a0142:	f001 f9a9 	bl	80a1498 <shiftOut>
    digitalWrite(latchPin, HIGH);
 80a0146:	8820      	ldrh	r0, [r4, #0]
 80a0148:	2101      	movs	r1, #1
}
 80a014a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(latchPin, HIGH);
 80a014e:	f001 b98a 	b.w	80a1466 <digitalWrite>
 80a0152:	bf00      	nop
 80a0154:	200000bc 	.word	0x200000bc
 80a0158:	20000008 	.word	0x20000008
 80a015c:	200000c0 	.word	0x200000c0
 80a0160:	20000000 	.word	0x20000000
 80a0164:	20000004 	.word	0x20000004

080a0168 <_Z7getTempv>:

void getTemp(){
 80a0168:	b570      	push	{r4, r5, r6, lr}
  float _temp;
  int   i = 0;
 80a016a:	2400      	movs	r4, #0

  do {
    _temp = ds18b20.getTemperature();
 80a016c:	4e12      	ldr	r6, [pc, #72]	; (80a01b8 <_Z7getTempv+0x50>)
 80a016e:	2100      	movs	r1, #0
 80a0170:	4630      	mov	r0, r6
 80a0172:	f000 fafb 	bl	80a076c <_ZN7DS18B2014getTemperatureEb>
 80a0176:	4605      	mov	r5, r0
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
 80a0178:	4630      	mov	r0, r6
 80a017a:	f000 fb13 	bl	80a07a4 <_ZN7DS18B208crcCheckEv>
 80a017e:	b968      	cbnz	r0, 80a019c <_Z7getTempv+0x34>
 80a0180:	3401      	adds	r4, #1
 80a0182:	2c05      	cmp	r4, #5
 80a0184:	d1f3      	bne.n	80a016e <_Z7getTempv+0x6>

  if (i < MAXRETRY) {
    celsius = _temp;
  }
  else {
    celsius = NAN;
 80a0186:	2000      	movs	r0, #0
 80a0188:	4b0c      	ldr	r3, [pc, #48]	; (80a01bc <_Z7getTempv+0x54>)
 80a018a:	490d      	ldr	r1, [pc, #52]	; (80a01c0 <_Z7getTempv+0x58>)
 80a018c:	e9c3 0100 	strd	r0, r1, [r3]
    Serial.println("Invalid reading");
 80a0190:	f000 ff28 	bl	80a0fe4 <_Z16_fetch_usbserialv>
 80a0194:	490b      	ldr	r1, [pc, #44]	; (80a01c4 <_Z7getTempv+0x5c>)
 80a0196:	f000 fd52 	bl	80a0c3e <_ZN5Print7printlnEPKc>
 80a019a:	e007      	b.n	80a01ac <_Z7getTempv+0x44>
  if (i < MAXRETRY) {
 80a019c:	2c04      	cmp	r4, #4
 80a019e:	d0f2      	beq.n	80a0186 <_Z7getTempv+0x1e>
    celsius = _temp;
 80a01a0:	4628      	mov	r0, r5
 80a01a2:	f001 fb63 	bl	80a186c <__aeabi_f2d>
 80a01a6:	4b05      	ldr	r3, [pc, #20]	; (80a01bc <_Z7getTempv+0x54>)
 80a01a8:	e9c3 0100 	strd	r0, r1, [r3]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a01ac:	f000 fb48 	bl	80a0840 <HAL_Timer_Get_Milli_Seconds>
  }
  msLastSample = millis();
 80a01b0:	4b05      	ldr	r3, [pc, #20]	; (80a01c8 <_Z7getTempv+0x60>)
 80a01b2:	6018      	str	r0, [r3, #0]
}
 80a01b4:	bd70      	pop	{r4, r5, r6, pc}
 80a01b6:	bf00      	nop
 80a01b8:	20000098 	.word	0x20000098
 80a01bc:	20000090 	.word	0x20000090
 80a01c0:	7ff80000 	.word	0x7ff80000
 80a01c4:	080a246f 	.word	0x080a246f
 80a01c8:	200000b8 	.word	0x200000b8

080a01cc <loop>:
void loop() {
 80a01cc:	b510      	push	{r4, lr}
 80a01ce:	f000 fb37 	bl	80a0840 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - msLastSample >= msSAMPLE_INTERVAL){
 80a01d2:	4b12      	ldr	r3, [pc, #72]	; (80a021c <loop+0x50>)
 80a01d4:	681b      	ldr	r3, [r3, #0]
 80a01d6:	1ac0      	subs	r0, r0, r3
 80a01d8:	f241 3387 	movw	r3, #4999	; 0x1387
 80a01dc:	4298      	cmp	r0, r3
 80a01de:	d907      	bls.n	80a01f0 <loop+0x24>
    getTemp();
 80a01e0:	f7ff ffc2 	bl	80a0168 <_Z7getTempv>
    actualTemp = celsius;
 80a01e4:	4b0e      	ldr	r3, [pc, #56]	; (80a0220 <loop+0x54>)
 80a01e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80a01ea:	4b0e      	ldr	r3, [pc, #56]	; (80a0224 <loop+0x58>)
 80a01ec:	e9c3 0100 	strd	r0, r1, [r3]
  if(button == 1){
 80a01f0:	4b0d      	ldr	r3, [pc, #52]	; (80a0228 <loop+0x5c>)
 80a01f2:	681c      	ldr	r4, [r3, #0]
 80a01f4:	2c01      	cmp	r4, #1
 80a01f6:	d110      	bne.n	80a021a <loop+0x4e>
    if(actualTemp < soglia){
 80a01f8:	4b0c      	ldr	r3, [pc, #48]	; (80a022c <loop+0x60>)
 80a01fa:	490a      	ldr	r1, [pc, #40]	; (80a0224 <loop+0x58>)
 80a01fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0200:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0204:	f001 fdfc 	bl	80a1e00 <__aeabi_dcmplt>
 80a0208:	4b09      	ldr	r3, [pc, #36]	; (80a0230 <loop+0x64>)
 80a020a:	b120      	cbz	r0, 80a0216 <loop+0x4a>
      relay1 = 1;
 80a020c:	601c      	str	r4, [r3, #0]
}
 80a020e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      registerWrite();
 80a0212:	f7ff bf85 	b.w	80a0120 <_Z13registerWritev>
      relay1 = 0;
 80a0216:	6018      	str	r0, [r3, #0]
 80a0218:	e7f9      	b.n	80a020e <loop+0x42>
}
 80a021a:	bd10      	pop	{r4, pc}
 80a021c:	200000b8 	.word	0x200000b8
 80a0220:	20000090 	.word	0x20000090
 80a0224:	20000080 	.word	0x20000080
 80a0228:	20000088 	.word	0x20000088
 80a022c:	200000c8 	.word	0x200000c8
 80a0230:	200000bc 	.word	0x200000bc

080a0234 <_GLOBAL__sub_I_button>:

int setPoint(String point){
  soglia = point.toInt();
  return 1;
 80a0234:	b510      	push	{r4, lr}
DS18B20  ds18b20(dsData, true); 
 80a0236:	4c06      	ldr	r4, [pc, #24]	; (80a0250 <_GLOBAL__sub_I_button+0x1c>)
 80a0238:	2201      	movs	r2, #1
 80a023a:	2107      	movs	r1, #7
 80a023c:	4620      	mov	r0, r4
 80a023e:	f000 f99c 	bl	80a057a <_ZN7DS18B20C1Etb>
 80a0242:	4620      	mov	r0, r4
 80a0244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
DS18B20  ds18b20(dsData, true); 
 80a0248:	4a02      	ldr	r2, [pc, #8]	; (80a0254 <_GLOBAL__sub_I_button+0x20>)
 80a024a:	4903      	ldr	r1, [pc, #12]	; (80a0258 <_GLOBAL__sub_I_button+0x24>)
 80a024c:	f001 b9a0 	b.w	80a1590 <__aeabi_atexit>
 80a0250:	20000098 	.word	0x20000098
 80a0254:	20000078 	.word	0x20000078
 80a0258:	080a05db 	.word	0x080a05db

080a025c <_ZN7OneWire19digitalWriteFastLowEv>:
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed

    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a025c:	231c      	movs	r3, #28
 80a025e:	8802      	ldrh	r2, [r0, #0]
 80a0260:	4353      	muls	r3, r2
 80a0262:	6842      	ldr	r2, [r0, #4]
 80a0264:	18d1      	adds	r1, r2, r3
 80a0266:	58d3      	ldr	r3, [r2, r3]
 80a0268:	888a      	ldrh	r2, [r1, #4]
 80a026a:	835a      	strh	r2, [r3, #26]
    }
 80a026c:	4770      	bx	lr

080a026e <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a026e:	b538      	push	{r3, r4, r5, lr}
 80a0270:	4604      	mov	r4, r0
 80a0272:	460d      	mov	r5, r1
 80a0274:	f000 fa9c 	bl	80a07b0 <HAL_Pin_Map>
{
    pinMode(pin, INPUT);
 80a0278:	2100      	movs	r1, #0
OneWire::OneWire(uint16_t pin)
 80a027a:	6060      	str	r0, [r4, #4]
    pinMode(pin, INPUT);
 80a027c:	4628      	mov	r0, r5
 80a027e:	f001 f8e1 	bl	80a1444 <pinMode>
    _pin = pin;
}
 80a0282:	4620      	mov	r0, r4
    _pin = pin;
 80a0284:	8025      	strh	r5, [r4, #0]
}
 80a0286:	bd38      	pop	{r3, r4, r5, pc}

080a0288 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
 80a0288:	b570      	push	{r4, r5, r6, lr}
 80a028a:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
 80a028c:	f000 ff10 	bl	80a10b0 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0290:	2100      	movs	r1, #0
 80a0292:	8828      	ldrh	r0, [r5, #0]
 80a0294:	f000 fa94 	bl	80a07c0 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
 80a0298:	247d      	movs	r4, #125	; 0x7d
 80a029a:	f000 ff0b 	bl	80a10b4 <_Z10interruptsv>
    // wait until the wire is high... just in case
    do
    {
        if (--retries == 0)
 80a029e:	3c01      	subs	r4, #1
 80a02a0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a02a4:	d02f      	beq.n	80a0306 <_ZN7OneWire5resetEv+0x7e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a02a6:	2002      	movs	r0, #2
 80a02a8:	f000 fac2 	bl	80a0830 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a02ac:	8828      	ldrh	r0, [r5, #0]
 80a02ae:	f000 fa9f 	bl	80a07f0 <HAL_GPIO_Read>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());
 80a02b2:	f010 0fff 	tst.w	r0, #255	; 0xff
 80a02b6:	d0f2      	beq.n	80a029e <_ZN7OneWire5resetEv+0x16>

    noInterrupts();
 80a02b8:	f000 fefa 	bl	80a10b0 <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a02bc:	4628      	mov	r0, r5
 80a02be:	f7ff ffcd 	bl	80a025c <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
 80a02c2:	2101      	movs	r1, #1
 80a02c4:	8828      	ldrh	r0, [r5, #0]
 80a02c6:	f000 fa7b 	bl	80a07c0 <HAL_Pin_Mode>
    pinModeFastOutput(); // drive output low

    interrupts();
 80a02ca:	f000 fef3 	bl	80a10b4 <_Z10interruptsv>
 80a02ce:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80a02d2:	f000 faad 	bl	80a0830 <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
 80a02d6:	f000 fabb 	bl	80a0850 <HAL_disable_irq>
      HAL_Pin_Mode(_pin, INPUT);
 80a02da:	2100      	movs	r1, #0
 80a02dc:	4606      	mov	r6, r0
 80a02de:	8828      	ldrh	r0, [r5, #0]
 80a02e0:	f000 fa6e 	bl	80a07c0 <HAL_Pin_Mode>
 80a02e4:	2046      	movs	r0, #70	; 0x46
 80a02e6:	f000 faa3 	bl	80a0830 <HAL_Delay_Microseconds>
      return HAL_GPIO_Read(_pin);
 80a02ea:	8828      	ldrh	r0, [r5, #0]
 80a02ec:	f000 fa80 	bl	80a07f0 <HAL_GPIO_Read>
    {
        pinModeFastInput(); // allow it to float

        delayMicroseconds(70);

        r = !digitalReadFast();
 80a02f0:	b2c4      	uxtb	r4, r0
 80a02f2:	fab4 f484 	clz	r4, r4
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
 80a02f6:	4630      	mov	r0, r6
 80a02f8:	f000 fab2 	bl	80a0860 <HAL_enable_irq>
 80a02fc:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80a0300:	0964      	lsrs	r4, r4, #5
 80a0302:	f000 fa95 	bl	80a0830 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(410);

    return r;
}
 80a0306:	4620      	mov	r0, r4
 80a0308:	bd70      	pop	{r4, r5, r6, pc}

080a030a <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
 80a030a:	b570      	push	{r4, r5, r6, lr}
    if (v & 1)
 80a030c:	f011 0501 	ands.w	r5, r1, #1
{
 80a0310:	4604      	mov	r4, r0
    if (v & 1)
 80a0312:	d018      	beq.n	80a0346 <_ZN7OneWire9write_bitEh+0x3c>
		prev = HAL_disable_irq();
 80a0314:	f000 fa9c 	bl	80a0850 <HAL_disable_irq>
 80a0318:	4605      	mov	r5, r0
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
 80a031a:	4620      	mov	r0, r4
 80a031c:	f7ff ff9e 	bl	80a025c <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0320:	2101      	movs	r1, #1
 80a0322:	8820      	ldrh	r0, [r4, #0]
 80a0324:	f000 fa4c 	bl	80a07c0 <HAL_Pin_Mode>
 80a0328:	2001      	movs	r0, #1
 80a032a:	f000 fa81 	bl	80a0830 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
 80a032e:	2100      	movs	r1, #0
 80a0330:	8820      	ldrh	r0, [r4, #0]
 80a0332:	f000 fa45 	bl	80a07c0 <HAL_Pin_Mode>
		HAL_enable_irq(prev);
 80a0336:	4628      	mov	r0, r5
 80a0338:	f000 fa92 	bl	80a0860 <HAL_enable_irq>
 80a033c:	203b      	movs	r0, #59	; 0x3b

            pinModeFastInput(); // float high
        }
        delayMicroseconds(5);
    }
}
 80a033e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0342:	f000 ba75 	b.w	80a0830 <HAL_Delay_Microseconds>
		prev = HAL_disable_irq();
 80a0346:	f000 fa83 	bl	80a0850 <HAL_disable_irq>
 80a034a:	4606      	mov	r6, r0
            digitalWriteFastLow();
 80a034c:	4620      	mov	r0, r4
 80a034e:	f7ff ff85 	bl	80a025c <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0352:	2101      	movs	r1, #1
 80a0354:	8820      	ldrh	r0, [r4, #0]
 80a0356:	f000 fa33 	bl	80a07c0 <HAL_Pin_Mode>
 80a035a:	2041      	movs	r0, #65	; 0x41
 80a035c:	f000 fa68 	bl	80a0830 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
 80a0360:	4629      	mov	r1, r5
 80a0362:	8820      	ldrh	r0, [r4, #0]
 80a0364:	f000 fa2c 	bl	80a07c0 <HAL_Pin_Mode>
		HAL_enable_irq(prev);
 80a0368:	4630      	mov	r0, r6
 80a036a:	f000 fa79 	bl	80a0860 <HAL_enable_irq>
 80a036e:	2005      	movs	r0, #5
 80a0370:	e7e5      	b.n	80a033e <_ZN7OneWire9write_bitEh+0x34>

080a0372 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
 80a0372:	b538      	push	{r3, r4, r5, lr}
 80a0374:	4604      	mov	r4, r0
		prev = HAL_disable_irq();
 80a0376:	f000 fa6b 	bl	80a0850 <HAL_disable_irq>
 80a037a:	4605      	mov	r5, r0
    uint8_t r;

    ATOMIC_BLOCK()
    {
        digitalWriteFastLow();
 80a037c:	4620      	mov	r0, r4
 80a037e:	f7ff ff6d 	bl	80a025c <_ZN7OneWire19digitalWriteFastLowEv>
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0382:	2101      	movs	r1, #1
 80a0384:	8820      	ldrh	r0, [r4, #0]
 80a0386:	f000 fa1b 	bl	80a07c0 <HAL_Pin_Mode>
 80a038a:	2001      	movs	r0, #1
 80a038c:	f000 fa50 	bl	80a0830 <HAL_Delay_Microseconds>
      HAL_Pin_Mode(_pin, INPUT);
 80a0390:	2100      	movs	r1, #0
 80a0392:	8820      	ldrh	r0, [r4, #0]
 80a0394:	f000 fa14 	bl	80a07c0 <HAL_Pin_Mode>
 80a0398:	200d      	movs	r0, #13
 80a039a:	f000 fa49 	bl	80a0830 <HAL_Delay_Microseconds>
      return HAL_GPIO_Read(_pin);
 80a039e:	8820      	ldrh	r0, [r4, #0]
 80a03a0:	f000 fa26 	bl	80a07f0 <HAL_GPIO_Read>
 80a03a4:	4604      	mov	r4, r0
		HAL_enable_irq(prev);
 80a03a6:	4628      	mov	r0, r5
 80a03a8:	f000 fa5a 	bl	80a0860 <HAL_enable_irq>
 80a03ac:	202e      	movs	r0, #46	; 0x2e
 80a03ae:	f000 fa3f 	bl	80a0830 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(46);

    return r;
}
 80a03b2:	b2e0      	uxtb	r0, r4
 80a03b4:	bd38      	pop	{r3, r4, r5, pc}

080a03b6 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
 80a03b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a03ba:	4604      	mov	r4, r0
 80a03bc:	4688      	mov	r8, r1
 80a03be:	4616      	mov	r6, r2
 80a03c0:	2708      	movs	r7, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
 80a03c2:	2501      	movs	r5, #1
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
 80a03c4:	ea18 0f05 	tst.w	r8, r5
 80a03c8:	bf14      	ite	ne
 80a03ca:	2101      	movne	r1, #1
 80a03cc:	2100      	moveq	r1, #0
 80a03ce:	4620      	mov	r0, r4
 80a03d0:	f7ff ff9b 	bl	80a030a <_ZN7OneWire9write_bitEh>
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
 80a03d4:	006d      	lsls	r5, r5, #1
 80a03d6:	3f01      	subs	r7, #1
 80a03d8:	b2ed      	uxtb	r5, r5
 80a03da:	d1f3      	bne.n	80a03c4 <_ZN7OneWire5writeEhh+0xe>
    }

    if (power)
 80a03dc:	b18e      	cbz	r6, 80a0402 <_ZN7OneWire5writeEhh+0x4c>
    {
        noInterrupts();
 80a03de:	f000 fe67 	bl	80a10b0 <_Z12noInterruptsv>
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a03e2:	231c      	movs	r3, #28
 80a03e4:	8822      	ldrh	r2, [r4, #0]
 80a03e6:	4353      	muls	r3, r2
 80a03e8:	6862      	ldr	r2, [r4, #4]
 80a03ea:	18d1      	adds	r1, r2, r3
 80a03ec:	58d3      	ldr	r3, [r2, r3]
 80a03ee:	888a      	ldrh	r2, [r1, #4]
      HAL_Pin_Mode(_pin, OUTPUT);
 80a03f0:	2101      	movs	r1, #1
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a03f2:	831a      	strh	r2, [r3, #24]
      HAL_Pin_Mode(_pin, OUTPUT);
 80a03f4:	8820      	ldrh	r0, [r4, #0]
 80a03f6:	f000 f9e3 	bl	80a07c0 <HAL_Pin_Mode>
        digitalWriteFastHigh();
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
    }
}
 80a03fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        interrupts();
 80a03fe:	f000 be59 	b.w	80a10b4 <_Z10interruptsv>
}
 80a0402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0406 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
 80a0406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0408:	4607      	mov	r7, r0
 80a040a:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
 80a040c:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
 80a040e:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
 80a0410:	4638      	mov	r0, r7
 80a0412:	f7ff ffae 	bl	80a0372 <_ZN7OneWire8read_bitEv>
 80a0416:	b100      	cbz	r0, 80a041a <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
 80a0418:	4325      	orrs	r5, r4
    for (bitMask = 0x01; bitMask; bitMask <<= 1)
 80a041a:	0064      	lsls	r4, r4, #1
 80a041c:	3e01      	subs	r6, #1
 80a041e:	b2e4      	uxtb	r4, r4
 80a0420:	d1f6      	bne.n	80a0410 <_ZN7OneWire4readEv+0xa>
    }

    return r;
}
 80a0422:	4628      	mov	r0, r5
 80a0424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0426 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a0426:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
 80a0428:	2200      	movs	r2, #0
{
 80a042a:	460c      	mov	r4, r1
    write(0x55); // Choose ROM
 80a042c:	2155      	movs	r1, #85	; 0x55
{
 80a042e:	4606      	mov	r6, r0
    write(0x55); // Choose ROM
 80a0430:	f7ff ffc1 	bl	80a03b6 <_ZN7OneWire5writeEhh>

    for (i = 0; i < 8; i++)
 80a0434:	1e65      	subs	r5, r4, #1
 80a0436:	3407      	adds	r4, #7
        write(rom[i]);
 80a0438:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a043c:	2200      	movs	r2, #0
 80a043e:	4630      	mov	r0, r6
 80a0440:	f7ff ffb9 	bl	80a03b6 <_ZN7OneWire5writeEhh>
    for (i = 0; i < 8; i++)
 80a0444:	42a5      	cmp	r5, r4
 80a0446:	d1f7      	bne.n	80a0438 <_ZN7OneWire6selectEPKh+0x12>
}
 80a0448:	bd70      	pop	{r4, r5, r6, pc}

080a044a <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC); // Skip ROM
 80a044a:	2200      	movs	r2, #0
 80a044c:	21cc      	movs	r1, #204	; 0xcc
 80a044e:	f7ff bfb2 	b.w	80a03b6 <_ZN7OneWire5writeEhh>

080a0452 <_ZN7OneWire12reset_searchEv>:
    LastDeviceFlag = FALSE;
    LastFamilyDiscrepancy = 0;

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
 80a0452:	2300      	movs	r3, #0
 80a0454:	e9c0 3302 	strd	r3, r3, [r0, #8]
    LastDiscrepancy = 0;
 80a0458:	8203      	strh	r3, [r0, #16]
    LastDeviceFlag = FALSE;
 80a045a:	7483      	strb	r3, [r0, #18]
        if (i == 0)
            break;
    }
}
 80a045c:	4770      	bx	lr

080a045e <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a045e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a0462:	f890 9012 	ldrb.w	r9, [r0, #18]
{
 80a0466:	4604      	mov	r4, r0
 80a0468:	4688      	mov	r8, r1
    if (!LastDeviceFlag)
 80a046a:	f1b9 0f00 	cmp.w	r9, #0
 80a046e:	d00e      	beq.n	80a048e <_ZN7OneWire6searchEPh+0x30>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
 80a0470:	2000      	movs	r0, #0
 80a0472:	8220      	strh	r0, [r4, #16]
        LastDeviceFlag = FALSE;
 80a0474:	74a0      	strb	r0, [r4, #18]
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
 80a0476:	f104 0308 	add.w	r3, r4, #8
 80a047a:	f108 38ff 	add.w	r8, r8, #4294967295
 80a047e:	3410      	adds	r4, #16
        newAddr[i] = ROM_NO[i];
 80a0480:	f813 2b01 	ldrb.w	r2, [r3], #1
    for (int i = 0; i < 8; i++)
 80a0484:	42a3      	cmp	r3, r4
        newAddr[i] = ROM_NO[i];
 80a0486:	f808 2f01 	strb.w	r2, [r8, #1]!
    for (int i = 0; i < 8; i++)
 80a048a:	d1f9      	bne.n	80a0480 <_ZN7OneWire6searchEPh+0x22>
 80a048c:	e004      	b.n	80a0498 <_ZN7OneWire6searchEPh+0x3a>
        if (!reset())
 80a048e:	f7ff fefb 	bl	80a0288 <_ZN7OneWire5resetEv>
 80a0492:	b918      	cbnz	r0, 80a049c <_ZN7OneWire6searchEPh+0x3e>
            LastDiscrepancy = 0;
 80a0494:	8220      	strh	r0, [r4, #16]
            LastDeviceFlag = FALSE;
 80a0496:	74a0      	strb	r0, [r4, #18]

    return search_result;
}
 80a0498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rom_byte_mask = 1;
 80a049c:	2601      	movs	r6, #1
        write(0xF0);
 80a049e:	464a      	mov	r2, r9
 80a04a0:	21f0      	movs	r1, #240	; 0xf0
 80a04a2:	4620      	mov	r0, r4
 80a04a4:	f7ff ff87 	bl	80a03b6 <_ZN7OneWire5writeEhh>
    rom_byte_number = 0;
 80a04a8:	46ca      	mov	sl, r9
    id_bit_number = 1;
 80a04aa:	4635      	mov	r5, r6
            id_bit = read_bit();
 80a04ac:	4620      	mov	r0, r4
 80a04ae:	f7ff ff60 	bl	80a0372 <_ZN7OneWire8read_bitEv>
 80a04b2:	4607      	mov	r7, r0
            cmp_id_bit = read_bit();
 80a04b4:	4620      	mov	r0, r4
 80a04b6:	f7ff ff5c 	bl	80a0372 <_ZN7OneWire8read_bitEv>
            if ((id_bit == 1) && (cmp_id_bit == 1))
 80a04ba:	2f01      	cmp	r7, #1
 80a04bc:	d10f      	bne.n	80a04de <_ZN7OneWire6searchEPh+0x80>
 80a04be:	2801      	cmp	r0, #1
 80a04c0:	d127      	bne.n	80a0512 <_ZN7OneWire6searchEPh+0xb4>
        if (!(id_bit_number < 65))
 80a04c2:	2d40      	cmp	r5, #64	; 0x40
 80a04c4:	d9d4      	bls.n	80a0470 <_ZN7OneWire6searchEPh+0x12>
            LastDiscrepancy = last_zero;
 80a04c6:	f884 9010 	strb.w	r9, [r4, #16]
            if (LastDiscrepancy == 0)
 80a04ca:	f1b9 0f00 	cmp.w	r9, #0
 80a04ce:	d101      	bne.n	80a04d4 <_ZN7OneWire6searchEPh+0x76>
                LastDeviceFlag = TRUE;
 80a04d0:	2301      	movs	r3, #1
 80a04d2:	74a3      	strb	r3, [r4, #18]
    if (!search_result || !ROM_NO[0])
 80a04d4:	7a23      	ldrb	r3, [r4, #8]
 80a04d6:	2b00      	cmp	r3, #0
 80a04d8:	d0ca      	beq.n	80a0470 <_ZN7OneWire6searchEPh+0x12>
            search_result = TRUE;
 80a04da:	2001      	movs	r0, #1
 80a04dc:	e7cb      	b.n	80a0476 <_ZN7OneWire6searchEPh+0x18>
                if (id_bit != cmp_id_bit)
 80a04de:	4287      	cmp	r7, r0
 80a04e0:	eb04 030a 	add.w	r3, r4, sl
 80a04e4:	d10c      	bne.n	80a0500 <_ZN7OneWire6searchEPh+0xa2>
                    if (id_bit_number < LastDiscrepancy)
 80a04e6:	7c22      	ldrb	r2, [r4, #16]
 80a04e8:	42aa      	cmp	r2, r5
 80a04ea:	d90e      	bls.n	80a050a <_ZN7OneWire6searchEPh+0xac>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80a04ec:	7a1a      	ldrb	r2, [r3, #8]
 80a04ee:	4216      	tst	r6, r2
 80a04f0:	bf14      	ite	ne
 80a04f2:	2701      	movne	r7, #1
 80a04f4:	2700      	moveq	r7, #0
                    if (search_direction == 0)
 80a04f6:	b967      	cbnz	r7, 80a0512 <_ZN7OneWire6searchEPh+0xb4>
                        if (last_zero < 9)
 80a04f8:	2d08      	cmp	r5, #8
 80a04fa:	d800      	bhi.n	80a04fe <_ZN7OneWire6searchEPh+0xa0>
                            LastFamilyDiscrepancy = last_zero;
 80a04fc:	7465      	strb	r5, [r4, #17]
                if (search_direction == 1)
 80a04fe:	46a9      	mov	r9, r5
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80a0500:	7a1a      	ldrb	r2, [r3, #8]
 80a0502:	ea22 0206 	bic.w	r2, r2, r6
 80a0506:	721a      	strb	r2, [r3, #8]
 80a0508:	e009      	b.n	80a051e <_ZN7OneWire6searchEPh+0xc0>
                        search_direction = (id_bit_number == LastDiscrepancy);
 80a050a:	bf0c      	ite	eq
 80a050c:	2701      	moveq	r7, #1
 80a050e:	2700      	movne	r7, #0
 80a0510:	e7f1      	b.n	80a04f6 <_ZN7OneWire6searchEPh+0x98>
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
 80a0512:	2701      	movs	r7, #1
 80a0514:	eb04 020a 	add.w	r2, r4, sl
 80a0518:	7a13      	ldrb	r3, [r2, #8]
 80a051a:	4333      	orrs	r3, r6
 80a051c:	7213      	strb	r3, [r2, #8]
                write_bit(search_direction);
 80a051e:	4639      	mov	r1, r7
 80a0520:	4620      	mov	r0, r4
                rom_byte_mask <<= 1;
 80a0522:	0076      	lsls	r6, r6, #1
                write_bit(search_direction);
 80a0524:	f7ff fef1 	bl	80a030a <_ZN7OneWire9write_bitEh>
                if (rom_byte_mask == 0)
 80a0528:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                    rom_byte_number++;
 80a052c:	bf02      	ittt	eq
 80a052e:	f10a 0a01 	addeq.w	sl, sl, #1
 80a0532:	fa5f fa8a 	uxtbeq.w	sl, sl
                    rom_byte_mask = 1;
 80a0536:	2601      	moveq	r6, #1
                id_bit_number++;
 80a0538:	3501      	adds	r5, #1
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
 80a053a:	f1ba 0f07 	cmp.w	sl, #7
                id_bit_number++;
 80a053e:	b2ed      	uxtb	r5, r5
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
 80a0540:	d9b4      	bls.n	80a04ac <_ZN7OneWire6searchEPh+0x4e>
 80a0542:	e7be      	b.n	80a04c2 <_ZN7OneWire6searchEPh+0x64>

080a0544 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
 80a0544:	4602      	mov	r2, r0
    uint8_t crc = 0;
 80a0546:	4401      	add	r1, r0
 80a0548:	2000      	movs	r0, #0
{
 80a054a:	b530      	push	{r4, r5, lr}

    while (len--)
 80a054c:	428a      	cmp	r2, r1
 80a054e:	d013      	beq.n	80a0578 <_ZN7OneWire4crc8EPhh+0x34>
    {
        uint8_t inbyte = *addr++;
 80a0550:	2408      	movs	r4, #8
 80a0552:	f812 5b01 	ldrb.w	r5, [r2], #1
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
 80a0556:	ea80 0305 	eor.w	r3, r0, r5
            crc >>= 1;
            if (mix)
 80a055a:	f013 0f01 	tst.w	r3, #1
 80a055e:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
 80a0562:	bf1c      	itt	ne
 80a0564:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
 80a0568:	b2d8      	uxtbne	r0, r3
            inbyte >>= 1;
 80a056a:	1e63      	subs	r3, r4, #1
        for (uint8_t i = 8; i; i--)
 80a056c:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
            inbyte >>= 1;
 80a0570:	ea4f 0555 	mov.w	r5, r5, lsr #1
        for (uint8_t i = 8; i; i--)
 80a0574:	d1ef      	bne.n	80a0556 <_ZN7OneWire4crc8EPhh+0x12>
 80a0576:	e7e9      	b.n	80a054c <_ZN7OneWire4crc8EPhh+0x8>
        }
    }

    return crc;
}
 80a0578:	bd30      	pop	{r4, r5, pc}

080a057a <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
{
  memset(_data, 0, sizeof(_data));
 80a057a:	2300      	movs	r3, #0
DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a057c:	b570      	push	{r4, r5, r6, lr}
  memset(_data, 0, sizeof(_data));
 80a057e:	6043      	str	r3, [r0, #4]
 80a0580:	6083      	str	r3, [r0, #8]
 80a0582:	60c3      	str	r3, [r0, #12]
  memset(_addr, 0, sizeof(_addr));
 80a0584:	6103      	str	r3, [r0, #16]
 80a0586:	6143      	str	r3, [r0, #20]
  _dataCRC     = 0; 
 80a0588:	8303      	strh	r3, [r0, #24]
  _readCRC     = 0;
  _singleDrop  = singleDrop;
  _sampleDelay = 750;
 80a058a:	f240 23ee 	movw	r3, #750	; 0x2ee
  _singleDrop  = singleDrop;
 80a058e:	7682      	strb	r2, [r0, #26]
  _sampleDelay = 750;
 80a0590:	61c3      	str	r3, [r0, #28]
DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a0592:	4604      	mov	r4, r0
  ds           = new OneWire(pin);
 80a0594:	2014      	movs	r0, #20
DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a0596:	460e      	mov	r6, r1
  ds           = new OneWire(pin);
 80a0598:	f7ff fd7d 	bl	80a0096 <_Znwj>
 80a059c:	4605      	mov	r5, r0
 80a059e:	b110      	cbz	r0, 80a05a6 <_ZN7DS18B20C1Etb+0x2c>
 80a05a0:	4631      	mov	r1, r6
 80a05a2:	f7ff fe64 	bl	80a026e <_ZN7OneWireC1Et>
}
 80a05a6:	4620      	mov	r0, r4
  ds           = new OneWire(pin);
 80a05a8:	6025      	str	r5, [r4, #0]
}
 80a05aa:	bd70      	pop	{r4, r5, r6, pc}

080a05ac <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
 80a05ac:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
 80a05ae:	f100 0510 	add.w	r5, r0, #16
{
 80a05b2:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
 80a05b4:	6800      	ldr	r0, [r0, #0]
 80a05b6:	4629      	mov	r1, r5
 80a05b8:	f7ff ff51 	bl	80a045e <_ZN7OneWire6searchEPh>
 80a05bc:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
 80a05be:	bf1f      	itttt	ne
 80a05c0:	682b      	ldrne	r3, [r5, #0]
  boolean isSuccess = ds->search(_addr);
 80a05c2:	2001      	movne	r0, #1
  if (isSuccess) memcpy(addr, _addr, 8);
 80a05c4:	6023      	strne	r3, [r4, #0]
 80a05c6:	686b      	ldrne	r3, [r5, #4]
  boolean isSuccess = ds->search(_addr);
 80a05c8:	bf04      	itt	eq
 80a05ca:	2000      	moveq	r0, #0
  else           memset(addr, 0, 8);
 80a05cc:	6023      	streq	r3, [r4, #0]
 80a05ce:	6063      	str	r3, [r4, #4]
  return isSuccess;
}
 80a05d0:	bd38      	pop	{r3, r4, r5, pc}

080a05d2 <_ZN7DS18B206searchEv>:
  return search(_addr);
 80a05d2:	f100 0110 	add.w	r1, r0, #16
 80a05d6:	f7ff bfe9 	b.w	80a05ac <_ZN7DS18B206searchEPh>

080a05da <_ZN7DS18B20D1Ev>:

DS18B20::~DS18B20()
 80a05da:	b510      	push	{r4, lr}
 80a05dc:	4604      	mov	r4, r0
{
  delete(ds);
 80a05de:	6800      	ldr	r0, [r0, #0]
 80a05e0:	b110      	cbz	r0, 80a05e8 <_ZN7DS18B20D1Ev+0xe>
 80a05e2:	2114      	movs	r1, #20
 80a05e4:	f000 ffd9 	bl	80a159a <_ZdlPvj>
}
 80a05e8:	4620      	mov	r0, r4
 80a05ea:	bd10      	pop	{r4, pc}

080a05ec <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
 80a05ec:	6800      	ldr	r0, [r0, #0]
 80a05ee:	f7ff bf30 	b.w	80a0452 <_ZN7OneWire12reset_searchEv>
	...

080a05f4 <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
 80a05f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
 80a05f8:	7e83      	ldrb	r3, [r0, #26]
{
 80a05fa:	4604      	mov	r4, r0
 80a05fc:	460d      	mov	r5, r1
 80a05fe:	4616      	mov	r6, r2
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
 80a0600:	b923      	cbnz	r3, 80a060c <_ZN7DS18B2014getTemperatureEPhb+0x18>
 80a0602:	780b      	ldrb	r3, [r1, #0]
 80a0604:	b913      	cbnz	r3, 80a060c <_ZN7DS18B2014getTemperatureEPhb+0x18>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
 80a0606:	4854      	ldr	r0, [pc, #336]	; (80a0758 <_ZN7DS18B2014getTemperatureEPhb+0x164>)
      celsius = NAN;
      break;                            
  }
  
  return celsius;
}
 80a0608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ds->reset();
 80a060c:	6820      	ldr	r0, [r4, #0]
 80a060e:	f7ff fe3b 	bl	80a0288 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
 80a0612:	7ea3      	ldrb	r3, [r4, #26]
 80a0614:	2b00      	cmp	r3, #0
 80a0616:	d05a      	beq.n	80a06ce <_ZN7DS18B2014getTemperatureEPhb+0xda>
 80a0618:	2e00      	cmp	r6, #0
 80a061a:	d158      	bne.n	80a06ce <_ZN7DS18B2014getTemperatureEPhb+0xda>
    ds->skip();
 80a061c:	6820      	ldr	r0, [r4, #0]
 80a061e:	f7ff ff14 	bl	80a044a <_ZN7OneWire4skipEv>
  ds->write(0x44);        // start conversion, with parasite power on at the end
 80a0622:	2200      	movs	r2, #0
 80a0624:	2144      	movs	r1, #68	; 0x44
 80a0626:	6820      	ldr	r0, [r4, #0]
 80a0628:	f7ff fec5 	bl	80a03b6 <_ZN7OneWire5writeEhh>
  delay(_sampleDelay);    // maybe 750ms is enough, maybe not
 80a062c:	69e0      	ldr	r0, [r4, #28]
 80a062e:	f000 fb45 	bl	80a0cbc <delay>
  ds->reset();
 80a0632:	6820      	ldr	r0, [r4, #0]
 80a0634:	f7ff fe28 	bl	80a0288 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
 80a0638:	7ea3      	ldrb	r3, [r4, #26]
 80a063a:	2b00      	cmp	r3, #0
 80a063c:	d04c      	beq.n	80a06d8 <_ZN7DS18B2014getTemperatureEPhb+0xe4>
 80a063e:	2e00      	cmp	r6, #0
 80a0640:	d14a      	bne.n	80a06d8 <_ZN7DS18B2014getTemperatureEPhb+0xe4>
    ds->skip();
 80a0642:	6820      	ldr	r0, [r4, #0]
 80a0644:	f7ff ff01 	bl	80a044a <_ZN7OneWire4skipEv>
  ds->write(0xBE);         // Read Scratchpad
 80a0648:	2200      	movs	r2, #0
 80a064a:	21be      	movs	r1, #190	; 0xbe
 80a064c:	6820      	ldr	r0, [r4, #0]
 80a064e:	f7ff feb2 	bl	80a03b6 <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
 80a0652:	782b      	ldrb	r3, [r5, #0]
 80a0654:	2b26      	cmp	r3, #38	; 0x26
 80a0656:	d104      	bne.n	80a0662 <_ZN7DS18B2014getTemperatureEPhb+0x6e>
    ds->write(0x00,0);     // DS2438 requires a page to read
 80a0658:	2200      	movs	r2, #0
 80a065a:	6820      	ldr	r0, [r4, #0]
 80a065c:	4611      	mov	r1, r2
 80a065e:	f7ff feaa 	bl	80a03b6 <_ZN7OneWire5writeEhh>
 80a0662:	1d26      	adds	r6, r4, #4
 80a0664:	4637      	mov	r7, r6
 80a0666:	f104 080d 	add.w	r8, r4, #13
    _data[i] = ds->read();
 80a066a:	6820      	ldr	r0, [r4, #0]
 80a066c:	f7ff fecb 	bl	80a0406 <_ZN7OneWire4readEv>
 80a0670:	f806 0b01 	strb.w	r0, [r6], #1
  for (int i = 0; i < 9; i++)
 80a0674:	4546      	cmp	r6, r8
 80a0676:	d1f8      	bne.n	80a066a <_ZN7DS18B2014getTemperatureEPhb+0x76>
  _dataCRC = (OneWire::crc8(_data, 8));
 80a0678:	2108      	movs	r1, #8
 80a067a:	4638      	mov	r0, r7
 80a067c:	f7ff ff62 	bl	80a0544 <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
 80a0680:	7b23      	ldrb	r3, [r4, #12]
  _dataCRC = (OneWire::crc8(_data, 8));
 80a0682:	7620      	strb	r0, [r4, #24]
  if (_dataCRC != _readCRC) return NAN;
 80a0684:	4298      	cmp	r0, r3
  _readCRC = (_data[8]);
 80a0686:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
 80a0688:	d1bd      	bne.n	80a0606 <_ZN7DS18B2014getTemperatureEPhb+0x12>
  switch(addr[0]) 
 80a068a:	782b      	ldrb	r3, [r5, #0]
 80a068c:	2b26      	cmp	r3, #38	; 0x26
 80a068e:	d046      	beq.n	80a071e <_ZN7DS18B2014getTemperatureEPhb+0x12a>
 80a0690:	d827      	bhi.n	80a06e2 <_ZN7DS18B2014getTemperatureEPhb+0xee>
 80a0692:	2b10      	cmp	r3, #16
 80a0694:	d027      	beq.n	80a06e6 <_ZN7DS18B2014getTemperatureEPhb+0xf2>
 80a0696:	2b22      	cmp	r3, #34	; 0x22
 80a0698:	d1b5      	bne.n	80a0606 <_ZN7DS18B2014getTemperatureEPhb+0x12>
      switch (_data[4] & 0x60)
 80a069a:	7a22      	ldrb	r2, [r4, #8]
 80a069c:	7923      	ldrb	r3, [r4, #4]
 80a069e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a06a2:	2a20      	cmp	r2, #32
 80a06a4:	d035      	beq.n	80a0712 <_ZN7DS18B2014getTemperatureEPhb+0x11e>
 80a06a6:	2a40      	cmp	r2, #64	; 0x40
 80a06a8:	d036      	beq.n	80a0718 <_ZN7DS18B2014getTemperatureEPhb+0x124>
 80a06aa:	b912      	cbnz	r2, 80a06b2 <_ZN7DS18B2014getTemperatureEPhb+0xbe>
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
 80a06ac:	f023 0307 	bic.w	r3, r3, #7
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
 80a06b0:	7123      	strb	r3, [r4, #4]
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
 80a06b2:	7963      	ldrb	r3, [r4, #5]
 80a06b4:	7920      	ldrb	r0, [r4, #4]
 80a06b6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80a06ba:	b200      	sxth	r0, r0
 80a06bc:	f001 f8c4 	bl	80a1848 <__aeabi_i2d>
 80a06c0:	2200      	movs	r2, #0
 80a06c2:	4b26      	ldr	r3, [pc, #152]	; (80a075c <_ZN7DS18B2014getTemperatureEPhb+0x168>)
 80a06c4:	f001 f92a 	bl	80a191c <__aeabi_dmul>
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
 80a06c8:	f001 fbc2 	bl	80a1e50 <__aeabi_d2f>
      break;
 80a06cc:	e79c      	b.n	80a0608 <_ZN7DS18B2014getTemperatureEPhb+0x14>
    ds->select(addr);
 80a06ce:	4629      	mov	r1, r5
 80a06d0:	6820      	ldr	r0, [r4, #0]
 80a06d2:	f7ff fea8 	bl	80a0426 <_ZN7OneWire6selectEPKh>
 80a06d6:	e7a4      	b.n	80a0622 <_ZN7DS18B2014getTemperatureEPhb+0x2e>
    ds->select(addr);
 80a06d8:	4629      	mov	r1, r5
 80a06da:	6820      	ldr	r0, [r4, #0]
 80a06dc:	f7ff fea3 	bl	80a0426 <_ZN7OneWire6selectEPKh>
 80a06e0:	e7b2      	b.n	80a0648 <_ZN7DS18B2014getTemperatureEPhb+0x54>
  switch(addr[0]) 
 80a06e2:	2b28      	cmp	r3, #40	; 0x28
 80a06e4:	e7d8      	b.n	80a0698 <_ZN7DS18B2014getTemperatureEPhb+0xa4>
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
 80a06e6:	7ae2      	ldrb	r2, [r4, #11]
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a06e8:	88a0      	ldrh	r0, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
 80a06ea:	2a10      	cmp	r2, #16
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a06ec:	ea4f 03c0 	mov.w	r3, r0, lsl #3
        raw = (raw & 0xFFF0) + 12 - _data[6];     
 80a06f0:	bf01      	itttt	eq
 80a06f2:	7aa0      	ldrbeq	r0, [r4, #10]
 80a06f4:	f023 030f 	biceq.w	r3, r3, #15
 80a06f8:	f1c0 000c 	rsbeq	r0, r0, #12
 80a06fc:	18c0      	addeq	r0, r0, r3
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a06fe:	bf14      	ite	ne
 80a0700:	b218      	sxthne	r0, r3
        raw = (raw & 0xFFF0) + 12 - _data[6];     
 80a0702:	b200      	sxtheq	r0, r0
      celsius = (float)raw / 16.0;
 80a0704:	f001 fcae 	bl	80a2064 <__aeabi_i2f>
 80a0708:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80a070c:	f001 fcfe 	bl	80a210c <__aeabi_fmul>
      break;
 80a0710:	e77a      	b.n	80a0608 <_ZN7DS18B2014getTemperatureEPhb+0x14>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
 80a0712:	f023 0303 	bic.w	r3, r3, #3
 80a0716:	e7cb      	b.n	80a06b0 <_ZN7DS18B2014getTemperatureEPhb+0xbc>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
 80a0718:	f023 0301 	bic.w	r3, r3, #1
 80a071c:	e7c8      	b.n	80a06b0 <_ZN7DS18B2014getTemperatureEPhb+0xbc>
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
 80a071e:	79a5      	ldrb	r5, [r4, #6]
 80a0720:	4628      	mov	r0, r5
 80a0722:	f001 f891 	bl	80a1848 <__aeabi_i2d>
 80a0726:	460f      	mov	r7, r1
 80a0728:	4606      	mov	r6, r0
 80a072a:	7960      	ldrb	r0, [r4, #5]
 80a072c:	08c0      	lsrs	r0, r0, #3
 80a072e:	f001 fc99 	bl	80a2064 <__aeabi_i2f>
 80a0732:	f001 f89b 	bl	80a186c <__aeabi_f2d>
 80a0736:	4b0a      	ldr	r3, [pc, #40]	; (80a0760 <_ZN7DS18B2014getTemperatureEPhb+0x16c>)
 80a0738:	2200      	movs	r2, #0
 80a073a:	f001 f8ef 	bl	80a191c <__aeabi_dmul>
 80a073e:	062b      	lsls	r3, r5, #24
 80a0740:	bf54      	ite	pl
 80a0742:	4b08      	ldrpl	r3, [pc, #32]	; (80a0764 <_ZN7DS18B2014getTemperatureEPhb+0x170>)
 80a0744:	4b08      	ldrmi	r3, [pc, #32]	; (80a0768 <_ZN7DS18B2014getTemperatureEPhb+0x174>)
 80a0746:	2200      	movs	r2, #0
 80a0748:	f001 f8e8 	bl	80a191c <__aeabi_dmul>
 80a074c:	4632      	mov	r2, r6
 80a074e:	463b      	mov	r3, r7
 80a0750:	f000 ff2e 	bl	80a15b0 <__adddf3>
 80a0754:	e7b8      	b.n	80a06c8 <_ZN7DS18B2014getTemperatureEPhb+0xd4>
 80a0756:	bf00      	nop
 80a0758:	7fc00000 	.word	0x7fc00000
 80a075c:	3fb00000 	.word	0x3fb00000
 80a0760:	3fa00000 	.word	0x3fa00000
 80a0764:	3ff00000 	.word	0x3ff00000
 80a0768:	bff00000 	.word	0xbff00000

080a076c <_ZN7DS18B2014getTemperatureEb>:
{
 80a076c:	b538      	push	{r3, r4, r5, lr}
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
 80a076e:	7e83      	ldrb	r3, [r0, #26]
{
 80a0770:	4604      	mov	r4, r0
 80a0772:	460d      	mov	r5, r1
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
 80a0774:	b93b      	cbnz	r3, 80a0786 <_ZN7DS18B2014getTemperatureEb+0x1a>
  return getTemperature(_addr, forceSelect);
 80a0776:	462a      	mov	r2, r5
 80a0778:	4620      	mov	r0, r4
 80a077a:	f104 0110 	add.w	r1, r4, #16
}
 80a077e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return getTemperature(_addr, forceSelect);
 80a0782:	f7ff bf37 	b.w	80a05f4 <_ZN7DS18B2014getTemperatureEPhb>
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
 80a0786:	7c03      	ldrb	r3, [r0, #16]
 80a0788:	2b00      	cmp	r3, #0
 80a078a:	d1f4      	bne.n	80a0776 <_ZN7DS18B2014getTemperatureEb+0xa>
    resetsearch();
 80a078c:	f7ff ff2e 	bl	80a05ec <_ZN7DS18B2011resetsearchEv>
    if (!search()) return NAN;
 80a0790:	4620      	mov	r0, r4
 80a0792:	f7ff ff1e 	bl	80a05d2 <_ZN7DS18B206searchEv>
 80a0796:	2800      	cmp	r0, #0
 80a0798:	d1ed      	bne.n	80a0776 <_ZN7DS18B2014getTemperatureEb+0xa>
}
 80a079a:	4801      	ldr	r0, [pc, #4]	; (80a07a0 <_ZN7DS18B2014getTemperatureEb+0x34>)
 80a079c:	bd38      	pop	{r3, r4, r5, pc}
 80a079e:	bf00      	nop
 80a07a0:	7fc00000 	.word	0x7fc00000

080a07a4 <_ZN7DS18B208crcCheckEv>:
  return celsius * 1.8 + 32.0;
}

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
 80a07a4:	7e02      	ldrb	r2, [r0, #24]
 80a07a6:	7e40      	ldrb	r0, [r0, #25]
}
 80a07a8:	1a13      	subs	r3, r2, r0
 80a07aa:	4258      	negs	r0, r3
 80a07ac:	4158      	adcs	r0, r3
 80a07ae:	4770      	bx	lr

080a07b0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a07b0:	b508      	push	{r3, lr}
 80a07b2:	4b02      	ldr	r3, [pc, #8]	; (80a07bc <HAL_Pin_Map+0xc>)
 80a07b4:	681b      	ldr	r3, [r3, #0]
 80a07b6:	681b      	ldr	r3, [r3, #0]
 80a07b8:	9301      	str	r3, [sp, #4]
 80a07ba:	bd08      	pop	{r3, pc}
 80a07bc:	080601b0 	.word	0x080601b0

080a07c0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a07c0:	b508      	push	{r3, lr}
 80a07c2:	4b02      	ldr	r3, [pc, #8]	; (80a07cc <HAL_Pin_Mode+0xc>)
 80a07c4:	681b      	ldr	r3, [r3, #0]
 80a07c6:	689b      	ldr	r3, [r3, #8]
 80a07c8:	9301      	str	r3, [sp, #4]
 80a07ca:	bd08      	pop	{r3, pc}
 80a07cc:	080601b0 	.word	0x080601b0

080a07d0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a07d0:	b508      	push	{r3, lr}
 80a07d2:	4b02      	ldr	r3, [pc, #8]	; (80a07dc <HAL_Get_Pin_Mode+0xc>)
 80a07d4:	681b      	ldr	r3, [r3, #0]
 80a07d6:	68db      	ldr	r3, [r3, #12]
 80a07d8:	9301      	str	r3, [sp, #4]
 80a07da:	bd08      	pop	{r3, pc}
 80a07dc:	080601b0 	.word	0x080601b0

080a07e0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a07e0:	b508      	push	{r3, lr}
 80a07e2:	4b02      	ldr	r3, [pc, #8]	; (80a07ec <HAL_GPIO_Write+0xc>)
 80a07e4:	681b      	ldr	r3, [r3, #0]
 80a07e6:	691b      	ldr	r3, [r3, #16]
 80a07e8:	9301      	str	r3, [sp, #4]
 80a07ea:	bd08      	pop	{r3, pc}
 80a07ec:	080601b0 	.word	0x080601b0

080a07f0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a07f0:	b508      	push	{r3, lr}
 80a07f2:	4b02      	ldr	r3, [pc, #8]	; (80a07fc <HAL_GPIO_Read+0xc>)
 80a07f4:	681b      	ldr	r3, [r3, #0]
 80a07f6:	695b      	ldr	r3, [r3, #20]
 80a07f8:	9301      	str	r3, [sp, #4]
 80a07fa:	bd08      	pop	{r3, pc}
 80a07fc:	080601b0 	.word	0x080601b0

080a0800 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a0800:	b508      	push	{r3, lr}
 80a0802:	4b02      	ldr	r3, [pc, #8]	; (80a080c <HAL_Interrupts_Enable_All+0xc>)
 80a0804:	681b      	ldr	r3, [r3, #0]
 80a0806:	6a1b      	ldr	r3, [r3, #32]
 80a0808:	9301      	str	r3, [sp, #4]
 80a080a:	bd08      	pop	{r3, pc}
 80a080c:	080601b0 	.word	0x080601b0

080a0810 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a0810:	b508      	push	{r3, lr}
 80a0812:	4b02      	ldr	r3, [pc, #8]	; (80a081c <HAL_Interrupts_Disable_All+0xc>)
 80a0814:	681b      	ldr	r3, [r3, #0]
 80a0816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0818:	9301      	str	r3, [sp, #4]
 80a081a:	bd08      	pop	{r3, pc}
 80a081c:	080601b0 	.word	0x080601b0

080a0820 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0820:	b508      	push	{r3, lr}
 80a0822:	4b02      	ldr	r3, [pc, #8]	; (80a082c <HAL_RNG_GetRandomNumber+0xc>)
 80a0824:	681b      	ldr	r3, [r3, #0]
 80a0826:	685b      	ldr	r3, [r3, #4]
 80a0828:	9301      	str	r3, [sp, #4]
 80a082a:	bd08      	pop	{r3, pc}
 80a082c:	0806019c 	.word	0x0806019c

080a0830 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0830:	b508      	push	{r3, lr}
 80a0832:	4b02      	ldr	r3, [pc, #8]	; (80a083c <HAL_Delay_Microseconds+0xc>)
 80a0834:	681b      	ldr	r3, [r3, #0]
 80a0836:	68db      	ldr	r3, [r3, #12]
 80a0838:	9301      	str	r3, [sp, #4]
 80a083a:	bd08      	pop	{r3, pc}
 80a083c:	0806019c 	.word	0x0806019c

080a0840 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0840:	b508      	push	{r3, lr}
 80a0842:	4b02      	ldr	r3, [pc, #8]	; (80a084c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0844:	681b      	ldr	r3, [r3, #0]
 80a0846:	695b      	ldr	r3, [r3, #20]
 80a0848:	9301      	str	r3, [sp, #4]
 80a084a:	bd08      	pop	{r3, pc}
 80a084c:	0806019c 	.word	0x0806019c

080a0850 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
 80a0850:	b508      	push	{r3, lr}
 80a0852:	4b02      	ldr	r3, [pc, #8]	; (80a085c <HAL_disable_irq+0xc>)
 80a0854:	681b      	ldr	r3, [r3, #0]
 80a0856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0858:	9301      	str	r3, [sp, #4]
 80a085a:	bd08      	pop	{r3, pc}
 80a085c:	0806019c 	.word	0x0806019c

080a0860 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
 80a0860:	b508      	push	{r3, lr}
 80a0862:	4b02      	ldr	r3, [pc, #8]	; (80a086c <HAL_enable_irq+0xc>)
 80a0864:	681b      	ldr	r3, [r3, #0]
 80a0866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0868:	9301      	str	r3, [sp, #4]
 80a086a:	bd08      	pop	{r3, pc}
 80a086c:	0806019c 	.word	0x0806019c

080a0870 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0870:	b508      	push	{r3, lr}
 80a0872:	4b02      	ldr	r3, [pc, #8]	; (80a087c <os_mutex_recursive_create+0xc>)
 80a0874:	681b      	ldr	r3, [r3, #0]
 80a0876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0878:	9301      	str	r3, [sp, #4]
 80a087a:	bd08      	pop	{r3, pc}
 80a087c:	080601d0 	.word	0x080601d0

080a0880 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0880:	b508      	push	{r3, lr}
 80a0882:	4b02      	ldr	r3, [pc, #8]	; (80a088c <os_mutex_recursive_destroy+0xc>)
 80a0884:	681b      	ldr	r3, [r3, #0]
 80a0886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0888:	9301      	str	r3, [sp, #4]
 80a088a:	bd08      	pop	{r3, pc}
 80a088c:	080601d0 	.word	0x080601d0

080a0890 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0890:	b508      	push	{r3, lr}
 80a0892:	4b02      	ldr	r3, [pc, #8]	; (80a089c <hal_usart_init+0xc>)
 80a0894:	681b      	ldr	r3, [r3, #0]
 80a0896:	699b      	ldr	r3, [r3, #24]
 80a0898:	9301      	str	r3, [sp, #4]
 80a089a:	bd08      	pop	{r3, pc}
 80a089c:	080601c4 	.word	0x080601c4

080a08a0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a08a0:	b508      	push	{r3, lr}
 80a08a2:	4b02      	ldr	r3, [pc, #8]	; (80a08ac <hal_usart_write+0xc>)
 80a08a4:	681b      	ldr	r3, [r3, #0]
 80a08a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a08a8:	9301      	str	r3, [sp, #4]
 80a08aa:	bd08      	pop	{r3, pc}
 80a08ac:	080601c4 	.word	0x080601c4

080a08b0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a08b0:	b508      	push	{r3, lr}
 80a08b2:	4b02      	ldr	r3, [pc, #8]	; (80a08bc <hal_usart_available+0xc>)
 80a08b4:	681b      	ldr	r3, [r3, #0]
 80a08b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a08b8:	9301      	str	r3, [sp, #4]
 80a08ba:	bd08      	pop	{r3, pc}
 80a08bc:	080601c4 	.word	0x080601c4

080a08c0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a08c0:	b508      	push	{r3, lr}
 80a08c2:	4b02      	ldr	r3, [pc, #8]	; (80a08cc <hal_usart_read+0xc>)
 80a08c4:	681b      	ldr	r3, [r3, #0]
 80a08c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a08c8:	9301      	str	r3, [sp, #4]
 80a08ca:	bd08      	pop	{r3, pc}
 80a08cc:	080601c4 	.word	0x080601c4

080a08d0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a08d0:	b508      	push	{r3, lr}
 80a08d2:	4b02      	ldr	r3, [pc, #8]	; (80a08dc <hal_usart_peek+0xc>)
 80a08d4:	681b      	ldr	r3, [r3, #0]
 80a08d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a08d8:	9301      	str	r3, [sp, #4]
 80a08da:	bd08      	pop	{r3, pc}
 80a08dc:	080601c4 	.word	0x080601c4

080a08e0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a08e0:	b508      	push	{r3, lr}
 80a08e2:	4b02      	ldr	r3, [pc, #8]	; (80a08ec <hal_usart_flush+0xc>)
 80a08e4:	681b      	ldr	r3, [r3, #0]
 80a08e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a08e8:	9301      	str	r3, [sp, #4]
 80a08ea:	bd08      	pop	{r3, pc}
 80a08ec:	080601c4 	.word	0x080601c4

080a08f0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a08f0:	b508      	push	{r3, lr}
 80a08f2:	4b02      	ldr	r3, [pc, #8]	; (80a08fc <hal_usart_is_enabled+0xc>)
 80a08f4:	681b      	ldr	r3, [r3, #0]
 80a08f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a08f8:	9301      	str	r3, [sp, #4]
 80a08fa:	bd08      	pop	{r3, pc}
 80a08fc:	080601c4 	.word	0x080601c4

080a0900 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a0900:	b508      	push	{r3, lr}
 80a0902:	4b02      	ldr	r3, [pc, #8]	; (80a090c <hal_usart_available_data_for_write+0xc>)
 80a0904:	681b      	ldr	r3, [r3, #0]
 80a0906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0908:	9301      	str	r3, [sp, #4]
 80a090a:	bd08      	pop	{r3, pc}
 80a090c:	080601c4 	.word	0x080601c4

080a0910 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0910:	b508      	push	{r3, lr}
 80a0912:	4b02      	ldr	r3, [pc, #8]	; (80a091c <hal_i2c_write+0xc>)
 80a0914:	681b      	ldr	r3, [r3, #0]
 80a0916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0918:	9301      	str	r3, [sp, #4]
 80a091a:	bd08      	pop	{r3, pc}
 80a091c:	080601ac 	.word	0x080601ac

080a0920 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0920:	b508      	push	{r3, lr}
 80a0922:	4b02      	ldr	r3, [pc, #8]	; (80a092c <hal_i2c_available+0xc>)
 80a0924:	681b      	ldr	r3, [r3, #0]
 80a0926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0928:	9301      	str	r3, [sp, #4]
 80a092a:	bd08      	pop	{r3, pc}
 80a092c:	080601ac 	.word	0x080601ac

080a0930 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0930:	b508      	push	{r3, lr}
 80a0932:	4b02      	ldr	r3, [pc, #8]	; (80a093c <hal_i2c_read+0xc>)
 80a0934:	681b      	ldr	r3, [r3, #0]
 80a0936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0938:	9301      	str	r3, [sp, #4]
 80a093a:	bd08      	pop	{r3, pc}
 80a093c:	080601ac 	.word	0x080601ac

080a0940 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0940:	b508      	push	{r3, lr}
 80a0942:	4b02      	ldr	r3, [pc, #8]	; (80a094c <hal_i2c_peek+0xc>)
 80a0944:	681b      	ldr	r3, [r3, #0]
 80a0946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0948:	9301      	str	r3, [sp, #4]
 80a094a:	bd08      	pop	{r3, pc}
 80a094c:	080601ac 	.word	0x080601ac

080a0950 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0950:	b508      	push	{r3, lr}
 80a0952:	4b02      	ldr	r3, [pc, #8]	; (80a095c <hal_i2c_flush+0xc>)
 80a0954:	681b      	ldr	r3, [r3, #0]
 80a0956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0958:	9301      	str	r3, [sp, #4]
 80a095a:	bd08      	pop	{r3, pc}
 80a095c:	080601ac 	.word	0x080601ac

080a0960 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0960:	b508      	push	{r3, lr}
 80a0962:	4b02      	ldr	r3, [pc, #8]	; (80a096c <hal_i2c_is_enabled+0xc>)
 80a0964:	681b      	ldr	r3, [r3, #0]
 80a0966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0968:	9301      	str	r3, [sp, #4]
 80a096a:	bd08      	pop	{r3, pc}
 80a096c:	080601ac 	.word	0x080601ac

080a0970 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0970:	b508      	push	{r3, lr}
 80a0972:	4b03      	ldr	r3, [pc, #12]	; (80a0980 <hal_i2c_init+0x10>)
 80a0974:	681b      	ldr	r3, [r3, #0]
 80a0976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a097a:	9301      	str	r3, [sp, #4]
 80a097c:	bd08      	pop	{r3, pc}
 80a097e:	0000      	.short	0x0000
 80a0980:	080601ac 	.word	0x080601ac

080a0984 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0984:	b508      	push	{r3, lr}
 80a0986:	4b02      	ldr	r3, [pc, #8]	; (80a0990 <hal_spi_init+0xc>)
 80a0988:	681b      	ldr	r3, [r3, #0]
 80a098a:	69db      	ldr	r3, [r3, #28]
 80a098c:	9301      	str	r3, [sp, #4]
 80a098e:	bd08      	pop	{r3, pc}
 80a0990:	080601b4 	.word	0x080601b4

080a0994 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0994:	b508      	push	{r3, lr}
 80a0996:	4b02      	ldr	r3, [pc, #8]	; (80a09a0 <hal_spi_is_enabled+0xc>)
 80a0998:	681b      	ldr	r3, [r3, #0]
 80a099a:	6a1b      	ldr	r3, [r3, #32]
 80a099c:	9301      	str	r3, [sp, #4]
 80a099e:	bd08      	pop	{r3, pc}
 80a09a0:	080601b4 	.word	0x080601b4

080a09a4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a09a4:	b508      	push	{r3, lr}
 80a09a6:	4b02      	ldr	r3, [pc, #8]	; (80a09b0 <HAL_USB_USART_Init+0xc>)
 80a09a8:	681b      	ldr	r3, [r3, #0]
 80a09aa:	681b      	ldr	r3, [r3, #0]
 80a09ac:	9301      	str	r3, [sp, #4]
 80a09ae:	bd08      	pop	{r3, pc}
 80a09b0:	080601d8 	.word	0x080601d8

080a09b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a09b4:	b508      	push	{r3, lr}
 80a09b6:	4b02      	ldr	r3, [pc, #8]	; (80a09c0 <HAL_USB_USART_Begin+0xc>)
 80a09b8:	681b      	ldr	r3, [r3, #0]
 80a09ba:	685b      	ldr	r3, [r3, #4]
 80a09bc:	9301      	str	r3, [sp, #4]
 80a09be:	bd08      	pop	{r3, pc}
 80a09c0:	080601d8 	.word	0x080601d8

080a09c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a09c4:	b508      	push	{r3, lr}
 80a09c6:	4b02      	ldr	r3, [pc, #8]	; (80a09d0 <HAL_USB_USART_Available_Data+0xc>)
 80a09c8:	681b      	ldr	r3, [r3, #0]
 80a09ca:	691b      	ldr	r3, [r3, #16]
 80a09cc:	9301      	str	r3, [sp, #4]
 80a09ce:	bd08      	pop	{r3, pc}
 80a09d0:	080601d8 	.word	0x080601d8

080a09d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a09d4:	b508      	push	{r3, lr}
 80a09d6:	4b02      	ldr	r3, [pc, #8]	; (80a09e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a09d8:	681b      	ldr	r3, [r3, #0]
 80a09da:	695b      	ldr	r3, [r3, #20]
 80a09dc:	9301      	str	r3, [sp, #4]
 80a09de:	bd08      	pop	{r3, pc}
 80a09e0:	080601d8 	.word	0x080601d8

080a09e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a09e4:	b508      	push	{r3, lr}
 80a09e6:	4b02      	ldr	r3, [pc, #8]	; (80a09f0 <HAL_USB_USART_Receive_Data+0xc>)
 80a09e8:	681b      	ldr	r3, [r3, #0]
 80a09ea:	699b      	ldr	r3, [r3, #24]
 80a09ec:	9301      	str	r3, [sp, #4]
 80a09ee:	bd08      	pop	{r3, pc}
 80a09f0:	080601d8 	.word	0x080601d8

080a09f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a09f4:	b508      	push	{r3, lr}
 80a09f6:	4b02      	ldr	r3, [pc, #8]	; (80a0a00 <HAL_USB_USART_Send_Data+0xc>)
 80a09f8:	681b      	ldr	r3, [r3, #0]
 80a09fa:	69db      	ldr	r3, [r3, #28]
 80a09fc:	9301      	str	r3, [sp, #4]
 80a09fe:	bd08      	pop	{r3, pc}
 80a0a00:	080601d8 	.word	0x080601d8

080a0a04 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0a04:	b508      	push	{r3, lr}
 80a0a06:	4b02      	ldr	r3, [pc, #8]	; (80a0a10 <HAL_USB_USART_Flush_Data+0xc>)
 80a0a08:	681b      	ldr	r3, [r3, #0]
 80a0a0a:	6a1b      	ldr	r3, [r3, #32]
 80a0a0c:	9301      	str	r3, [sp, #4]
 80a0a0e:	bd08      	pop	{r3, pc}
 80a0a10:	080601d8 	.word	0x080601d8

080a0a14 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0a14:	b508      	push	{r3, lr}
 80a0a16:	4b02      	ldr	r3, [pc, #8]	; (80a0a20 <inet_gethostbyname+0xc>)
 80a0a18:	681b      	ldr	r3, [r3, #0]
 80a0a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0a1c:	9301      	str	r3, [sp, #4]
 80a0a1e:	bd08      	pop	{r3, pc}
 80a0a20:	080601c0 	.word	0x080601c0

080a0a24 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0a24:	b508      	push	{r3, lr}
 80a0a26:	4b02      	ldr	r3, [pc, #8]	; (80a0a30 <set_system_mode+0xc>)
 80a0a28:	681b      	ldr	r3, [r3, #0]
 80a0a2a:	685b      	ldr	r3, [r3, #4]
 80a0a2c:	9301      	str	r3, [sp, #4]
 80a0a2e:	bd08      	pop	{r3, pc}
 80a0a30:	080601a4 	.word	0x080601a4

080a0a34 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0a34:	b508      	push	{r3, lr}
 80a0a36:	4b02      	ldr	r3, [pc, #8]	; (80a0a40 <system_delay_ms+0xc>)
 80a0a38:	681b      	ldr	r3, [r3, #0]
 80a0a3a:	695b      	ldr	r3, [r3, #20]
 80a0a3c:	9301      	str	r3, [sp, #4]
 80a0a3e:	bd08      	pop	{r3, pc}
 80a0a40:	080601a4 	.word	0x080601a4

080a0a44 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0a44:	b508      	push	{r3, lr}
 80a0a46:	4b03      	ldr	r3, [pc, #12]	; (80a0a54 <system_ctrl_set_app_request_handler+0x10>)
 80a0a48:	681b      	ldr	r3, [r3, #0]
 80a0a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0a4e:	9301      	str	r3, [sp, #4]
 80a0a50:	bd08      	pop	{r3, pc}
 80a0a52:	0000      	.short	0x0000
 80a0a54:	080601a4 	.word	0x080601a4

080a0a58 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0a58:	b508      	push	{r3, lr}
 80a0a5a:	4b03      	ldr	r3, [pc, #12]	; (80a0a68 <system_ctrl_set_result+0x10>)
 80a0a5c:	681b      	ldr	r3, [r3, #0]
 80a0a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0a62:	9301      	str	r3, [sp, #4]
 80a0a64:	bd08      	pop	{r3, pc}
 80a0a66:	0000      	.short	0x0000
 80a0a68:	080601a4 	.word	0x080601a4

080a0a6c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0a6c:	b508      	push	{r3, lr}
 80a0a6e:	4b02      	ldr	r3, [pc, #8]	; (80a0a78 <network_connect+0xc>)
 80a0a70:	681b      	ldr	r3, [r3, #0]
 80a0a72:	685b      	ldr	r3, [r3, #4]
 80a0a74:	9301      	str	r3, [sp, #4]
 80a0a76:	bd08      	pop	{r3, pc}
 80a0a78:	080601c8 	.word	0x080601c8

080a0a7c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0a7c:	b508      	push	{r3, lr}
 80a0a7e:	4b02      	ldr	r3, [pc, #8]	; (80a0a88 <network_connecting+0xc>)
 80a0a80:	681b      	ldr	r3, [r3, #0]
 80a0a82:	689b      	ldr	r3, [r3, #8]
 80a0a84:	9301      	str	r3, [sp, #4]
 80a0a86:	bd08      	pop	{r3, pc}
 80a0a88:	080601c8 	.word	0x080601c8

080a0a8c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0a8c:	b508      	push	{r3, lr}
 80a0a8e:	4b02      	ldr	r3, [pc, #8]	; (80a0a98 <network_disconnect+0xc>)
 80a0a90:	681b      	ldr	r3, [r3, #0]
 80a0a92:	68db      	ldr	r3, [r3, #12]
 80a0a94:	9301      	str	r3, [sp, #4]
 80a0a96:	bd08      	pop	{r3, pc}
 80a0a98:	080601c8 	.word	0x080601c8

080a0a9c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0a9c:	b508      	push	{r3, lr}
 80a0a9e:	4b02      	ldr	r3, [pc, #8]	; (80a0aa8 <network_ready+0xc>)
 80a0aa0:	681b      	ldr	r3, [r3, #0]
 80a0aa2:	691b      	ldr	r3, [r3, #16]
 80a0aa4:	9301      	str	r3, [sp, #4]
 80a0aa6:	bd08      	pop	{r3, pc}
 80a0aa8:	080601c8 	.word	0x080601c8

080a0aac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0aac:	b508      	push	{r3, lr}
 80a0aae:	4b02      	ldr	r3, [pc, #8]	; (80a0ab8 <network_on+0xc>)
 80a0ab0:	681b      	ldr	r3, [r3, #0]
 80a0ab2:	695b      	ldr	r3, [r3, #20]
 80a0ab4:	9301      	str	r3, [sp, #4]
 80a0ab6:	bd08      	pop	{r3, pc}
 80a0ab8:	080601c8 	.word	0x080601c8

080a0abc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0abc:	b508      	push	{r3, lr}
 80a0abe:	4b02      	ldr	r3, [pc, #8]	; (80a0ac8 <network_off+0xc>)
 80a0ac0:	681b      	ldr	r3, [r3, #0]
 80a0ac2:	699b      	ldr	r3, [r3, #24]
 80a0ac4:	9301      	str	r3, [sp, #4]
 80a0ac6:	bd08      	pop	{r3, pc}
 80a0ac8:	080601c8 	.word	0x080601c8

080a0acc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0acc:	b508      	push	{r3, lr}
 80a0ace:	4b02      	ldr	r3, [pc, #8]	; (80a0ad8 <network_listen+0xc>)
 80a0ad0:	681b      	ldr	r3, [r3, #0]
 80a0ad2:	69db      	ldr	r3, [r3, #28]
 80a0ad4:	9301      	str	r3, [sp, #4]
 80a0ad6:	bd08      	pop	{r3, pc}
 80a0ad8:	080601c8 	.word	0x080601c8

080a0adc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0adc:	b508      	push	{r3, lr}
 80a0ade:	4b02      	ldr	r3, [pc, #8]	; (80a0ae8 <network_listening+0xc>)
 80a0ae0:	681b      	ldr	r3, [r3, #0]
 80a0ae2:	6a1b      	ldr	r3, [r3, #32]
 80a0ae4:	9301      	str	r3, [sp, #4]
 80a0ae6:	bd08      	pop	{r3, pc}
 80a0ae8:	080601c8 	.word	0x080601c8

080a0aec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0aec:	b508      	push	{r3, lr}
 80a0aee:	4b02      	ldr	r3, [pc, #8]	; (80a0af8 <network_set_listen_timeout+0xc>)
 80a0af0:	681b      	ldr	r3, [r3, #0]
 80a0af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0af4:	9301      	str	r3, [sp, #4]
 80a0af6:	bd08      	pop	{r3, pc}
 80a0af8:	080601c8 	.word	0x080601c8

080a0afc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0afc:	b508      	push	{r3, lr}
 80a0afe:	4b02      	ldr	r3, [pc, #8]	; (80a0b08 <network_get_listen_timeout+0xc>)
 80a0b00:	681b      	ldr	r3, [r3, #0]
 80a0b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0b04:	9301      	str	r3, [sp, #4]
 80a0b06:	bd08      	pop	{r3, pc}
 80a0b08:	080601c8 	.word	0x080601c8

080a0b0c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a0b0c:	b508      	push	{r3, lr}
 80a0b0e:	4b02      	ldr	r3, [pc, #8]	; (80a0b18 <spark_variable+0xc>)
 80a0b10:	681b      	ldr	r3, [r3, #0]
 80a0b12:	681b      	ldr	r3, [r3, #0]
 80a0b14:	9301      	str	r3, [sp, #4]
 80a0b16:	bd08      	pop	{r3, pc}
 80a0b18:	080601cc 	.word	0x080601cc

080a0b1c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0b1c:	b508      	push	{r3, lr}
 80a0b1e:	4b02      	ldr	r3, [pc, #8]	; (80a0b28 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0b20:	681b      	ldr	r3, [r3, #0]
 80a0b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0b24:	9301      	str	r3, [sp, #4]
 80a0b26:	bd08      	pop	{r3, pc}
 80a0b28:	080601cc 	.word	0x080601cc

080a0b2c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0b2c:	b508      	push	{r3, lr}
 80a0b2e:	4b02      	ldr	r3, [pc, #8]	; (80a0b38 <malloc+0xc>)
 80a0b30:	681b      	ldr	r3, [r3, #0]
 80a0b32:	681b      	ldr	r3, [r3, #0]
 80a0b34:	9301      	str	r3, [sp, #4]
 80a0b36:	bd08      	pop	{r3, pc}
 80a0b38:	080601a0 	.word	0x080601a0

080a0b3c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0b3c:	b508      	push	{r3, lr}
 80a0b3e:	4b02      	ldr	r3, [pc, #8]	; (80a0b48 <free+0xc>)
 80a0b40:	681b      	ldr	r3, [r3, #0]
 80a0b42:	685b      	ldr	r3, [r3, #4]
 80a0b44:	9301      	str	r3, [sp, #4]
 80a0b46:	bd08      	pop	{r3, pc}
 80a0b48:	080601a0 	.word	0x080601a0

080a0b4c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a0b4c:	b508      	push	{r3, lr}
 80a0b4e:	4b02      	ldr	r3, [pc, #8]	; (80a0b58 <newlib_impure_ptr_callback+0xc>)
 80a0b50:	681b      	ldr	r3, [r3, #0]
 80a0b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0b54:	9301      	str	r3, [sp, #4]
 80a0b56:	bd08      	pop	{r3, pc}
 80a0b58:	080601a0 	.word	0x080601a0

080a0b5c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a0b5c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0b5e:	2600      	movs	r6, #0
 80a0b60:	4604      	mov	r4, r0
 80a0b62:	460d      	mov	r5, r1
 80a0b64:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0b68:	f7ff fe82 	bl	80a0870 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a0b6c:	4628      	mov	r0, r5
    _spi = spi;
 80a0b6e:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0b70:	f7ff ff08 	bl	80a0984 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0b74:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0b76:	6066      	str	r6, [r4, #4]
}
 80a0b78:	bd70      	pop	{r4, r5, r6, pc}

080a0b7a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0b7a:	b510      	push	{r4, lr}
 80a0b7c:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0b7e:	6800      	ldr	r0, [r0, #0]
 80a0b80:	b118      	cbz	r0, 80a0b8a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a0b82:	f7ff ffdb 	bl	80a0b3c <free>
            wakeupSource_ = nullptr;
 80a0b86:	2300      	movs	r3, #0
 80a0b88:	6023      	str	r3, [r4, #0]
        }
    }
 80a0b8a:	bd10      	pop	{r4, pc}

080a0b8c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0b8c:	b510      	push	{r4, lr}
 80a0b8e:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a0b90:	f7ff fff3 	bl	80a0b7a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a0b94:	4620      	mov	r0, r4
 80a0b96:	bd10      	pop	{r4, pc}

080a0b98 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0b98:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a0b9a:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0b9c:	b510      	push	{r4, lr}
 80a0b9e:	4b08      	ldr	r3, [pc, #32]	; (80a0bc0 <_GLOBAL__sub_I_System+0x28>)
 80a0ba0:	4c08      	ldr	r4, [pc, #32]	; (80a0bc4 <_GLOBAL__sub_I_System+0x2c>)
 80a0ba2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a0ba4:	4b08      	ldr	r3, [pc, #32]	; (80a0bc8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a0ba6:	6020      	str	r0, [r4, #0]
 80a0ba8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a0baa:	71a0      	strb	r0, [r4, #6]
 80a0bac:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0bae:	f7ff ff39 	bl	80a0a24 <set_system_mode>
SystemClass System;
 80a0bb2:	4620      	mov	r0, r4
 80a0bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a0bb8:	4a04      	ldr	r2, [pc, #16]	; (80a0bcc <_GLOBAL__sub_I_System+0x34>)
 80a0bba:	4905      	ldr	r1, [pc, #20]	; (80a0bd0 <_GLOBAL__sub_I_System+0x38>)
 80a0bbc:	f000 bce8 	b.w	80a1590 <__aeabi_atexit>
 80a0bc0:	200000dc 	.word	0x200000dc
 80a0bc4:	200000d0 	.word	0x200000d0
 80a0bc8:	ffff0000 	.word	0xffff0000
 80a0bcc:	20000078 	.word	0x20000078
 80a0bd0:	080a0b8d 	.word	0x080a0b8d

080a0bd4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0bd6:	4606      	mov	r6, r0
 80a0bd8:	460d      	mov	r5, r1
  size_t n = 0;
 80a0bda:	2400      	movs	r4, #0
 80a0bdc:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0bde:	42bd      	cmp	r5, r7
 80a0be0:	d00c      	beq.n	80a0bfc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0be2:	6833      	ldr	r3, [r6, #0]
 80a0be4:	4630      	mov	r0, r6
 80a0be6:	689b      	ldr	r3, [r3, #8]
 80a0be8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0bec:	4798      	blx	r3
     if (chunk>=0)
 80a0bee:	1e03      	subs	r3, r0, #0
 80a0bf0:	db01      	blt.n	80a0bf6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0bf2:	441c      	add	r4, r3
  while (size--) {
 80a0bf4:	e7f3      	b.n	80a0bde <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0bf6:	2c00      	cmp	r4, #0
 80a0bf8:	bf08      	it	eq
 80a0bfa:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0bfc:	4620      	mov	r0, r4
 80a0bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0c00 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0c00:	b570      	push	{r4, r5, r6, lr}
 80a0c02:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0c04:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0c06:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0c08:	b149      	cbz	r1, 80a0c1e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0c0a:	f001 fc17 	bl	80a243c <strlen>
 80a0c0e:	682b      	ldr	r3, [r5, #0]
 80a0c10:	4602      	mov	r2, r0
 80a0c12:	4621      	mov	r1, r4
 80a0c14:	4628      	mov	r0, r5
    }
 80a0c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0c1a:	68db      	ldr	r3, [r3, #12]
 80a0c1c:	4718      	bx	r3
    }
 80a0c1e:	bd70      	pop	{r4, r5, r6, pc}

080a0c20 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0c20:	6803      	ldr	r3, [r0, #0]
 80a0c22:	689b      	ldr	r3, [r3, #8]
 80a0c24:	4718      	bx	r3

080a0c26 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0c26:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0c28:	210d      	movs	r1, #13
{
 80a0c2a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0c2c:	f7ff fff8 	bl	80a0c20 <_ZN5Print5printEc>
  n += print('\n');
 80a0c30:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0c32:	4604      	mov	r4, r0
  n += print('\n');
 80a0c34:	4628      	mov	r0, r5
 80a0c36:	f7ff fff3 	bl	80a0c20 <_ZN5Print5printEc>
  return n;
}
 80a0c3a:	4420      	add	r0, r4
 80a0c3c:	bd38      	pop	{r3, r4, r5, pc}

080a0c3e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0c3e:	b538      	push	{r3, r4, r5, lr}
 80a0c40:	4605      	mov	r5, r0
  return write(str);
 80a0c42:	f7ff ffdd 	bl	80a0c00 <_ZN5Print5writeEPKc>
 80a0c46:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a0c48:	4628      	mov	r0, r5
 80a0c4a:	f7ff ffec 	bl	80a0c26 <_ZN5Print7printlnEv>
  return n;
}
 80a0c4e:	4420      	add	r0, r4
 80a0c50:	bd38      	pop	{r3, r4, r5, pc}

080a0c52 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0c52:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0c54:	2a01      	cmp	r2, #1
 80a0c56:	bf98      	it	ls
 80a0c58:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0c5a:	b530      	push	{r4, r5, lr}
 80a0c5c:	b08b      	sub	sp, #44	; 0x2c
 80a0c5e:	460c      	mov	r4, r1
  *str = '\0';
 80a0c60:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0c64:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0c66:	4625      	mov	r5, r4
 80a0c68:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0c6c:	fb04 5312 	mls	r3, r4, r2, r5
 80a0c70:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0c72:	2b09      	cmp	r3, #9
 80a0c74:	bf94      	ite	ls
 80a0c76:	3330      	addls	r3, #48	; 0x30
 80a0c78:	3337      	addhi	r3, #55	; 0x37
 80a0c7a:	b2db      	uxtb	r3, r3
  } while(n);
 80a0c7c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0c7e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0c82:	d9f0      	bls.n	80a0c66 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0c84:	f7ff ffbc 	bl	80a0c00 <_ZN5Print5writeEPKc>
}
 80a0c88:	b00b      	add	sp, #44	; 0x2c
 80a0c8a:	bd30      	pop	{r4, r5, pc}

080a0c8c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0c8c:	2300      	movs	r3, #0
 80a0c8e:	6840      	ldr	r0, [r0, #4]
 80a0c90:	461a      	mov	r2, r3
 80a0c92:	4619      	mov	r1, r3
 80a0c94:	f7ff bf0a 	b.w	80a0aac <network_on>

080a0c98 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0c98:	4b01      	ldr	r3, [pc, #4]	; (80a0ca0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0c9a:	4a02      	ldr	r2, [pc, #8]	; (80a0ca4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0c9c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0c9e:	4770      	bx	lr
 80a0ca0:	200000e0 	.word	0x200000e0
 80a0ca4:	080a247f 	.word	0x080a247f

080a0ca8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0ca8:	4b02      	ldr	r3, [pc, #8]	; (80a0cb4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0caa:	681a      	ldr	r2, [r3, #0]
 80a0cac:	4b02      	ldr	r3, [pc, #8]	; (80a0cb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0cae:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0cb0:	4770      	bx	lr
 80a0cb2:	bf00      	nop
 80a0cb4:	2000000c 	.word	0x2000000c
 80a0cb8:	200000e4 	.word	0x200000e4

080a0cbc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0cbc:	2100      	movs	r1, #0
 80a0cbe:	f7ff beb9 	b.w	80a0a34 <system_delay_ms>

080a0cc2 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0cc2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0cc4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0cc6:	4604      	mov	r4, r0
      if (_M_manager)
 80a0cc8:	b113      	cbz	r3, 80a0cd0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0cca:	2203      	movs	r2, #3
 80a0ccc:	4601      	mov	r1, r0
 80a0cce:	4798      	blx	r3
    }
 80a0cd0:	4620      	mov	r0, r4
 80a0cd2:	bd10      	pop	{r4, pc}

080a0cd4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0cd4:	b510      	push	{r4, lr}
 80a0cd6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0cd8:	f7ff fff3 	bl	80a0cc2 <_ZNSt14_Function_baseD1Ev>
 80a0cdc:	4620      	mov	r0, r4
 80a0cde:	bd10      	pop	{r4, pc}

080a0ce0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a0ce0:	2300      	movs	r3, #0
 80a0ce2:	4803      	ldr	r0, [pc, #12]	; (80a0cf0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0ce4:	4a03      	ldr	r2, [pc, #12]	; (80a0cf4 <_GLOBAL__sub_I_RGB+0x14>)
 80a0ce6:	4904      	ldr	r1, [pc, #16]	; (80a0cf8 <_GLOBAL__sub_I_RGB+0x18>)
 80a0ce8:	6083      	str	r3, [r0, #8]
 80a0cea:	f000 bc51 	b.w	80a1590 <__aeabi_atexit>
 80a0cee:	bf00      	nop
 80a0cf0:	200000e8 	.word	0x200000e8
 80a0cf4:	20000078 	.word	0x20000078
 80a0cf8:	080a0cd5 	.word	0x080a0cd5

080a0cfc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0cfc:	4b01      	ldr	r3, [pc, #4]	; (80a0d04 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a0cfe:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0d00:	4770      	bx	lr
 80a0d02:	bf00      	nop
 80a0d04:	20000010 	.word	0x20000010

080a0d08 <serialEventRun>:
{
 80a0d08:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0d0a:	4b13      	ldr	r3, [pc, #76]	; (80a0d58 <serialEventRun+0x50>)
 80a0d0c:	b143      	cbz	r3, 80a0d20 <serialEventRun+0x18>
 80a0d0e:	f000 f969 	bl	80a0fe4 <_Z16_fetch_usbserialv>
 80a0d12:	6803      	ldr	r3, [r0, #0]
 80a0d14:	691b      	ldr	r3, [r3, #16]
 80a0d16:	4798      	blx	r3
 80a0d18:	2800      	cmp	r0, #0
 80a0d1a:	dd01      	ble.n	80a0d20 <serialEventRun+0x18>
        serialEvent();
 80a0d1c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a0d20:	4b0e      	ldr	r3, [pc, #56]	; (80a0d5c <serialEventRun+0x54>)
 80a0d22:	b143      	cbz	r3, 80a0d36 <serialEventRun+0x2e>
 80a0d24:	f000 fa1a 	bl	80a115c <_Z22__fetch_global_Serial1v>
 80a0d28:	6803      	ldr	r3, [r0, #0]
 80a0d2a:	691b      	ldr	r3, [r3, #16]
 80a0d2c:	4798      	blx	r3
 80a0d2e:	2800      	cmp	r0, #0
 80a0d30:	dd01      	ble.n	80a0d36 <serialEventRun+0x2e>
        serialEvent1();
 80a0d32:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a0d36:	4b0a      	ldr	r3, [pc, #40]	; (80a0d60 <serialEventRun+0x58>)
 80a0d38:	b10b      	cbz	r3, 80a0d3e <serialEventRun+0x36>
 80a0d3a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0d3e:	4b09      	ldr	r3, [pc, #36]	; (80a0d64 <serialEventRun+0x5c>)
 80a0d40:	b143      	cbz	r3, 80a0d54 <serialEventRun+0x4c>
 80a0d42:	f000 f98d 	bl	80a1060 <_Z17_fetch_usbserial1v>
 80a0d46:	6803      	ldr	r3, [r0, #0]
 80a0d48:	691b      	ldr	r3, [r3, #16]
 80a0d4a:	4798      	blx	r3
 80a0d4c:	2800      	cmp	r0, #0
 80a0d4e:	dd01      	ble.n	80a0d54 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0d50:	f3af 8000 	nop.w
}
 80a0d54:	bd08      	pop	{r3, pc}
 80a0d56:	bf00      	nop
	...

080a0d68 <_post_loop>:
{
 80a0d68:	b508      	push	{r3, lr}
	serialEventRun();
 80a0d6a:	f7ff ffcd 	bl	80a0d08 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0d6e:	f7ff fd67 	bl	80a0840 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0d72:	4b01      	ldr	r3, [pc, #4]	; (80a0d78 <_post_loop+0x10>)
 80a0d74:	6018      	str	r0, [r3, #0]
}
 80a0d76:	bd08      	pop	{r3, pc}
 80a0d78:	20000574 	.word	0x20000574

080a0d7c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0d7c:	4802      	ldr	r0, [pc, #8]	; (80a0d88 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0d7e:	4a03      	ldr	r2, [pc, #12]	; (80a0d8c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0d80:	4903      	ldr	r1, [pc, #12]	; (80a0d90 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0d82:	1a12      	subs	r2, r2, r0
 80a0d84:	f001 bb20 	b.w	80a23c8 <memcpy>
 80a0d88:	40024000 	.word	0x40024000
 80a0d8c:	40024004 	.word	0x40024004
 80a0d90:	080a25d0 	.word	0x080a25d0

080a0d94 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0d94:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0d96:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0d98:	461a      	mov	r2, r3
 80a0d9a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0d9e:	9300      	str	r3, [sp, #0]
 80a0da0:	f7ff fe5a 	bl	80a0a58 <system_ctrl_set_result>
}
 80a0da4:	b003      	add	sp, #12
 80a0da6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0dac <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0dac:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0dae:	8843      	ldrh	r3, [r0, #2]
 80a0db0:	2b0a      	cmp	r3, #10
 80a0db2:	d008      	beq.n	80a0dc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0db4:	2b50      	cmp	r3, #80	; 0x50
 80a0db6:	d10b      	bne.n	80a0dd0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0db8:	4b09      	ldr	r3, [pc, #36]	; (80a0de0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0dba:	681b      	ldr	r3, [r3, #0]
 80a0dbc:	b14b      	cbz	r3, 80a0dd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a0dbe:	b003      	add	sp, #12
 80a0dc0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0dc4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a0dc6:	f7ff ffe5 	bl	80a0d94 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a0dca:	b003      	add	sp, #12
 80a0dcc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0dd0:	2300      	movs	r3, #0
 80a0dd2:	461a      	mov	r2, r3
 80a0dd4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0dd8:	9300      	str	r3, [sp, #0]
 80a0dda:	f7ff fe3d 	bl	80a0a58 <system_ctrl_set_result>
}
 80a0dde:	e7f4      	b.n	80a0dca <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a0de0:	200000fc 	.word	0x200000fc

080a0de4 <module_user_init_hook>:
{
 80a0de4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0de6:	4c12      	ldr	r4, [pc, #72]	; (80a0e30 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0de8:	2100      	movs	r1, #0
 80a0dea:	4812      	ldr	r0, [pc, #72]	; (80a0e34 <module_user_init_hook+0x50>)
 80a0dec:	f7ff feae 	bl	80a0b4c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0df0:	4d11      	ldr	r5, [pc, #68]	; (80a0e38 <module_user_init_hook+0x54>)
 80a0df2:	6823      	ldr	r3, [r4, #0]
 80a0df4:	42ab      	cmp	r3, r5
 80a0df6:	bf0c      	ite	eq
 80a0df8:	2201      	moveq	r2, #1
 80a0dfa:	2200      	movne	r2, #0
 80a0dfc:	4b0f      	ldr	r3, [pc, #60]	; (80a0e3c <module_user_init_hook+0x58>)
 80a0dfe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0e00:	d002      	beq.n	80a0e08 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a0e02:	f7ff ffbb 	bl	80a0d7c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0e06:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0e08:	f7ff fd0a 	bl	80a0820 <HAL_RNG_GetRandomNumber>
 80a0e0c:	4604      	mov	r4, r0
    srand(seed);
 80a0e0e:	f001 faf1 	bl	80a23f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0e12:	4b0b      	ldr	r3, [pc, #44]	; (80a0e40 <module_user_init_hook+0x5c>)
 80a0e14:	b113      	cbz	r3, 80a0e1c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a0e16:	4620      	mov	r0, r4
 80a0e18:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0e1c:	2100      	movs	r1, #0
 80a0e1e:	4808      	ldr	r0, [pc, #32]	; (80a0e40 <module_user_init_hook+0x5c>)
 80a0e20:	f7ff fe7c 	bl	80a0b1c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0e28:	2100      	movs	r1, #0
 80a0e2a:	4806      	ldr	r0, [pc, #24]	; (80a0e44 <module_user_init_hook+0x60>)
 80a0e2c:	f7ff be0a 	b.w	80a0a44 <system_ctrl_set_app_request_handler>
 80a0e30:	40024000 	.word	0x40024000
 80a0e34:	080a0cfd 	.word	0x080a0cfd
 80a0e38:	9a271c1e 	.word	0x9a271c1e
 80a0e3c:	200000f8 	.word	0x200000f8
 80a0e40:	00000000 	.word	0x00000000
 80a0e44:	080a0dad 	.word	0x080a0dad

080a0e48 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0e48:	4770      	bx	lr

080a0e4a <_ZN9IPAddressD0Ev>:
 80a0e4a:	b510      	push	{r4, lr}
 80a0e4c:	4604      	mov	r4, r0
 80a0e4e:	2118      	movs	r1, #24
 80a0e50:	f000 fba3 	bl	80a159a <_ZdlPvj>
 80a0e54:	4620      	mov	r0, r4
 80a0e56:	bd10      	pop	{r4, pc}

080a0e58 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e5a:	460e      	mov	r6, r1
 80a0e5c:	2400      	movs	r4, #0
 80a0e5e:	f100 0708 	add.w	r7, r0, #8
 80a0e62:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0e64:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0e68:	220a      	movs	r2, #10
 80a0e6a:	4630      	mov	r0, r6
 80a0e6c:	f7ff fef1 	bl	80a0c52 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0e70:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0e72:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0e74:	d101      	bne.n	80a0e7a <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0e76:	4620      	mov	r0, r4
 80a0e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a0e7a:	2c00      	cmp	r4, #0
 80a0e7c:	d0f2      	beq.n	80a0e64 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0e7e:	212e      	movs	r1, #46	; 0x2e
 80a0e80:	4630      	mov	r0, r6
 80a0e82:	f7ff fecd 	bl	80a0c20 <_ZN5Print5printEc>
 80a0e86:	4404      	add	r4, r0
 80a0e88:	e7ec      	b.n	80a0e64 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a0e8c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a0e8c:	b510      	push	{r4, lr}
 80a0e8e:	4604      	mov	r4, r0
 80a0e90:	4b04      	ldr	r3, [pc, #16]	; (80a0ea4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0e92:	2211      	movs	r2, #17
 80a0e94:	2100      	movs	r1, #0
 80a0e96:	f840 3b04 	str.w	r3, [r0], #4
 80a0e9a:	f001 faa3 	bl	80a23e4 <memset>
}
 80a0e9e:	4620      	mov	r0, r4
 80a0ea0:	bd10      	pop	{r4, pc}
 80a0ea2:	bf00      	nop
 80a0ea4:	080a24a8 	.word	0x080a24a8

080a0ea8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0ea8:	4603      	mov	r3, r0
 80a0eaa:	4a07      	ldr	r2, [pc, #28]	; (80a0ec8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0eac:	b510      	push	{r4, lr}
 80a0eae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0eb2:	f101 0210 	add.w	r2, r1, #16
 80a0eb6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0eba:	4291      	cmp	r1, r2
 80a0ebc:	f843 4b04 	str.w	r4, [r3], #4
 80a0ec0:	d1f9      	bne.n	80a0eb6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0ec2:	780a      	ldrb	r2, [r1, #0]
 80a0ec4:	701a      	strb	r2, [r3, #0]
}
 80a0ec6:	bd10      	pop	{r4, pc}
 80a0ec8:	080a24a8 	.word	0x080a24a8

080a0ecc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a0ecc:	4a02      	ldr	r2, [pc, #8]	; (80a0ed8 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a0ece:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0ed2:	2204      	movs	r2, #4
 80a0ed4:	7502      	strb	r2, [r0, #20]
}
 80a0ed6:	4770      	bx	lr
 80a0ed8:	080a24a8 	.word	0x080a24a8

080a0edc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a0edc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0ede:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0ee2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0ee6:	2304      	movs	r3, #4
 80a0ee8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a0eec:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a0ef0:	6044      	str	r4, [r0, #4]
 80a0ef2:	7503      	strb	r3, [r0, #20]
}
 80a0ef4:	bd10      	pop	{r4, pc}
	...

080a0ef8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0efa:	4d04      	ldr	r5, [pc, #16]	; (80a0f0c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0efc:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0efe:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0f02:	9500      	str	r5, [sp, #0]
 80a0f04:	f7ff ffea 	bl	80a0edc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0f08:	b003      	add	sp, #12
 80a0f0a:	bd30      	pop	{r4, r5, pc}
 80a0f0c:	080a24a8 	.word	0x080a24a8

080a0f10 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0f10:	7441      	strb	r1, [r0, #17]
}
 80a0f12:	4770      	bx	lr

080a0f14 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0f14:	4770      	bx	lr

080a0f16 <_ZN9USBSerial4readEv>:
{
 80a0f16:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0f18:	2100      	movs	r1, #0
 80a0f1a:	7c00      	ldrb	r0, [r0, #16]
 80a0f1c:	f7ff fd62 	bl	80a09e4 <HAL_USB_USART_Receive_Data>
}
 80a0f20:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0f24:	bd08      	pop	{r3, pc}

080a0f26 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a0f26:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0f28:	2101      	movs	r1, #1
 80a0f2a:	7c00      	ldrb	r0, [r0, #16]
 80a0f2c:	f7ff fd5a 	bl	80a09e4 <HAL_USB_USART_Receive_Data>
}
 80a0f30:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0f34:	bd08      	pop	{r3, pc}

080a0f36 <_ZN9USBSerial17availableForWriteEv>:
{
 80a0f36:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0f38:	7c00      	ldrb	r0, [r0, #16]
 80a0f3a:	f7ff fd4b 	bl	80a09d4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0f3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0f42:	bd08      	pop	{r3, pc}

080a0f44 <_ZN9USBSerial9availableEv>:
{
 80a0f44:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0f46:	7c00      	ldrb	r0, [r0, #16]
 80a0f48:	f7ff fd3c 	bl	80a09c4 <HAL_USB_USART_Available_Data>
}
 80a0f4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0f50:	bd08      	pop	{r3, pc}

080a0f52 <_ZN9USBSerial5writeEh>:
{
 80a0f52:	b538      	push	{r3, r4, r5, lr}
 80a0f54:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0f56:	7c00      	ldrb	r0, [r0, #16]
{
 80a0f58:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0f5a:	f7ff fd3b 	bl	80a09d4 <HAL_USB_USART_Available_Data_For_Write>
 80a0f5e:	2800      	cmp	r0, #0
 80a0f60:	dc01      	bgt.n	80a0f66 <_ZN9USBSerial5writeEh+0x14>
 80a0f62:	7c60      	ldrb	r0, [r4, #17]
 80a0f64:	b128      	cbz	r0, 80a0f72 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0f66:	4629      	mov	r1, r5
 80a0f68:	7c20      	ldrb	r0, [r4, #16]
 80a0f6a:	f7ff fd43 	bl	80a09f4 <HAL_USB_USART_Send_Data>
 80a0f6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0f72:	bd38      	pop	{r3, r4, r5, pc}

080a0f74 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0f74:	7c00      	ldrb	r0, [r0, #16]
 80a0f76:	f7ff bd45 	b.w	80a0a04 <HAL_USB_USART_Flush_Data>

080a0f7a <_ZN9USBSerialD0Ev>:
 80a0f7a:	b510      	push	{r4, lr}
 80a0f7c:	4604      	mov	r4, r0
 80a0f7e:	2114      	movs	r1, #20
 80a0f80:	f000 fb0b 	bl	80a159a <_ZdlPvj>
 80a0f84:	4620      	mov	r0, r4
 80a0f86:	bd10      	pop	{r4, pc}

080a0f88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0f88:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0f8e:	4604      	mov	r4, r0
 80a0f90:	4608      	mov	r0, r1
 80a0f92:	2100      	movs	r1, #0
 80a0f94:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0f98:	4b04      	ldr	r3, [pc, #16]	; (80a0fac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a0f9a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0f9c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0f9e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0fa0:	4611      	mov	r1, r2
  _blocking = true;
 80a0fa2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0fa4:	f7ff fcfe 	bl	80a09a4 <HAL_USB_USART_Init>
}
 80a0fa8:	4620      	mov	r0, r4
 80a0faa:	bd10      	pop	{r4, pc}
 80a0fac:	080a24bc 	.word	0x080a24bc

080a0fb0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0fb0:	2200      	movs	r2, #0
 80a0fb2:	7c00      	ldrb	r0, [r0, #16]
 80a0fb4:	f7ff bcfe 	b.w	80a09b4 <HAL_USB_USART_Begin>

080a0fb8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0fb8:	b510      	push	{r4, lr}
 80a0fba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0fbc:	2214      	movs	r2, #20
 80a0fbe:	2100      	movs	r1, #0
 80a0fc0:	f001 fa10 	bl	80a23e4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0fc4:	4b05      	ldr	r3, [pc, #20]	; (80a0fdc <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0fc6:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a0fc8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0fca:	4b05      	ldr	r3, [pc, #20]	; (80a0fe0 <_Z19acquireSerialBufferv+0x28>)
 80a0fcc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0fce:	f240 1301 	movw	r3, #257	; 0x101
 80a0fd2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0fd4:	2381      	movs	r3, #129	; 0x81
 80a0fd6:	8223      	strh	r3, [r4, #16]
}
 80a0fd8:	bd10      	pop	{r4, pc}
 80a0fda:	bf00      	nop
 80a0fdc:	20000130 	.word	0x20000130
 80a0fe0:	20000231 	.word	0x20000231

080a0fe4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0fe4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0fe6:	4d0f      	ldr	r5, [pc, #60]	; (80a1024 <_Z16_fetch_usbserialv+0x40>)
{
 80a0fe8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0fea:	a801      	add	r0, sp, #4
 80a0fec:	f7ff ffe4 	bl	80a0fb8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0ff0:	7829      	ldrb	r1, [r5, #0]
 80a0ff2:	f3bf 8f5b 	dmb	ish
 80a0ff6:	f011 0401 	ands.w	r4, r1, #1
 80a0ffa:	d110      	bne.n	80a101e <_Z16_fetch_usbserialv+0x3a>
 80a0ffc:	4628      	mov	r0, r5
 80a0ffe:	f7ff f850 	bl	80a00a2 <__cxa_guard_acquire>
 80a1002:	b160      	cbz	r0, 80a101e <_Z16_fetch_usbserialv+0x3a>
 80a1004:	4621      	mov	r1, r4
 80a1006:	aa01      	add	r2, sp, #4
 80a1008:	4807      	ldr	r0, [pc, #28]	; (80a1028 <_Z16_fetch_usbserialv+0x44>)
 80a100a:	f7ff ffbd 	bl	80a0f88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a100e:	4628      	mov	r0, r5
 80a1010:	f7ff f84c 	bl	80a00ac <__cxa_guard_release>
 80a1014:	4a05      	ldr	r2, [pc, #20]	; (80a102c <_Z16_fetch_usbserialv+0x48>)
 80a1016:	4906      	ldr	r1, [pc, #24]	; (80a1030 <_Z16_fetch_usbserialv+0x4c>)
 80a1018:	4803      	ldr	r0, [pc, #12]	; (80a1028 <_Z16_fetch_usbserialv+0x44>)
 80a101a:	f000 fab9 	bl	80a1590 <__aeabi_atexit>
	return _usbserial;
}
 80a101e:	4802      	ldr	r0, [pc, #8]	; (80a1028 <_Z16_fetch_usbserialv+0x44>)
 80a1020:	b007      	add	sp, #28
 80a1022:	bd30      	pop	{r4, r5, pc}
 80a1024:	20000100 	.word	0x20000100
 80a1028:	20000108 	.word	0x20000108
 80a102c:	20000078 	.word	0x20000078
 80a1030:	080a0f15 	.word	0x080a0f15

080a1034 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1034:	b510      	push	{r4, lr}
 80a1036:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1038:	2214      	movs	r2, #20
 80a103a:	2100      	movs	r1, #0
 80a103c:	f001 f9d2 	bl	80a23e4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1040:	4b05      	ldr	r3, [pc, #20]	; (80a1058 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1042:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1044:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1046:	4b05      	ldr	r3, [pc, #20]	; (80a105c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1048:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a104a:	f240 1301 	movw	r3, #257	; 0x101
 80a104e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1050:	2381      	movs	r3, #129	; 0x81
 80a1052:	8223      	strh	r3, [r4, #16]
}
 80a1054:	bd10      	pop	{r4, pc}
 80a1056:	bf00      	nop
 80a1058:	200002b2 	.word	0x200002b2
 80a105c:	200003b3 	.word	0x200003b3

080a1060 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1060:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1062:	4c0f      	ldr	r4, [pc, #60]	; (80a10a0 <_Z17_fetch_usbserial1v+0x40>)
{
 80a1064:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1066:	a801      	add	r0, sp, #4
 80a1068:	f7ff ffe4 	bl	80a1034 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a106c:	7823      	ldrb	r3, [r4, #0]
 80a106e:	f3bf 8f5b 	dmb	ish
 80a1072:	07db      	lsls	r3, r3, #31
 80a1074:	d410      	bmi.n	80a1098 <_Z17_fetch_usbserial1v+0x38>
 80a1076:	4620      	mov	r0, r4
 80a1078:	f7ff f813 	bl	80a00a2 <__cxa_guard_acquire>
 80a107c:	b160      	cbz	r0, 80a1098 <_Z17_fetch_usbserial1v+0x38>
 80a107e:	2101      	movs	r1, #1
 80a1080:	aa01      	add	r2, sp, #4
 80a1082:	4808      	ldr	r0, [pc, #32]	; (80a10a4 <_Z17_fetch_usbserial1v+0x44>)
 80a1084:	f7ff ff80 	bl	80a0f88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1088:	4620      	mov	r0, r4
 80a108a:	f7ff f80f 	bl	80a00ac <__cxa_guard_release>
 80a108e:	4a06      	ldr	r2, [pc, #24]	; (80a10a8 <_Z17_fetch_usbserial1v+0x48>)
 80a1090:	4906      	ldr	r1, [pc, #24]	; (80a10ac <_Z17_fetch_usbserial1v+0x4c>)
 80a1092:	4804      	ldr	r0, [pc, #16]	; (80a10a4 <_Z17_fetch_usbserial1v+0x44>)
 80a1094:	f000 fa7c 	bl	80a1590 <__aeabi_atexit>
  return _usbserial1;
}
 80a1098:	4802      	ldr	r0, [pc, #8]	; (80a10a4 <_Z17_fetch_usbserial1v+0x44>)
 80a109a:	b006      	add	sp, #24
 80a109c:	bd10      	pop	{r4, pc}
 80a109e:	bf00      	nop
 80a10a0:	20000104 	.word	0x20000104
 80a10a4:	2000011c 	.word	0x2000011c
 80a10a8:	20000078 	.word	0x20000078
 80a10ac:	080a0f15 	.word	0x080a0f15

080a10b0 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a10b0:	f7ff bbae 	b.w	80a0810 <HAL_Interrupts_Disable_All>

080a10b4 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a10b4:	f7ff bba4 	b.w	80a0800 <HAL_Interrupts_Enable_All>

080a10b8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a10b8:	4770      	bx	lr

080a10ba <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a10ba:	7441      	strb	r1, [r0, #17]
}
 80a10bc:	4770      	bx	lr

080a10be <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a10be:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a10c0:	7c00      	ldrb	r0, [r0, #16]
 80a10c2:	f7ff fc1d 	bl	80a0900 <hal_usart_available_data_for_write>
}
 80a10c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a10ca:	bd08      	pop	{r3, pc}

080a10cc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a10cc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a10ce:	7c00      	ldrb	r0, [r0, #16]
 80a10d0:	f7ff fbee 	bl	80a08b0 <hal_usart_available>
}
 80a10d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a10d8:	bd08      	pop	{r3, pc}

080a10da <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a10da:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a10dc:	7c00      	ldrb	r0, [r0, #16]
 80a10de:	f7ff fbf7 	bl	80a08d0 <hal_usart_peek>
}
 80a10e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a10e6:	bd08      	pop	{r3, pc}

080a10e8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a10e8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a10ea:	7c00      	ldrb	r0, [r0, #16]
 80a10ec:	f7ff fbe8 	bl	80a08c0 <hal_usart_read>
}
 80a10f0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a10f4:	bd08      	pop	{r3, pc}

080a10f6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a10f6:	7c00      	ldrb	r0, [r0, #16]
 80a10f8:	f7ff bbf2 	b.w	80a08e0 <hal_usart_flush>

080a10fc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a10fc:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a10fe:	7c46      	ldrb	r6, [r0, #17]
{
 80a1100:	4604      	mov	r4, r0
 80a1102:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1104:	b12e      	cbz	r6, 80a1112 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a1106:	4629      	mov	r1, r5
 80a1108:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a110a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a110e:	f7ff bbc7 	b.w	80a08a0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a1112:	7c00      	ldrb	r0, [r0, #16]
 80a1114:	f7ff fbf4 	bl	80a0900 <hal_usart_available_data_for_write>
 80a1118:	2800      	cmp	r0, #0
 80a111a:	dcf4      	bgt.n	80a1106 <_ZN11USARTSerial5writeEh+0xa>
}
 80a111c:	4630      	mov	r0, r6
 80a111e:	bd70      	pop	{r4, r5, r6, pc}

080a1120 <_ZN11USARTSerialD0Ev>:
 80a1120:	b510      	push	{r4, lr}
 80a1122:	4604      	mov	r4, r0
 80a1124:	2114      	movs	r1, #20
 80a1126:	f000 fa38 	bl	80a159a <_ZdlPvj>
 80a112a:	4620      	mov	r0, r4
 80a112c:	bd10      	pop	{r4, pc}
	...

080a1130 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a1130:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1134:	b510      	push	{r4, lr}
 80a1136:	4604      	mov	r4, r0
 80a1138:	4608      	mov	r0, r1
 80a113a:	4611      	mov	r1, r2
 80a113c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1140:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1144:	4a04      	ldr	r2, [pc, #16]	; (80a1158 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a1146:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a1148:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a114a:	2201      	movs	r2, #1
 80a114c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a114e:	461a      	mov	r2, r3
 80a1150:	f7ff fb9e 	bl	80a0890 <hal_usart_init>
}
 80a1154:	4620      	mov	r0, r4
 80a1156:	bd10      	pop	{r4, pc}
 80a1158:	080a24ec 	.word	0x080a24ec

080a115c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a115c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a115e:	4d0d      	ldr	r5, [pc, #52]	; (80a1194 <_Z22__fetch_global_Serial1v+0x38>)
 80a1160:	7829      	ldrb	r1, [r5, #0]
 80a1162:	f3bf 8f5b 	dmb	ish
 80a1166:	f011 0401 	ands.w	r4, r1, #1
 80a116a:	d111      	bne.n	80a1190 <_Z22__fetch_global_Serial1v+0x34>
 80a116c:	4628      	mov	r0, r5
 80a116e:	f7fe ff98 	bl	80a00a2 <__cxa_guard_acquire>
 80a1172:	b168      	cbz	r0, 80a1190 <_Z22__fetch_global_Serial1v+0x34>
 80a1174:	4621      	mov	r1, r4
 80a1176:	4a08      	ldr	r2, [pc, #32]	; (80a1198 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1178:	4b08      	ldr	r3, [pc, #32]	; (80a119c <_Z22__fetch_global_Serial1v+0x40>)
 80a117a:	4809      	ldr	r0, [pc, #36]	; (80a11a0 <_Z22__fetch_global_Serial1v+0x44>)
 80a117c:	f7ff ffd8 	bl	80a1130 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1180:	4628      	mov	r0, r5
 80a1182:	f7fe ff93 	bl	80a00ac <__cxa_guard_release>
 80a1186:	4a07      	ldr	r2, [pc, #28]	; (80a11a4 <_Z22__fetch_global_Serial1v+0x48>)
 80a1188:	4907      	ldr	r1, [pc, #28]	; (80a11a8 <_Z22__fetch_global_Serial1v+0x4c>)
 80a118a:	4805      	ldr	r0, [pc, #20]	; (80a11a0 <_Z22__fetch_global_Serial1v+0x44>)
 80a118c:	f000 fa00 	bl	80a1590 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1190:	4803      	ldr	r0, [pc, #12]	; (80a11a0 <_Z22__fetch_global_Serial1v+0x44>)
 80a1192:	bd38      	pop	{r3, r4, r5, pc}
 80a1194:	20000434 	.word	0x20000434
 80a1198:	20000438 	.word	0x20000438
 80a119c:	200004bc 	.word	0x200004bc
 80a11a0:	20000540 	.word	0x20000540
 80a11a4:	20000078 	.word	0x20000078
 80a11a8:	080a10b9 	.word	0x080a10b9

080a11ac <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a11ac:	4770      	bx	lr

080a11ae <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a11ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a11b0:	4606      	mov	r6, r0
 80a11b2:	4615      	mov	r5, r2
 80a11b4:	460c      	mov	r4, r1
 80a11b6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a11b8:	42bc      	cmp	r4, r7
 80a11ba:	d006      	beq.n	80a11ca <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a11bc:	6833      	ldr	r3, [r6, #0]
 80a11be:	4630      	mov	r0, r6
 80a11c0:	689b      	ldr	r3, [r3, #8]
 80a11c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a11c6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a11c8:	e7f6      	b.n	80a11b8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a11ca:	4628      	mov	r0, r5
 80a11cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a11ce <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a11ce:	2200      	movs	r2, #0
 80a11d0:	7c00      	ldrb	r0, [r0, #16]
 80a11d2:	f7ff bb9d 	b.w	80a0910 <hal_i2c_write>

080a11d6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a11d6:	2100      	movs	r1, #0
 80a11d8:	7c00      	ldrb	r0, [r0, #16]
 80a11da:	f7ff bba1 	b.w	80a0920 <hal_i2c_available>

080a11de <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a11de:	2100      	movs	r1, #0
 80a11e0:	7c00      	ldrb	r0, [r0, #16]
 80a11e2:	f7ff bba5 	b.w	80a0930 <hal_i2c_read>

080a11e6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a11e6:	2100      	movs	r1, #0
 80a11e8:	7c00      	ldrb	r0, [r0, #16]
 80a11ea:	f7ff bba9 	b.w	80a0940 <hal_i2c_peek>

080a11ee <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a11ee:	2100      	movs	r1, #0
 80a11f0:	7c00      	ldrb	r0, [r0, #16]
 80a11f2:	f7ff bbad 	b.w	80a0950 <hal_i2c_flush>

080a11f6 <_ZN7TwoWireD0Ev>:
 80a11f6:	b510      	push	{r4, lr}
 80a11f8:	4604      	mov	r4, r0
 80a11fa:	2114      	movs	r1, #20
 80a11fc:	f000 f9cd 	bl	80a159a <_ZdlPvj>
 80a1200:	4620      	mov	r0, r4
 80a1202:	bd10      	pop	{r4, pc}

080a1204 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1204:	b510      	push	{r4, lr}
 80a1206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a120a:	4604      	mov	r4, r0
 80a120c:	4608      	mov	r0, r1
 80a120e:	2100      	movs	r1, #0
 80a1210:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1214:	4b03      	ldr	r3, [pc, #12]	; (80a1224 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a1216:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a1218:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a121a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a121c:	f7ff fba8 	bl	80a0970 <hal_i2c_init>
}
 80a1220:	4620      	mov	r0, r4
 80a1222:	bd10      	pop	{r4, pc}
 80a1224:	080a251c 	.word	0x080a251c

080a1228 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a1228:	2200      	movs	r2, #0
 80a122a:	6840      	ldr	r0, [r0, #4]
 80a122c:	4611      	mov	r1, r2
 80a122e:	f7ff bc35 	b.w	80a0a9c <network_ready>

080a1232 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1232:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1234:	4615      	mov	r5, r2
 80a1236:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1238:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a123a:	460e      	mov	r6, r1
 80a123c:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a123e:	2100      	movs	r1, #0
 80a1240:	a803      	add	r0, sp, #12
 80a1242:	f001 f8cf 	bl	80a23e4 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1246:	4628      	mov	r0, r5
 80a1248:	f001 f8f8 	bl	80a243c <strlen>
 80a124c:	2700      	movs	r7, #0
 80a124e:	b281      	uxth	r1, r0
 80a1250:	6873      	ldr	r3, [r6, #4]
 80a1252:	4628      	mov	r0, r5
 80a1254:	9700      	str	r7, [sp, #0]
 80a1256:	aa03      	add	r2, sp, #12
 80a1258:	f7ff fbdc 	bl	80a0a14 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a125c:	b130      	cbz	r0, 80a126c <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a125e:	4639      	mov	r1, r7
 80a1260:	4620      	mov	r0, r4
 80a1262:	f7ff fe33 	bl	80a0ecc <_ZN9IPAddressC1Em>
    }
 80a1266:	4620      	mov	r0, r4
 80a1268:	b009      	add	sp, #36	; 0x24
 80a126a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a126c:	4620      	mov	r0, r4
 80a126e:	a903      	add	r1, sp, #12
 80a1270:	f7ff fe1a 	bl	80a0ea8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a1274:	e7f7      	b.n	80a1266 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a1276 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a1276:	2200      	movs	r2, #0
 80a1278:	6840      	ldr	r0, [r0, #4]
 80a127a:	4611      	mov	r1, r2
 80a127c:	f7ff bc2e 	b.w	80a0adc <network_listening>

080a1280 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a1280:	2200      	movs	r2, #0
 80a1282:	6840      	ldr	r0, [r0, #4]
 80a1284:	4611      	mov	r1, r2
 80a1286:	f7ff bc39 	b.w	80a0afc <network_get_listen_timeout>

080a128a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a128a:	2200      	movs	r2, #0
 80a128c:	6840      	ldr	r0, [r0, #4]
 80a128e:	f7ff bc2d 	b.w	80a0aec <network_set_listen_timeout>

080a1292 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1292:	2200      	movs	r2, #0
 80a1294:	6840      	ldr	r0, [r0, #4]
 80a1296:	f081 0101 	eor.w	r1, r1, #1
 80a129a:	f7ff bc17 	b.w	80a0acc <network_listen>

080a129e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a129e:	2300      	movs	r3, #0
 80a12a0:	6840      	ldr	r0, [r0, #4]
 80a12a2:	461a      	mov	r2, r3
 80a12a4:	4619      	mov	r1, r3
 80a12a6:	f7ff bc09 	b.w	80a0abc <network_off>

080a12aa <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a12aa:	2200      	movs	r2, #0
 80a12ac:	6840      	ldr	r0, [r0, #4]
 80a12ae:	4611      	mov	r1, r2
 80a12b0:	f7ff bbe4 	b.w	80a0a7c <network_connecting>

080a12b4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a12b4:	2200      	movs	r2, #0
 80a12b6:	2102      	movs	r1, #2
 80a12b8:	6840      	ldr	r0, [r0, #4]
 80a12ba:	f7ff bbe7 	b.w	80a0a8c <network_disconnect>

080a12be <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a12be:	2300      	movs	r3, #0
 80a12c0:	6840      	ldr	r0, [r0, #4]
 80a12c2:	461a      	mov	r2, r3
 80a12c4:	f7ff bbd2 	b.w	80a0a6c <network_connect>

080a12c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a12c8:	2204      	movs	r2, #4
 80a12ca:	4b02      	ldr	r3, [pc, #8]	; (80a12d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a12cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a12ce:	4a02      	ldr	r2, [pc, #8]	; (80a12d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a12d0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a12d2:	4770      	bx	lr
 80a12d4:	20000554 	.word	0x20000554
 80a12d8:	080a2544 	.word	0x080a2544

080a12dc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a12dc:	2300      	movs	r3, #0
 80a12de:	6840      	ldr	r0, [r0, #4]
 80a12e0:	461a      	mov	r2, r3
 80a12e2:	f7ff bbc3 	b.w	80a0a6c <network_connect>

080a12e6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a12e6:	2200      	movs	r2, #0
 80a12e8:	2102      	movs	r1, #2
 80a12ea:	6840      	ldr	r0, [r0, #4]
 80a12ec:	f7ff bbce 	b.w	80a0a8c <network_disconnect>

080a12f0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a12f0:	2200      	movs	r2, #0
 80a12f2:	6840      	ldr	r0, [r0, #4]
 80a12f4:	4611      	mov	r1, r2
 80a12f6:	f7ff bbc1 	b.w	80a0a7c <network_connecting>

080a12fa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a12fa:	2200      	movs	r2, #0
 80a12fc:	6840      	ldr	r0, [r0, #4]
 80a12fe:	4611      	mov	r1, r2
 80a1300:	f7ff bbcc 	b.w	80a0a9c <network_ready>

080a1304 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1304:	2300      	movs	r3, #0
 80a1306:	6840      	ldr	r0, [r0, #4]
 80a1308:	461a      	mov	r2, r3
 80a130a:	4619      	mov	r1, r3
 80a130c:	f7ff bbce 	b.w	80a0aac <network_on>

080a1310 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1310:	2300      	movs	r3, #0
 80a1312:	6840      	ldr	r0, [r0, #4]
 80a1314:	461a      	mov	r2, r3
 80a1316:	4619      	mov	r1, r3
 80a1318:	f7ff bbd0 	b.w	80a0abc <network_off>

080a131c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a131c:	2200      	movs	r2, #0
 80a131e:	6840      	ldr	r0, [r0, #4]
 80a1320:	f081 0101 	eor.w	r1, r1, #1
 80a1324:	f7ff bbd2 	b.w	80a0acc <network_listen>

080a1328 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1328:	2200      	movs	r2, #0
 80a132a:	6840      	ldr	r0, [r0, #4]
 80a132c:	f7ff bbde 	b.w	80a0aec <network_set_listen_timeout>

080a1330 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1330:	2200      	movs	r2, #0
 80a1332:	6840      	ldr	r0, [r0, #4]
 80a1334:	4611      	mov	r1, r2
 80a1336:	f7ff bbe1 	b.w	80a0afc <network_get_listen_timeout>

080a133a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a133a:	2200      	movs	r2, #0
 80a133c:	6840      	ldr	r0, [r0, #4]
 80a133e:	4611      	mov	r1, r2
 80a1340:	f7ff bbcc 	b.w	80a0adc <network_listening>

080a1344 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1344:	b570      	push	{r4, r5, r6, lr}
 80a1346:	4615      	mov	r5, r2
 80a1348:	b08e      	sub	sp, #56	; 0x38
 80a134a:	4604      	mov	r4, r0
    IPAddress addr;
 80a134c:	a808      	add	r0, sp, #32
 80a134e:	f7ff fd9d 	bl	80a0e8c <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a1352:	2211      	movs	r2, #17
 80a1354:	2100      	movs	r1, #0
 80a1356:	a803      	add	r0, sp, #12
 80a1358:	f001 f844 	bl	80a23e4 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a135c:	2600      	movs	r6, #0
 80a135e:	4628      	mov	r0, r5
 80a1360:	f001 f86c 	bl	80a243c <strlen>
 80a1364:	4b0a      	ldr	r3, [pc, #40]	; (80a1390 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1366:	9600      	str	r6, [sp, #0]
 80a1368:	b281      	uxth	r1, r0
 80a136a:	685b      	ldr	r3, [r3, #4]
 80a136c:	4628      	mov	r0, r5
 80a136e:	aa03      	add	r2, sp, #12
 80a1370:	f7ff fb50 	bl	80a0a14 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1374:	b130      	cbz	r0, 80a1384 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a1376:	4631      	mov	r1, r6
 80a1378:	4620      	mov	r0, r4
 80a137a:	f7ff fda7 	bl	80a0ecc <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a137e:	4620      	mov	r0, r4
 80a1380:	b00e      	add	sp, #56	; 0x38
 80a1382:	bd70      	pop	{r4, r5, r6, pc}
 80a1384:	4620      	mov	r0, r4
 80a1386:	a903      	add	r1, sp, #12
 80a1388:	f7ff fd8e 	bl	80a0ea8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a138c:	e7f7      	b.n	80a137e <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a138e:	bf00      	nop
 80a1390:	20000554 	.word	0x20000554

080a1394 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1394:	4b02      	ldr	r3, [pc, #8]	; (80a13a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1396:	4a03      	ldr	r2, [pc, #12]	; (80a13a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1398:	601a      	str	r2, [r3, #0]
 80a139a:	2200      	movs	r2, #0
 80a139c:	605a      	str	r2, [r3, #4]

} // spark
 80a139e:	4770      	bx	lr
 80a13a0:	2000055c 	.word	0x2000055c
 80a13a4:	080a2578 	.word	0x080a2578

080a13a8 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a13a8:	b510      	push	{r4, lr}
 80a13aa:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a13ac:	6880      	ldr	r0, [r0, #8]
 80a13ae:	b108      	cbz	r0, 80a13b4 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a13b0:	f7ff fa66 	bl	80a0880 <os_mutex_recursive_destroy>
 80a13b4:	4620      	mov	r0, r4
 80a13b6:	bd10      	pop	{r4, pc}

080a13b8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a13b8:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a13ba:	b570      	push	{r4, r5, r6, lr}
 80a13bc:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a13be:	d901      	bls.n	80a13c4 <pinAvailable+0xc>
    return false;
 80a13c0:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a13c2:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a13c4:	f1a0 030d 	sub.w	r3, r0, #13
 80a13c8:	2b02      	cmp	r3, #2
 80a13ca:	d90b      	bls.n	80a13e4 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a13cc:	2801      	cmp	r0, #1
 80a13ce:	d826      	bhi.n	80a141e <pinAvailable+0x66>
 80a13d0:	f000 f8b6 	bl	80a1540 <_Z19__fetch_global_Wirev>
 80a13d4:	2100      	movs	r1, #0
 80a13d6:	7c00      	ldrb	r0, [r0, #16]
 80a13d8:	f7ff fac2 	bl	80a0960 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a13dc:	f080 0001 	eor.w	r0, r0, #1
 80a13e0:	b2c0      	uxtb	r0, r0
 80a13e2:	e7ee      	b.n	80a13c2 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a13e4:	4e13      	ldr	r6, [pc, #76]	; (80a1434 <pinAvailable+0x7c>)
 80a13e6:	7831      	ldrb	r1, [r6, #0]
 80a13e8:	f3bf 8f5b 	dmb	ish
 80a13ec:	f011 0501 	ands.w	r5, r1, #1
 80a13f0:	d10f      	bne.n	80a1412 <pinAvailable+0x5a>
 80a13f2:	4630      	mov	r0, r6
 80a13f4:	f7fe fe55 	bl	80a00a2 <__cxa_guard_acquire>
 80a13f8:	b158      	cbz	r0, 80a1412 <pinAvailable+0x5a>
 80a13fa:	4629      	mov	r1, r5
 80a13fc:	480e      	ldr	r0, [pc, #56]	; (80a1438 <pinAvailable+0x80>)
 80a13fe:	f7ff fbad 	bl	80a0b5c <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a1402:	4630      	mov	r0, r6
 80a1404:	f7fe fe52 	bl	80a00ac <__cxa_guard_release>
 80a1408:	4a0c      	ldr	r2, [pc, #48]	; (80a143c <pinAvailable+0x84>)
 80a140a:	490d      	ldr	r1, [pc, #52]	; (80a1440 <pinAvailable+0x88>)
 80a140c:	480a      	ldr	r0, [pc, #40]	; (80a1438 <pinAvailable+0x80>)
 80a140e:	f000 f8bf 	bl	80a1590 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a1412:	4b09      	ldr	r3, [pc, #36]	; (80a1438 <pinAvailable+0x80>)
 80a1414:	7818      	ldrb	r0, [r3, #0]
 80a1416:	f7ff fabd 	bl	80a0994 <hal_spi_is_enabled>
 80a141a:	2800      	cmp	r0, #0
 80a141c:	d1d0      	bne.n	80a13c0 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a141e:	3c12      	subs	r4, #18
 80a1420:	2c01      	cmp	r4, #1
 80a1422:	d805      	bhi.n	80a1430 <pinAvailable+0x78>
 80a1424:	f7ff fe9a 	bl	80a115c <_Z22__fetch_global_Serial1v>
 80a1428:	7c00      	ldrb	r0, [r0, #16]
 80a142a:	f7ff fa61 	bl	80a08f0 <hal_usart_is_enabled>
 80a142e:	e7d5      	b.n	80a13dc <pinAvailable+0x24>
  return true; // 'pin' is available
 80a1430:	2001      	movs	r0, #1
 80a1432:	e7c6      	b.n	80a13c2 <pinAvailable+0xa>
 80a1434:	20000564 	.word	0x20000564
 80a1438:	20000568 	.word	0x20000568
 80a143c:	20000078 	.word	0x20000078
 80a1440:	080a13a9 	.word	0x080a13a9

080a1444 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1444:	2817      	cmp	r0, #23
{
 80a1446:	b538      	push	{r3, r4, r5, lr}
 80a1448:	4604      	mov	r4, r0
 80a144a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a144c:	d80a      	bhi.n	80a1464 <pinMode+0x20>
 80a144e:	29ff      	cmp	r1, #255	; 0xff
 80a1450:	d008      	beq.n	80a1464 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a1452:	f7ff ffb1 	bl	80a13b8 <pinAvailable>
 80a1456:	b128      	cbz	r0, 80a1464 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a1458:	4629      	mov	r1, r5
 80a145a:	4620      	mov	r0, r4
}
 80a145c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a1460:	f7ff b9ae 	b.w	80a07c0 <HAL_Pin_Mode>
}
 80a1464:	bd38      	pop	{r3, r4, r5, pc}

080a1466 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1466:	b538      	push	{r3, r4, r5, lr}
 80a1468:	4604      	mov	r4, r0
 80a146a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a146c:	f7ff f9b0 	bl	80a07d0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1470:	28ff      	cmp	r0, #255	; 0xff
 80a1472:	d010      	beq.n	80a1496 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a1474:	2806      	cmp	r0, #6
 80a1476:	d804      	bhi.n	80a1482 <digitalWrite+0x1c>
 80a1478:	234d      	movs	r3, #77	; 0x4d
 80a147a:	fa23 f000 	lsr.w	r0, r3, r0
 80a147e:	07c3      	lsls	r3, r0, #31
 80a1480:	d409      	bmi.n	80a1496 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1482:	4620      	mov	r0, r4
 80a1484:	f7ff ff98 	bl	80a13b8 <pinAvailable>
 80a1488:	b128      	cbz	r0, 80a1496 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a148a:	4629      	mov	r1, r5
 80a148c:	4620      	mov	r0, r4
}
 80a148e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a1492:	f7ff b9a5 	b.w	80a07e0 <HAL_GPIO_Write>
}
 80a1496:	bd38      	pop	{r3, r4, r5, pc}

080a1498 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 80a1498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a149c:	4690      	mov	r8, r2
 80a149e:	461f      	mov	r7, r3
 80a14a0:	2400      	movs	r4, #0
 80a14a2:	4606      	mov	r6, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
 80a14a4:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
 80a14a6:	f1b8 0f00 	cmp.w	r8, #0
 80a14aa:	d113      	bne.n	80a14d4 <shiftOut+0x3c>
      digitalWrite(dataPin, !!(val & (1 << i)));
 80a14ac:	fa47 f104 	asr.w	r1, r7, r4
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 80a14b0:	4630      	mov	r0, r6
 80a14b2:	f001 0101 	and.w	r1, r1, #1
 80a14b6:	f7ff ffd6 	bl	80a1466 <digitalWrite>
    digitalWrite(clockPin, HIGH);
 80a14ba:	2101      	movs	r1, #1
 80a14bc:	4628      	mov	r0, r5
 80a14be:	f7ff ffd2 	bl	80a1466 <digitalWrite>
    digitalWrite(clockPin, LOW);
 80a14c2:	3401      	adds	r4, #1
 80a14c4:	2100      	movs	r1, #0
 80a14c6:	4628      	mov	r0, r5
 80a14c8:	f7ff ffcd 	bl	80a1466 <digitalWrite>
  for (i = 0; i < 8; i++)  {
 80a14cc:	2c08      	cmp	r4, #8
 80a14ce:	d1ea      	bne.n	80a14a6 <shiftOut+0xe>
  }
}
 80a14d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 80a14d4:	f1c4 0107 	rsb	r1, r4, #7
 80a14d8:	fa47 f101 	asr.w	r1, r7, r1
 80a14dc:	e7e8      	b.n	80a14b0 <shiftOut+0x18>
	...

080a14e0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a14e0:	2300      	movs	r3, #0
 80a14e2:	b513      	push	{r0, r1, r4, lr}
 80a14e4:	4c07      	ldr	r4, [pc, #28]	; (80a1504 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a14e6:	461a      	mov	r2, r3
 80a14e8:	4619      	mov	r1, r3
 80a14ea:	4620      	mov	r0, r4
 80a14ec:	9300      	str	r3, [sp, #0]
 80a14ee:	f7ff fd03 	bl	80a0ef8 <_ZN9IPAddressC1Ehhhh>
 80a14f2:	4620      	mov	r0, r4
 80a14f4:	4a04      	ldr	r2, [pc, #16]	; (80a1508 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a14f6:	4905      	ldr	r1, [pc, #20]	; (80a150c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a14f8:	b002      	add	sp, #8
 80a14fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a14fe:	f000 b847 	b.w	80a1590 <__aeabi_atexit>
 80a1502:	bf00      	nop
 80a1504:	20000578 	.word	0x20000578
 80a1508:	20000078 	.word	0x20000078
 80a150c:	080a0e49 	.word	0x080a0e49

080a1510 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a1510:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a1512:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1514:	2520      	movs	r5, #32
 80a1516:	8043      	strh	r3, [r0, #2]
 80a1518:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a151a:	4e08      	ldr	r6, [pc, #32]	; (80a153c <_Z17acquireWireBufferv+0x2c>)
{
 80a151c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a151e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1520:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a1522:	6085      	str	r5, [r0, #8]
 80a1524:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1526:	4628      	mov	r0, r5
 80a1528:	f000 f839 	bl	80a159e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a152c:	4631      	mov	r1, r6
	};
 80a152e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1530:	4628      	mov	r0, r5
 80a1532:	f000 f834 	bl	80a159e <_ZnajRKSt9nothrow_t>
	};
 80a1536:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a1538:	4620      	mov	r0, r4
 80a153a:	bd70      	pop	{r4, r5, r6, pc}
 80a153c:	080a25a4 	.word	0x080a25a4

080a1540 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1540:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1542:	4d0f      	ldr	r5, [pc, #60]	; (80a1580 <_Z19__fetch_global_Wirev+0x40>)
{
 80a1544:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1546:	7829      	ldrb	r1, [r5, #0]
 80a1548:	f3bf 8f5b 	dmb	ish
 80a154c:	f011 0401 	ands.w	r4, r1, #1
 80a1550:	d113      	bne.n	80a157a <_Z19__fetch_global_Wirev+0x3a>
 80a1552:	4628      	mov	r0, r5
 80a1554:	f7fe fda5 	bl	80a00a2 <__cxa_guard_acquire>
 80a1558:	b178      	cbz	r0, 80a157a <_Z19__fetch_global_Wirev+0x3a>
 80a155a:	a801      	add	r0, sp, #4
 80a155c:	f7ff ffd8 	bl	80a1510 <_Z17acquireWireBufferv>
 80a1560:	4621      	mov	r1, r4
 80a1562:	aa01      	add	r2, sp, #4
 80a1564:	4807      	ldr	r0, [pc, #28]	; (80a1584 <_Z19__fetch_global_Wirev+0x44>)
 80a1566:	f7ff fe4d 	bl	80a1204 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a156a:	4628      	mov	r0, r5
 80a156c:	f7fe fd9e 	bl	80a00ac <__cxa_guard_release>
 80a1570:	4a05      	ldr	r2, [pc, #20]	; (80a1588 <_Z19__fetch_global_Wirev+0x48>)
 80a1572:	4906      	ldr	r1, [pc, #24]	; (80a158c <_Z19__fetch_global_Wirev+0x4c>)
 80a1574:	4803      	ldr	r0, [pc, #12]	; (80a1584 <_Z19__fetch_global_Wirev+0x44>)
 80a1576:	f000 f80b 	bl	80a1590 <__aeabi_atexit>
	return wire;
}
 80a157a:	4802      	ldr	r0, [pc, #8]	; (80a1584 <_Z19__fetch_global_Wirev+0x44>)
 80a157c:	b007      	add	sp, #28
 80a157e:	bd30      	pop	{r4, r5, pc}
 80a1580:	20000590 	.word	0x20000590
 80a1584:	20000594 	.word	0x20000594
 80a1588:	20000078 	.word	0x20000078
 80a158c:	080a11ad 	.word	0x080a11ad

080a1590 <__aeabi_atexit>:
 80a1590:	460b      	mov	r3, r1
 80a1592:	4601      	mov	r1, r0
 80a1594:	4618      	mov	r0, r3
 80a1596:	f000 bf09 	b.w	80a23ac <__cxa_atexit>

080a159a <_ZdlPvj>:
 80a159a:	f7fe bd80 	b.w	80a009e <_ZdlPv>

080a159e <_ZnajRKSt9nothrow_t>:
 80a159e:	f7fe bd7c 	b.w	80a009a <_Znaj>
	...

080a15a4 <__aeabi_drsub>:
 80a15a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a15a8:	e002      	b.n	80a15b0 <__adddf3>
 80a15aa:	bf00      	nop

080a15ac <__aeabi_dsub>:
 80a15ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a15b0 <__adddf3>:
 80a15b0:	b530      	push	{r4, r5, lr}
 80a15b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a15b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a15ba:	ea94 0f05 	teq	r4, r5
 80a15be:	bf08      	it	eq
 80a15c0:	ea90 0f02 	teqeq	r0, r2
 80a15c4:	bf1f      	itttt	ne
 80a15c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a15ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a15ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a15d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a15d6:	f000 80e2 	beq.w	80a179e <__adddf3+0x1ee>
 80a15da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a15de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a15e2:	bfb8      	it	lt
 80a15e4:	426d      	neglt	r5, r5
 80a15e6:	dd0c      	ble.n	80a1602 <__adddf3+0x52>
 80a15e8:	442c      	add	r4, r5
 80a15ea:	ea80 0202 	eor.w	r2, r0, r2
 80a15ee:	ea81 0303 	eor.w	r3, r1, r3
 80a15f2:	ea82 0000 	eor.w	r0, r2, r0
 80a15f6:	ea83 0101 	eor.w	r1, r3, r1
 80a15fa:	ea80 0202 	eor.w	r2, r0, r2
 80a15fe:	ea81 0303 	eor.w	r3, r1, r3
 80a1602:	2d36      	cmp	r5, #54	; 0x36
 80a1604:	bf88      	it	hi
 80a1606:	bd30      	pophi	{r4, r5, pc}
 80a1608:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a160c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1610:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1614:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1618:	d002      	beq.n	80a1620 <__adddf3+0x70>
 80a161a:	4240      	negs	r0, r0
 80a161c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1620:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1624:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1628:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a162c:	d002      	beq.n	80a1634 <__adddf3+0x84>
 80a162e:	4252      	negs	r2, r2
 80a1630:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1634:	ea94 0f05 	teq	r4, r5
 80a1638:	f000 80a7 	beq.w	80a178a <__adddf3+0x1da>
 80a163c:	f1a4 0401 	sub.w	r4, r4, #1
 80a1640:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1644:	db0d      	blt.n	80a1662 <__adddf3+0xb2>
 80a1646:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a164a:	fa22 f205 	lsr.w	r2, r2, r5
 80a164e:	1880      	adds	r0, r0, r2
 80a1650:	f141 0100 	adc.w	r1, r1, #0
 80a1654:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1658:	1880      	adds	r0, r0, r2
 80a165a:	fa43 f305 	asr.w	r3, r3, r5
 80a165e:	4159      	adcs	r1, r3
 80a1660:	e00e      	b.n	80a1680 <__adddf3+0xd0>
 80a1662:	f1a5 0520 	sub.w	r5, r5, #32
 80a1666:	f10e 0e20 	add.w	lr, lr, #32
 80a166a:	2a01      	cmp	r2, #1
 80a166c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1670:	bf28      	it	cs
 80a1672:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1676:	fa43 f305 	asr.w	r3, r3, r5
 80a167a:	18c0      	adds	r0, r0, r3
 80a167c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1684:	d507      	bpl.n	80a1696 <__adddf3+0xe6>
 80a1686:	f04f 0e00 	mov.w	lr, #0
 80a168a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a168e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1692:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1696:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a169a:	d31b      	bcc.n	80a16d4 <__adddf3+0x124>
 80a169c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a16a0:	d30c      	bcc.n	80a16bc <__adddf3+0x10c>
 80a16a2:	0849      	lsrs	r1, r1, #1
 80a16a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a16a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a16ac:	f104 0401 	add.w	r4, r4, #1
 80a16b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a16b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a16b8:	f080 809a 	bcs.w	80a17f0 <__adddf3+0x240>
 80a16bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a16c0:	bf08      	it	eq
 80a16c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a16c6:	f150 0000 	adcs.w	r0, r0, #0
 80a16ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a16ce:	ea41 0105 	orr.w	r1, r1, r5
 80a16d2:	bd30      	pop	{r4, r5, pc}
 80a16d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a16d8:	4140      	adcs	r0, r0
 80a16da:	eb41 0101 	adc.w	r1, r1, r1
 80a16de:	3c01      	subs	r4, #1
 80a16e0:	bf28      	it	cs
 80a16e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a16e6:	d2e9      	bcs.n	80a16bc <__adddf3+0x10c>
 80a16e8:	f091 0f00 	teq	r1, #0
 80a16ec:	bf04      	itt	eq
 80a16ee:	4601      	moveq	r1, r0
 80a16f0:	2000      	moveq	r0, #0
 80a16f2:	fab1 f381 	clz	r3, r1
 80a16f6:	bf08      	it	eq
 80a16f8:	3320      	addeq	r3, #32
 80a16fa:	f1a3 030b 	sub.w	r3, r3, #11
 80a16fe:	f1b3 0220 	subs.w	r2, r3, #32
 80a1702:	da0c      	bge.n	80a171e <__adddf3+0x16e>
 80a1704:	320c      	adds	r2, #12
 80a1706:	dd08      	ble.n	80a171a <__adddf3+0x16a>
 80a1708:	f102 0c14 	add.w	ip, r2, #20
 80a170c:	f1c2 020c 	rsb	r2, r2, #12
 80a1710:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1714:	fa21 f102 	lsr.w	r1, r1, r2
 80a1718:	e00c      	b.n	80a1734 <__adddf3+0x184>
 80a171a:	f102 0214 	add.w	r2, r2, #20
 80a171e:	bfd8      	it	le
 80a1720:	f1c2 0c20 	rsble	ip, r2, #32
 80a1724:	fa01 f102 	lsl.w	r1, r1, r2
 80a1728:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a172c:	bfdc      	itt	le
 80a172e:	ea41 010c 	orrle.w	r1, r1, ip
 80a1732:	4090      	lslle	r0, r2
 80a1734:	1ae4      	subs	r4, r4, r3
 80a1736:	bfa2      	ittt	ge
 80a1738:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a173c:	4329      	orrge	r1, r5
 80a173e:	bd30      	popge	{r4, r5, pc}
 80a1740:	ea6f 0404 	mvn.w	r4, r4
 80a1744:	3c1f      	subs	r4, #31
 80a1746:	da1c      	bge.n	80a1782 <__adddf3+0x1d2>
 80a1748:	340c      	adds	r4, #12
 80a174a:	dc0e      	bgt.n	80a176a <__adddf3+0x1ba>
 80a174c:	f104 0414 	add.w	r4, r4, #20
 80a1750:	f1c4 0220 	rsb	r2, r4, #32
 80a1754:	fa20 f004 	lsr.w	r0, r0, r4
 80a1758:	fa01 f302 	lsl.w	r3, r1, r2
 80a175c:	ea40 0003 	orr.w	r0, r0, r3
 80a1760:	fa21 f304 	lsr.w	r3, r1, r4
 80a1764:	ea45 0103 	orr.w	r1, r5, r3
 80a1768:	bd30      	pop	{r4, r5, pc}
 80a176a:	f1c4 040c 	rsb	r4, r4, #12
 80a176e:	f1c4 0220 	rsb	r2, r4, #32
 80a1772:	fa20 f002 	lsr.w	r0, r0, r2
 80a1776:	fa01 f304 	lsl.w	r3, r1, r4
 80a177a:	ea40 0003 	orr.w	r0, r0, r3
 80a177e:	4629      	mov	r1, r5
 80a1780:	bd30      	pop	{r4, r5, pc}
 80a1782:	fa21 f004 	lsr.w	r0, r1, r4
 80a1786:	4629      	mov	r1, r5
 80a1788:	bd30      	pop	{r4, r5, pc}
 80a178a:	f094 0f00 	teq	r4, #0
 80a178e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1792:	bf06      	itte	eq
 80a1794:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1798:	3401      	addeq	r4, #1
 80a179a:	3d01      	subne	r5, #1
 80a179c:	e74e      	b.n	80a163c <__adddf3+0x8c>
 80a179e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a17a2:	bf18      	it	ne
 80a17a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a17a8:	d029      	beq.n	80a17fe <__adddf3+0x24e>
 80a17aa:	ea94 0f05 	teq	r4, r5
 80a17ae:	bf08      	it	eq
 80a17b0:	ea90 0f02 	teqeq	r0, r2
 80a17b4:	d005      	beq.n	80a17c2 <__adddf3+0x212>
 80a17b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a17ba:	bf04      	itt	eq
 80a17bc:	4619      	moveq	r1, r3
 80a17be:	4610      	moveq	r0, r2
 80a17c0:	bd30      	pop	{r4, r5, pc}
 80a17c2:	ea91 0f03 	teq	r1, r3
 80a17c6:	bf1e      	ittt	ne
 80a17c8:	2100      	movne	r1, #0
 80a17ca:	2000      	movne	r0, #0
 80a17cc:	bd30      	popne	{r4, r5, pc}
 80a17ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a17d2:	d105      	bne.n	80a17e0 <__adddf3+0x230>
 80a17d4:	0040      	lsls	r0, r0, #1
 80a17d6:	4149      	adcs	r1, r1
 80a17d8:	bf28      	it	cs
 80a17da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a17de:	bd30      	pop	{r4, r5, pc}
 80a17e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a17e4:	bf3c      	itt	cc
 80a17e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a17ea:	bd30      	popcc	{r4, r5, pc}
 80a17ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a17f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a17f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a17f8:	f04f 0000 	mov.w	r0, #0
 80a17fc:	bd30      	pop	{r4, r5, pc}
 80a17fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1802:	bf1a      	itte	ne
 80a1804:	4619      	movne	r1, r3
 80a1806:	4610      	movne	r0, r2
 80a1808:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a180c:	bf1c      	itt	ne
 80a180e:	460b      	movne	r3, r1
 80a1810:	4602      	movne	r2, r0
 80a1812:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1816:	bf06      	itte	eq
 80a1818:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a181c:	ea91 0f03 	teqeq	r1, r3
 80a1820:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1824:	bd30      	pop	{r4, r5, pc}
 80a1826:	bf00      	nop

080a1828 <__aeabi_ui2d>:
 80a1828:	f090 0f00 	teq	r0, #0
 80a182c:	bf04      	itt	eq
 80a182e:	2100      	moveq	r1, #0
 80a1830:	4770      	bxeq	lr
 80a1832:	b530      	push	{r4, r5, lr}
 80a1834:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1838:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a183c:	f04f 0500 	mov.w	r5, #0
 80a1840:	f04f 0100 	mov.w	r1, #0
 80a1844:	e750      	b.n	80a16e8 <__adddf3+0x138>
 80a1846:	bf00      	nop

080a1848 <__aeabi_i2d>:
 80a1848:	f090 0f00 	teq	r0, #0
 80a184c:	bf04      	itt	eq
 80a184e:	2100      	moveq	r1, #0
 80a1850:	4770      	bxeq	lr
 80a1852:	b530      	push	{r4, r5, lr}
 80a1854:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1858:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a185c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1860:	bf48      	it	mi
 80a1862:	4240      	negmi	r0, r0
 80a1864:	f04f 0100 	mov.w	r1, #0
 80a1868:	e73e      	b.n	80a16e8 <__adddf3+0x138>
 80a186a:	bf00      	nop

080a186c <__aeabi_f2d>:
 80a186c:	0042      	lsls	r2, r0, #1
 80a186e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1872:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1876:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a187a:	bf1f      	itttt	ne
 80a187c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1880:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1884:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1888:	4770      	bxne	lr
 80a188a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a188e:	bf08      	it	eq
 80a1890:	4770      	bxeq	lr
 80a1892:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a1896:	bf04      	itt	eq
 80a1898:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a189c:	4770      	bxeq	lr
 80a189e:	b530      	push	{r4, r5, lr}
 80a18a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a18a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a18a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a18ac:	e71c      	b.n	80a16e8 <__adddf3+0x138>
 80a18ae:	bf00      	nop

080a18b0 <__aeabi_ul2d>:
 80a18b0:	ea50 0201 	orrs.w	r2, r0, r1
 80a18b4:	bf08      	it	eq
 80a18b6:	4770      	bxeq	lr
 80a18b8:	b530      	push	{r4, r5, lr}
 80a18ba:	f04f 0500 	mov.w	r5, #0
 80a18be:	e00a      	b.n	80a18d6 <__aeabi_l2d+0x16>

080a18c0 <__aeabi_l2d>:
 80a18c0:	ea50 0201 	orrs.w	r2, r0, r1
 80a18c4:	bf08      	it	eq
 80a18c6:	4770      	bxeq	lr
 80a18c8:	b530      	push	{r4, r5, lr}
 80a18ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a18ce:	d502      	bpl.n	80a18d6 <__aeabi_l2d+0x16>
 80a18d0:	4240      	negs	r0, r0
 80a18d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a18d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a18da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a18de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a18e2:	f43f aed8 	beq.w	80a1696 <__adddf3+0xe6>
 80a18e6:	f04f 0203 	mov.w	r2, #3
 80a18ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a18ee:	bf18      	it	ne
 80a18f0:	3203      	addne	r2, #3
 80a18f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a18f6:	bf18      	it	ne
 80a18f8:	3203      	addne	r2, #3
 80a18fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a18fe:	f1c2 0320 	rsb	r3, r2, #32
 80a1902:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1906:	fa20 f002 	lsr.w	r0, r0, r2
 80a190a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a190e:	ea40 000e 	orr.w	r0, r0, lr
 80a1912:	fa21 f102 	lsr.w	r1, r1, r2
 80a1916:	4414      	add	r4, r2
 80a1918:	e6bd      	b.n	80a1696 <__adddf3+0xe6>
 80a191a:	bf00      	nop

080a191c <__aeabi_dmul>:
 80a191c:	b570      	push	{r4, r5, r6, lr}
 80a191e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1922:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1926:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a192a:	bf1d      	ittte	ne
 80a192c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1930:	ea94 0f0c 	teqne	r4, ip
 80a1934:	ea95 0f0c 	teqne	r5, ip
 80a1938:	f000 f8de 	bleq	80a1af8 <__aeabi_dmul+0x1dc>
 80a193c:	442c      	add	r4, r5
 80a193e:	ea81 0603 	eor.w	r6, r1, r3
 80a1942:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1946:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a194a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a194e:	bf18      	it	ne
 80a1950:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1954:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a195c:	d038      	beq.n	80a19d0 <__aeabi_dmul+0xb4>
 80a195e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1962:	f04f 0500 	mov.w	r5, #0
 80a1966:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a196a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a196e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1972:	f04f 0600 	mov.w	r6, #0
 80a1976:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a197a:	f09c 0f00 	teq	ip, #0
 80a197e:	bf18      	it	ne
 80a1980:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1984:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1988:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a198c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1990:	d204      	bcs.n	80a199c <__aeabi_dmul+0x80>
 80a1992:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1996:	416d      	adcs	r5, r5
 80a1998:	eb46 0606 	adc.w	r6, r6, r6
 80a199c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a19a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a19a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a19a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a19ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a19b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a19b4:	bf88      	it	hi
 80a19b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a19ba:	d81e      	bhi.n	80a19fa <__aeabi_dmul+0xde>
 80a19bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a19c0:	bf08      	it	eq
 80a19c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a19c6:	f150 0000 	adcs.w	r0, r0, #0
 80a19ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a19ce:	bd70      	pop	{r4, r5, r6, pc}
 80a19d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a19d4:	ea46 0101 	orr.w	r1, r6, r1
 80a19d8:	ea40 0002 	orr.w	r0, r0, r2
 80a19dc:	ea81 0103 	eor.w	r1, r1, r3
 80a19e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a19e4:	bfc2      	ittt	gt
 80a19e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a19ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a19ee:	bd70      	popgt	{r4, r5, r6, pc}
 80a19f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a19f4:	f04f 0e00 	mov.w	lr, #0
 80a19f8:	3c01      	subs	r4, #1
 80a19fa:	f300 80ab 	bgt.w	80a1b54 <__aeabi_dmul+0x238>
 80a19fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a1a02:	bfde      	ittt	le
 80a1a04:	2000      	movle	r0, #0
 80a1a06:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a1a0a:	bd70      	pople	{r4, r5, r6, pc}
 80a1a0c:	f1c4 0400 	rsb	r4, r4, #0
 80a1a10:	3c20      	subs	r4, #32
 80a1a12:	da35      	bge.n	80a1a80 <__aeabi_dmul+0x164>
 80a1a14:	340c      	adds	r4, #12
 80a1a16:	dc1b      	bgt.n	80a1a50 <__aeabi_dmul+0x134>
 80a1a18:	f104 0414 	add.w	r4, r4, #20
 80a1a1c:	f1c4 0520 	rsb	r5, r4, #32
 80a1a20:	fa00 f305 	lsl.w	r3, r0, r5
 80a1a24:	fa20 f004 	lsr.w	r0, r0, r4
 80a1a28:	fa01 f205 	lsl.w	r2, r1, r5
 80a1a2c:	ea40 0002 	orr.w	r0, r0, r2
 80a1a30:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a1a34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1a38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1a3c:	fa21 f604 	lsr.w	r6, r1, r4
 80a1a40:	eb42 0106 	adc.w	r1, r2, r6
 80a1a44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1a48:	bf08      	it	eq
 80a1a4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1a4e:	bd70      	pop	{r4, r5, r6, pc}
 80a1a50:	f1c4 040c 	rsb	r4, r4, #12
 80a1a54:	f1c4 0520 	rsb	r5, r4, #32
 80a1a58:	fa00 f304 	lsl.w	r3, r0, r4
 80a1a5c:	fa20 f005 	lsr.w	r0, r0, r5
 80a1a60:	fa01 f204 	lsl.w	r2, r1, r4
 80a1a64:	ea40 0002 	orr.w	r0, r0, r2
 80a1a68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1a6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1a70:	f141 0100 	adc.w	r1, r1, #0
 80a1a74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1a78:	bf08      	it	eq
 80a1a7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1a7e:	bd70      	pop	{r4, r5, r6, pc}
 80a1a80:	f1c4 0520 	rsb	r5, r4, #32
 80a1a84:	fa00 f205 	lsl.w	r2, r0, r5
 80a1a88:	ea4e 0e02 	orr.w	lr, lr, r2
 80a1a8c:	fa20 f304 	lsr.w	r3, r0, r4
 80a1a90:	fa01 f205 	lsl.w	r2, r1, r5
 80a1a94:	ea43 0302 	orr.w	r3, r3, r2
 80a1a98:	fa21 f004 	lsr.w	r0, r1, r4
 80a1a9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1aa0:	fa21 f204 	lsr.w	r2, r1, r4
 80a1aa4:	ea20 0002 	bic.w	r0, r0, r2
 80a1aa8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a1aac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1ab0:	bf08      	it	eq
 80a1ab2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1ab6:	bd70      	pop	{r4, r5, r6, pc}
 80a1ab8:	f094 0f00 	teq	r4, #0
 80a1abc:	d10f      	bne.n	80a1ade <__aeabi_dmul+0x1c2>
 80a1abe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a1ac2:	0040      	lsls	r0, r0, #1
 80a1ac4:	eb41 0101 	adc.w	r1, r1, r1
 80a1ac8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1acc:	bf08      	it	eq
 80a1ace:	3c01      	subeq	r4, #1
 80a1ad0:	d0f7      	beq.n	80a1ac2 <__aeabi_dmul+0x1a6>
 80a1ad2:	ea41 0106 	orr.w	r1, r1, r6
 80a1ad6:	f095 0f00 	teq	r5, #0
 80a1ada:	bf18      	it	ne
 80a1adc:	4770      	bxne	lr
 80a1ade:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a1ae2:	0052      	lsls	r2, r2, #1
 80a1ae4:	eb43 0303 	adc.w	r3, r3, r3
 80a1ae8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a1aec:	bf08      	it	eq
 80a1aee:	3d01      	subeq	r5, #1
 80a1af0:	d0f7      	beq.n	80a1ae2 <__aeabi_dmul+0x1c6>
 80a1af2:	ea43 0306 	orr.w	r3, r3, r6
 80a1af6:	4770      	bx	lr
 80a1af8:	ea94 0f0c 	teq	r4, ip
 80a1afc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1b00:	bf18      	it	ne
 80a1b02:	ea95 0f0c 	teqne	r5, ip
 80a1b06:	d00c      	beq.n	80a1b22 <__aeabi_dmul+0x206>
 80a1b08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1b0c:	bf18      	it	ne
 80a1b0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1b12:	d1d1      	bne.n	80a1ab8 <__aeabi_dmul+0x19c>
 80a1b14:	ea81 0103 	eor.w	r1, r1, r3
 80a1b18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1b1c:	f04f 0000 	mov.w	r0, #0
 80a1b20:	bd70      	pop	{r4, r5, r6, pc}
 80a1b22:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1b26:	bf06      	itte	eq
 80a1b28:	4610      	moveq	r0, r2
 80a1b2a:	4619      	moveq	r1, r3
 80a1b2c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1b30:	d019      	beq.n	80a1b66 <__aeabi_dmul+0x24a>
 80a1b32:	ea94 0f0c 	teq	r4, ip
 80a1b36:	d102      	bne.n	80a1b3e <__aeabi_dmul+0x222>
 80a1b38:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a1b3c:	d113      	bne.n	80a1b66 <__aeabi_dmul+0x24a>
 80a1b3e:	ea95 0f0c 	teq	r5, ip
 80a1b42:	d105      	bne.n	80a1b50 <__aeabi_dmul+0x234>
 80a1b44:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a1b48:	bf1c      	itt	ne
 80a1b4a:	4610      	movne	r0, r2
 80a1b4c:	4619      	movne	r1, r3
 80a1b4e:	d10a      	bne.n	80a1b66 <__aeabi_dmul+0x24a>
 80a1b50:	ea81 0103 	eor.w	r1, r1, r3
 80a1b54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1b58:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1b5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1b60:	f04f 0000 	mov.w	r0, #0
 80a1b64:	bd70      	pop	{r4, r5, r6, pc}
 80a1b66:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1b6a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a1b6e:	bd70      	pop	{r4, r5, r6, pc}

080a1b70 <__aeabi_ddiv>:
 80a1b70:	b570      	push	{r4, r5, r6, lr}
 80a1b72:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1b76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1b7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1b7e:	bf1d      	ittte	ne
 80a1b80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1b84:	ea94 0f0c 	teqne	r4, ip
 80a1b88:	ea95 0f0c 	teqne	r5, ip
 80a1b8c:	f000 f8a7 	bleq	80a1cde <__aeabi_ddiv+0x16e>
 80a1b90:	eba4 0405 	sub.w	r4, r4, r5
 80a1b94:	ea81 0e03 	eor.w	lr, r1, r3
 80a1b98:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1b9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1ba0:	f000 8088 	beq.w	80a1cb4 <__aeabi_ddiv+0x144>
 80a1ba4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1ba8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a1bac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a1bb0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a1bb4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a1bb8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a1bbc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a1bc0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a1bc4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a1bc8:	429d      	cmp	r5, r3
 80a1bca:	bf08      	it	eq
 80a1bcc:	4296      	cmpeq	r6, r2
 80a1bce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a1bd2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a1bd6:	d202      	bcs.n	80a1bde <__aeabi_ddiv+0x6e>
 80a1bd8:	085b      	lsrs	r3, r3, #1
 80a1bda:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1bde:	1ab6      	subs	r6, r6, r2
 80a1be0:	eb65 0503 	sbc.w	r5, r5, r3
 80a1be4:	085b      	lsrs	r3, r3, #1
 80a1be6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1bea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a1bee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a1bf2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1bf6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1bfa:	bf22      	ittt	cs
 80a1bfc:	1ab6      	subcs	r6, r6, r2
 80a1bfe:	4675      	movcs	r5, lr
 80a1c00:	ea40 000c 	orrcs.w	r0, r0, ip
 80a1c04:	085b      	lsrs	r3, r3, #1
 80a1c06:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1c0a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1c0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1c12:	bf22      	ittt	cs
 80a1c14:	1ab6      	subcs	r6, r6, r2
 80a1c16:	4675      	movcs	r5, lr
 80a1c18:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a1c1c:	085b      	lsrs	r3, r3, #1
 80a1c1e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1c22:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1c26:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1c2a:	bf22      	ittt	cs
 80a1c2c:	1ab6      	subcs	r6, r6, r2
 80a1c2e:	4675      	movcs	r5, lr
 80a1c30:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a1c34:	085b      	lsrs	r3, r3, #1
 80a1c36:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1c3a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1c3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1c42:	bf22      	ittt	cs
 80a1c44:	1ab6      	subcs	r6, r6, r2
 80a1c46:	4675      	movcs	r5, lr
 80a1c48:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a1c4c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a1c50:	d018      	beq.n	80a1c84 <__aeabi_ddiv+0x114>
 80a1c52:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a1c56:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a1c5a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a1c5e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a1c62:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a1c66:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a1c6a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a1c6e:	d1c0      	bne.n	80a1bf2 <__aeabi_ddiv+0x82>
 80a1c70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1c74:	d10b      	bne.n	80a1c8e <__aeabi_ddiv+0x11e>
 80a1c76:	ea41 0100 	orr.w	r1, r1, r0
 80a1c7a:	f04f 0000 	mov.w	r0, #0
 80a1c7e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a1c82:	e7b6      	b.n	80a1bf2 <__aeabi_ddiv+0x82>
 80a1c84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1c88:	bf04      	itt	eq
 80a1c8a:	4301      	orreq	r1, r0
 80a1c8c:	2000      	moveq	r0, #0
 80a1c8e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1c92:	bf88      	it	hi
 80a1c94:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1c98:	f63f aeaf 	bhi.w	80a19fa <__aeabi_dmul+0xde>
 80a1c9c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a1ca0:	bf04      	itt	eq
 80a1ca2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a1ca6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1caa:	f150 0000 	adcs.w	r0, r0, #0
 80a1cae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1cb2:	bd70      	pop	{r4, r5, r6, pc}
 80a1cb4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a1cb8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a1cbc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a1cc0:	bfc2      	ittt	gt
 80a1cc2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1cc6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1cca:	bd70      	popgt	{r4, r5, r6, pc}
 80a1ccc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1cd0:	f04f 0e00 	mov.w	lr, #0
 80a1cd4:	3c01      	subs	r4, #1
 80a1cd6:	e690      	b.n	80a19fa <__aeabi_dmul+0xde>
 80a1cd8:	ea45 0e06 	orr.w	lr, r5, r6
 80a1cdc:	e68d      	b.n	80a19fa <__aeabi_dmul+0xde>
 80a1cde:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1ce2:	ea94 0f0c 	teq	r4, ip
 80a1ce6:	bf08      	it	eq
 80a1ce8:	ea95 0f0c 	teqeq	r5, ip
 80a1cec:	f43f af3b 	beq.w	80a1b66 <__aeabi_dmul+0x24a>
 80a1cf0:	ea94 0f0c 	teq	r4, ip
 80a1cf4:	d10a      	bne.n	80a1d0c <__aeabi_ddiv+0x19c>
 80a1cf6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1cfa:	f47f af34 	bne.w	80a1b66 <__aeabi_dmul+0x24a>
 80a1cfe:	ea95 0f0c 	teq	r5, ip
 80a1d02:	f47f af25 	bne.w	80a1b50 <__aeabi_dmul+0x234>
 80a1d06:	4610      	mov	r0, r2
 80a1d08:	4619      	mov	r1, r3
 80a1d0a:	e72c      	b.n	80a1b66 <__aeabi_dmul+0x24a>
 80a1d0c:	ea95 0f0c 	teq	r5, ip
 80a1d10:	d106      	bne.n	80a1d20 <__aeabi_ddiv+0x1b0>
 80a1d12:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1d16:	f43f aefd 	beq.w	80a1b14 <__aeabi_dmul+0x1f8>
 80a1d1a:	4610      	mov	r0, r2
 80a1d1c:	4619      	mov	r1, r3
 80a1d1e:	e722      	b.n	80a1b66 <__aeabi_dmul+0x24a>
 80a1d20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1d24:	bf18      	it	ne
 80a1d26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1d2a:	f47f aec5 	bne.w	80a1ab8 <__aeabi_dmul+0x19c>
 80a1d2e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a1d32:	f47f af0d 	bne.w	80a1b50 <__aeabi_dmul+0x234>
 80a1d36:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a1d3a:	f47f aeeb 	bne.w	80a1b14 <__aeabi_dmul+0x1f8>
 80a1d3e:	e712      	b.n	80a1b66 <__aeabi_dmul+0x24a>

080a1d40 <__gedf2>:
 80a1d40:	f04f 3cff 	mov.w	ip, #4294967295
 80a1d44:	e006      	b.n	80a1d54 <__cmpdf2+0x4>
 80a1d46:	bf00      	nop

080a1d48 <__ledf2>:
 80a1d48:	f04f 0c01 	mov.w	ip, #1
 80a1d4c:	e002      	b.n	80a1d54 <__cmpdf2+0x4>
 80a1d4e:	bf00      	nop

080a1d50 <__cmpdf2>:
 80a1d50:	f04f 0c01 	mov.w	ip, #1
 80a1d54:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a1d58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1d5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1d60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1d64:	bf18      	it	ne
 80a1d66:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a1d6a:	d01b      	beq.n	80a1da4 <__cmpdf2+0x54>
 80a1d6c:	b001      	add	sp, #4
 80a1d6e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a1d72:	bf0c      	ite	eq
 80a1d74:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a1d78:	ea91 0f03 	teqne	r1, r3
 80a1d7c:	bf02      	ittt	eq
 80a1d7e:	ea90 0f02 	teqeq	r0, r2
 80a1d82:	2000      	moveq	r0, #0
 80a1d84:	4770      	bxeq	lr
 80a1d86:	f110 0f00 	cmn.w	r0, #0
 80a1d8a:	ea91 0f03 	teq	r1, r3
 80a1d8e:	bf58      	it	pl
 80a1d90:	4299      	cmppl	r1, r3
 80a1d92:	bf08      	it	eq
 80a1d94:	4290      	cmpeq	r0, r2
 80a1d96:	bf2c      	ite	cs
 80a1d98:	17d8      	asrcs	r0, r3, #31
 80a1d9a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a1d9e:	f040 0001 	orr.w	r0, r0, #1
 80a1da2:	4770      	bx	lr
 80a1da4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a1da8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1dac:	d102      	bne.n	80a1db4 <__cmpdf2+0x64>
 80a1dae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a1db2:	d107      	bne.n	80a1dc4 <__cmpdf2+0x74>
 80a1db4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a1db8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a1dbc:	d1d6      	bne.n	80a1d6c <__cmpdf2+0x1c>
 80a1dbe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a1dc2:	d0d3      	beq.n	80a1d6c <__cmpdf2+0x1c>
 80a1dc4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a1dc8:	4770      	bx	lr
 80a1dca:	bf00      	nop

080a1dcc <__aeabi_cdrcmple>:
 80a1dcc:	4684      	mov	ip, r0
 80a1dce:	4610      	mov	r0, r2
 80a1dd0:	4662      	mov	r2, ip
 80a1dd2:	468c      	mov	ip, r1
 80a1dd4:	4619      	mov	r1, r3
 80a1dd6:	4663      	mov	r3, ip
 80a1dd8:	e000      	b.n	80a1ddc <__aeabi_cdcmpeq>
 80a1dda:	bf00      	nop

080a1ddc <__aeabi_cdcmpeq>:
 80a1ddc:	b501      	push	{r0, lr}
 80a1dde:	f7ff ffb7 	bl	80a1d50 <__cmpdf2>
 80a1de2:	2800      	cmp	r0, #0
 80a1de4:	bf48      	it	mi
 80a1de6:	f110 0f00 	cmnmi.w	r0, #0
 80a1dea:	bd01      	pop	{r0, pc}

080a1dec <__aeabi_dcmpeq>:
 80a1dec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1df0:	f7ff fff4 	bl	80a1ddc <__aeabi_cdcmpeq>
 80a1df4:	bf0c      	ite	eq
 80a1df6:	2001      	moveq	r0, #1
 80a1df8:	2000      	movne	r0, #0
 80a1dfa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1dfe:	bf00      	nop

080a1e00 <__aeabi_dcmplt>:
 80a1e00:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1e04:	f7ff ffea 	bl	80a1ddc <__aeabi_cdcmpeq>
 80a1e08:	bf34      	ite	cc
 80a1e0a:	2001      	movcc	r0, #1
 80a1e0c:	2000      	movcs	r0, #0
 80a1e0e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1e12:	bf00      	nop

080a1e14 <__aeabi_dcmple>:
 80a1e14:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1e18:	f7ff ffe0 	bl	80a1ddc <__aeabi_cdcmpeq>
 80a1e1c:	bf94      	ite	ls
 80a1e1e:	2001      	movls	r0, #1
 80a1e20:	2000      	movhi	r0, #0
 80a1e22:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1e26:	bf00      	nop

080a1e28 <__aeabi_dcmpge>:
 80a1e28:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1e2c:	f7ff ffce 	bl	80a1dcc <__aeabi_cdrcmple>
 80a1e30:	bf94      	ite	ls
 80a1e32:	2001      	movls	r0, #1
 80a1e34:	2000      	movhi	r0, #0
 80a1e36:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1e3a:	bf00      	nop

080a1e3c <__aeabi_dcmpgt>:
 80a1e3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a1e40:	f7ff ffc4 	bl	80a1dcc <__aeabi_cdrcmple>
 80a1e44:	bf34      	ite	cc
 80a1e46:	2001      	movcc	r0, #1
 80a1e48:	2000      	movcs	r0, #0
 80a1e4a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a1e4e:	bf00      	nop

080a1e50 <__aeabi_d2f>:
 80a1e50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a1e54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a1e58:	bf24      	itt	cs
 80a1e5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a1e5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a1e62:	d90d      	bls.n	80a1e80 <__aeabi_d2f+0x30>
 80a1e64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a1e68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a1e6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a1e70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a1e74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a1e78:	bf08      	it	eq
 80a1e7a:	f020 0001 	biceq.w	r0, r0, #1
 80a1e7e:	4770      	bx	lr
 80a1e80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a1e84:	d121      	bne.n	80a1eca <__aeabi_d2f+0x7a>
 80a1e86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a1e8a:	bfbc      	itt	lt
 80a1e8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a1e90:	4770      	bxlt	lr
 80a1e92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1e96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a1e9a:	f1c2 0218 	rsb	r2, r2, #24
 80a1e9e:	f1c2 0c20 	rsb	ip, r2, #32
 80a1ea2:	fa10 f30c 	lsls.w	r3, r0, ip
 80a1ea6:	fa20 f002 	lsr.w	r0, r0, r2
 80a1eaa:	bf18      	it	ne
 80a1eac:	f040 0001 	orrne.w	r0, r0, #1
 80a1eb0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a1eb4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a1eb8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a1ebc:	ea40 000c 	orr.w	r0, r0, ip
 80a1ec0:	fa23 f302 	lsr.w	r3, r3, r2
 80a1ec4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a1ec8:	e7cc      	b.n	80a1e64 <__aeabi_d2f+0x14>
 80a1eca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a1ece:	d107      	bne.n	80a1ee0 <__aeabi_d2f+0x90>
 80a1ed0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a1ed4:	bf1e      	ittt	ne
 80a1ed6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a1eda:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a1ede:	4770      	bxne	lr
 80a1ee0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a1ee4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a1ee8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1eec:	4770      	bx	lr
 80a1eee:	bf00      	nop

080a1ef0 <__aeabi_frsub>:
 80a1ef0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a1ef4:	e002      	b.n	80a1efc <__addsf3>
 80a1ef6:	bf00      	nop

080a1ef8 <__aeabi_fsub>:
 80a1ef8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a1efc <__addsf3>:
 80a1efc:	0042      	lsls	r2, r0, #1
 80a1efe:	bf1f      	itttt	ne
 80a1f00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a1f04:	ea92 0f03 	teqne	r2, r3
 80a1f08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a1f0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a1f10:	d06a      	beq.n	80a1fe8 <__addsf3+0xec>
 80a1f12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a1f16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a1f1a:	bfc1      	itttt	gt
 80a1f1c:	18d2      	addgt	r2, r2, r3
 80a1f1e:	4041      	eorgt	r1, r0
 80a1f20:	4048      	eorgt	r0, r1
 80a1f22:	4041      	eorgt	r1, r0
 80a1f24:	bfb8      	it	lt
 80a1f26:	425b      	neglt	r3, r3
 80a1f28:	2b19      	cmp	r3, #25
 80a1f2a:	bf88      	it	hi
 80a1f2c:	4770      	bxhi	lr
 80a1f2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a1f32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1f36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a1f3a:	bf18      	it	ne
 80a1f3c:	4240      	negne	r0, r0
 80a1f3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1f42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a1f46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a1f4a:	bf18      	it	ne
 80a1f4c:	4249      	negne	r1, r1
 80a1f4e:	ea92 0f03 	teq	r2, r3
 80a1f52:	d03f      	beq.n	80a1fd4 <__addsf3+0xd8>
 80a1f54:	f1a2 0201 	sub.w	r2, r2, #1
 80a1f58:	fa41 fc03 	asr.w	ip, r1, r3
 80a1f5c:	eb10 000c 	adds.w	r0, r0, ip
 80a1f60:	f1c3 0320 	rsb	r3, r3, #32
 80a1f64:	fa01 f103 	lsl.w	r1, r1, r3
 80a1f68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a1f6c:	d502      	bpl.n	80a1f74 <__addsf3+0x78>
 80a1f6e:	4249      	negs	r1, r1
 80a1f70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a1f74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a1f78:	d313      	bcc.n	80a1fa2 <__addsf3+0xa6>
 80a1f7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a1f7e:	d306      	bcc.n	80a1f8e <__addsf3+0x92>
 80a1f80:	0840      	lsrs	r0, r0, #1
 80a1f82:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1f86:	f102 0201 	add.w	r2, r2, #1
 80a1f8a:	2afe      	cmp	r2, #254	; 0xfe
 80a1f8c:	d251      	bcs.n	80a2032 <__addsf3+0x136>
 80a1f8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a1f92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1f96:	bf08      	it	eq
 80a1f98:	f020 0001 	biceq.w	r0, r0, #1
 80a1f9c:	ea40 0003 	orr.w	r0, r0, r3
 80a1fa0:	4770      	bx	lr
 80a1fa2:	0049      	lsls	r1, r1, #1
 80a1fa4:	eb40 0000 	adc.w	r0, r0, r0
 80a1fa8:	3a01      	subs	r2, #1
 80a1faa:	bf28      	it	cs
 80a1fac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a1fb0:	d2ed      	bcs.n	80a1f8e <__addsf3+0x92>
 80a1fb2:	fab0 fc80 	clz	ip, r0
 80a1fb6:	f1ac 0c08 	sub.w	ip, ip, #8
 80a1fba:	ebb2 020c 	subs.w	r2, r2, ip
 80a1fbe:	fa00 f00c 	lsl.w	r0, r0, ip
 80a1fc2:	bfaa      	itet	ge
 80a1fc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a1fc8:	4252      	neglt	r2, r2
 80a1fca:	4318      	orrge	r0, r3
 80a1fcc:	bfbc      	itt	lt
 80a1fce:	40d0      	lsrlt	r0, r2
 80a1fd0:	4318      	orrlt	r0, r3
 80a1fd2:	4770      	bx	lr
 80a1fd4:	f092 0f00 	teq	r2, #0
 80a1fd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a1fdc:	bf06      	itte	eq
 80a1fde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a1fe2:	3201      	addeq	r2, #1
 80a1fe4:	3b01      	subne	r3, #1
 80a1fe6:	e7b5      	b.n	80a1f54 <__addsf3+0x58>
 80a1fe8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a1fec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a1ff0:	bf18      	it	ne
 80a1ff2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a1ff6:	d021      	beq.n	80a203c <__addsf3+0x140>
 80a1ff8:	ea92 0f03 	teq	r2, r3
 80a1ffc:	d004      	beq.n	80a2008 <__addsf3+0x10c>
 80a1ffe:	f092 0f00 	teq	r2, #0
 80a2002:	bf08      	it	eq
 80a2004:	4608      	moveq	r0, r1
 80a2006:	4770      	bx	lr
 80a2008:	ea90 0f01 	teq	r0, r1
 80a200c:	bf1c      	itt	ne
 80a200e:	2000      	movne	r0, #0
 80a2010:	4770      	bxne	lr
 80a2012:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a2016:	d104      	bne.n	80a2022 <__addsf3+0x126>
 80a2018:	0040      	lsls	r0, r0, #1
 80a201a:	bf28      	it	cs
 80a201c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a2020:	4770      	bx	lr
 80a2022:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a2026:	bf3c      	itt	cc
 80a2028:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a202c:	4770      	bxcc	lr
 80a202e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2032:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a2036:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a203a:	4770      	bx	lr
 80a203c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a2040:	bf16      	itet	ne
 80a2042:	4608      	movne	r0, r1
 80a2044:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2048:	4601      	movne	r1, r0
 80a204a:	0242      	lsls	r2, r0, #9
 80a204c:	bf06      	itte	eq
 80a204e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a2052:	ea90 0f01 	teqeq	r0, r1
 80a2056:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a205a:	4770      	bx	lr

080a205c <__aeabi_ui2f>:
 80a205c:	f04f 0300 	mov.w	r3, #0
 80a2060:	e004      	b.n	80a206c <__aeabi_i2f+0x8>
 80a2062:	bf00      	nop

080a2064 <__aeabi_i2f>:
 80a2064:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2068:	bf48      	it	mi
 80a206a:	4240      	negmi	r0, r0
 80a206c:	ea5f 0c00 	movs.w	ip, r0
 80a2070:	bf08      	it	eq
 80a2072:	4770      	bxeq	lr
 80a2074:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2078:	4601      	mov	r1, r0
 80a207a:	f04f 0000 	mov.w	r0, #0
 80a207e:	e01c      	b.n	80a20ba <__aeabi_l2f+0x2a>

080a2080 <__aeabi_ul2f>:
 80a2080:	ea50 0201 	orrs.w	r2, r0, r1
 80a2084:	bf08      	it	eq
 80a2086:	4770      	bxeq	lr
 80a2088:	f04f 0300 	mov.w	r3, #0
 80a208c:	e00a      	b.n	80a20a4 <__aeabi_l2f+0x14>
 80a208e:	bf00      	nop

080a2090 <__aeabi_l2f>:
 80a2090:	ea50 0201 	orrs.w	r2, r0, r1
 80a2094:	bf08      	it	eq
 80a2096:	4770      	bxeq	lr
 80a2098:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a209c:	d502      	bpl.n	80a20a4 <__aeabi_l2f+0x14>
 80a209e:	4240      	negs	r0, r0
 80a20a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a20a4:	ea5f 0c01 	movs.w	ip, r1
 80a20a8:	bf02      	ittt	eq
 80a20aa:	4684      	moveq	ip, r0
 80a20ac:	4601      	moveq	r1, r0
 80a20ae:	2000      	moveq	r0, #0
 80a20b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a20b4:	bf08      	it	eq
 80a20b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a20ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a20be:	fabc f28c 	clz	r2, ip
 80a20c2:	3a08      	subs	r2, #8
 80a20c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a20c8:	db10      	blt.n	80a20ec <__aeabi_l2f+0x5c>
 80a20ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80a20ce:	4463      	add	r3, ip
 80a20d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80a20d4:	f1c2 0220 	rsb	r2, r2, #32
 80a20d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a20dc:	fa20 f202 	lsr.w	r2, r0, r2
 80a20e0:	eb43 0002 	adc.w	r0, r3, r2
 80a20e4:	bf08      	it	eq
 80a20e6:	f020 0001 	biceq.w	r0, r0, #1
 80a20ea:	4770      	bx	lr
 80a20ec:	f102 0220 	add.w	r2, r2, #32
 80a20f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80a20f4:	f1c2 0220 	rsb	r2, r2, #32
 80a20f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a20fc:	fa21 f202 	lsr.w	r2, r1, r2
 80a2100:	eb43 0002 	adc.w	r0, r3, r2
 80a2104:	bf08      	it	eq
 80a2106:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a210a:	4770      	bx	lr

080a210c <__aeabi_fmul>:
 80a210c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2110:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2114:	bf1e      	ittt	ne
 80a2116:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a211a:	ea92 0f0c 	teqne	r2, ip
 80a211e:	ea93 0f0c 	teqne	r3, ip
 80a2122:	d06f      	beq.n	80a2204 <__aeabi_fmul+0xf8>
 80a2124:	441a      	add	r2, r3
 80a2126:	ea80 0c01 	eor.w	ip, r0, r1
 80a212a:	0240      	lsls	r0, r0, #9
 80a212c:	bf18      	it	ne
 80a212e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2132:	d01e      	beq.n	80a2172 <__aeabi_fmul+0x66>
 80a2134:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2138:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a213c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2140:	fba0 3101 	umull	r3, r1, r0, r1
 80a2144:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2148:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a214c:	bf3e      	ittt	cc
 80a214e:	0049      	lslcc	r1, r1, #1
 80a2150:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2154:	005b      	lslcc	r3, r3, #1
 80a2156:	ea40 0001 	orr.w	r0, r0, r1
 80a215a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a215e:	2afd      	cmp	r2, #253	; 0xfd
 80a2160:	d81d      	bhi.n	80a219e <__aeabi_fmul+0x92>
 80a2162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2166:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a216a:	bf08      	it	eq
 80a216c:	f020 0001 	biceq.w	r0, r0, #1
 80a2170:	4770      	bx	lr
 80a2172:	f090 0f00 	teq	r0, #0
 80a2176:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a217a:	bf08      	it	eq
 80a217c:	0249      	lsleq	r1, r1, #9
 80a217e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2182:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2186:	3a7f      	subs	r2, #127	; 0x7f
 80a2188:	bfc2      	ittt	gt
 80a218a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a218e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2192:	4770      	bxgt	lr
 80a2194:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2198:	f04f 0300 	mov.w	r3, #0
 80a219c:	3a01      	subs	r2, #1
 80a219e:	dc5d      	bgt.n	80a225c <__aeabi_fmul+0x150>
 80a21a0:	f112 0f19 	cmn.w	r2, #25
 80a21a4:	bfdc      	itt	le
 80a21a6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a21aa:	4770      	bxle	lr
 80a21ac:	f1c2 0200 	rsb	r2, r2, #0
 80a21b0:	0041      	lsls	r1, r0, #1
 80a21b2:	fa21 f102 	lsr.w	r1, r1, r2
 80a21b6:	f1c2 0220 	rsb	r2, r2, #32
 80a21ba:	fa00 fc02 	lsl.w	ip, r0, r2
 80a21be:	ea5f 0031 	movs.w	r0, r1, rrx
 80a21c2:	f140 0000 	adc.w	r0, r0, #0
 80a21c6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a21ca:	bf08      	it	eq
 80a21cc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a21d0:	4770      	bx	lr
 80a21d2:	f092 0f00 	teq	r2, #0
 80a21d6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a21da:	bf02      	ittt	eq
 80a21dc:	0040      	lsleq	r0, r0, #1
 80a21de:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a21e2:	3a01      	subeq	r2, #1
 80a21e4:	d0f9      	beq.n	80a21da <__aeabi_fmul+0xce>
 80a21e6:	ea40 000c 	orr.w	r0, r0, ip
 80a21ea:	f093 0f00 	teq	r3, #0
 80a21ee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a21f2:	bf02      	ittt	eq
 80a21f4:	0049      	lsleq	r1, r1, #1
 80a21f6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a21fa:	3b01      	subeq	r3, #1
 80a21fc:	d0f9      	beq.n	80a21f2 <__aeabi_fmul+0xe6>
 80a21fe:	ea41 010c 	orr.w	r1, r1, ip
 80a2202:	e78f      	b.n	80a2124 <__aeabi_fmul+0x18>
 80a2204:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2208:	ea92 0f0c 	teq	r2, ip
 80a220c:	bf18      	it	ne
 80a220e:	ea93 0f0c 	teqne	r3, ip
 80a2212:	d00a      	beq.n	80a222a <__aeabi_fmul+0x11e>
 80a2214:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2218:	bf18      	it	ne
 80a221a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a221e:	d1d8      	bne.n	80a21d2 <__aeabi_fmul+0xc6>
 80a2220:	ea80 0001 	eor.w	r0, r0, r1
 80a2224:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2228:	4770      	bx	lr
 80a222a:	f090 0f00 	teq	r0, #0
 80a222e:	bf17      	itett	ne
 80a2230:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2234:	4608      	moveq	r0, r1
 80a2236:	f091 0f00 	teqne	r1, #0
 80a223a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a223e:	d014      	beq.n	80a226a <__aeabi_fmul+0x15e>
 80a2240:	ea92 0f0c 	teq	r2, ip
 80a2244:	d101      	bne.n	80a224a <__aeabi_fmul+0x13e>
 80a2246:	0242      	lsls	r2, r0, #9
 80a2248:	d10f      	bne.n	80a226a <__aeabi_fmul+0x15e>
 80a224a:	ea93 0f0c 	teq	r3, ip
 80a224e:	d103      	bne.n	80a2258 <__aeabi_fmul+0x14c>
 80a2250:	024b      	lsls	r3, r1, #9
 80a2252:	bf18      	it	ne
 80a2254:	4608      	movne	r0, r1
 80a2256:	d108      	bne.n	80a226a <__aeabi_fmul+0x15e>
 80a2258:	ea80 0001 	eor.w	r0, r0, r1
 80a225c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2260:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2264:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2268:	4770      	bx	lr
 80a226a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a226e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2272:	4770      	bx	lr

080a2274 <__aeabi_fdiv>:
 80a2274:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2278:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a227c:	bf1e      	ittt	ne
 80a227e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2282:	ea92 0f0c 	teqne	r2, ip
 80a2286:	ea93 0f0c 	teqne	r3, ip
 80a228a:	d069      	beq.n	80a2360 <__aeabi_fdiv+0xec>
 80a228c:	eba2 0203 	sub.w	r2, r2, r3
 80a2290:	ea80 0c01 	eor.w	ip, r0, r1
 80a2294:	0249      	lsls	r1, r1, #9
 80a2296:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a229a:	d037      	beq.n	80a230c <__aeabi_fdiv+0x98>
 80a229c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a22a0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a22a4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a22a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a22ac:	428b      	cmp	r3, r1
 80a22ae:	bf38      	it	cc
 80a22b0:	005b      	lslcc	r3, r3, #1
 80a22b2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a22b6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a22ba:	428b      	cmp	r3, r1
 80a22bc:	bf24      	itt	cs
 80a22be:	1a5b      	subcs	r3, r3, r1
 80a22c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a22c4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a22c8:	bf24      	itt	cs
 80a22ca:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a22ce:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a22d2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a22d6:	bf24      	itt	cs
 80a22d8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a22dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a22e0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a22e4:	bf24      	itt	cs
 80a22e6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a22ea:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a22ee:	011b      	lsls	r3, r3, #4
 80a22f0:	bf18      	it	ne
 80a22f2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a22f6:	d1e0      	bne.n	80a22ba <__aeabi_fdiv+0x46>
 80a22f8:	2afd      	cmp	r2, #253	; 0xfd
 80a22fa:	f63f af50 	bhi.w	80a219e <__aeabi_fmul+0x92>
 80a22fe:	428b      	cmp	r3, r1
 80a2300:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2304:	bf08      	it	eq
 80a2306:	f020 0001 	biceq.w	r0, r0, #1
 80a230a:	4770      	bx	lr
 80a230c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2310:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2314:	327f      	adds	r2, #127	; 0x7f
 80a2316:	bfc2      	ittt	gt
 80a2318:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a231c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2320:	4770      	bxgt	lr
 80a2322:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2326:	f04f 0300 	mov.w	r3, #0
 80a232a:	3a01      	subs	r2, #1
 80a232c:	e737      	b.n	80a219e <__aeabi_fmul+0x92>
 80a232e:	f092 0f00 	teq	r2, #0
 80a2332:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2336:	bf02      	ittt	eq
 80a2338:	0040      	lsleq	r0, r0, #1
 80a233a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a233e:	3a01      	subeq	r2, #1
 80a2340:	d0f9      	beq.n	80a2336 <__aeabi_fdiv+0xc2>
 80a2342:	ea40 000c 	orr.w	r0, r0, ip
 80a2346:	f093 0f00 	teq	r3, #0
 80a234a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a234e:	bf02      	ittt	eq
 80a2350:	0049      	lsleq	r1, r1, #1
 80a2352:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2356:	3b01      	subeq	r3, #1
 80a2358:	d0f9      	beq.n	80a234e <__aeabi_fdiv+0xda>
 80a235a:	ea41 010c 	orr.w	r1, r1, ip
 80a235e:	e795      	b.n	80a228c <__aeabi_fdiv+0x18>
 80a2360:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2364:	ea92 0f0c 	teq	r2, ip
 80a2368:	d108      	bne.n	80a237c <__aeabi_fdiv+0x108>
 80a236a:	0242      	lsls	r2, r0, #9
 80a236c:	f47f af7d 	bne.w	80a226a <__aeabi_fmul+0x15e>
 80a2370:	ea93 0f0c 	teq	r3, ip
 80a2374:	f47f af70 	bne.w	80a2258 <__aeabi_fmul+0x14c>
 80a2378:	4608      	mov	r0, r1
 80a237a:	e776      	b.n	80a226a <__aeabi_fmul+0x15e>
 80a237c:	ea93 0f0c 	teq	r3, ip
 80a2380:	d104      	bne.n	80a238c <__aeabi_fdiv+0x118>
 80a2382:	024b      	lsls	r3, r1, #9
 80a2384:	f43f af4c 	beq.w	80a2220 <__aeabi_fmul+0x114>
 80a2388:	4608      	mov	r0, r1
 80a238a:	e76e      	b.n	80a226a <__aeabi_fmul+0x15e>
 80a238c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2390:	bf18      	it	ne
 80a2392:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2396:	d1ca      	bne.n	80a232e <__aeabi_fdiv+0xba>
 80a2398:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a239c:	f47f af5c 	bne.w	80a2258 <__aeabi_fmul+0x14c>
 80a23a0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a23a4:	f47f af3c 	bne.w	80a2220 <__aeabi_fmul+0x114>
 80a23a8:	e75f      	b.n	80a226a <__aeabi_fmul+0x15e>
 80a23aa:	bf00      	nop

080a23ac <__cxa_atexit>:
 80a23ac:	b510      	push	{r4, lr}
 80a23ae:	4604      	mov	r4, r0
 80a23b0:	4804      	ldr	r0, [pc, #16]	; (80a23c4 <__cxa_atexit+0x18>)
 80a23b2:	4613      	mov	r3, r2
 80a23b4:	b120      	cbz	r0, 80a23c0 <__cxa_atexit+0x14>
 80a23b6:	460a      	mov	r2, r1
 80a23b8:	2002      	movs	r0, #2
 80a23ba:	4621      	mov	r1, r4
 80a23bc:	f3af 8000 	nop.w
 80a23c0:	bd10      	pop	{r4, pc}
 80a23c2:	bf00      	nop
 80a23c4:	00000000 	.word	0x00000000

080a23c8 <memcpy>:
 80a23c8:	440a      	add	r2, r1
 80a23ca:	4291      	cmp	r1, r2
 80a23cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80a23d0:	d100      	bne.n	80a23d4 <memcpy+0xc>
 80a23d2:	4770      	bx	lr
 80a23d4:	b510      	push	{r4, lr}
 80a23d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a23da:	4291      	cmp	r1, r2
 80a23dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a23e0:	d1f9      	bne.n	80a23d6 <memcpy+0xe>
 80a23e2:	bd10      	pop	{r4, pc}

080a23e4 <memset>:
 80a23e4:	4603      	mov	r3, r0
 80a23e6:	4402      	add	r2, r0
 80a23e8:	4293      	cmp	r3, r2
 80a23ea:	d100      	bne.n	80a23ee <memset+0xa>
 80a23ec:	4770      	bx	lr
 80a23ee:	f803 1b01 	strb.w	r1, [r3], #1
 80a23f2:	e7f9      	b.n	80a23e8 <memset+0x4>

080a23f4 <srand>:
 80a23f4:	b538      	push	{r3, r4, r5, lr}
 80a23f6:	4b0d      	ldr	r3, [pc, #52]	; (80a242c <srand+0x38>)
 80a23f8:	4604      	mov	r4, r0
 80a23fa:	681d      	ldr	r5, [r3, #0]
 80a23fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a23fe:	b97b      	cbnz	r3, 80a2420 <srand+0x2c>
 80a2400:	2018      	movs	r0, #24
 80a2402:	f7fe fb93 	bl	80a0b2c <malloc>
 80a2406:	4a0a      	ldr	r2, [pc, #40]	; (80a2430 <srand+0x3c>)
 80a2408:	4b0a      	ldr	r3, [pc, #40]	; (80a2434 <srand+0x40>)
 80a240a:	63a8      	str	r0, [r5, #56]	; 0x38
 80a240c:	e9c0 2300 	strd	r2, r3, [r0]
 80a2410:	4b09      	ldr	r3, [pc, #36]	; (80a2438 <srand+0x44>)
 80a2412:	2201      	movs	r2, #1
 80a2414:	6083      	str	r3, [r0, #8]
 80a2416:	230b      	movs	r3, #11
 80a2418:	8183      	strh	r3, [r0, #12]
 80a241a:	2300      	movs	r3, #0
 80a241c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2420:	2200      	movs	r2, #0
 80a2422:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2424:	611c      	str	r4, [r3, #16]
 80a2426:	615a      	str	r2, [r3, #20]
 80a2428:	bd38      	pop	{r3, r4, r5, pc}
 80a242a:	bf00      	nop
 80a242c:	20000010 	.word	0x20000010
 80a2430:	abcd330e 	.word	0xabcd330e
 80a2434:	e66d1234 	.word	0xe66d1234
 80a2438:	0005deec 	.word	0x0005deec

080a243c <strlen>:
 80a243c:	4603      	mov	r3, r0
 80a243e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2442:	2a00      	cmp	r2, #0
 80a2444:	d1fb      	bne.n	80a243e <strlen+0x2>
 80a2446:	1a18      	subs	r0, r3, r0
 80a2448:	3801      	subs	r0, #1
 80a244a:	4770      	bx	lr

080a244c <dynalib_user>:
 80a244c:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a245c:	0000 0000 6f73 6c67 6169 6200 746f 6f74     ....soglia.botto
 80a246c:	656e 4900 766e 6c61 6469 7220 6165 6964     ne.Invalid readi
 80a247c:	676e 6100 7070 2500 2d59 6d25 252d 5464     ng.app.%Y-%m-%dT
 80a248c:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
 80a249c:	656d 0000                                   me..

080a24a0 <_ZTV9IPAddress>:
	...
 80a24a8:	0e59 080a 0e49 080a 0e4b 080a               Y...I...K...

080a24b4 <_ZTV9USBSerial>:
	...
 80a24bc:	0f15 080a 0f7b 080a 0f53 080a 0bd5 080a     ....{...S.......
 80a24cc:	0f45 080a 0f17 080a 0f27 080a 0f75 080a     E.......'...u...
 80a24dc:	0f37 080a 0f11 080a                         7.......

080a24e4 <_ZTV11USARTSerial>:
	...
 80a24ec:	10b9 080a 1121 080a 10fd 080a 0bd5 080a     ....!...........
 80a24fc:	10cd 080a 10e9 080a 10db 080a 10f7 080a     ................
 80a250c:	10bb 080a 10bf 080a                         ........

080a2514 <_ZTV7TwoWire>:
	...
 80a251c:	11ad 080a 11f7 080a 11cf 080a 11af 080a     ................
 80a252c:	11d7 080a 11df 080a 11e7 080a 11ef 080a     ................

080a253c <_ZTVN5spark9WiFiClassE>:
	...
 80a2544:	12bf 080a 12b5 080a 12ab 080a 1229 080a     ............)...
 80a2554:	0c8d 080a 129f 080a 1293 080a 128b 080a     ................
 80a2564:	1281 080a 1277 080a 1233 080a               ....w...3...

080a2570 <_ZTVN5spark12NetworkClassE>:
	...
 80a2578:	12dd 080a 12e7 080a 12f1 080a 12fb 080a     ................
 80a2588:	1305 080a 1311 080a 131d 080a 1329 080a     ............)...
 80a2598:	1331 080a 133b 080a 1345 080a               1...;...E...

080a25a4 <_ZSt7nothrow>:
	...

080a25a5 <link_const_variable_data_end>:
 80a25a5:	00          	.byte	0x00
	...

080a25a8 <link_constructors_location>:
 80a25a8:	080a0235 	.word	0x080a0235
 80a25ac:	080a0b99 	.word	0x080a0b99
 80a25b0:	080a0c99 	.word	0x080a0c99
 80a25b4:	080a0ca9 	.word	0x080a0ca9
 80a25b8:	080a0ce1 	.word	0x080a0ce1
 80a25bc:	080a12c9 	.word	0x080a12c9
 80a25c0:	080a1395 	.word	0x080a1395
 80a25c4:	080a14e1 	.word	0x080a14e1

080a25c8 <link_constructors_end>:
	...
