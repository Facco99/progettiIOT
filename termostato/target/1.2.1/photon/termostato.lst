
c:/IOT/termostato/target/1.2.1/photon/termostato.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004848  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a4860  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         000000ac  20000300  080a4864  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000005d8  200003b0  200003b0  000403b0  2**3
                  ALLOC
  5 .module_info_suffix 00000028  080a4910  080a4910  00034910  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a4938  080a4938  00034938  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000c76a8  00000000  00000000  0003493c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00012038  00000000  00000000  000fbfe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00015569  00000000  00000000  0010e01c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002130  00000000  00000000  00123585  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000035d8  00000000  00000000  001256b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00027ffe  00000000  00000000  00128c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002874f  00000000  00000000  00150c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a60fa  00000000  00000000  001793da  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c174  00000000  00000000  0021f4d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	e0 43 0a 08                                         .C..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fc41 	bl	80a28b4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fc46 	bl	80a28ca <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a4864 	.word	0x080a4864
 80a004c:	200003ac 	.word	0x200003ac
 80a0050:	200003b0 	.word	0x200003b0
 80a0054:	20000988 	.word	0x20000988
 80a0058:	20000988 	.word	0x20000988

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 ff87 	bl	80a0f70 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a481c 	.word	0x080a481c
 80a0084:	080a485c 	.word	0x080a485c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b820 	b.w	80a00cc <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8c7 	bl	80a0220 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bf2d 	b.w	80a0ef4 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bd8b 	b.w	80a0bb4 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bd91 	b.w	80a0bc4 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z8setPoint6String>:
    Serial.println("Invalid reading");
  }
  msLastSample = millis();
}

int setPoint(String point){
 80a00b4:	b508      	push	{r3, lr}
  soglia = point.toFloat();
 80a00b6:	f000 fe3d 	bl	80a0d34 <_ZNK6String7toFloatEv>
 80a00ba:	f001 fe01 	bl	80a1cc0 <__aeabi_f2d>
 80a00be:	4b02      	ldr	r3, [pc, #8]	; (80a00c8 <_Z8setPoint6String+0x14>)
 80a00c0:	e9c3 0100 	strd	r0, r1, [r3]
  return 1;
 80a00c4:	2001      	movs	r0, #1
 80a00c6:	bd08      	pop	{r3, pc}
 80a00c8:	200003c0 	.word	0x200003c0

080a00cc <setup>:

double celsius;
uint32_t msLastMetric;
uint32_t msLastSample;

void setup() {
 80a00cc:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  pinMode(D3, INPUT);
 80a00ce:	2100      	movs	r1, #0
 80a00d0:	2003      	movs	r0, #3
 80a00d2:	f001 fa87 	bl	80a15e4 <pinMode>
  pinMode(latchPin, OUTPUT);
 80a00d6:	4b1a      	ldr	r3, [pc, #104]	; (80a0140 <setup+0x74>)
 80a00d8:	2101      	movs	r1, #1
 80a00da:	8818      	ldrh	r0, [r3, #0]
 80a00dc:	f001 fa82 	bl	80a15e4 <pinMode>
  pinMode(dataPin, OUTPUT);
 80a00e0:	4b18      	ldr	r3, [pc, #96]	; (80a0144 <setup+0x78>)
 80a00e2:	2101      	movs	r1, #1
 80a00e4:	8818      	ldrh	r0, [r3, #0]
 80a00e6:	f001 fa7d 	bl	80a15e4 <pinMode>
  pinMode(clockPin, OUTPUT);
 80a00ea:	4b17      	ldr	r3, [pc, #92]	; (80a0148 <setup+0x7c>)
 80a00ec:	2101      	movs	r1, #1
 80a00ee:	8818      	ldrh	r0, [r3, #0]
 80a00f0:	f001 fa78 	bl	80a15e4 <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a00f4:	2300      	movs	r3, #0
 80a00f6:	2202      	movs	r2, #2
 80a00f8:	4914      	ldr	r1, [pc, #80]	; (80a014c <setup+0x80>)
 80a00fa:	4815      	ldr	r0, [pc, #84]	; (80a0150 <setup+0x84>)
 80a00fc:	f000 fd42 	bl	80a0b84 <spark_variable>
 80a0100:	2300      	movs	r3, #0
 80a0102:	2209      	movs	r2, #9
 80a0104:	4913      	ldr	r1, [pc, #76]	; (80a0154 <setup+0x88>)
 80a0106:	4814      	ldr	r0, [pc, #80]	; (80a0158 <setup+0x8c>)
 80a0108:	f000 fd3c 	bl	80a0b84 <spark_variable>
 80a010c:	2300      	movs	r3, #0
 80a010e:	2209      	movs	r2, #9
 80a0110:	4912      	ldr	r1, [pc, #72]	; (80a015c <setup+0x90>)
 80a0112:	4813      	ldr	r0, [pc, #76]	; (80a0160 <setup+0x94>)
 80a0114:	f000 fd36 	bl	80a0b84 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a0118:	4a12      	ldr	r2, [pc, #72]	; (80a0164 <setup+0x98>)
 80a011a:	4913      	ldr	r1, [pc, #76]	; (80a0168 <setup+0x9c>)
 80a011c:	4813      	ldr	r0, [pc, #76]	; (80a016c <setup+0xa0>)
 80a011e:	f000 ff69 	bl	80a0ff4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a0122:	2300      	movs	r3, #0
 80a0124:	4912      	ldr	r1, [pc, #72]	; (80a0170 <setup+0xa4>)
 80a0126:	2202      	movs	r2, #2
 80a0128:	4812      	ldr	r0, [pc, #72]	; (80a0174 <setup+0xa8>)
 80a012a:	f000 fd2b 	bl	80a0b84 <spark_variable>
  Particle.variable("soglia", soglia);
  Particle.variable("Tempreatura attuale", actualTemp);
  Particle.function("setSoglia", setPoint);
  Particle.variable("Relay", relay1);

  Serial.begin(9600);
 80a012e:	f001 f84b 	bl	80a11c8 <_Z16_fetch_usbserialv>
}
 80a0132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Particle.variable("soglia", soglia);
  Particle.variable("Tempreatura attuale", actualTemp);
  Particle.function("setSoglia", setPoint);
  Particle.variable("Relay", relay1);

  Serial.begin(9600);
 80a0136:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a013a:	f001 b82b 	b.w	80a1194 <_ZN9USBSerial5beginEl>
 80a013e:	bf00      	nop
 80a0140:	20000300 	.word	0x20000300
 80a0144:	20000308 	.word	0x20000308
 80a0148:	20000304 	.word	0x20000304
 80a014c:	200003fc 	.word	0x200003fc
 80a0150:	080a43f4 	.word	0x080a43f4
 80a0154:	200003c0 	.word	0x200003c0
 80a0158:	080a43fc 	.word	0x080a43fc
 80a015c:	200003b8 	.word	0x200003b8
 80a0160:	080a4403 	.word	0x080a4403
 80a0164:	080a4417 	.word	0x080a4417
 80a0168:	080a00b5 	.word	0x080a00b5
 80a016c:	080a0fc9 	.word	0x080a0fc9
 80a0170:	200003f4 	.word	0x200003f4
 80a0174:	080a4421 	.word	0x080a4421

080a0178 <_Z13registerWritev>:
    registerWrite();
  }

}

void registerWrite() {
 80a0178:	b538      	push	{r3, r4, r5, lr}

    shiftStatus = 8*relay1;
 80a017a:	4b0c      	ldr	r3, [pc, #48]	; (80a01ac <_Z13registerWritev+0x34>)

    digitalWrite(latchPin, LOW);
 80a017c:	4c0c      	ldr	r4, [pc, #48]	; (80a01b0 <_Z13registerWritev+0x38>)

}

void registerWrite() {

    shiftStatus = 8*relay1;
 80a017e:	681b      	ldr	r3, [r3, #0]
 80a0180:	4d0c      	ldr	r5, [pc, #48]	; (80a01b4 <_Z13registerWritev+0x3c>)
 80a0182:	00db      	lsls	r3, r3, #3

    digitalWrite(latchPin, LOW);
 80a0184:	8820      	ldrh	r0, [r4, #0]
 80a0186:	2100      	movs	r1, #0

}

void registerWrite() {

    shiftStatus = 8*relay1;
 80a0188:	602b      	str	r3, [r5, #0]

    digitalWrite(latchPin, LOW);
 80a018a:	f001 fa3c 	bl	80a1606 <digitalWrite>
    shiftOut(dataPin, clockPin, MSBFIRST, shiftStatus);
 80a018e:	490a      	ldr	r1, [pc, #40]	; (80a01b8 <_Z13registerWritev+0x40>)
 80a0190:	480a      	ldr	r0, [pc, #40]	; (80a01bc <_Z13registerWritev+0x44>)
 80a0192:	782b      	ldrb	r3, [r5, #0]
 80a0194:	7809      	ldrb	r1, [r1, #0]
 80a0196:	7800      	ldrb	r0, [r0, #0]
 80a0198:	2201      	movs	r2, #1
 80a019a:	f001 fa60 	bl	80a165e <shiftOut>
    digitalWrite(latchPin, HIGH);
 80a019e:	8820      	ldrh	r0, [r4, #0]
 80a01a0:	2101      	movs	r1, #1
}
 80a01a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    shiftStatus = 8*relay1;

    digitalWrite(latchPin, LOW);
    shiftOut(dataPin, clockPin, MSBFIRST, shiftStatus);
    digitalWrite(latchPin, HIGH);
 80a01a6:	f001 ba2e 	b.w	80a1606 <digitalWrite>
 80a01aa:	bf00      	nop
 80a01ac:	200003f4 	.word	0x200003f4
 80a01b0:	20000300 	.word	0x20000300
 80a01b4:	200003f8 	.word	0x200003f8
 80a01b8:	20000304 	.word	0x20000304
 80a01bc:	20000308 	.word	0x20000308

080a01c0 <_Z7getTempv>:
}

void getTemp(){
 80a01c0:	b538      	push	{r3, r4, r5, lr}
  float _temp;
  int   i = 0;
 80a01c2:	2400      	movs	r4, #0

  do {
    _temp = ds18b20.getTemperature();
 80a01c4:	2100      	movs	r1, #0
 80a01c6:	4811      	ldr	r0, [pc, #68]	; (80a020c <_Z7getTempv+0x4c>)
 80a01c8:	f000 fb12 	bl	80a07f0 <_ZN7DS18B2014getTemperatureEb>
 80a01cc:	4605      	mov	r5, r0
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
 80a01ce:	480f      	ldr	r0, [pc, #60]	; (80a020c <_Z7getTempv+0x4c>)
 80a01d0:	f000 fb2a 	bl	80a0828 <_ZN7DS18B208crcCheckEv>
 80a01d4:	b988      	cbnz	r0, 80a01fa <_Z7getTempv+0x3a>
 80a01d6:	3401      	adds	r4, #1
 80a01d8:	2c05      	cmp	r4, #5
 80a01da:	d1f3      	bne.n	80a01c4 <_Z7getTempv+0x4>

  if (i < MAXRETRY) {
    celsius = _temp;
  }
  else {
    celsius = NAN;
 80a01dc:	490c      	ldr	r1, [pc, #48]	; (80a0210 <_Z7getTempv+0x50>)
 80a01de:	4b0d      	ldr	r3, [pc, #52]	; (80a0214 <_Z7getTempv+0x54>)
 80a01e0:	2000      	movs	r0, #0
 80a01e2:	e9c3 0100 	strd	r0, r1, [r3]
    Serial.println("Invalid reading");
 80a01e6:	f000 ffef 	bl	80a11c8 <_Z16_fetch_usbserialv>
 80a01ea:	490b      	ldr	r1, [pc, #44]	; (80a0218 <_Z7getTempv+0x58>)
 80a01ec:	f000 fde1 	bl	80a0db2 <_ZN5Print7printlnEPKc>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a01f0:	f000 fb7a 	bl	80a08e8 <HAL_Timer_Get_Milli_Seconds>
  }
  msLastSample = millis();
 80a01f4:	4b09      	ldr	r3, [pc, #36]	; (80a021c <_Z7getTempv+0x5c>)
 80a01f6:	6018      	str	r0, [r3, #0]
}
 80a01f8:	bd38      	pop	{r3, r4, r5, pc}

  do {
    _temp = ds18b20.getTemperature();
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);

  if (i < MAXRETRY) {
 80a01fa:	2c04      	cmp	r4, #4
 80a01fc:	d0ee      	beq.n	80a01dc <_Z7getTempv+0x1c>
    celsius = _temp;
 80a01fe:	4628      	mov	r0, r5
 80a0200:	f001 fd5e 	bl	80a1cc0 <__aeabi_f2d>
 80a0204:	4b03      	ldr	r3, [pc, #12]	; (80a0214 <_Z7getTempv+0x54>)
 80a0206:	e9c3 0100 	strd	r0, r1, [r3]
 80a020a:	e7f1      	b.n	80a01f0 <_Z7getTempv+0x30>
 80a020c:	200003c8 	.word	0x200003c8
 80a0210:	7ff80000 	.word	0x7ff80000
 80a0214:	200003e8 	.word	0x200003e8
 80a0218:	080a4427 	.word	0x080a4427
 80a021c:	200003f0 	.word	0x200003f0

080a0220 <loop>:

  Serial.begin(9600);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0220:	b538      	push	{r3, r4, r5, lr}
  // The core of your code will likely live here.
  button = digitalRead(D3);
 80a0222:	2003      	movs	r0, #3
 80a0224:	f001 fa08 	bl	80a1638 <digitalRead>
 80a0228:	4c13      	ldr	r4, [pc, #76]	; (80a0278 <loop+0x58>)
 80a022a:	6020      	str	r0, [r4, #0]
 80a022c:	f000 fb5c 	bl	80a08e8 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - msLastSample >= msSAMPLE_INTERVAL){
 80a0230:	4b12      	ldr	r3, [pc, #72]	; (80a027c <loop+0x5c>)
 80a0232:	681b      	ldr	r3, [r3, #0]
 80a0234:	1ac0      	subs	r0, r0, r3
 80a0236:	f241 3387 	movw	r3, #4999	; 0x1387
 80a023a:	4298      	cmp	r0, r3
 80a023c:	d907      	bls.n	80a024e <loop+0x2e>
    getTemp();
 80a023e:	f7ff ffbf 	bl	80a01c0 <_Z7getTempv>
    actualTemp = celsius;
 80a0242:	4b0f      	ldr	r3, [pc, #60]	; (80a0280 <loop+0x60>)
 80a0244:	e9d3 0100 	ldrd	r0, r1, [r3]
 80a0248:	4b0e      	ldr	r3, [pc, #56]	; (80a0284 <loop+0x64>)
 80a024a:	e9c3 0100 	strd	r0, r1, [r3]
  }

  if(button == 1){
 80a024e:	6825      	ldr	r5, [r4, #0]
 80a0250:	4c0d      	ldr	r4, [pc, #52]	; (80a0288 <loop+0x68>)
 80a0252:	2d01      	cmp	r5, #1
 80a0254:	d10a      	bne.n	80a026c <loop+0x4c>
    if(actualTemp < soglia){
 80a0256:	4b0d      	ldr	r3, [pc, #52]	; (80a028c <loop+0x6c>)
 80a0258:	490a      	ldr	r1, [pc, #40]	; (80a0284 <loop+0x64>)
 80a025a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a025e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0262:	f001 fff3 	bl	80a224c <__aeabi_dcmplt>
 80a0266:	b108      	cbz	r0, 80a026c <loop+0x4c>
      relay1 = 1;
 80a0268:	6025      	str	r5, [r4, #0]
 80a026a:	e001      	b.n	80a0270 <loop+0x50>
      registerWrite();
    }else{
      relay1 = 0;
 80a026c:	2300      	movs	r3, #0
 80a026e:	6023      	str	r3, [r4, #0]
  }else{
    relay1 = 0;
    registerWrite();
  }

}
 80a0270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if(actualTemp < soglia){
      relay1 = 1;
      registerWrite();
    }else{
      relay1 = 0;
      registerWrite();
 80a0274:	f7ff bf80 	b.w	80a0178 <_Z13registerWritev>
 80a0278:	200003fc 	.word	0x200003fc
 80a027c:	200003f0 	.word	0x200003f0
 80a0280:	200003e8 	.word	0x200003e8
 80a0284:	200003b8 	.word	0x200003b8
 80a0288:	200003f4 	.word	0x200003f4
 80a028c:	200003c0 	.word	0x200003c0

080a0290 <_GLOBAL__sub_I_button>:
}

int setPoint(String point){
  soglia = point.toFloat();
  return 1;
 80a0290:	b510      	push	{r4, lr}
const int16_t dsData = D7;
const uint32_t msSAMPLE_INTERVAL = 5000;
double soglia = 0;
double actualTemp = 0;

DS18B20  ds18b20(dsData, true); 
 80a0292:	4c07      	ldr	r4, [pc, #28]	; (80a02b0 <_GLOBAL__sub_I_button+0x20>)
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0294:	f000 fad0 	bl	80a0838 <HAL_Pin_Map>
 80a0298:	2201      	movs	r2, #1
 80a029a:	2107      	movs	r1, #7
 80a029c:	4620      	mov	r0, r4
 80a029e:	f000 f9af 	bl	80a0600 <_ZN7DS18B20C1Etb>
 80a02a2:	4620      	mov	r0, r4
}

int setPoint(String point){
  soglia = point.toFloat();
  return 1;
 80a02a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
const int16_t dsData = D7;
const uint32_t msSAMPLE_INTERVAL = 5000;
double soglia = 0;
double actualTemp = 0;

DS18B20  ds18b20(dsData, true); 
 80a02a8:	4a02      	ldr	r2, [pc, #8]	; (80a02b4 <_GLOBAL__sub_I_button+0x24>)
 80a02aa:	4903      	ldr	r1, [pc, #12]	; (80a02b8 <_GLOBAL__sub_I_button+0x28>)
 80a02ac:	f001 ba54 	b.w	80a1758 <__aeabi_atexit>
 80a02b0:	200003c8 	.word	0x200003c8
 80a02b4:	200003b0 	.word	0x200003b0
 80a02b8:	080a0665 	.word	0x080a0665

080a02bc <_ZN7OneWire19digitalWriteFastLowEv>:
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed

    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a02bc:	8802      	ldrh	r2, [r0, #0]
 80a02be:	231c      	movs	r3, #28
 80a02c0:	4353      	muls	r3, r2
 80a02c2:	6842      	ldr	r2, [r0, #4]
 80a02c4:	18d1      	adds	r1, r2, r3
 80a02c6:	58d3      	ldr	r3, [r2, r3]
 80a02c8:	888a      	ldrh	r2, [r1, #4]
 80a02ca:	835a      	strh	r2, [r3, #26]
 80a02cc:	4770      	bx	lr

080a02ce <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a02ce:	b538      	push	{r3, r4, r5, lr}
 80a02d0:	4604      	mov	r4, r0
 80a02d2:	460d      	mov	r5, r1
    }

  // Assume all other platforms are STM32F2xx until proven otherwise
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed
 80a02d4:	f000 fab0 	bl	80a0838 <HAL_Pin_Map>
{
    pinMode(pin, INPUT);
 80a02d8:	2100      	movs	r1, #0
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a02da:	6060      	str	r0, [r4, #4]
{
    pinMode(pin, INPUT);
 80a02dc:	4628      	mov	r0, r5
 80a02de:	f001 f981 	bl	80a15e4 <pinMode>
    _pin = pin;
 80a02e2:	8025      	strh	r5, [r4, #0]
}
 80a02e4:	4620      	mov	r0, r4
 80a02e6:	bd38      	pop	{r3, r4, r5, pc}

080a02e8 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
 80a02e8:	b570      	push	{r4, r5, r6, lr}
 80a02ea:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
 80a02ec:	f000 ffce 	bl	80a128c <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a02f0:	2100      	movs	r1, #0
 80a02f2:	8828      	ldrh	r0, [r5, #0]
 80a02f4:	f000 faa8 	bl	80a0848 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
 80a02f8:	f000 ffca 	bl	80a1290 <_Z10interruptsv>
 80a02fc:	247d      	movs	r4, #125	; 0x7d
 80a02fe:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do
    {
        if (--retries == 0)
 80a0300:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a0304:	d02f      	beq.n	80a0366 <_ZN7OneWire5resetEv+0x7e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0306:	2002      	movs	r0, #2
 80a0308:	f000 fae6 	bl	80a08d8 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a030c:	8828      	ldrh	r0, [r5, #0]
 80a030e:	f000 fab3 	bl	80a0878 <HAL_GPIO_Read>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do
 80a0312:	f010 0fff 	tst.w	r0, #255	; 0xff
 80a0316:	d0f2      	beq.n	80a02fe <_ZN7OneWire5resetEv+0x16>
            return 0;

        delayMicroseconds(2);
    } while (!digitalReadFast());

    noInterrupts();
 80a0318:	f000 ffb8 	bl	80a128c <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a031c:	4628      	mov	r0, r5
 80a031e:	f7ff ffcd 	bl	80a02bc <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0322:	2101      	movs	r1, #1
 80a0324:	8828      	ldrh	r0, [r5, #0]
 80a0326:	f000 fa8f 	bl	80a0848 <HAL_Pin_Mode>
    pinModeFastOutput(); // drive output low

    interrupts();
 80a032a:	f000 ffb1 	bl	80a1290 <_Z10interruptsv>
 80a032e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80a0332:	f000 fad1 	bl	80a08d8 <HAL_Delay_Microseconds>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
 80a0336:	f000 fadf 	bl	80a08f8 <HAL_disable_irq>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a033a:	2100      	movs	r1, #0
 80a033c:	4606      	mov	r6, r0
 80a033e:	8828      	ldrh	r0, [r5, #0]
 80a0340:	f000 fa82 	bl	80a0848 <HAL_Pin_Mode>
 80a0344:	2046      	movs	r0, #70	; 0x46
 80a0346:	f000 fac7 	bl	80a08d8 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a034a:	8828      	ldrh	r0, [r5, #0]
 80a034c:	f000 fa94 	bl	80a0878 <HAL_GPIO_Read>
    {
        pinModeFastInput(); // allow it to float

        delayMicroseconds(70);

        r = !digitalReadFast();
 80a0350:	b2c0      	uxtb	r0, r0
 80a0352:	fab0 f480 	clz	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
 80a0356:	4630      	mov	r0, r6
 80a0358:	f000 fad6 	bl	80a0908 <HAL_enable_irq>
 80a035c:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80a0360:	0964      	lsrs	r4, r4, #5
 80a0362:	f000 fab9 	bl	80a08d8 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(410);

    return r;
}
 80a0366:	4620      	mov	r0, r4
 80a0368:	bd70      	pop	{r4, r5, r6, pc}

080a036a <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
 80a036a:	b570      	push	{r4, r5, r6, lr}
    if (v & 1)
 80a036c:	f011 0601 	ands.w	r6, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
 80a0370:	4604      	mov	r4, r0
    if (v & 1)
 80a0372:	d015      	beq.n	80a03a0 <_ZN7OneWire9write_bitEh+0x36>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
 80a0374:	f000 fac0 	bl	80a08f8 <HAL_disable_irq>
 80a0378:	4605      	mov	r5, r0
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
 80a037a:	4620      	mov	r0, r4
 80a037c:	f7ff ff9e 	bl	80a02bc <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0380:	2101      	movs	r1, #1
 80a0382:	8820      	ldrh	r0, [r4, #0]
 80a0384:	f000 fa60 	bl	80a0848 <HAL_Pin_Mode>
 80a0388:	2001      	movs	r0, #1
 80a038a:	f000 faa5 	bl	80a08d8 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a038e:	2100      	movs	r1, #0
 80a0390:	8820      	ldrh	r0, [r4, #0]
 80a0392:	f000 fa59 	bl	80a0848 <HAL_Pin_Mode>
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
 80a0396:	4628      	mov	r0, r5
 80a0398:	f000 fab6 	bl	80a0908 <HAL_enable_irq>
 80a039c:	203b      	movs	r0, #59	; 0x3b
 80a039e:	e014      	b.n	80a03ca <_ZN7OneWire9write_bitEh+0x60>

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
 80a03a0:	f000 faaa 	bl	80a08f8 <HAL_disable_irq>
 80a03a4:	4605      	mov	r5, r0
    }
    else
    {
        ATOMIC_BLOCK()
        {
            digitalWriteFastLow();
 80a03a6:	4620      	mov	r0, r4
 80a03a8:	f7ff ff88 	bl	80a02bc <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a03ac:	2101      	movs	r1, #1
 80a03ae:	8820      	ldrh	r0, [r4, #0]
 80a03b0:	f000 fa4a 	bl	80a0848 <HAL_Pin_Mode>
 80a03b4:	2041      	movs	r0, #65	; 0x41
 80a03b6:	f000 fa8f 	bl	80a08d8 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a03ba:	4631      	mov	r1, r6
 80a03bc:	8820      	ldrh	r0, [r4, #0]
 80a03be:	f000 fa43 	bl	80a0848 <HAL_Pin_Mode>
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
 80a03c2:	4628      	mov	r0, r5
 80a03c4:	f000 faa0 	bl	80a0908 <HAL_enable_irq>
 80a03c8:	2005      	movs	r0, #5

            pinModeFastInput(); // float high
        }
        delayMicroseconds(5);
    }
}
 80a03ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a03ce:	f000 ba83 	b.w	80a08d8 <HAL_Delay_Microseconds>

080a03d2 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
 80a03d2:	b538      	push	{r3, r4, r5, lr}
 80a03d4:	4604      	mov	r4, r0

class AtomicSection {
	int prev;
public:
	AtomicSection() {
		prev = HAL_disable_irq();
 80a03d6:	f000 fa8f 	bl	80a08f8 <HAL_disable_irq>
 80a03da:	4605      	mov	r5, r0
    uint8_t r;

    ATOMIC_BLOCK()
    {
        digitalWriteFastLow();
 80a03dc:	4620      	mov	r0, r4
 80a03de:	f7ff ff6d 	bl	80a02bc <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a03e2:	2101      	movs	r1, #1
 80a03e4:	8820      	ldrh	r0, [r4, #0]
 80a03e6:	f000 fa2f 	bl	80a0848 <HAL_Pin_Mode>
 80a03ea:	2001      	movs	r0, #1
 80a03ec:	f000 fa74 	bl	80a08d8 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a03f0:	2100      	movs	r1, #0
 80a03f2:	8820      	ldrh	r0, [r4, #0]
 80a03f4:	f000 fa28 	bl	80a0848 <HAL_Pin_Mode>
 80a03f8:	200d      	movs	r0, #13
 80a03fa:	f000 fa6d 	bl	80a08d8 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a03fe:	8820      	ldrh	r0, [r4, #0]
 80a0400:	f000 fa3a 	bl	80a0878 <HAL_GPIO_Read>
 80a0404:	4604      	mov	r4, r0
	}

	~AtomicSection() {
		HAL_enable_irq(prev);
 80a0406:	4628      	mov	r0, r5
 80a0408:	f000 fa7e 	bl	80a0908 <HAL_enable_irq>
 80a040c:	202e      	movs	r0, #46	; 0x2e
 80a040e:	f000 fa63 	bl	80a08d8 <HAL_Delay_Microseconds>
    }

    delayMicroseconds(46);

    return r;
}
 80a0412:	b2e0      	uxtb	r0, r4
 80a0414:	bd38      	pop	{r3, r4, r5, pc}

080a0416 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
 80a0416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a041a:	4605      	mov	r5, r0
 80a041c:	4688      	mov	r8, r1
 80a041e:	4617      	mov	r7, r2
 80a0420:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
 80a0422:	2401      	movs	r4, #1
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
 80a0424:	ea18 0f04 	tst.w	r8, r4
 80a0428:	bf14      	ite	ne
 80a042a:	2101      	movne	r1, #1
 80a042c:	2100      	moveq	r1, #0
 80a042e:	4628      	mov	r0, r5
 80a0430:	f7ff ff9b 	bl	80a036a <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */)
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
 80a0434:	0064      	lsls	r4, r4, #1
 80a0436:	3e01      	subs	r6, #1
 80a0438:	b2e4      	uxtb	r4, r4
 80a043a:	d1f3      	bne.n	80a0424 <_ZN7OneWire5writeEhh+0xe>
    {
        OneWire::write_bit((bitMask & v) ? 1 : 0);
    }

    if (power)
 80a043c:	b18f      	cbz	r7, 80a0462 <_ZN7OneWire5writeEhh+0x4c>
    {
        noInterrupts();
 80a043e:	f000 ff25 	bl	80a128c <_Z12noInterruptsv>
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0442:	882a      	ldrh	r2, [r5, #0]
 80a0444:	231c      	movs	r3, #28
 80a0446:	4353      	muls	r3, r2
 80a0448:	686a      	ldr	r2, [r5, #4]
 80a044a:	18d1      	adds	r1, r2, r3
 80a044c:	58d3      	ldr	r3, [r2, r3]
 80a044e:	888a      	ldrh	r2, [r1, #4]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0450:	2101      	movs	r1, #1
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0452:	831a      	strh	r2, [r3, #24]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0454:	8828      	ldrh	r0, [r5, #0]
 80a0456:	f000 f9f7 	bl	80a0848 <HAL_Pin_Mode>
        digitalWriteFastHigh();
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
    }
}
 80a045a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput(); // Drive pin High when power is True

        interrupts();
 80a045e:	f000 bf17 	b.w	80a1290 <_Z10interruptsv>
 80a0462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0466 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read()
{
 80a0466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0468:	4607      	mov	r7, r0
 80a046a:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
 80a046c:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
 80a046e:	2401      	movs	r4, #1
    {
        if (OneWire::read_bit())
 80a0470:	4638      	mov	r0, r7
 80a0472:	f7ff ffae 	bl	80a03d2 <_ZN7OneWire8read_bitEv>
 80a0476:	b100      	cbz	r0, 80a047a <_ZN7OneWire4readEv+0x14>
            r |= bitMask;
 80a0478:	4325      	orrs	r5, r4
uint8_t OneWire::read()
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1)
 80a047a:	0064      	lsls	r4, r4, #1
 80a047c:	3e01      	subs	r6, #1
 80a047e:	b2e4      	uxtb	r4, r4
 80a0480:	d1f6      	bne.n	80a0470 <_ZN7OneWire4readEv+0xa>
        if (OneWire::read_bit())
            r |= bitMask;
    }

    return r;
}
 80a0482:	4628      	mov	r0, r5
 80a0484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0486 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a0486:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55); // Choose ROM
 80a0488:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a048a:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55); // Choose ROM
 80a048c:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a048e:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55); // Choose ROM
 80a0490:	f7ff ffc1 	bl	80a0416 <_ZN7OneWire5writeEhh>
 80a0494:	1e65      	subs	r5, r4, #1
 80a0496:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++)
        write(rom[i]);
 80a0498:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a049c:	2200      	movs	r2, #0
 80a049e:	4630      	mov	r0, r6
 80a04a0:	f7ff ffb9 	bl	80a0416 <_ZN7OneWire5writeEhh>
{
    uint8_t i;

    write(0x55); // Choose ROM

    for (i = 0; i < 8; i++)
 80a04a4:	42a5      	cmp	r5, r4
 80a04a6:	d1f7      	bne.n	80a0498 <_ZN7OneWire6selectEPKh+0x12>
        write(rom[i]);
}
 80a04a8:	bd70      	pop	{r4, r5, r6, pc}

080a04aa <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC); // Skip ROM
 80a04aa:	2200      	movs	r2, #0
 80a04ac:	21cc      	movs	r1, #204	; 0xcc
 80a04ae:	f7ff bfb2 	b.w	80a0416 <_ZN7OneWire5writeEhh>

080a04b2 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
 80a04b2:	2300      	movs	r3, #0
 80a04b4:	7403      	strb	r3, [r0, #16]
    LastDeviceFlag = FALSE;
 80a04b6:	7483      	strb	r3, [r0, #18]
    LastFamilyDiscrepancy = 0;
 80a04b8:	7443      	strb	r3, [r0, #17]
 80a04ba:	f100 0210 	add.w	r2, r0, #16
 80a04be:	3008      	adds	r0, #8

    for (int i = 7;; i--)
    {
        ROM_NO[i] = 0;
 80a04c0:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if (i == 0)
 80a04c4:	4282      	cmp	r2, r0
 80a04c6:	d1fb      	bne.n	80a04c0 <_ZN7OneWire12reset_searchEv+0xe>
            break;
    }
}
 80a04c8:	4770      	bx	lr

080a04ca <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a04ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a04ce:	7c85      	ldrb	r5, [r0, #18]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a04d0:	4604      	mov	r4, r0
 80a04d2:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a04d4:	2d00      	cmp	r5, #0
 80a04d6:	d15e      	bne.n	80a0596 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset())
 80a04d8:	f7ff ff06 	bl	80a02e8 <_ZN7OneWire5resetEv>
 80a04dc:	b920      	cbnz	r0, 80a04e8 <_ZN7OneWire6searchEPh+0x1e>
        {
            // reset the search
            LastDiscrepancy = 0;
 80a04de:	7420      	strb	r0, [r4, #16]
            LastDeviceFlag = FALSE;
 80a04e0:	74a0      	strb	r0, [r4, #18]
            LastFamilyDiscrepancy = 0;
 80a04e2:	7460      	strb	r0, [r4, #17]

            return FALSE;
 80a04e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
 80a04e8:	462a      	mov	r2, r5
 80a04ea:	21f0      	movs	r1, #240	; 0xf0
 80a04ec:	4620      	mov	r0, r4

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
 80a04ee:	2601      	movs	r6, #1

            return FALSE;
        }

        // issue the search command
        write(0xF0);
 80a04f0:	f7ff ff91 	bl	80a0416 <_ZN7OneWire5writeEhh>

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
 80a04f4:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a04f6:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
 80a04f8:	4620      	mov	r0, r4
 80a04fa:	f7ff ff6a 	bl	80a03d2 <_ZN7OneWire8read_bitEv>
 80a04fe:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
 80a0500:	4620      	mov	r0, r4
 80a0502:	f7ff ff66 	bl	80a03d2 <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1))
 80a0506:	f1b9 0f01 	cmp.w	r9, #1
 80a050a:	d102      	bne.n	80a0512 <_ZN7OneWire6searchEPh+0x48>
 80a050c:	2801      	cmp	r0, #1
 80a050e:	d11b      	bne.n	80a0548 <_ZN7OneWire6searchEPh+0x7e>
 80a0510:	e037      	b.n	80a0582 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit)
 80a0512:	4581      	cmp	r9, r0
 80a0514:	eb04 0305 	add.w	r3, r4, r5
 80a0518:	d11e      	bne.n	80a0558 <_ZN7OneWire6searchEPh+0x8e>
                }
                else
                {
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
 80a051a:	7c22      	ldrb	r2, [r4, #16]
 80a051c:	4297      	cmp	r7, r2
 80a051e:	d207      	bcs.n	80a0530 <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80a0520:	7a1a      	ldrb	r2, [r3, #8]
 80a0522:	4216      	tst	r6, r2
 80a0524:	bf14      	ite	ne
 80a0526:	f04f 0901 	movne.w	r9, #1
 80a052a:	f04f 0900 	moveq.w	r9, #0
 80a052e:	e004      	b.n	80a053a <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
 80a0530:	bf0c      	ite	eq
 80a0532:	f04f 0901 	moveq.w	r9, #1
 80a0536:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0)
 80a053a:	f1b9 0f00 	cmp.w	r9, #0
 80a053e:	d103      	bne.n	80a0548 <_ZN7OneWire6searchEPh+0x7e>
                    {
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
 80a0540:	2f08      	cmp	r7, #8
 80a0542:	d808      	bhi.n	80a0556 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
 80a0544:	7467      	strb	r7, [r4, #17]
 80a0546:	e006      	b.n	80a0556 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
 80a0548:	1962      	adds	r2, r4, r5
 80a054a:	7a13      	ldrb	r3, [r2, #8]
 80a054c:	f04f 0901 	mov.w	r9, #1
 80a0550:	4333      	orrs	r3, r6
 80a0552:	7213      	strb	r3, [r2, #8]
 80a0554:	e004      	b.n	80a0560 <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a0556:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80a0558:	7a1a      	ldrb	r2, [r3, #8]
 80a055a:	ea22 0206 	bic.w	r2, r2, r6
 80a055e:	721a      	strb	r2, [r3, #8]

                // serial number search direction write bit
                write_bit(search_direction);
 80a0560:	4649      	mov	r1, r9
 80a0562:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
 80a0564:	0076      	lsls	r6, r6, #1
                    ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                    ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
 80a0566:	f7ff ff00 	bl	80a036a <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
 80a056a:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
 80a056e:	bf04      	itt	eq
 80a0570:	3501      	addeq	r5, #1
 80a0572:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a0574:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
 80a0578:	bf08      	it	eq
 80a057a:	2601      	moveq	r6, #1
                }
            }
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
 80a057c:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a057e:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        } while (rom_byte_number < 8); // loop until through all ROM bytes 0-7
 80a0580:	d9ba      	bls.n	80a04f8 <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
 80a0582:	2f40      	cmp	r7, #64	; 0x40
 80a0584:	d907      	bls.n	80a0596 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
 80a0586:	f884 a010 	strb.w	sl, [r4, #16]

            // check for last device
            if (LastDiscrepancy == 0)
 80a058a:	f1ba 0f00 	cmp.w	sl, #0
 80a058e:	d112      	bne.n	80a05b6 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
 80a0590:	2301      	movs	r3, #1
 80a0592:	74a3      	strb	r3, [r4, #18]
 80a0594:	e00f      	b.n	80a05b6 <_ZN7OneWire6searchEPh+0xec>
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
    {
        LastDiscrepancy = 0;
 80a0596:	2000      	movs	r0, #0
 80a0598:	7420      	strb	r0, [r4, #16]
        LastDeviceFlag = FALSE;
 80a059a:	74a0      	strb	r0, [r4, #18]
        LastFamilyDiscrepancy = 0;
 80a059c:	7460      	strb	r0, [r4, #17]
 80a059e:	1de3      	adds	r3, r4, #7
 80a05a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80a05a4:	340f      	adds	r4, #15
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
        newAddr[i] = ROM_NO[i];
 80a05a6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
        LastDeviceFlag = FALSE;
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
 80a05aa:	42a3      	cmp	r3, r4
        newAddr[i] = ROM_NO[i];
 80a05ac:	f808 2f01 	strb.w	r2, [r8, #1]!
        LastDeviceFlag = FALSE;
        LastFamilyDiscrepancy = 0;
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++)
 80a05b0:	d1f9      	bne.n	80a05a6 <_ZN7OneWire6searchEPh+0xdc>
 80a05b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0])
 80a05b6:	7a23      	ldrb	r3, [r4, #8]
 80a05b8:	2b00      	cmp	r3, #0
 80a05ba:	d0ec      	beq.n	80a0596 <_ZN7OneWire6searchEPh+0xcc>
 80a05bc:	2001      	movs	r0, #1
 80a05be:	e7ee      	b.n	80a059e <_ZN7OneWire6searchEPh+0xd4>

080a05c0 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8(uint8_t *addr, uint8_t len)
{
 80a05c0:	b530      	push	{r4, r5, lr}
 80a05c2:	4605      	mov	r5, r0
    uint8_t crc = 0;
 80a05c4:	2000      	movs	r0, #0

    while (len--)
 80a05c6:	3901      	subs	r1, #1
 80a05c8:	b2c9      	uxtb	r1, r1
 80a05ca:	29ff      	cmp	r1, #255	; 0xff
 80a05cc:	d013      	beq.n	80a05f6 <_ZN7OneWire4crc8EPhh+0x36>
    {
        uint8_t inbyte = *addr++;
 80a05ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a05d2:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--)
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
 80a05d4:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix)
 80a05d8:	f013 0f01 	tst.w	r3, #1
 80a05dc:	ea4f 0050 	mov.w	r0, r0, lsr #1
                crc ^= 0x8C;
 80a05e0:	bf1c      	itt	ne
 80a05e2:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
 80a05e6:	b2d8      	uxtbne	r0, r3
 80a05e8:	1e53      	subs	r3, r2, #1
    uint8_t crc = 0;

    while (len--)
    {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--)
 80a05ea:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
        {
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix)
                crc ^= 0x8C;
            inbyte >>= 1;
 80a05ee:	ea4f 0454 	mov.w	r4, r4, lsr #1
    uint8_t crc = 0;

    while (len--)
    {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--)
 80a05f2:	d1ef      	bne.n	80a05d4 <_ZN7OneWire4crc8EPhh+0x14>
 80a05f4:	e7e7      	b.n	80a05c6 <_ZN7OneWire4crc8EPhh+0x6>
            inbyte >>= 1;
        }
    }

    return crc;
}
 80a05f6:	bd30      	pop	{r4, r5, pc}

080a05f8 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
 80a05f8:	f000 b91e 	b.w	80a0838 <HAL_Pin_Map>

080a05fc <_GLOBAL__sub_I__ZN4DS18C2Etb>:
 80a05fc:	f000 b91c 	b.w	80a0838 <HAL_Pin_Map>

080a0600 <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a0600:	b570      	push	{r4, r5, r6, lr}
 80a0602:	4604      	mov	r4, r0
{
  memset(_data, 0, sizeof(_data));
 80a0604:	2300      	movs	r3, #0
 80a0606:	6063      	str	r3, [r4, #4]
 80a0608:	60a3      	str	r3, [r4, #8]
 80a060a:	60e3      	str	r3, [r4, #12]
  memset(_addr, 0, sizeof(_addr));
 80a060c:	6123      	str	r3, [r4, #16]
 80a060e:	6163      	str	r3, [r4, #20]
  _dataCRC     = 0; 
 80a0610:	7623      	strb	r3, [r4, #24]
  _readCRC     = 0;
 80a0612:	7663      	strb	r3, [r4, #25]
  _singleDrop  = singleDrop;
  _sampleDelay = 750;
 80a0614:	f240 23ee 	movw	r3, #750	; 0x2ee
{
  memset(_data, 0, sizeof(_data));
  memset(_addr, 0, sizeof(_addr));
  _dataCRC     = 0; 
  _readCRC     = 0;
  _singleDrop  = singleDrop;
 80a0618:	76a2      	strb	r2, [r4, #26]
  _sampleDelay = 750;
 80a061a:	61e3      	str	r3, [r4, #28]
  ds           = new OneWire(pin);
 80a061c:	2014      	movs	r0, #20
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a061e:	460e      	mov	r6, r1
  memset(_addr, 0, sizeof(_addr));
  _dataCRC     = 0; 
  _readCRC     = 0;
  _singleDrop  = singleDrop;
  _sampleDelay = 750;
  ds           = new OneWire(pin);
 80a0620:	f7ff fd3b 	bl	80a009a <_Znwj>
 80a0624:	4605      	mov	r5, r0
 80a0626:	b110      	cbz	r0, 80a062e <_ZN7DS18B20C1Etb+0x2e>
 80a0628:	4631      	mov	r1, r6
 80a062a:	f7ff fe50 	bl	80a02ce <_ZN7OneWireC1Et>
 80a062e:	6025      	str	r5, [r4, #0]
}
 80a0630:	4620      	mov	r0, r4
 80a0632:	bd70      	pop	{r4, r5, r6, pc}

080a0634 <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
 80a0634:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
 80a0636:	f100 0510 	add.w	r5, r0, #16
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
 80a063a:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
 80a063c:	6800      	ldr	r0, [r0, #0]
 80a063e:	4629      	mov	r1, r5
 80a0640:	f7ff ff43 	bl	80a04ca <_ZN7OneWire6searchEPh>
 80a0644:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
 80a0646:	bf17      	itett	ne
 80a0648:	682b      	ldrne	r3, [r5, #0]
  else           memset(addr, 0, 8);
 80a064a:	6023      	streq	r3, [r4, #0]
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
  if (isSuccess) memcpy(addr, _addr, 8);
 80a064c:	6023      	strne	r3, [r4, #0]
 80a064e:	686b      	ldrne	r3, [r5, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
 80a0650:	bf18      	it	ne
 80a0652:	2001      	movne	r0, #1
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
 80a0654:	6063      	str	r3, [r4, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
 80a0656:	bf08      	it	eq
 80a0658:	2000      	moveq	r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}
 80a065a:	bd38      	pop	{r3, r4, r5, pc}

080a065c <_ZN7DS18B206searchEv>:
  ds           = new OneWire(pin);
}

boolean DS18B20::search()
{
  return search(_addr);
 80a065c:	f100 0110 	add.w	r1, r0, #16
 80a0660:	f7ff bfe8 	b.w	80a0634 <_ZN7DS18B206searchEPh>

080a0664 <_ZN7DS18B20D1Ev>:
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}

DS18B20::~DS18B20()
 80a0664:	b510      	push	{r4, lr}
 80a0666:	4604      	mov	r4, r0
{
  delete(ds);
 80a0668:	2114      	movs	r1, #20
 80a066a:	6800      	ldr	r0, [r0, #0]
 80a066c:	f001 f879 	bl	80a1762 <_ZdlPvj>
}
 80a0670:	4620      	mov	r0, r4
 80a0672:	bd10      	pop	{r4, pc}

080a0674 <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
 80a0674:	6800      	ldr	r0, [r0, #0]
 80a0676:	f7ff bf1c 	b.w	80a04b2 <_ZN7OneWire12reset_searchEv>
	...

080a067c <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
 80a067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
 80a067e:	7e83      	ldrb	r3, [r0, #26]
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
 80a0680:	4604      	mov	r4, r0
 80a0682:	460d      	mov	r5, r1
 80a0684:	4616      	mov	r6, r2
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
 80a0686:	b91b      	cbnz	r3, 80a0690 <_ZN7DS18B2014getTemperatureEPhb+0x14>
 80a0688:	780b      	ldrb	r3, [r1, #0]
 80a068a:	2b00      	cmp	r3, #0
 80a068c:	f000 80a3 	beq.w	80a07d6 <_ZN7DS18B2014getTemperatureEPhb+0x15a>

  ds->reset();
 80a0690:	6820      	ldr	r0, [r4, #0]
 80a0692:	f7ff fe29 	bl	80a02e8 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
 80a0696:	7ea3      	ldrb	r3, [r4, #26]
 80a0698:	b123      	cbz	r3, 80a06a4 <_ZN7DS18B2014getTemperatureEPhb+0x28>
 80a069a:	b91e      	cbnz	r6, 80a06a4 <_ZN7DS18B2014getTemperatureEPhb+0x28>
    ds->skip();
 80a069c:	6820      	ldr	r0, [r4, #0]
 80a069e:	f7ff ff04 	bl	80a04aa <_ZN7OneWire4skipEv>
 80a06a2:	e003      	b.n	80a06ac <_ZN7DS18B2014getTemperatureEPhb+0x30>
  else
    ds->select(addr);
 80a06a4:	4629      	mov	r1, r5
 80a06a6:	6820      	ldr	r0, [r4, #0]
 80a06a8:	f7ff feed 	bl	80a0486 <_ZN7OneWire6selectEPKh>

  ds->write(0x44);        // start conversion, with parasite power on at the end
 80a06ac:	2200      	movs	r2, #0
 80a06ae:	2144      	movs	r1, #68	; 0x44
 80a06b0:	6820      	ldr	r0, [r4, #0]
 80a06b2:	f7ff feb0 	bl	80a0416 <_ZN7OneWire5writeEhh>
  delay(_sampleDelay);    // maybe 750ms is enough, maybe not
 80a06b6:	69e0      	ldr	r0, [r4, #28]
 80a06b8:	f000 fbca 	bl	80a0e50 <delay>
                          // we might do a ds.depower() here, but the reset will take care of it.
  ds->reset();
 80a06bc:	6820      	ldr	r0, [r4, #0]
 80a06be:	f7ff fe13 	bl	80a02e8 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
 80a06c2:	7ea3      	ldrb	r3, [r4, #26]
 80a06c4:	b123      	cbz	r3, 80a06d0 <_ZN7DS18B2014getTemperatureEPhb+0x54>
 80a06c6:	b91e      	cbnz	r6, 80a06d0 <_ZN7DS18B2014getTemperatureEPhb+0x54>
    ds->skip();
 80a06c8:	6820      	ldr	r0, [r4, #0]
 80a06ca:	f7ff feee 	bl	80a04aa <_ZN7OneWire4skipEv>
 80a06ce:	e003      	b.n	80a06d8 <_ZN7DS18B2014getTemperatureEPhb+0x5c>
  else
    ds->select(addr);
 80a06d0:	4629      	mov	r1, r5
 80a06d2:	6820      	ldr	r0, [r4, #0]
 80a06d4:	f7ff fed7 	bl	80a0486 <_ZN7OneWire6selectEPKh>

  ds->write(0xBE);         // Read Scratchpad
 80a06d8:	2200      	movs	r2, #0
 80a06da:	21be      	movs	r1, #190	; 0xbe
 80a06dc:	6820      	ldr	r0, [r4, #0]
 80a06de:	f7ff fe9a 	bl	80a0416 <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
 80a06e2:	782b      	ldrb	r3, [r5, #0]
 80a06e4:	2b26      	cmp	r3, #38	; 0x26
 80a06e6:	d104      	bne.n	80a06f2 <_ZN7DS18B2014getTemperatureEPhb+0x76>
    ds->write(0x00,0);     // DS2438 requires a page to read
 80a06e8:	2200      	movs	r2, #0
 80a06ea:	4611      	mov	r1, r2
 80a06ec:	6820      	ldr	r0, [r4, #0]
 80a06ee:	f7ff fe92 	bl	80a0416 <_ZN7OneWire5writeEhh>
 80a06f2:	1ce6      	adds	r6, r4, #3
 80a06f4:	f104 070c 	add.w	r7, r4, #12
  }

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
 80a06f8:	6820      	ldr	r0, [r4, #0]
 80a06fa:	f7ff feb4 	bl	80a0466 <_ZN7OneWire4readEv>
 80a06fe:	f806 0f01 	strb.w	r0, [r6, #1]!
  ds->write(0xBE);         // Read Scratchpad
  if (addr[0] == WIRE_DS2438) {
    ds->write(0x00,0);     // DS2438 requires a page to read
  }

  for (int i = 0; i < 9; i++)
 80a0702:	42be      	cmp	r6, r7
 80a0704:	d1f8      	bne.n	80a06f8 <_ZN7DS18B2014getTemperatureEPhb+0x7c>
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
 80a0706:	2108      	movs	r1, #8
 80a0708:	1d20      	adds	r0, r4, #4
 80a070a:	f7ff ff59 	bl	80a05c0 <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
 80a070e:	7b23      	ldrb	r3, [r4, #12]

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
 80a0710:	7620      	strb	r0, [r4, #24]
  _readCRC = (_data[8]);
  if (_dataCRC != _readCRC) return NAN;
 80a0712:	4298      	cmp	r0, r3
  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
  _readCRC = (_data[8]);
 80a0714:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
 80a0716:	d15e      	bne.n	80a07d6 <_ZN7DS18B2014getTemperatureEPhb+0x15a>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
 80a0718:	782b      	ldrb	r3, [r5, #0]
 80a071a:	2b22      	cmp	r3, #34	; 0x22
 80a071c:	d01b      	beq.n	80a0756 <_ZN7DS18B2014getTemperatureEPhb+0xda>
 80a071e:	d816      	bhi.n	80a074e <_ZN7DS18B2014getTemperatureEPhb+0xd2>
 80a0720:	2b10      	cmp	r3, #16
 80a0722:	d158      	bne.n	80a07d6 <_ZN7DS18B2014getTemperatureEPhb+0x15a>
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
 80a0724:	7ae3      	ldrb	r3, [r4, #11]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a0726:	88a0      	ldrh	r0, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
 80a0728:	2b10      	cmp	r3, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
 80a072a:	bf08      	it	eq
 80a072c:	7aa3      	ldrbeq	r3, [r4, #10]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a072e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
        raw = (raw & 0xFFF0) + 12 - _data[6];     
 80a0732:	bf02      	ittt	eq
 80a0734:	f020 000f 	biceq.w	r0, r0, #15
 80a0738:	f1c3 030c 	rsbeq	r3, r3, #12
 80a073c:	18c0      	addeq	r0, r0, r3
 80a073e:	b200      	sxth	r0, r0
      celsius = (float)raw / 16.0;
 80a0740:	f001 fefe 	bl	80a2540 <__aeabi_i2f>
 80a0744:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80a0748:	f001 ff4e 	bl	80a25e8 <__aeabi_fmul>
      break;
 80a074c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
 80a074e:	2b26      	cmp	r3, #38	; 0x26
 80a0750:	d01f      	beq.n	80a0792 <_ZN7DS18B2014getTemperatureEPhb+0x116>
 80a0752:	2b28      	cmp	r3, #40	; 0x28
 80a0754:	d13f      	bne.n	80a07d6 <_ZN7DS18B2014getTemperatureEPhb+0x15a>
      celsius = (float)raw / 16.0;
      break;

    case WIRE_DS1822:
    case WIRE_DS18B20:
      switch (_data[4] & 0x60)
 80a0756:	7a22      	ldrb	r2, [r4, #8]
 80a0758:	7923      	ldrb	r3, [r4, #4]
 80a075a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a075e:	2a20      	cmp	r2, #32
 80a0760:	d005      	beq.n	80a076e <_ZN7DS18B2014getTemperatureEPhb+0xf2>
 80a0762:	2a40      	cmp	r2, #64	; 0x40
 80a0764:	d006      	beq.n	80a0774 <_ZN7DS18B2014getTemperatureEPhb+0xf8>
 80a0766:	b942      	cbnz	r2, 80a077a <_ZN7DS18B2014getTemperatureEPhb+0xfe>
      { // lower resolution means shorter conversion time, low bits need masking
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
 80a0768:	f023 0307 	bic.w	r3, r3, #7
 80a076c:	e004      	b.n	80a0778 <_ZN7DS18B2014getTemperatureEPhb+0xfc>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
 80a076e:	f023 0303 	bic.w	r3, r3, #3
 80a0772:	e001      	b.n	80a0778 <_ZN7DS18B2014getTemperatureEPhb+0xfc>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
 80a0774:	f023 0301 	bic.w	r3, r3, #1
 80a0778:	7123      	strb	r3, [r4, #4]
        default: break;                                 // 12 bit 750.00 ms 
      }
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
 80a077a:	7923      	ldrb	r3, [r4, #4]
 80a077c:	7960      	ldrb	r0, [r4, #5]
 80a077e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a0782:	b200      	sxth	r0, r0
 80a0784:	f001 fa8a 	bl	80a1c9c <__aeabi_i2d>
 80a0788:	2200      	movs	r2, #0
 80a078a:	4b14      	ldr	r3, [pc, #80]	; (80a07dc <_ZN7DS18B2014getTemperatureEPhb+0x160>)
 80a078c:	f001 faec 	bl	80a1d68 <__aeabi_dmul>
 80a0790:	e01e      	b.n	80a07d0 <_ZN7DS18B2014getTemperatureEPhb+0x154>
      break;
      
    case WIRE_DS2438:
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
 80a0792:	79a5      	ldrb	r5, [r4, #6]
 80a0794:	4628      	mov	r0, r5
 80a0796:	f001 fa81 	bl	80a1c9c <__aeabi_i2d>
 80a079a:	4606      	mov	r6, r0
 80a079c:	7960      	ldrb	r0, [r4, #5]
 80a079e:	460f      	mov	r7, r1
 80a07a0:	08c0      	lsrs	r0, r0, #3
 80a07a2:	f001 fecd 	bl	80a2540 <__aeabi_i2f>
 80a07a6:	f001 fa8b 	bl	80a1cc0 <__aeabi_f2d>
 80a07aa:	2200      	movs	r2, #0
 80a07ac:	4b0c      	ldr	r3, [pc, #48]	; (80a07e0 <_ZN7DS18B2014getTemperatureEPhb+0x164>)
 80a07ae:	f001 fadb 	bl	80a1d68 <__aeabi_dmul>
 80a07b2:	460b      	mov	r3, r1
 80a07b4:	0629      	lsls	r1, r5, #24
 80a07b6:	4602      	mov	r2, r0
 80a07b8:	bf48      	it	mi
 80a07ba:	490a      	ldrmi	r1, [pc, #40]	; (80a07e4 <_ZN7DS18B2014getTemperatureEPhb+0x168>)
 80a07bc:	f04f 0000 	mov.w	r0, #0
 80a07c0:	bf58      	it	pl
 80a07c2:	4909      	ldrpl	r1, [pc, #36]	; (80a07e8 <_ZN7DS18B2014getTemperatureEPhb+0x16c>)
 80a07c4:	f001 fad0 	bl	80a1d68 <__aeabi_dmul>
 80a07c8:	4632      	mov	r2, r6
 80a07ca:	463b      	mov	r3, r7
 80a07cc:	f001 f91a 	bl	80a1a04 <__adddf3>
 80a07d0:	f001 fdac 	bl	80a232c <__aeabi_d2f>
      break;
 80a07d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      
    default:
      celsius = NAN;
 80a07d6:	4805      	ldr	r0, [pc, #20]	; (80a07ec <_ZN7DS18B2014getTemperatureEPhb+0x170>)
      break;                            
  }
  
  return celsius;
}
 80a07d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a07da:	bf00      	nop
 80a07dc:	3fb00000 	.word	0x3fb00000
 80a07e0:	3fa00000 	.word	0x3fa00000
 80a07e4:	bff00000 	.word	0xbff00000
 80a07e8:	3ff00000 	.word	0x3ff00000
 80a07ec:	7fc00000 	.word	0x7fc00000

080a07f0 <_ZN7DS18B2014getTemperatureEb>:

  return "impossible";
}

float DS18B20::getTemperature(bool forceSelect)
{
 80a07f0:	b538      	push	{r3, r4, r5, lr}
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
 80a07f2:	7e83      	ldrb	r3, [r0, #26]

  return "impossible";
}

float DS18B20::getTemperature(bool forceSelect)
{
 80a07f4:	4604      	mov	r4, r0
 80a07f6:	460d      	mov	r5, r1
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
 80a07f8:	b93b      	cbnz	r3, 80a080a <_ZN7DS18B2014getTemperatureEb+0x1a>
  {
    resetsearch();
    if (!search()) return NAN;
  }
  return getTemperature(_addr, forceSelect);
 80a07fa:	462a      	mov	r2, r5
 80a07fc:	f104 0110 	add.w	r1, r4, #16
 80a0800:	4620      	mov	r0, r4
}
 80a0802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
  {
    resetsearch();
    if (!search()) return NAN;
  }
  return getTemperature(_addr, forceSelect);
 80a0806:	f7ff bf39 	b.w	80a067c <_ZN7DS18B2014getTemperatureEPhb>
  return "impossible";
}

float DS18B20::getTemperature(bool forceSelect)
{
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
 80a080a:	7c03      	ldrb	r3, [r0, #16]
 80a080c:	2b00      	cmp	r3, #0
 80a080e:	d1f4      	bne.n	80a07fa <_ZN7DS18B2014getTemperatureEb+0xa>
  {
    resetsearch();
 80a0810:	f7ff ff30 	bl	80a0674 <_ZN7DS18B2011resetsearchEv>
    if (!search()) return NAN;
 80a0814:	4620      	mov	r0, r4
 80a0816:	f7ff ff21 	bl	80a065c <_ZN7DS18B206searchEv>
 80a081a:	2800      	cmp	r0, #0
 80a081c:	d1ed      	bne.n	80a07fa <_ZN7DS18B2014getTemperatureEb+0xa>
  }
  return getTemperature(_addr, forceSelect);
}
 80a081e:	4801      	ldr	r0, [pc, #4]	; (80a0824 <_ZN7DS18B2014getTemperatureEb+0x34>)
 80a0820:	bd38      	pop	{r3, r4, r5, pc}
 80a0822:	bf00      	nop
 80a0824:	7fc00000 	.word	0x7fc00000

080a0828 <_ZN7DS18B208crcCheckEv>:
  return celsius * 1.8 + 32.0;
}

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
 80a0828:	7e02      	ldrb	r2, [r0, #24]
 80a082a:	7e40      	ldrb	r0, [r0, #25]
}
 80a082c:	1a13      	subs	r3, r2, r0
 80a082e:	4258      	negs	r0, r3
 80a0830:	4158      	adcs	r0, r3
 80a0832:	4770      	bx	lr

080a0834 <_GLOBAL__sub_I__ZN7DS18B20C2Etb>:
 80a0834:	f000 b800 	b.w	80a0838 <HAL_Pin_Map>

080a0838 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a0838:	b508      	push	{r3, lr}
 80a083a:	4b02      	ldr	r3, [pc, #8]	; (80a0844 <HAL_Pin_Map+0xc>)
 80a083c:	681b      	ldr	r3, [r3, #0]
 80a083e:	681b      	ldr	r3, [r3, #0]
 80a0840:	9301      	str	r3, [sp, #4]
 80a0842:	bd08      	pop	{r3, pc}
 80a0844:	080601b0 	.word	0x080601b0

080a0848 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0848:	b508      	push	{r3, lr}
 80a084a:	4b02      	ldr	r3, [pc, #8]	; (80a0854 <HAL_Pin_Mode+0xc>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	689b      	ldr	r3, [r3, #8]
 80a0850:	9301      	str	r3, [sp, #4]
 80a0852:	bd08      	pop	{r3, pc}
 80a0854:	080601b0 	.word	0x080601b0

080a0858 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0858:	b508      	push	{r3, lr}
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <HAL_Get_Pin_Mode+0xc>)
 80a085c:	681b      	ldr	r3, [r3, #0]
 80a085e:	68db      	ldr	r3, [r3, #12]
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	bd08      	pop	{r3, pc}
 80a0864:	080601b0 	.word	0x080601b0

080a0868 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0868:	b508      	push	{r3, lr}
 80a086a:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <HAL_GPIO_Write+0xc>)
 80a086c:	681b      	ldr	r3, [r3, #0]
 80a086e:	691b      	ldr	r3, [r3, #16]
 80a0870:	9301      	str	r3, [sp, #4]
 80a0872:	bd08      	pop	{r3, pc}
 80a0874:	080601b0 	.word	0x080601b0

080a0878 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0878:	b508      	push	{r3, lr}
 80a087a:	4b02      	ldr	r3, [pc, #8]	; (80a0884 <HAL_GPIO_Read+0xc>)
 80a087c:	681b      	ldr	r3, [r3, #0]
 80a087e:	695b      	ldr	r3, [r3, #20]
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	080601b0 	.word	0x080601b0

080a0888 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a0888:	b508      	push	{r3, lr}
 80a088a:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <HAL_Interrupts_Enable_All+0xc>)
 80a088c:	681b      	ldr	r3, [r3, #0]
 80a088e:	6a1b      	ldr	r3, [r3, #32]
 80a0890:	9301      	str	r3, [sp, #4]
 80a0892:	bd08      	pop	{r3, pc}
 80a0894:	080601b0 	.word	0x080601b0

080a0898 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a0898:	b508      	push	{r3, lr}
 80a089a:	4b02      	ldr	r3, [pc, #8]	; (80a08a4 <HAL_Interrupts_Disable_All+0xc>)
 80a089c:	681b      	ldr	r3, [r3, #0]
 80a089e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a08a0:	9301      	str	r3, [sp, #4]
 80a08a2:	bd08      	pop	{r3, pc}
 80a08a4:	080601b0 	.word	0x080601b0

080a08a8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a08a8:	b508      	push	{r3, lr}
 80a08aa:	4b02      	ldr	r3, [pc, #8]	; (80a08b4 <HAL_SPI_Init+0xc>)
 80a08ac:	681b      	ldr	r3, [r3, #0]
 80a08ae:	69db      	ldr	r3, [r3, #28]
 80a08b0:	9301      	str	r3, [sp, #4]
 80a08b2:	bd08      	pop	{r3, pc}
 80a08b4:	080601b4 	.word	0x080601b4

080a08b8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a08b8:	b508      	push	{r3, lr}
 80a08ba:	4b02      	ldr	r3, [pc, #8]	; (80a08c4 <HAL_SPI_Is_Enabled+0xc>)
 80a08bc:	681b      	ldr	r3, [r3, #0]
 80a08be:	6a1b      	ldr	r3, [r3, #32]
 80a08c0:	9301      	str	r3, [sp, #4]
 80a08c2:	bd08      	pop	{r3, pc}
 80a08c4:	080601b4 	.word	0x080601b4

080a08c8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a08c8:	b508      	push	{r3, lr}
 80a08ca:	4b02      	ldr	r3, [pc, #8]	; (80a08d4 <HAL_RNG_GetRandomNumber+0xc>)
 80a08cc:	681b      	ldr	r3, [r3, #0]
 80a08ce:	685b      	ldr	r3, [r3, #4]
 80a08d0:	9301      	str	r3, [sp, #4]
 80a08d2:	bd08      	pop	{r3, pc}
 80a08d4:	0806019c 	.word	0x0806019c

080a08d8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a08d8:	b508      	push	{r3, lr}
 80a08da:	4b02      	ldr	r3, [pc, #8]	; (80a08e4 <HAL_Delay_Microseconds+0xc>)
 80a08dc:	681b      	ldr	r3, [r3, #0]
 80a08de:	68db      	ldr	r3, [r3, #12]
 80a08e0:	9301      	str	r3, [sp, #4]
 80a08e2:	bd08      	pop	{r3, pc}
 80a08e4:	0806019c 	.word	0x0806019c

080a08e8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a08e8:	b508      	push	{r3, lr}
 80a08ea:	4b02      	ldr	r3, [pc, #8]	; (80a08f4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a08ec:	681b      	ldr	r3, [r3, #0]
 80a08ee:	695b      	ldr	r3, [r3, #20]
 80a08f0:	9301      	str	r3, [sp, #4]
 80a08f2:	bd08      	pop	{r3, pc}
 80a08f4:	0806019c 	.word	0x0806019c

080a08f8 <HAL_disable_irq>:
DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
 80a08f8:	b508      	push	{r3, lr}
 80a08fa:	4b02      	ldr	r3, [pc, #8]	; (80a0904 <HAL_disable_irq+0xc>)
 80a08fc:	681b      	ldr	r3, [r3, #0]
 80a08fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0900:	9301      	str	r3, [sp, #4]
 80a0902:	bd08      	pop	{r3, pc}
 80a0904:	0806019c 	.word	0x0806019c

080a0908 <HAL_enable_irq>:
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
 80a0908:	b508      	push	{r3, lr}
 80a090a:	4b02      	ldr	r3, [pc, #8]	; (80a0914 <HAL_enable_irq+0xc>)
 80a090c:	681b      	ldr	r3, [r3, #0]
 80a090e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0910:	9301      	str	r3, [sp, #4]
 80a0912:	bd08      	pop	{r3, pc}
 80a0914:	0806019c 	.word	0x0806019c

080a0918 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0918:	b508      	push	{r3, lr}
 80a091a:	4b02      	ldr	r3, [pc, #8]	; (80a0924 <os_mutex_create+0xc>)
 80a091c:	681b      	ldr	r3, [r3, #0]
 80a091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0920:	9301      	str	r3, [sp, #4]
 80a0922:	bd08      	pop	{r3, pc}
 80a0924:	080601d0 	.word	0x080601d0

080a0928 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0928:	b508      	push	{r3, lr}
 80a092a:	4b02      	ldr	r3, [pc, #8]	; (80a0934 <HAL_USART_Init+0xc>)
 80a092c:	681b      	ldr	r3, [r3, #0]
 80a092e:	699b      	ldr	r3, [r3, #24]
 80a0930:	9301      	str	r3, [sp, #4]
 80a0932:	bd08      	pop	{r3, pc}
 80a0934:	080601c4 	.word	0x080601c4

080a0938 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0938:	b508      	push	{r3, lr}
 80a093a:	4b02      	ldr	r3, [pc, #8]	; (80a0944 <HAL_USART_Write_Data+0xc>)
 80a093c:	681b      	ldr	r3, [r3, #0]
 80a093e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0940:	9301      	str	r3, [sp, #4]
 80a0942:	bd08      	pop	{r3, pc}
 80a0944:	080601c4 	.word	0x080601c4

080a0948 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0948:	b508      	push	{r3, lr}
 80a094a:	4b02      	ldr	r3, [pc, #8]	; (80a0954 <HAL_USART_Available_Data+0xc>)
 80a094c:	681b      	ldr	r3, [r3, #0]
 80a094e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0950:	9301      	str	r3, [sp, #4]
 80a0952:	bd08      	pop	{r3, pc}
 80a0954:	080601c4 	.word	0x080601c4

080a0958 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0958:	b508      	push	{r3, lr}
 80a095a:	4b02      	ldr	r3, [pc, #8]	; (80a0964 <HAL_USART_Read_Data+0xc>)
 80a095c:	681b      	ldr	r3, [r3, #0]
 80a095e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0960:	9301      	str	r3, [sp, #4]
 80a0962:	bd08      	pop	{r3, pc}
 80a0964:	080601c4 	.word	0x080601c4

080a0968 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0968:	b508      	push	{r3, lr}
 80a096a:	4b02      	ldr	r3, [pc, #8]	; (80a0974 <HAL_USART_Peek_Data+0xc>)
 80a096c:	681b      	ldr	r3, [r3, #0]
 80a096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0970:	9301      	str	r3, [sp, #4]
 80a0972:	bd08      	pop	{r3, pc}
 80a0974:	080601c4 	.word	0x080601c4

080a0978 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0978:	b508      	push	{r3, lr}
 80a097a:	4b02      	ldr	r3, [pc, #8]	; (80a0984 <HAL_USART_Flush_Data+0xc>)
 80a097c:	681b      	ldr	r3, [r3, #0]
 80a097e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0980:	9301      	str	r3, [sp, #4]
 80a0982:	bd08      	pop	{r3, pc}
 80a0984:	080601c4 	.word	0x080601c4

080a0988 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0988:	b508      	push	{r3, lr}
 80a098a:	4b02      	ldr	r3, [pc, #8]	; (80a0994 <HAL_USART_Is_Enabled+0xc>)
 80a098c:	681b      	ldr	r3, [r3, #0]
 80a098e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0990:	9301      	str	r3, [sp, #4]
 80a0992:	bd08      	pop	{r3, pc}
 80a0994:	080601c4 	.word	0x080601c4

080a0998 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0998:	b508      	push	{r3, lr}
 80a099a:	4b02      	ldr	r3, [pc, #8]	; (80a09a4 <HAL_USART_Available_Data_For_Write+0xc>)
 80a099c:	681b      	ldr	r3, [r3, #0]
 80a099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a09a0:	9301      	str	r3, [sp, #4]
 80a09a2:	bd08      	pop	{r3, pc}
 80a09a4:	080601c4 	.word	0x080601c4

080a09a8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a09a8:	b508      	push	{r3, lr}
 80a09aa:	4b02      	ldr	r3, [pc, #8]	; (80a09b4 <HAL_I2C_Write_Data+0xc>)
 80a09ac:	681b      	ldr	r3, [r3, #0]
 80a09ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a09b0:	9301      	str	r3, [sp, #4]
 80a09b2:	bd08      	pop	{r3, pc}
 80a09b4:	080601ac 	.word	0x080601ac

080a09b8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a09b8:	b508      	push	{r3, lr}
 80a09ba:	4b02      	ldr	r3, [pc, #8]	; (80a09c4 <HAL_I2C_Available_Data+0xc>)
 80a09bc:	681b      	ldr	r3, [r3, #0]
 80a09be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a09c0:	9301      	str	r3, [sp, #4]
 80a09c2:	bd08      	pop	{r3, pc}
 80a09c4:	080601ac 	.word	0x080601ac

080a09c8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a09c8:	b508      	push	{r3, lr}
 80a09ca:	4b02      	ldr	r3, [pc, #8]	; (80a09d4 <HAL_I2C_Read_Data+0xc>)
 80a09cc:	681b      	ldr	r3, [r3, #0]
 80a09ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a09d0:	9301      	str	r3, [sp, #4]
 80a09d2:	bd08      	pop	{r3, pc}
 80a09d4:	080601ac 	.word	0x080601ac

080a09d8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a09d8:	b508      	push	{r3, lr}
 80a09da:	4b02      	ldr	r3, [pc, #8]	; (80a09e4 <HAL_I2C_Peek_Data+0xc>)
 80a09dc:	681b      	ldr	r3, [r3, #0]
 80a09de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a09e0:	9301      	str	r3, [sp, #4]
 80a09e2:	bd08      	pop	{r3, pc}
 80a09e4:	080601ac 	.word	0x080601ac

080a09e8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a09e8:	b508      	push	{r3, lr}
 80a09ea:	4b02      	ldr	r3, [pc, #8]	; (80a09f4 <HAL_I2C_Flush_Data+0xc>)
 80a09ec:	681b      	ldr	r3, [r3, #0]
 80a09ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a09f0:	9301      	str	r3, [sp, #4]
 80a09f2:	bd08      	pop	{r3, pc}
 80a09f4:	080601ac 	.word	0x080601ac

080a09f8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a09f8:	b508      	push	{r3, lr}
 80a09fa:	4b02      	ldr	r3, [pc, #8]	; (80a0a04 <HAL_I2C_Is_Enabled+0xc>)
 80a09fc:	681b      	ldr	r3, [r3, #0]
 80a09fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0a00:	9301      	str	r3, [sp, #4]
 80a0a02:	bd08      	pop	{r3, pc}
 80a0a04:	080601ac 	.word	0x080601ac

080a0a08 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0a08:	b508      	push	{r3, lr}
 80a0a0a:	4b03      	ldr	r3, [pc, #12]	; (80a0a18 <HAL_I2C_Init+0x10>)
 80a0a0c:	681b      	ldr	r3, [r3, #0]
 80a0a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0a12:	9301      	str	r3, [sp, #4]
 80a0a14:	bd08      	pop	{r3, pc}
 80a0a16:	0000      	.short	0x0000
 80a0a18:	080601ac 	.word	0x080601ac

080a0a1c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0a1c:	b508      	push	{r3, lr}
 80a0a1e:	4b02      	ldr	r3, [pc, #8]	; (80a0a28 <HAL_USB_USART_Init+0xc>)
 80a0a20:	681b      	ldr	r3, [r3, #0]
 80a0a22:	681b      	ldr	r3, [r3, #0]
 80a0a24:	9301      	str	r3, [sp, #4]
 80a0a26:	bd08      	pop	{r3, pc}
 80a0a28:	080601d8 	.word	0x080601d8

080a0a2c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0a2c:	b508      	push	{r3, lr}
 80a0a2e:	4b02      	ldr	r3, [pc, #8]	; (80a0a38 <HAL_USB_USART_Begin+0xc>)
 80a0a30:	681b      	ldr	r3, [r3, #0]
 80a0a32:	685b      	ldr	r3, [r3, #4]
 80a0a34:	9301      	str	r3, [sp, #4]
 80a0a36:	bd08      	pop	{r3, pc}
 80a0a38:	080601d8 	.word	0x080601d8

080a0a3c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0a3c:	b508      	push	{r3, lr}
 80a0a3e:	4b02      	ldr	r3, [pc, #8]	; (80a0a48 <HAL_USB_USART_Available_Data+0xc>)
 80a0a40:	681b      	ldr	r3, [r3, #0]
 80a0a42:	691b      	ldr	r3, [r3, #16]
 80a0a44:	9301      	str	r3, [sp, #4]
 80a0a46:	bd08      	pop	{r3, pc}
 80a0a48:	080601d8 	.word	0x080601d8

080a0a4c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0a4c:	b508      	push	{r3, lr}
 80a0a4e:	4b02      	ldr	r3, [pc, #8]	; (80a0a58 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0a50:	681b      	ldr	r3, [r3, #0]
 80a0a52:	695b      	ldr	r3, [r3, #20]
 80a0a54:	9301      	str	r3, [sp, #4]
 80a0a56:	bd08      	pop	{r3, pc}
 80a0a58:	080601d8 	.word	0x080601d8

080a0a5c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a5c:	b508      	push	{r3, lr}
 80a0a5e:	4b02      	ldr	r3, [pc, #8]	; (80a0a68 <HAL_USB_USART_Receive_Data+0xc>)
 80a0a60:	681b      	ldr	r3, [r3, #0]
 80a0a62:	699b      	ldr	r3, [r3, #24]
 80a0a64:	9301      	str	r3, [sp, #4]
 80a0a66:	bd08      	pop	{r3, pc}
 80a0a68:	080601d8 	.word	0x080601d8

080a0a6c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a6c:	b508      	push	{r3, lr}
 80a0a6e:	4b02      	ldr	r3, [pc, #8]	; (80a0a78 <HAL_USB_USART_Send_Data+0xc>)
 80a0a70:	681b      	ldr	r3, [r3, #0]
 80a0a72:	69db      	ldr	r3, [r3, #28]
 80a0a74:	9301      	str	r3, [sp, #4]
 80a0a76:	bd08      	pop	{r3, pc}
 80a0a78:	080601d8 	.word	0x080601d8

080a0a7c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0a7c:	b508      	push	{r3, lr}
 80a0a7e:	4b02      	ldr	r3, [pc, #8]	; (80a0a88 <HAL_USB_USART_Flush_Data+0xc>)
 80a0a80:	681b      	ldr	r3, [r3, #0]
 80a0a82:	6a1b      	ldr	r3, [r3, #32]
 80a0a84:	9301      	str	r3, [sp, #4]
 80a0a86:	bd08      	pop	{r3, pc}
 80a0a88:	080601d8 	.word	0x080601d8

080a0a8c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0a8c:	b508      	push	{r3, lr}
 80a0a8e:	4b02      	ldr	r3, [pc, #8]	; (80a0a98 <inet_gethostbyname+0xc>)
 80a0a90:	681b      	ldr	r3, [r3, #0]
 80a0a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0a94:	9301      	str	r3, [sp, #4]
 80a0a96:	bd08      	pop	{r3, pc}
 80a0a98:	080601c0 	.word	0x080601c0

080a0a9c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0a9c:	b508      	push	{r3, lr}
 80a0a9e:	4b02      	ldr	r3, [pc, #8]	; (80a0aa8 <set_system_mode+0xc>)
 80a0aa0:	681b      	ldr	r3, [r3, #0]
 80a0aa2:	685b      	ldr	r3, [r3, #4]
 80a0aa4:	9301      	str	r3, [sp, #4]
 80a0aa6:	bd08      	pop	{r3, pc}
 80a0aa8:	080601a4 	.word	0x080601a4

080a0aac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0aac:	b508      	push	{r3, lr}
 80a0aae:	4b02      	ldr	r3, [pc, #8]	; (80a0ab8 <system_delay_ms+0xc>)
 80a0ab0:	681b      	ldr	r3, [r3, #0]
 80a0ab2:	695b      	ldr	r3, [r3, #20]
 80a0ab4:	9301      	str	r3, [sp, #4]
 80a0ab6:	bd08      	pop	{r3, pc}
 80a0ab8:	080601a4 	.word	0x080601a4

080a0abc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0abc:	b508      	push	{r3, lr}
 80a0abe:	4b03      	ldr	r3, [pc, #12]	; (80a0acc <system_ctrl_set_app_request_handler+0x10>)
 80a0ac0:	681b      	ldr	r3, [r3, #0]
 80a0ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0ac6:	9301      	str	r3, [sp, #4]
 80a0ac8:	bd08      	pop	{r3, pc}
 80a0aca:	0000      	.short	0x0000
 80a0acc:	080601a4 	.word	0x080601a4

080a0ad0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0ad0:	b508      	push	{r3, lr}
 80a0ad2:	4b03      	ldr	r3, [pc, #12]	; (80a0ae0 <system_ctrl_set_result+0x10>)
 80a0ad4:	681b      	ldr	r3, [r3, #0]
 80a0ad6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0ada:	9301      	str	r3, [sp, #4]
 80a0adc:	bd08      	pop	{r3, pc}
 80a0ade:	0000      	.short	0x0000
 80a0ae0:	080601a4 	.word	0x080601a4

080a0ae4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ae4:	b508      	push	{r3, lr}
 80a0ae6:	4b02      	ldr	r3, [pc, #8]	; (80a0af0 <network_connect+0xc>)
 80a0ae8:	681b      	ldr	r3, [r3, #0]
 80a0aea:	685b      	ldr	r3, [r3, #4]
 80a0aec:	9301      	str	r3, [sp, #4]
 80a0aee:	bd08      	pop	{r3, pc}
 80a0af0:	080601c8 	.word	0x080601c8

080a0af4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0af4:	b508      	push	{r3, lr}
 80a0af6:	4b02      	ldr	r3, [pc, #8]	; (80a0b00 <network_connecting+0xc>)
 80a0af8:	681b      	ldr	r3, [r3, #0]
 80a0afa:	689b      	ldr	r3, [r3, #8]
 80a0afc:	9301      	str	r3, [sp, #4]
 80a0afe:	bd08      	pop	{r3, pc}
 80a0b00:	080601c8 	.word	0x080601c8

080a0b04 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0b04:	b508      	push	{r3, lr}
 80a0b06:	4b02      	ldr	r3, [pc, #8]	; (80a0b10 <network_disconnect+0xc>)
 80a0b08:	681b      	ldr	r3, [r3, #0]
 80a0b0a:	68db      	ldr	r3, [r3, #12]
 80a0b0c:	9301      	str	r3, [sp, #4]
 80a0b0e:	bd08      	pop	{r3, pc}
 80a0b10:	080601c8 	.word	0x080601c8

080a0b14 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0b14:	b508      	push	{r3, lr}
 80a0b16:	4b02      	ldr	r3, [pc, #8]	; (80a0b20 <network_ready+0xc>)
 80a0b18:	681b      	ldr	r3, [r3, #0]
 80a0b1a:	691b      	ldr	r3, [r3, #16]
 80a0b1c:	9301      	str	r3, [sp, #4]
 80a0b1e:	bd08      	pop	{r3, pc}
 80a0b20:	080601c8 	.word	0x080601c8

080a0b24 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b24:	b508      	push	{r3, lr}
 80a0b26:	4b02      	ldr	r3, [pc, #8]	; (80a0b30 <network_on+0xc>)
 80a0b28:	681b      	ldr	r3, [r3, #0]
 80a0b2a:	695b      	ldr	r3, [r3, #20]
 80a0b2c:	9301      	str	r3, [sp, #4]
 80a0b2e:	bd08      	pop	{r3, pc}
 80a0b30:	080601c8 	.word	0x080601c8

080a0b34 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b34:	b508      	push	{r3, lr}
 80a0b36:	4b02      	ldr	r3, [pc, #8]	; (80a0b40 <network_off+0xc>)
 80a0b38:	681b      	ldr	r3, [r3, #0]
 80a0b3a:	699b      	ldr	r3, [r3, #24]
 80a0b3c:	9301      	str	r3, [sp, #4]
 80a0b3e:	bd08      	pop	{r3, pc}
 80a0b40:	080601c8 	.word	0x080601c8

080a0b44 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0b44:	b508      	push	{r3, lr}
 80a0b46:	4b02      	ldr	r3, [pc, #8]	; (80a0b50 <network_listen+0xc>)
 80a0b48:	681b      	ldr	r3, [r3, #0]
 80a0b4a:	69db      	ldr	r3, [r3, #28]
 80a0b4c:	9301      	str	r3, [sp, #4]
 80a0b4e:	bd08      	pop	{r3, pc}
 80a0b50:	080601c8 	.word	0x080601c8

080a0b54 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0b54:	b508      	push	{r3, lr}
 80a0b56:	4b02      	ldr	r3, [pc, #8]	; (80a0b60 <network_listening+0xc>)
 80a0b58:	681b      	ldr	r3, [r3, #0]
 80a0b5a:	6a1b      	ldr	r3, [r3, #32]
 80a0b5c:	9301      	str	r3, [sp, #4]
 80a0b5e:	bd08      	pop	{r3, pc}
 80a0b60:	080601c8 	.word	0x080601c8

080a0b64 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0b64:	b508      	push	{r3, lr}
 80a0b66:	4b02      	ldr	r3, [pc, #8]	; (80a0b70 <network_set_listen_timeout+0xc>)
 80a0b68:	681b      	ldr	r3, [r3, #0]
 80a0b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0b6c:	9301      	str	r3, [sp, #4]
 80a0b6e:	bd08      	pop	{r3, pc}
 80a0b70:	080601c8 	.word	0x080601c8

080a0b74 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0b74:	b508      	push	{r3, lr}
 80a0b76:	4b02      	ldr	r3, [pc, #8]	; (80a0b80 <network_get_listen_timeout+0xc>)
 80a0b78:	681b      	ldr	r3, [r3, #0]
 80a0b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0b7c:	9301      	str	r3, [sp, #4]
 80a0b7e:	bd08      	pop	{r3, pc}
 80a0b80:	080601c8 	.word	0x080601c8

080a0b84 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a0b84:	b508      	push	{r3, lr}
 80a0b86:	4b02      	ldr	r3, [pc, #8]	; (80a0b90 <spark_variable+0xc>)
 80a0b88:	681b      	ldr	r3, [r3, #0]
 80a0b8a:	681b      	ldr	r3, [r3, #0]
 80a0b8c:	9301      	str	r3, [sp, #4]
 80a0b8e:	bd08      	pop	{r3, pc}
 80a0b90:	080601cc 	.word	0x080601cc

080a0b94 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a0b94:	b508      	push	{r3, lr}
 80a0b96:	4b02      	ldr	r3, [pc, #8]	; (80a0ba0 <spark_function+0xc>)
 80a0b98:	681b      	ldr	r3, [r3, #0]
 80a0b9a:	685b      	ldr	r3, [r3, #4]
 80a0b9c:	9301      	str	r3, [sp, #4]
 80a0b9e:	bd08      	pop	{r3, pc}
 80a0ba0:	080601cc 	.word	0x080601cc

080a0ba4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0ba4:	b508      	push	{r3, lr}
 80a0ba6:	4b02      	ldr	r3, [pc, #8]	; (80a0bb0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0ba8:	681b      	ldr	r3, [r3, #0]
 80a0baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0bac:	9301      	str	r3, [sp, #4]
 80a0bae:	bd08      	pop	{r3, pc}
 80a0bb0:	080601cc 	.word	0x080601cc

080a0bb4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0bb4:	b508      	push	{r3, lr}
 80a0bb6:	4b02      	ldr	r3, [pc, #8]	; (80a0bc0 <malloc+0xc>)
 80a0bb8:	681b      	ldr	r3, [r3, #0]
 80a0bba:	681b      	ldr	r3, [r3, #0]
 80a0bbc:	9301      	str	r3, [sp, #4]
 80a0bbe:	bd08      	pop	{r3, pc}
 80a0bc0:	080601a0 	.word	0x080601a0

080a0bc4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0bc4:	b508      	push	{r3, lr}
 80a0bc6:	4b02      	ldr	r3, [pc, #8]	; (80a0bd0 <free+0xc>)
 80a0bc8:	681b      	ldr	r3, [r3, #0]
 80a0bca:	685b      	ldr	r3, [r3, #4]
 80a0bcc:	9301      	str	r3, [sp, #4]
 80a0bce:	bd08      	pop	{r3, pc}
 80a0bd0:	080601a0 	.word	0x080601a0

080a0bd4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0bd4:	b508      	push	{r3, lr}
 80a0bd6:	4b02      	ldr	r3, [pc, #8]	; (80a0be0 <realloc+0xc>)
 80a0bd8:	681b      	ldr	r3, [r3, #0]
 80a0bda:	689b      	ldr	r3, [r3, #8]
 80a0bdc:	9301      	str	r3, [sp, #4]
 80a0bde:	bd08      	pop	{r3, pc}
 80a0be0:	080601a0 	.word	0x080601a0

080a0be4 <_malloc_r>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0be4:	b508      	push	{r3, lr}
 80a0be6:	4b02      	ldr	r3, [pc, #8]	; (80a0bf0 <_malloc_r+0xc>)
 80a0be8:	681b      	ldr	r3, [r3, #0]
 80a0bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0bec:	9301      	str	r3, [sp, #4]
 80a0bee:	bd08      	pop	{r3, pc}
 80a0bf0:	080601a0 	.word	0x080601a0

080a0bf4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0bf4:	4770      	bx	lr

080a0bf6 <_ZN8SPIClassD0Ev>:
 80a0bf6:	b510      	push	{r4, lr}
 80a0bf8:	4604      	mov	r4, r0
 80a0bfa:	2110      	movs	r1, #16
 80a0bfc:	f000 fdb1 	bl	80a1762 <_ZdlPvj>
 80a0c00:	4620      	mov	r0, r4
 80a0c02:	bd10      	pop	{r4, pc}

080a0c04 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0c04:	b570      	push	{r4, r5, r6, lr}
 80a0c06:	4604      	mov	r4, r0
 80a0c08:	460e      	mov	r6, r1
 80a0c0a:	4b07      	ldr	r3, [pc, #28]	; (80a0c28 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0c0c:	2500      	movs	r5, #0
 80a0c0e:	6003      	str	r3, [r0, #0]
 80a0c10:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0c14:	f7ff fe80 	bl	80a0918 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0c18:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0c1a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0c1c:	f7ff fe44 	bl	80a08a8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0c20:	60a5      	str	r5, [r4, #8]
}
 80a0c22:	4620      	mov	r0, r4
 80a0c24:	bd70      	pop	{r4, r5, r6, pc}
 80a0c26:	bf00      	nop
 80a0c28:	080a4440 	.word	0x080a4440

080a0c2c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0c2c:	7900      	ldrb	r0, [r0, #4]
 80a0c2e:	f7ff be43 	b.w	80a08b8 <HAL_SPI_Is_Enabled>
	...

080a0c34 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0c38:	4b03      	ldr	r3, [pc, #12]	; (80a0c48 <_GLOBAL__sub_I_System+0x14>)
 80a0c3a:	2000      	movs	r0, #0
 80a0c3c:	7018      	strb	r0, [r3, #0]
 80a0c3e:	8058      	strh	r0, [r3, #2]
 80a0c40:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0c42:	f7ff bf2b 	b.w	80a0a9c <set_system_mode>
 80a0c46:	bf00      	nop
 80a0c48:	20000400 	.word	0x20000400

080a0c4c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0c4c:	b510      	push	{r4, lr}
 80a0c4e:	4604      	mov	r4, r0
{
	free(buffer);
 80a0c50:	6800      	ldr	r0, [r0, #0]
 80a0c52:	f7ff ffb7 	bl	80a0bc4 <free>
}
 80a0c56:	4620      	mov	r0, r4
 80a0c58:	bd10      	pop	{r4, pc}

080a0c5a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0c5a:	b510      	push	{r4, lr}
 80a0c5c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0c5e:	6800      	ldr	r0, [r0, #0]
 80a0c60:	b108      	cbz	r0, 80a0c66 <_ZN6String10invalidateEv+0xc>
 80a0c62:	f7ff ffaf 	bl	80a0bc4 <free>
	buffer = NULL;
 80a0c66:	2300      	movs	r3, #0
 80a0c68:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0c6a:	60a3      	str	r3, [r4, #8]
 80a0c6c:	6063      	str	r3, [r4, #4]
 80a0c6e:	bd10      	pop	{r4, pc}

080a0c70 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0c70:	b538      	push	{r3, r4, r5, lr}
 80a0c72:	4604      	mov	r4, r0
 80a0c74:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0c76:	6800      	ldr	r0, [r0, #0]
 80a0c78:	3101      	adds	r1, #1
 80a0c7a:	f7ff ffab 	bl	80a0bd4 <realloc>
	if (newbuffer) {
 80a0c7e:	b110      	cbz	r0, 80a0c86 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0c80:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0c84:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0c86:	bd38      	pop	{r3, r4, r5, pc}

080a0c88 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0c88:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0c8a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0c8c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0c8e:	b113      	cbz	r3, 80a0c96 <_ZN6String7reserveEj+0xe>
 80a0c90:	6843      	ldr	r3, [r0, #4]
 80a0c92:	428b      	cmp	r3, r1
 80a0c94:	d207      	bcs.n	80a0ca6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0c96:	4620      	mov	r0, r4
 80a0c98:	f7ff ffea 	bl	80a0c70 <_ZN6String12changeBufferEj>
 80a0c9c:	b120      	cbz	r0, 80a0ca8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0c9e:	68a3      	ldr	r3, [r4, #8]
 80a0ca0:	b90b      	cbnz	r3, 80a0ca6 <_ZN6String7reserveEj+0x1e>
 80a0ca2:	6822      	ldr	r2, [r4, #0]
 80a0ca4:	7013      	strb	r3, [r2, #0]
 80a0ca6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0ca8:	bd10      	pop	{r4, pc}

080a0caa <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0caa:	b570      	push	{r4, r5, r6, lr}
 80a0cac:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a0cae:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0cb0:	4604      	mov	r4, r0
 80a0cb2:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a0cb4:	f7ff ffe8 	bl	80a0c88 <_ZN6String7reserveEj>
 80a0cb8:	b918      	cbnz	r0, 80a0cc2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a0cba:	4620      	mov	r0, r4
 80a0cbc:	f7ff ffcd 	bl	80a0c5a <_ZN6String10invalidateEv>
		return *this;
 80a0cc0:	e009      	b.n	80a0cd6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a0cc2:	462a      	mov	r2, r5
 80a0cc4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a0cc6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a0cc8:	6820      	ldr	r0, [r4, #0]
 80a0cca:	f001 fdf3 	bl	80a28b4 <memcpy>
	buffer[len] = 0;
 80a0cce:	6822      	ldr	r2, [r4, #0]
 80a0cd0:	68a3      	ldr	r3, [r4, #8]
 80a0cd2:	2100      	movs	r1, #0
 80a0cd4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a0cd6:	4620      	mov	r0, r4
 80a0cd8:	bd70      	pop	{r4, r5, r6, pc}

080a0cda <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0cda:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0cdc:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a0cde:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0ce0:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0ce2:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0ce4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0ce6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a0ce8:	460d      	mov	r5, r1
 80a0cea:	b139      	cbz	r1, 80a0cfc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a0cec:	4608      	mov	r0, r1
 80a0cee:	f001 fe1d 	bl	80a292c <strlen>
 80a0cf2:	4629      	mov	r1, r5
 80a0cf4:	4602      	mov	r2, r0
 80a0cf6:	4620      	mov	r0, r4
 80a0cf8:	f7ff ffd7 	bl	80a0caa <_ZN6String4copyEPKcj>
}
 80a0cfc:	4620      	mov	r0, r4
 80a0cfe:	bd38      	pop	{r3, r4, r5, pc}

080a0d00 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a0d00:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a0d02:	b510      	push	{r4, lr}
 80a0d04:	460b      	mov	r3, r1
 80a0d06:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a0d08:	d007      	beq.n	80a0d1a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a0d0a:	6809      	ldr	r1, [r1, #0]
 80a0d0c:	b119      	cbz	r1, 80a0d16 <_ZN6StringaSERKS_+0x16>
 80a0d0e:	689a      	ldr	r2, [r3, #8]
 80a0d10:	f7ff ffcb 	bl	80a0caa <_ZN6String4copyEPKcj>
 80a0d14:	e001      	b.n	80a0d1a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a0d16:	f7ff ffa0 	bl	80a0c5a <_ZN6String10invalidateEv>

	return *this;
}
 80a0d1a:	4620      	mov	r0, r4
 80a0d1c:	bd10      	pop	{r4, pc}

080a0d1e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a0d1e:	b510      	push	{r4, lr}
 80a0d20:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a0d22:	2300      	movs	r3, #0
 80a0d24:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a0d26:	6043      	str	r3, [r0, #4]
	len = 0;
 80a0d28:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0d2a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a0d2c:	f7ff ffe8 	bl	80a0d00 <_ZN6StringaSERKS_>
}
 80a0d30:	4620      	mov	r0, r4
 80a0d32:	bd10      	pop	{r4, pc}

080a0d34 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
 80a0d34:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 80a0d36:	6800      	ldr	r0, [r0, #0]
 80a0d38:	b120      	cbz	r0, 80a0d44 <_ZNK6String7toFloatEv+0x10>
 80a0d3a:	f001 fda5 	bl	80a2888 <atof>
 80a0d3e:	f001 faf5 	bl	80a232c <__aeabi_d2f>
 80a0d42:	bd08      	pop	{r3, pc}
	return 0;
 80a0d44:	2000      	movs	r0, #0
}
 80a0d46:	bd08      	pop	{r3, pc}

080a0d48 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d4a:	4606      	mov	r6, r0
 80a0d4c:	460d      	mov	r5, r1
 80a0d4e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0d50:	2400      	movs	r4, #0
  while (size--) {
 80a0d52:	42bd      	cmp	r5, r7
 80a0d54:	d00c      	beq.n	80a0d70 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0d56:	6833      	ldr	r3, [r6, #0]
 80a0d58:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0d5c:	689b      	ldr	r3, [r3, #8]
 80a0d5e:	4630      	mov	r0, r6
 80a0d60:	4798      	blx	r3
     if (chunk>=0)
 80a0d62:	2800      	cmp	r0, #0
 80a0d64:	db01      	blt.n	80a0d6a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0d66:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0d68:	e7f3      	b.n	80a0d52 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0d6a:	2c00      	cmp	r4, #0
 80a0d6c:	bf08      	it	eq
 80a0d6e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0d70:	4620      	mov	r0, r4
 80a0d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0d74 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0d74:	b570      	push	{r4, r5, r6, lr}
 80a0d76:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0d78:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0d7a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0d7c:	b149      	cbz	r1, 80a0d92 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0d7e:	f001 fdd5 	bl	80a292c <strlen>
 80a0d82:	682b      	ldr	r3, [r5, #0]
 80a0d84:	4602      	mov	r2, r0
 80a0d86:	4621      	mov	r1, r4
 80a0d88:	4628      	mov	r0, r5
    }
 80a0d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0d8e:	68db      	ldr	r3, [r3, #12]
 80a0d90:	4718      	bx	r3
    }
 80a0d92:	bd70      	pop	{r4, r5, r6, pc}

080a0d94 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0d94:	6803      	ldr	r3, [r0, #0]
 80a0d96:	689b      	ldr	r3, [r3, #8]
 80a0d98:	4718      	bx	r3

080a0d9a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0d9a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0d9c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0d9e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0da0:	f7ff fff8 	bl	80a0d94 <_ZN5Print5printEc>
  n += print('\n');
 80a0da4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0da6:	4604      	mov	r4, r0
  n += print('\n');
 80a0da8:	4628      	mov	r0, r5
 80a0daa:	f7ff fff3 	bl	80a0d94 <_ZN5Print5printEc>
  return n;
}
 80a0dae:	4420      	add	r0, r4
 80a0db0:	bd38      	pop	{r3, r4, r5, pc}

080a0db2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0db2:	b538      	push	{r3, r4, r5, lr}
 80a0db4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a0db6:	f7ff ffdd 	bl	80a0d74 <_ZN5Print5writeEPKc>
 80a0dba:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0dbc:	4628      	mov	r0, r5
 80a0dbe:	f7ff ffec 	bl	80a0d9a <_ZN5Print7printlnEv>
  return n;
}
 80a0dc2:	4420      	add	r0, r4
 80a0dc4:	bd38      	pop	{r3, r4, r5, pc}

080a0dc6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0dc6:	2a01      	cmp	r2, #1
 80a0dc8:	bf98      	it	ls
 80a0dca:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0dcc:	b530      	push	{r4, r5, lr}
 80a0dce:	460b      	mov	r3, r1
 80a0dd0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0dd2:	2100      	movs	r1, #0
 80a0dd4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0dd8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0ddc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0de0:	fb05 3312 	mls	r3, r5, r2, r3
 80a0de4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0de6:	2b09      	cmp	r3, #9
 80a0de8:	bf94      	ite	ls
 80a0dea:	3330      	addls	r3, #48	; 0x30
 80a0dec:	3337      	addhi	r3, #55	; 0x37
 80a0dee:	b2db      	uxtb	r3, r3
 80a0df0:	4621      	mov	r1, r4
 80a0df2:	f804 3901 	strb.w	r3, [r4], #-1
 80a0df6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0df8:	2d00      	cmp	r5, #0
 80a0dfa:	d1ef      	bne.n	80a0ddc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0dfc:	f7ff ffba 	bl	80a0d74 <_ZN5Print5writeEPKc>
}
 80a0e00:	b00b      	add	sp, #44	; 0x2c
 80a0e02:	bd30      	pop	{r4, r5, pc}

080a0e04 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0e04:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a0e06:	b922      	cbnz	r2, 80a0e12 <_ZN5Print5printEmi+0xe>
 80a0e08:	6803      	ldr	r3, [r0, #0]
 80a0e0a:	b2c9      	uxtb	r1, r1
 80a0e0c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0e0e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0e10:	4718      	bx	r3
  else return printNumber(n, base);
 80a0e12:	b2d2      	uxtb	r2, r2
}
 80a0e14:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0e16:	f7ff bfd6 	b.w	80a0dc6 <_ZN5Print11printNumberEmh>

080a0e1a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0e1a:	f7ff bff3 	b.w	80a0e04 <_ZN5Print5printEmi>

080a0e1e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0e1e:	2300      	movs	r3, #0
 80a0e20:	461a      	mov	r2, r3
 80a0e22:	4619      	mov	r1, r3
 80a0e24:	6840      	ldr	r0, [r0, #4]
 80a0e26:	f7ff be7d 	b.w	80a0b24 <network_on>
	...

080a0e2c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0e2c:	4a01      	ldr	r2, [pc, #4]	; (80a0e34 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0e2e:	4b02      	ldr	r3, [pc, #8]	; (80a0e38 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0e30:	601a      	str	r2, [r3, #0]
 80a0e32:	4770      	bx	lr
 80a0e34:	080a4501 	.word	0x080a4501
 80a0e38:	20000408 	.word	0x20000408

080a0e3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0e3c:	4b02      	ldr	r3, [pc, #8]	; (80a0e48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0e3e:	681a      	ldr	r2, [r3, #0]
 80a0e40:	4b02      	ldr	r3, [pc, #8]	; (80a0e4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0e42:	601a      	str	r2, [r3, #0]
 80a0e44:	4770      	bx	lr
 80a0e46:	bf00      	nop
 80a0e48:	2000030c 	.word	0x2000030c
 80a0e4c:	2000040c 	.word	0x2000040c

080a0e50 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0e50:	2100      	movs	r1, #0
 80a0e52:	f7ff be2b 	b.w	80a0aac <system_delay_ms>

080a0e56 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0e56:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0e58:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0e5a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0e5c:	b113      	cbz	r3, 80a0e64 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0e5e:	2203      	movs	r2, #3
 80a0e60:	4601      	mov	r1, r0
 80a0e62:	4798      	blx	r3
    }
 80a0e64:	4620      	mov	r0, r4
 80a0e66:	bd10      	pop	{r4, pc}

080a0e68 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0e68:	b510      	push	{r4, lr}
 80a0e6a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0e6c:	f7ff fff3 	bl	80a0e56 <_ZNSt14_Function_baseD1Ev>
 80a0e70:	4620      	mov	r0, r4
 80a0e72:	bd10      	pop	{r4, pc}

080a0e74 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0e74:	4803      	ldr	r0, [pc, #12]	; (80a0e84 <_GLOBAL__sub_I_RGB+0x10>)
 80a0e76:	2300      	movs	r3, #0
 80a0e78:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0e7a:	4a03      	ldr	r2, [pc, #12]	; (80a0e88 <_GLOBAL__sub_I_RGB+0x14>)
 80a0e7c:	4903      	ldr	r1, [pc, #12]	; (80a0e8c <_GLOBAL__sub_I_RGB+0x18>)
 80a0e7e:	f000 bc6b 	b.w	80a1758 <__aeabi_atexit>
 80a0e82:	bf00      	nop
 80a0e84:	20000410 	.word	0x20000410
 80a0e88:	200003b0 	.word	0x200003b0
 80a0e8c:	080a0e69 	.word	0x080a0e69

080a0e90 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0e90:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0e92:	4b14      	ldr	r3, [pc, #80]	; (80a0ee4 <serialEventRun+0x54>)
 80a0e94:	b133      	cbz	r3, 80a0ea4 <serialEventRun+0x14>
 80a0e96:	f000 f997 	bl	80a11c8 <_Z16_fetch_usbserialv>
 80a0e9a:	6803      	ldr	r3, [r0, #0]
 80a0e9c:	691b      	ldr	r3, [r3, #16]
 80a0e9e:	4798      	blx	r3
 80a0ea0:	2800      	cmp	r0, #0
 80a0ea2:	dc16      	bgt.n	80a0ed2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0ea4:	4b10      	ldr	r3, [pc, #64]	; (80a0ee8 <serialEventRun+0x58>)
 80a0ea6:	b133      	cbz	r3, 80a0eb6 <serialEventRun+0x26>
 80a0ea8:	f000 fa50 	bl	80a134c <_Z22__fetch_global_Serial1v>
 80a0eac:	6803      	ldr	r3, [r0, #0]
 80a0eae:	691b      	ldr	r3, [r3, #16]
 80a0eb0:	4798      	blx	r3
 80a0eb2:	2800      	cmp	r0, #0
 80a0eb4:	dc10      	bgt.n	80a0ed8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0eb6:	4b0d      	ldr	r3, [pc, #52]	; (80a0eec <serialEventRun+0x5c>)
 80a0eb8:	b10b      	cbz	r3, 80a0ebe <serialEventRun+0x2e>
 80a0eba:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0ebe:	4b0c      	ldr	r3, [pc, #48]	; (80a0ef0 <serialEventRun+0x60>)
 80a0ec0:	b17b      	cbz	r3, 80a0ee2 <serialEventRun+0x52>
 80a0ec2:	f000 f9bd 	bl	80a1240 <_Z17_fetch_usbserial1v>
 80a0ec6:	6803      	ldr	r3, [r0, #0]
 80a0ec8:	691b      	ldr	r3, [r3, #16]
 80a0eca:	4798      	blx	r3
 80a0ecc:	2800      	cmp	r0, #0
 80a0ece:	dc06      	bgt.n	80a0ede <serialEventRun+0x4e>
 80a0ed0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0ed2:	f3af 8000 	nop.w
 80a0ed6:	e7e5      	b.n	80a0ea4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0ed8:	f3af 8000 	nop.w
 80a0edc:	e7eb      	b.n	80a0eb6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0ede:	f3af 8000 	nop.w
 80a0ee2:	bd08      	pop	{r3, pc}
	...

080a0ef4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0ef4:	b508      	push	{r3, lr}
	serialEventRun();
 80a0ef6:	f7ff ffcb 	bl	80a0e90 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0efa:	f7ff fcf5 	bl	80a08e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0efe:	4b01      	ldr	r3, [pc, #4]	; (80a0f04 <_post_loop+0x10>)
 80a0f00:	6018      	str	r0, [r3, #0]
 80a0f02:	bd08      	pop	{r3, pc}
 80a0f04:	200008b4 	.word	0x200008b4

080a0f08 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0f08:	4802      	ldr	r0, [pc, #8]	; (80a0f14 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0f0a:	4a03      	ldr	r2, [pc, #12]	; (80a0f18 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0f0c:	4903      	ldr	r1, [pc, #12]	; (80a0f1c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0f0e:	1a12      	subs	r2, r2, r0
 80a0f10:	f001 bcd0 	b.w	80a28b4 <memcpy>
 80a0f14:	40024000 	.word	0x40024000
 80a0f18:	40024004 	.word	0x40024004
 80a0f1c:	080a4860 	.word	0x080a4860

080a0f20 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0f20:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0f22:	2300      	movs	r3, #0
 80a0f24:	9300      	str	r3, [sp, #0]
 80a0f26:	461a      	mov	r2, r3
 80a0f28:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0f2c:	f7ff fdd0 	bl	80a0ad0 <system_ctrl_set_result>
}
 80a0f30:	b003      	add	sp, #12
 80a0f32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0f38 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0f38:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0f3a:	8843      	ldrh	r3, [r0, #2]
 80a0f3c:	2b0a      	cmp	r3, #10
 80a0f3e:	d008      	beq.n	80a0f52 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0f40:	2b50      	cmp	r3, #80	; 0x50
 80a0f42:	d109      	bne.n	80a0f58 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0f44:	4b09      	ldr	r3, [pc, #36]	; (80a0f6c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0f46:	681b      	ldr	r3, [r3, #0]
 80a0f48:	b13b      	cbz	r3, 80a0f5a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0f4a:	b003      	add	sp, #12
 80a0f4c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0f50:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0f52:	f7ff ffe5 	bl	80a0f20 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0f56:	e006      	b.n	80a0f66 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0f58:	2300      	movs	r3, #0
 80a0f5a:	9300      	str	r3, [sp, #0]
 80a0f5c:	461a      	mov	r2, r3
 80a0f5e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0f62:	f7ff fdb5 	bl	80a0ad0 <system_ctrl_set_result>
        break;
    }
}
 80a0f66:	b003      	add	sp, #12
 80a0f68:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0f6c:	20000420 	.word	0x20000420

080a0f70 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0f70:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0f72:	4c10      	ldr	r4, [pc, #64]	; (80a0fb4 <module_user_init_hook+0x44>)
 80a0f74:	4d10      	ldr	r5, [pc, #64]	; (80a0fb8 <module_user_init_hook+0x48>)
 80a0f76:	6823      	ldr	r3, [r4, #0]
 80a0f78:	42ab      	cmp	r3, r5
 80a0f7a:	4b10      	ldr	r3, [pc, #64]	; (80a0fbc <module_user_init_hook+0x4c>)
 80a0f7c:	bf0c      	ite	eq
 80a0f7e:	2201      	moveq	r2, #1
 80a0f80:	2200      	movne	r2, #0
 80a0f82:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0f84:	d002      	beq.n	80a0f8c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0f86:	f7ff ffbf 	bl	80a0f08 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0f8a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0f8c:	f7ff fc9c 	bl	80a08c8 <HAL_RNG_GetRandomNumber>
 80a0f90:	4604      	mov	r4, r0
    srand(seed);
 80a0f92:	f001 fca3 	bl	80a28dc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0f96:	4b0a      	ldr	r3, [pc, #40]	; (80a0fc0 <module_user_init_hook+0x50>)
 80a0f98:	b113      	cbz	r3, 80a0fa0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0f9a:	4620      	mov	r0, r4
 80a0f9c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0fa0:	2100      	movs	r1, #0
 80a0fa2:	4807      	ldr	r0, [pc, #28]	; (80a0fc0 <module_user_init_hook+0x50>)
 80a0fa4:	f7ff fdfe 	bl	80a0ba4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0fac:	2100      	movs	r1, #0
 80a0fae:	4805      	ldr	r0, [pc, #20]	; (80a0fc4 <module_user_init_hook+0x54>)
 80a0fb0:	f7ff bd84 	b.w	80a0abc <system_ctrl_set_app_request_handler>
 80a0fb4:	40024000 	.word	0x40024000
 80a0fb8:	9a271c1e 	.word	0x9a271c1e
 80a0fbc:	20000424 	.word	0x20000424
 80a0fc0:	00000000 	.word	0x00000000
 80a0fc4:	080a0f39 	.word	0x080a0f39

080a0fc8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a0fc8:	b510      	push	{r4, lr}
 80a0fca:	b088      	sub	sp, #32
 80a0fcc:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a0fce:	4668      	mov	r0, sp
 80a0fd0:	f7ff fe83 	bl	80a0cda <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a0fd4:	4669      	mov	r1, sp
 80a0fd6:	a804      	add	r0, sp, #16
 80a0fd8:	f7ff fea1 	bl	80a0d1e <_ZN6StringC1ERKS_>
 80a0fdc:	a804      	add	r0, sp, #16
 80a0fde:	47a0      	blx	r4
 80a0fe0:	4604      	mov	r4, r0
 80a0fe2:	a804      	add	r0, sp, #16
 80a0fe4:	f7ff fe32 	bl	80a0c4c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a0fe8:	4668      	mov	r0, sp
 80a0fea:	f7ff fe2f 	bl	80a0c4c <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a0fee:	4620      	mov	r0, r4
 80a0ff0:	b008      	add	sp, #32
 80a0ff2:	bd10      	pop	{r4, pc}

080a0ff4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a0ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0ff6:	4607      	mov	r7, r0
 80a0ff8:	460e      	mov	r6, r1
 80a0ffa:	4615      	mov	r5, r2
 80a0ffc:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a0ffe:	2410      	movs	r4, #16
 80a1000:	4622      	mov	r2, r4
 80a1002:	2100      	movs	r1, #0
 80a1004:	4668      	mov	r0, sp
 80a1006:	f001 fc60 	bl	80a28ca <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a100a:	2200      	movs	r2, #0
 80a100c:	4669      	mov	r1, sp
 80a100e:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a1010:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a1014:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a1016:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a1018:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a101a:	f7ff fdbb 	bl	80a0b94 <spark_function>
}
 80a101e:	b005      	add	sp, #20
 80a1020:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1022 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1022:	4770      	bx	lr

080a1024 <_ZN9IPAddressD0Ev>:
 80a1024:	b510      	push	{r4, lr}
 80a1026:	4604      	mov	r4, r0
 80a1028:	2118      	movs	r1, #24
 80a102a:	f000 fb9a 	bl	80a1762 <_ZdlPvj>
 80a102e:	4620      	mov	r0, r4
 80a1030:	bd10      	pop	{r4, pc}

080a1032 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1034:	460f      	mov	r7, r1
 80a1036:	f100 0608 	add.w	r6, r0, #8
 80a103a:	1d05      	adds	r5, r0, #4
 80a103c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a103e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1042:	220a      	movs	r2, #10
 80a1044:	4638      	mov	r0, r7
 80a1046:	f7ff fee8 	bl	80a0e1a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a104a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a104c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a104e:	d007      	beq.n	80a1060 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1050:	2c00      	cmp	r4, #0
 80a1052:	d0f4      	beq.n	80a103e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1054:	212e      	movs	r1, #46	; 0x2e
 80a1056:	4638      	mov	r0, r7
 80a1058:	f7ff fe9c 	bl	80a0d94 <_ZN5Print5printEc>
 80a105c:	4404      	add	r4, r0
 80a105e:	e7ee      	b.n	80a103e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1060:	4620      	mov	r0, r4
 80a1062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1064 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1064:	b510      	push	{r4, lr}
 80a1066:	4604      	mov	r4, r0
 80a1068:	4b04      	ldr	r3, [pc, #16]	; (80a107c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a106a:	2211      	movs	r2, #17
 80a106c:	f840 3b04 	str.w	r3, [r0], #4
 80a1070:	2100      	movs	r1, #0
 80a1072:	f001 fc2a 	bl	80a28ca <memset>
{
    clear();
}
 80a1076:	4620      	mov	r0, r4
 80a1078:	bd10      	pop	{r4, pc}
 80a107a:	bf00      	nop
 80a107c:	080a455c 	.word	0x080a455c

080a1080 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1080:	4603      	mov	r3, r0
 80a1082:	4a07      	ldr	r2, [pc, #28]	; (80a10a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1084:	b510      	push	{r4, lr}
 80a1086:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a108a:	f101 0210 	add.w	r2, r1, #16
 80a108e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1092:	4291      	cmp	r1, r2
 80a1094:	f843 4b04 	str.w	r4, [r3], #4
 80a1098:	d1f9      	bne.n	80a108e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a109a:	780a      	ldrb	r2, [r1, #0]
 80a109c:	701a      	strb	r2, [r3, #0]
}
 80a109e:	bd10      	pop	{r4, pc}
 80a10a0:	080a455c 	.word	0x080a455c

080a10a4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a10a4:	4a02      	ldr	r2, [pc, #8]	; (80a10b0 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a10a6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a10a8:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a10aa:	2204      	movs	r2, #4
 80a10ac:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a10ae:	4770      	bx	lr
 80a10b0:	080a455c 	.word	0x080a455c

080a10b4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a10b4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a10b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a10ba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a10be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a10c2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a10c6:	2304      	movs	r3, #4
 80a10c8:	6041      	str	r1, [r0, #4]
 80a10ca:	7503      	strb	r3, [r0, #20]
 80a10cc:	bd10      	pop	{r4, pc}
	...

080a10d0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a10d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a10d2:	4d04      	ldr	r5, [pc, #16]	; (80a10e4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a10d4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a10d6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a10da:	9500      	str	r5, [sp, #0]
 80a10dc:	f7ff ffea 	bl	80a10b4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a10e0:	b003      	add	sp, #12
 80a10e2:	bd30      	pop	{r4, r5, pc}
 80a10e4:	080a455c 	.word	0x080a455c

080a10e8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a10e8:	7441      	strb	r1, [r0, #17]
 80a10ea:	4770      	bx	lr

080a10ec <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a10ec:	4770      	bx	lr

080a10ee <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a10ee:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a10f0:	2100      	movs	r1, #0
 80a10f2:	7c00      	ldrb	r0, [r0, #16]
 80a10f4:	f7ff fcb2 	bl	80a0a5c <HAL_USB_USART_Receive_Data>
}
 80a10f8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a10fc:	bf28      	it	cs
 80a10fe:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1102:	bd08      	pop	{r3, pc}

080a1104 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1104:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1106:	2101      	movs	r1, #1
 80a1108:	7c00      	ldrb	r0, [r0, #16]
 80a110a:	f7ff fca7 	bl	80a0a5c <HAL_USB_USART_Receive_Data>
}
 80a110e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1112:	bf28      	it	cs
 80a1114:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1118:	bd08      	pop	{r3, pc}

080a111a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a111a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a111c:	7c00      	ldrb	r0, [r0, #16]
 80a111e:	f7ff fc95 	bl	80a0a4c <HAL_USB_USART_Available_Data_For_Write>
}
 80a1122:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1126:	bd08      	pop	{r3, pc}

080a1128 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1128:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a112a:	7c00      	ldrb	r0, [r0, #16]
 80a112c:	f7ff fc86 	bl	80a0a3c <HAL_USB_USART_Available_Data>
}
 80a1130:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1134:	bd08      	pop	{r3, pc}

080a1136 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1136:	7c00      	ldrb	r0, [r0, #16]
 80a1138:	f7ff bca0 	b.w	80a0a7c <HAL_USB_USART_Flush_Data>

080a113c <_ZN9USBSerialD0Ev>:
 80a113c:	b510      	push	{r4, lr}
 80a113e:	4604      	mov	r4, r0
 80a1140:	2114      	movs	r1, #20
 80a1142:	f000 fb0e 	bl	80a1762 <_ZdlPvj>
 80a1146:	4620      	mov	r0, r4
 80a1148:	bd10      	pop	{r4, pc}

080a114a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a114a:	b538      	push	{r3, r4, r5, lr}
 80a114c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a114e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1150:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1152:	f7ff fc7b 	bl	80a0a4c <HAL_USB_USART_Available_Data_For_Write>
 80a1156:	2800      	cmp	r0, #0
 80a1158:	dc01      	bgt.n	80a115e <_ZN9USBSerial5writeEh+0x14>
 80a115a:	7c60      	ldrb	r0, [r4, #17]
 80a115c:	b128      	cbz	r0, 80a116a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a115e:	4629      	mov	r1, r5
 80a1160:	7c20      	ldrb	r0, [r4, #16]
 80a1162:	f7ff fc83 	bl	80a0a6c <HAL_USB_USART_Send_Data>
 80a1166:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a116a:	bd38      	pop	{r3, r4, r5, pc}

080a116c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a116c:	b510      	push	{r4, lr}
 80a116e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1170:	2300      	movs	r3, #0
 80a1172:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1178:	60a3      	str	r3, [r4, #8]
 80a117a:	4b05      	ldr	r3, [pc, #20]	; (80a1190 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a117c:	4608      	mov	r0, r1
 80a117e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1180:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1182:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1184:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1186:	4611      	mov	r1, r2
 80a1188:	f7ff fc48 	bl	80a0a1c <HAL_USB_USART_Init>
}
 80a118c:	4620      	mov	r0, r4
 80a118e:	bd10      	pop	{r4, pc}
 80a1190:	080a4570 	.word	0x080a4570

080a1194 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1194:	2200      	movs	r2, #0
 80a1196:	7c00      	ldrb	r0, [r0, #16]
 80a1198:	f7ff bc48 	b.w	80a0a2c <HAL_USB_USART_Begin>

080a119c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a119c:	b510      	push	{r4, lr}
 80a119e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a11a0:	2214      	movs	r2, #20
 80a11a2:	2100      	movs	r1, #0
 80a11a4:	f001 fb91 	bl	80a28ca <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a11a8:	4b05      	ldr	r3, [pc, #20]	; (80a11c0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a11aa:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a11ac:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a11ae:	4b05      	ldr	r3, [pc, #20]	; (80a11c4 <_Z19acquireSerialBufferv+0x28>)
 80a11b0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a11b2:	f240 1301 	movw	r3, #257	; 0x101
 80a11b6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a11b8:	2381      	movs	r3, #129	; 0x81
 80a11ba:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a11bc:	bd10      	pop	{r4, pc}
 80a11be:	bf00      	nop
 80a11c0:	200004ad 	.word	0x200004ad
 80a11c4:	2000042c 	.word	0x2000042c

080a11c8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a11c8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a11ca:	4d0e      	ldr	r5, [pc, #56]	; (80a1204 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a11cc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a11ce:	a801      	add	r0, sp, #4
 80a11d0:	f7ff ffe4 	bl	80a119c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a11d4:	6829      	ldr	r1, [r5, #0]
 80a11d6:	f011 0401 	ands.w	r4, r1, #1
 80a11da:	d110      	bne.n	80a11fe <_Z16_fetch_usbserialv+0x36>
 80a11dc:	4628      	mov	r0, r5
 80a11de:	f7fe ff60 	bl	80a00a2 <__cxa_guard_acquire>
 80a11e2:	b160      	cbz	r0, 80a11fe <_Z16_fetch_usbserialv+0x36>
 80a11e4:	aa01      	add	r2, sp, #4
 80a11e6:	4621      	mov	r1, r4
 80a11e8:	4807      	ldr	r0, [pc, #28]	; (80a1208 <_Z16_fetch_usbserialv+0x40>)
 80a11ea:	f7ff ffbf 	bl	80a116c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a11ee:	4628      	mov	r0, r5
 80a11f0:	f7fe ff5c 	bl	80a00ac <__cxa_guard_release>
 80a11f4:	4a05      	ldr	r2, [pc, #20]	; (80a120c <_Z16_fetch_usbserialv+0x44>)
 80a11f6:	4906      	ldr	r1, [pc, #24]	; (80a1210 <_Z16_fetch_usbserialv+0x48>)
 80a11f8:	4803      	ldr	r0, [pc, #12]	; (80a1208 <_Z16_fetch_usbserialv+0x40>)
 80a11fa:	f000 faad 	bl	80a1758 <__aeabi_atexit>
	return _usbserial;
}
 80a11fe:	4802      	ldr	r0, [pc, #8]	; (80a1208 <_Z16_fetch_usbserialv+0x40>)
 80a1200:	b007      	add	sp, #28
 80a1202:	bd30      	pop	{r4, r5, pc}
 80a1204:	20000428 	.word	0x20000428
 80a1208:	200005b0 	.word	0x200005b0
 80a120c:	200003b0 	.word	0x200003b0
 80a1210:	080a10ed 	.word	0x080a10ed

080a1214 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1214:	b510      	push	{r4, lr}
 80a1216:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1218:	2214      	movs	r2, #20
 80a121a:	2100      	movs	r1, #0
 80a121c:	f001 fb55 	bl	80a28ca <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1220:	4b05      	ldr	r3, [pc, #20]	; (80a1238 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1222:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1224:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1226:	4b05      	ldr	r3, [pc, #20]	; (80a123c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1228:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a122a:	f240 1301 	movw	r3, #257	; 0x101
 80a122e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1230:	2381      	movs	r3, #129	; 0x81
 80a1232:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1234:	bd10      	pop	{r4, pc}
 80a1236:	bf00      	nop
 80a1238:	20000660 	.word	0x20000660
 80a123c:	200005c8 	.word	0x200005c8

080a1240 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1240:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1242:	4c0e      	ldr	r4, [pc, #56]	; (80a127c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1244:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1246:	a801      	add	r0, sp, #4
 80a1248:	f7ff ffe4 	bl	80a1214 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a124c:	6823      	ldr	r3, [r4, #0]
 80a124e:	07db      	lsls	r3, r3, #31
 80a1250:	d410      	bmi.n	80a1274 <_Z17_fetch_usbserial1v+0x34>
 80a1252:	4620      	mov	r0, r4
 80a1254:	f7fe ff25 	bl	80a00a2 <__cxa_guard_acquire>
 80a1258:	b160      	cbz	r0, 80a1274 <_Z17_fetch_usbserial1v+0x34>
 80a125a:	aa01      	add	r2, sp, #4
 80a125c:	2101      	movs	r1, #1
 80a125e:	4808      	ldr	r0, [pc, #32]	; (80a1280 <_Z17_fetch_usbserial1v+0x40>)
 80a1260:	f7ff ff84 	bl	80a116c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1264:	4620      	mov	r0, r4
 80a1266:	f7fe ff21 	bl	80a00ac <__cxa_guard_release>
 80a126a:	4a06      	ldr	r2, [pc, #24]	; (80a1284 <_Z17_fetch_usbserial1v+0x44>)
 80a126c:	4906      	ldr	r1, [pc, #24]	; (80a1288 <_Z17_fetch_usbserial1v+0x48>)
 80a126e:	4804      	ldr	r0, [pc, #16]	; (80a1280 <_Z17_fetch_usbserial1v+0x40>)
 80a1270:	f000 fa72 	bl	80a1758 <__aeabi_atexit>
  return _usbserial1;
}
 80a1274:	4802      	ldr	r0, [pc, #8]	; (80a1280 <_Z17_fetch_usbserial1v+0x40>)
 80a1276:	b006      	add	sp, #24
 80a1278:	bd10      	pop	{r4, pc}
 80a127a:	bf00      	nop
 80a127c:	200005c4 	.word	0x200005c4
 80a1280:	2000064c 	.word	0x2000064c
 80a1284:	200003b0 	.word	0x200003b0
 80a1288:	080a10ed 	.word	0x080a10ed

080a128c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a128c:	f7ff bb04 	b.w	80a0898 <HAL_Interrupts_Disable_All>

080a1290 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a1290:	f7ff bafa 	b.w	80a0888 <HAL_Interrupts_Enable_All>

080a1294 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1294:	4770      	bx	lr

080a1296 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1296:	7441      	strb	r1, [r0, #17]
 80a1298:	4770      	bx	lr

080a129a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a129a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a129c:	7c00      	ldrb	r0, [r0, #16]
 80a129e:	f7ff fb7b 	bl	80a0998 <HAL_USART_Available_Data_For_Write>
}
 80a12a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a12a6:	bd08      	pop	{r3, pc}

080a12a8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a12a8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a12aa:	7c00      	ldrb	r0, [r0, #16]
 80a12ac:	f7ff fb4c 	bl	80a0948 <HAL_USART_Available_Data>
}
 80a12b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a12b4:	bd08      	pop	{r3, pc}

080a12b6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a12b6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a12b8:	7c00      	ldrb	r0, [r0, #16]
 80a12ba:	f7ff fb55 	bl	80a0968 <HAL_USART_Peek_Data>
}
 80a12be:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a12c2:	bf28      	it	cs
 80a12c4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a12c8:	bd08      	pop	{r3, pc}

080a12ca <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a12ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a12cc:	7c00      	ldrb	r0, [r0, #16]
 80a12ce:	f7ff fb43 	bl	80a0958 <HAL_USART_Read_Data>
}
 80a12d2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a12d6:	bf28      	it	cs
 80a12d8:	f04f 30ff 	movcs.w	r0, #4294967295
 80a12dc:	bd08      	pop	{r3, pc}

080a12de <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a12de:	7c00      	ldrb	r0, [r0, #16]
 80a12e0:	f7ff bb4a 	b.w	80a0978 <HAL_USART_Flush_Data>

080a12e4 <_ZN11USARTSerialD0Ev>:
 80a12e4:	b510      	push	{r4, lr}
 80a12e6:	4604      	mov	r4, r0
 80a12e8:	2114      	movs	r1, #20
 80a12ea:	f000 fa3a 	bl	80a1762 <_ZdlPvj>
 80a12ee:	4620      	mov	r0, r4
 80a12f0:	bd10      	pop	{r4, pc}

080a12f2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a12f2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a12f4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a12f6:	4604      	mov	r4, r0
 80a12f8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a12fa:	b925      	cbnz	r5, 80a1306 <_ZN11USARTSerial5writeEh+0x14>
 80a12fc:	7c00      	ldrb	r0, [r0, #16]
 80a12fe:	f7ff fb4b 	bl	80a0998 <HAL_USART_Available_Data_For_Write>
 80a1302:	2800      	cmp	r0, #0
 80a1304:	dd05      	ble.n	80a1312 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1306:	4631      	mov	r1, r6
 80a1308:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a130a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a130e:	f7ff bb13 	b.w	80a0938 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1312:	4628      	mov	r0, r5
 80a1314:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1318 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1318:	b510      	push	{r4, lr}
 80a131a:	4604      	mov	r4, r0
 80a131c:	4608      	mov	r0, r1
 80a131e:	4611      	mov	r1, r2
 80a1320:	2200      	movs	r2, #0
 80a1322:	6062      	str	r2, [r4, #4]
 80a1324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1328:	60a2      	str	r2, [r4, #8]
 80a132a:	4a05      	ldr	r2, [pc, #20]	; (80a1340 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a132c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a132e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1330:	2201      	movs	r2, #1
 80a1332:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1334:	461a      	mov	r2, r3
 80a1336:	f7ff faf7 	bl	80a0928 <HAL_USART_Init>
}
 80a133a:	4620      	mov	r0, r4
 80a133c:	bd10      	pop	{r4, pc}
 80a133e:	bf00      	nop
 80a1340:	080a45a0 	.word	0x080a45a0

080a1344 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1344:	7c00      	ldrb	r0, [r0, #16]
 80a1346:	f7ff bb1f 	b.w	80a0988 <HAL_USART_Is_Enabled>
	...

080a134c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a134c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a134e:	4d0c      	ldr	r5, [pc, #48]	; (80a1380 <_Z22__fetch_global_Serial1v+0x34>)
 80a1350:	6829      	ldr	r1, [r5, #0]
 80a1352:	f011 0401 	ands.w	r4, r1, #1
 80a1356:	d111      	bne.n	80a137c <_Z22__fetch_global_Serial1v+0x30>
 80a1358:	4628      	mov	r0, r5
 80a135a:	f7fe fea2 	bl	80a00a2 <__cxa_guard_acquire>
 80a135e:	b168      	cbz	r0, 80a137c <_Z22__fetch_global_Serial1v+0x30>
 80a1360:	4a08      	ldr	r2, [pc, #32]	; (80a1384 <_Z22__fetch_global_Serial1v+0x38>)
 80a1362:	4621      	mov	r1, r4
 80a1364:	4b08      	ldr	r3, [pc, #32]	; (80a1388 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1366:	4809      	ldr	r0, [pc, #36]	; (80a138c <_Z22__fetch_global_Serial1v+0x40>)
 80a1368:	f7ff ffd6 	bl	80a1318 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a136c:	4628      	mov	r0, r5
 80a136e:	f7fe fe9d 	bl	80a00ac <__cxa_guard_release>
 80a1372:	4a07      	ldr	r2, [pc, #28]	; (80a1390 <_Z22__fetch_global_Serial1v+0x44>)
 80a1374:	4907      	ldr	r1, [pc, #28]	; (80a1394 <_Z22__fetch_global_Serial1v+0x48>)
 80a1376:	4805      	ldr	r0, [pc, #20]	; (80a138c <_Z22__fetch_global_Serial1v+0x40>)
 80a1378:	f000 f9ee 	bl	80a1758 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a137c:	4803      	ldr	r0, [pc, #12]	; (80a138c <_Z22__fetch_global_Serial1v+0x40>)
 80a137e:	bd38      	pop	{r3, r4, r5, pc}
 80a1380:	200007fc 	.word	0x200007fc
 80a1384:	20000800 	.word	0x20000800
 80a1388:	20000778 	.word	0x20000778
 80a138c:	20000764 	.word	0x20000764
 80a1390:	200003b0 	.word	0x200003b0
 80a1394:	080a1295 	.word	0x080a1295

080a1398 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1398:	4770      	bx	lr

080a139a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a139a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a139c:	4606      	mov	r6, r0
 80a139e:	4615      	mov	r5, r2
 80a13a0:	460c      	mov	r4, r1
 80a13a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a13a4:	42bc      	cmp	r4, r7
 80a13a6:	d006      	beq.n	80a13b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a13a8:	6833      	ldr	r3, [r6, #0]
 80a13aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a13ae:	689b      	ldr	r3, [r3, #8]
 80a13b0:	4630      	mov	r0, r6
 80a13b2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a13b4:	e7f6      	b.n	80a13a4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a13b6:	4628      	mov	r0, r5
 80a13b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a13ba <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a13ba:	2200      	movs	r2, #0
 80a13bc:	7c00      	ldrb	r0, [r0, #16]
 80a13be:	f7ff baf3 	b.w	80a09a8 <HAL_I2C_Write_Data>

080a13c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a13c2:	2100      	movs	r1, #0
 80a13c4:	7c00      	ldrb	r0, [r0, #16]
 80a13c6:	f7ff baf7 	b.w	80a09b8 <HAL_I2C_Available_Data>

080a13ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a13ca:	2100      	movs	r1, #0
 80a13cc:	7c00      	ldrb	r0, [r0, #16]
 80a13ce:	f7ff bafb 	b.w	80a09c8 <HAL_I2C_Read_Data>

080a13d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a13d2:	2100      	movs	r1, #0
 80a13d4:	7c00      	ldrb	r0, [r0, #16]
 80a13d6:	f7ff baff 	b.w	80a09d8 <HAL_I2C_Peek_Data>

080a13da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a13da:	2100      	movs	r1, #0
 80a13dc:	7c00      	ldrb	r0, [r0, #16]
 80a13de:	f7ff bb03 	b.w	80a09e8 <HAL_I2C_Flush_Data>

080a13e2 <_ZN7TwoWireD0Ev>:
 80a13e2:	b510      	push	{r4, lr}
 80a13e4:	4604      	mov	r4, r0
 80a13e6:	2114      	movs	r1, #20
 80a13e8:	f000 f9bb 	bl	80a1762 <_ZdlPvj>
 80a13ec:	4620      	mov	r0, r4
 80a13ee:	bd10      	pop	{r4, pc}

080a13f0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a13f0:	b510      	push	{r4, lr}
 80a13f2:	4604      	mov	r4, r0
 80a13f4:	4608      	mov	r0, r1
 80a13f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a13fa:	60a3      	str	r3, [r4, #8]
 80a13fc:	4b04      	ldr	r3, [pc, #16]	; (80a1410 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a13fe:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1400:	7420      	strb	r0, [r4, #16]
 80a1402:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1404:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1406:	f7ff faff 	bl	80a0a08 <HAL_I2C_Init>

}
 80a140a:	4620      	mov	r0, r4
 80a140c:	bd10      	pop	{r4, pc}
 80a140e:	bf00      	nop
 80a1410:	080a45d0 	.word	0x080a45d0

080a1414 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1414:	2100      	movs	r1, #0
 80a1416:	7c00      	ldrb	r0, [r0, #16]
 80a1418:	f7ff baee 	b.w	80a09f8 <HAL_I2C_Is_Enabled>

080a141c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a141c:	2200      	movs	r2, #0
 80a141e:	4611      	mov	r1, r2
 80a1420:	6840      	ldr	r0, [r0, #4]
 80a1422:	f7ff bb77 	b.w	80a0b14 <network_ready>

080a1426 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1426:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1428:	4616      	mov	r6, r2
 80a142a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a142c:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a142e:	460f      	mov	r7, r1
 80a1430:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1432:	2100      	movs	r1, #0
 80a1434:	a803      	add	r0, sp, #12
 80a1436:	f001 fa48 	bl	80a28ca <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a143a:	4630      	mov	r0, r6
 80a143c:	f001 fa76 	bl	80a292c <strlen>
 80a1440:	2500      	movs	r5, #0
 80a1442:	9500      	str	r5, [sp, #0]
 80a1444:	b281      	uxth	r1, r0
 80a1446:	687b      	ldr	r3, [r7, #4]
 80a1448:	aa03      	add	r2, sp, #12
 80a144a:	4630      	mov	r0, r6
 80a144c:	f7ff fb1e 	bl	80a0a8c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1450:	b120      	cbz	r0, 80a145c <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1452:	4629      	mov	r1, r5
 80a1454:	4620      	mov	r0, r4
 80a1456:	f7ff fe25 	bl	80a10a4 <_ZN9IPAddressC1Em>
 80a145a:	e003      	b.n	80a1464 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a145c:	a903      	add	r1, sp, #12
 80a145e:	4620      	mov	r0, r4
 80a1460:	f7ff fe0e 	bl	80a1080 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1464:	4620      	mov	r0, r4
 80a1466:	b009      	add	sp, #36	; 0x24
 80a1468:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a146a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a146a:	2200      	movs	r2, #0
 80a146c:	4611      	mov	r1, r2
 80a146e:	6840      	ldr	r0, [r0, #4]
 80a1470:	f7ff bb70 	b.w	80a0b54 <network_listening>

080a1474 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1474:	2200      	movs	r2, #0
 80a1476:	4611      	mov	r1, r2
 80a1478:	6840      	ldr	r0, [r0, #4]
 80a147a:	f7ff bb7b 	b.w	80a0b74 <network_get_listen_timeout>

080a147e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a147e:	2200      	movs	r2, #0
 80a1480:	6840      	ldr	r0, [r0, #4]
 80a1482:	f7ff bb6f 	b.w	80a0b64 <network_set_listen_timeout>

080a1486 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1486:	2200      	movs	r2, #0
 80a1488:	f081 0101 	eor.w	r1, r1, #1
 80a148c:	6840      	ldr	r0, [r0, #4]
 80a148e:	f7ff bb59 	b.w	80a0b44 <network_listen>

080a1492 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1492:	2300      	movs	r3, #0
 80a1494:	461a      	mov	r2, r3
 80a1496:	4619      	mov	r1, r3
 80a1498:	6840      	ldr	r0, [r0, #4]
 80a149a:	f7ff bb4b 	b.w	80a0b34 <network_off>

080a149e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a149e:	2200      	movs	r2, #0
 80a14a0:	4611      	mov	r1, r2
 80a14a2:	6840      	ldr	r0, [r0, #4]
 80a14a4:	f7ff bb26 	b.w	80a0af4 <network_connecting>

080a14a8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a14a8:	2200      	movs	r2, #0
 80a14aa:	2102      	movs	r1, #2
 80a14ac:	6840      	ldr	r0, [r0, #4]
 80a14ae:	f7ff bb29 	b.w	80a0b04 <network_disconnect>

080a14b2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a14b2:	2300      	movs	r3, #0
 80a14b4:	461a      	mov	r2, r3
 80a14b6:	6840      	ldr	r0, [r0, #4]
 80a14b8:	f7ff bb14 	b.w	80a0ae4 <network_connect>

080a14bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a14bc:	4b02      	ldr	r3, [pc, #8]	; (80a14c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a14be:	2204      	movs	r2, #4
 80a14c0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a14c2:	4a02      	ldr	r2, [pc, #8]	; (80a14cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a14c4:	601a      	str	r2, [r3, #0]
 80a14c6:	4770      	bx	lr
 80a14c8:	20000884 	.word	0x20000884
 80a14cc:	080a45f8 	.word	0x080a45f8

080a14d0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a14d0:	2300      	movs	r3, #0
 80a14d2:	461a      	mov	r2, r3
 80a14d4:	6840      	ldr	r0, [r0, #4]
 80a14d6:	f7ff bb05 	b.w	80a0ae4 <network_connect>

080a14da <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a14da:	2200      	movs	r2, #0
 80a14dc:	2102      	movs	r1, #2
 80a14de:	6840      	ldr	r0, [r0, #4]
 80a14e0:	f7ff bb10 	b.w	80a0b04 <network_disconnect>

080a14e4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a14e4:	2200      	movs	r2, #0
 80a14e6:	4611      	mov	r1, r2
 80a14e8:	6840      	ldr	r0, [r0, #4]
 80a14ea:	f7ff bb03 	b.w	80a0af4 <network_connecting>

080a14ee <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a14ee:	2200      	movs	r2, #0
 80a14f0:	4611      	mov	r1, r2
 80a14f2:	6840      	ldr	r0, [r0, #4]
 80a14f4:	f7ff bb0e 	b.w	80a0b14 <network_ready>

080a14f8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a14f8:	2300      	movs	r3, #0
 80a14fa:	461a      	mov	r2, r3
 80a14fc:	4619      	mov	r1, r3
 80a14fe:	6840      	ldr	r0, [r0, #4]
 80a1500:	f7ff bb10 	b.w	80a0b24 <network_on>

080a1504 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1504:	2300      	movs	r3, #0
 80a1506:	461a      	mov	r2, r3
 80a1508:	4619      	mov	r1, r3
 80a150a:	6840      	ldr	r0, [r0, #4]
 80a150c:	f7ff bb12 	b.w	80a0b34 <network_off>

080a1510 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1510:	2200      	movs	r2, #0
 80a1512:	f081 0101 	eor.w	r1, r1, #1
 80a1516:	6840      	ldr	r0, [r0, #4]
 80a1518:	f7ff bb14 	b.w	80a0b44 <network_listen>

080a151c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a151c:	2200      	movs	r2, #0
 80a151e:	6840      	ldr	r0, [r0, #4]
 80a1520:	f7ff bb20 	b.w	80a0b64 <network_set_listen_timeout>

080a1524 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1524:	2200      	movs	r2, #0
 80a1526:	4611      	mov	r1, r2
 80a1528:	6840      	ldr	r0, [r0, #4]
 80a152a:	f7ff bb23 	b.w	80a0b74 <network_get_listen_timeout>

080a152e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a152e:	2200      	movs	r2, #0
 80a1530:	4611      	mov	r1, r2
 80a1532:	6840      	ldr	r0, [r0, #4]
 80a1534:	f7ff bb0e 	b.w	80a0b54 <network_listening>

080a1538 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1538:	b570      	push	{r4, r5, r6, lr}
 80a153a:	4616      	mov	r6, r2
 80a153c:	b08e      	sub	sp, #56	; 0x38
 80a153e:	4604      	mov	r4, r0
    IPAddress addr;
 80a1540:	a808      	add	r0, sp, #32
 80a1542:	f7ff fd8f 	bl	80a1064 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1546:	2211      	movs	r2, #17
 80a1548:	2100      	movs	r1, #0
 80a154a:	a803      	add	r0, sp, #12
 80a154c:	f001 f9bd 	bl	80a28ca <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1550:	4630      	mov	r0, r6
 80a1552:	f001 f9eb 	bl	80a292c <strlen>
 80a1556:	2500      	movs	r5, #0
 80a1558:	4b0a      	ldr	r3, [pc, #40]	; (80a1584 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a155a:	9500      	str	r5, [sp, #0]
 80a155c:	b281      	uxth	r1, r0
 80a155e:	685b      	ldr	r3, [r3, #4]
 80a1560:	aa03      	add	r2, sp, #12
 80a1562:	4630      	mov	r0, r6
 80a1564:	f7ff fa92 	bl	80a0a8c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1568:	b120      	cbz	r0, 80a1574 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a156a:	4629      	mov	r1, r5
 80a156c:	4620      	mov	r0, r4
 80a156e:	f7ff fd99 	bl	80a10a4 <_ZN9IPAddressC1Em>
 80a1572:	e003      	b.n	80a157c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1574:	a903      	add	r1, sp, #12
 80a1576:	4620      	mov	r0, r4
 80a1578:	f7ff fd82 	bl	80a1080 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a157c:	4620      	mov	r0, r4
 80a157e:	b00e      	add	sp, #56	; 0x38
 80a1580:	bd70      	pop	{r4, r5, r6, pc}
 80a1582:	bf00      	nop
 80a1584:	20000884 	.word	0x20000884

080a1588 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1588:	4b02      	ldr	r3, [pc, #8]	; (80a1594 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a158a:	4a03      	ldr	r2, [pc, #12]	; (80a1598 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a158c:	601a      	str	r2, [r3, #0]
 80a158e:	2200      	movs	r2, #0
 80a1590:	605a      	str	r2, [r3, #4]
 80a1592:	4770      	bx	lr
 80a1594:	2000088c 	.word	0x2000088c
 80a1598:	080a462c 	.word	0x080a462c

080a159c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a159c:	b510      	push	{r4, lr}
 80a159e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a15a0:	480f      	ldr	r0, [pc, #60]	; (80a15e0 <pinAvailable+0x44>)
 80a15a2:	f7ff fb43 	bl	80a0c2c <_ZN8SPIClass9isEnabledEv>
 80a15a6:	b128      	cbz	r0, 80a15b4 <pinAvailable+0x18>
 80a15a8:	f1a4 030d 	sub.w	r3, r4, #13
 80a15ac:	2b02      	cmp	r3, #2
 80a15ae:	d801      	bhi.n	80a15b4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a15b0:	2000      	movs	r0, #0
 80a15b2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a15b4:	f000 f8b0 	bl	80a1718 <_Z19__fetch_global_Wirev>
 80a15b8:	f7ff ff2c 	bl	80a1414 <_ZN7TwoWire9isEnabledEv>
 80a15bc:	b108      	cbz	r0, 80a15c2 <pinAvailable+0x26>
 80a15be:	2c01      	cmp	r4, #1
 80a15c0:	d9f6      	bls.n	80a15b0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a15c2:	f7ff fec3 	bl	80a134c <_Z22__fetch_global_Serial1v>
 80a15c6:	f7ff febd 	bl	80a1344 <_ZN11USARTSerial9isEnabledEv>
 80a15ca:	b118      	cbz	r0, 80a15d4 <pinAvailable+0x38>
 80a15cc:	f1a4 0312 	sub.w	r3, r4, #18
 80a15d0:	2b01      	cmp	r3, #1
 80a15d2:	d9ed      	bls.n	80a15b0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a15d4:	2c17      	cmp	r4, #23
 80a15d6:	bf8c      	ite	hi
 80a15d8:	2000      	movhi	r0, #0
 80a15da:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a15dc:	bd10      	pop	{r4, pc}
 80a15de:	bf00      	nop
 80a15e0:	20000894 	.word	0x20000894

080a15e4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a15e4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a15e6:	b538      	push	{r3, r4, r5, lr}
 80a15e8:	4604      	mov	r4, r0
 80a15ea:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a15ec:	d80a      	bhi.n	80a1604 <pinMode+0x20>
 80a15ee:	29ff      	cmp	r1, #255	; 0xff
 80a15f0:	d008      	beq.n	80a1604 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a15f2:	f7ff ffd3 	bl	80a159c <pinAvailable>
 80a15f6:	b128      	cbz	r0, 80a1604 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a15f8:	4629      	mov	r1, r5
 80a15fa:	4620      	mov	r0, r4
}
 80a15fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1600:	f7ff b922 	b.w	80a0848 <HAL_Pin_Mode>
 80a1604:	bd38      	pop	{r3, r4, r5, pc}

080a1606 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1606:	b538      	push	{r3, r4, r5, lr}
 80a1608:	4604      	mov	r4, r0
 80a160a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a160c:	f7ff f924 	bl	80a0858 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1610:	28ff      	cmp	r0, #255	; 0xff
 80a1612:	d010      	beq.n	80a1636 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1614:	2806      	cmp	r0, #6
 80a1616:	d804      	bhi.n	80a1622 <digitalWrite+0x1c>
 80a1618:	234d      	movs	r3, #77	; 0x4d
 80a161a:	fa23 f000 	lsr.w	r0, r3, r0
 80a161e:	07c3      	lsls	r3, r0, #31
 80a1620:	d409      	bmi.n	80a1636 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1622:	4620      	mov	r0, r4
 80a1624:	f7ff ffba 	bl	80a159c <pinAvailable>
 80a1628:	b128      	cbz	r0, 80a1636 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a162a:	4629      	mov	r1, r5
 80a162c:	4620      	mov	r0, r4
}
 80a162e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1632:	f7ff b919 	b.w	80a0868 <HAL_GPIO_Write>
 80a1636:	bd38      	pop	{r3, r4, r5, pc}

080a1638 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1638:	b510      	push	{r4, lr}
 80a163a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a163c:	f7ff f90c 	bl	80a0858 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a1640:	3804      	subs	r0, #4
 80a1642:	b2c0      	uxtb	r0, r0
 80a1644:	2801      	cmp	r0, #1
 80a1646:	d908      	bls.n	80a165a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1648:	4620      	mov	r0, r4
 80a164a:	f7ff ffa7 	bl	80a159c <pinAvailable>
 80a164e:	b120      	cbz	r0, 80a165a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1650:	4620      	mov	r0, r4
}
 80a1652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1656:	f7ff b90f 	b.w	80a0878 <HAL_GPIO_Read>
}
 80a165a:	2000      	movs	r0, #0
 80a165c:	bd10      	pop	{r4, pc}

080a165e <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 80a165e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1662:	4690      	mov	r8, r2
 80a1664:	461e      	mov	r6, r3
 80a1666:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
 80a1668:	460d      	mov	r5, r1
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 80a166a:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
 80a166c:	f1b8 0f00 	cmp.w	r8, #0
 80a1670:	d104      	bne.n	80a167c <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
 80a1672:	f1c4 0107 	rsb	r1, r4, #7
 80a1676:	fa46 f101 	asr.w	r1, r6, r1
 80a167a:	e001      	b.n	80a1680 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 80a167c:	fa46 f104 	asr.w	r1, r6, r4
 80a1680:	f001 0101 	and.w	r1, r1, #1
 80a1684:	4638      	mov	r0, r7
 80a1686:	f7ff ffbe 	bl	80a1606 <digitalWrite>

    digitalWrite(clockPin, HIGH);
 80a168a:	2101      	movs	r1, #1
 80a168c:	4628      	mov	r0, r5
 80a168e:	f7ff ffba 	bl	80a1606 <digitalWrite>
    digitalWrite(clockPin, LOW);
 80a1692:	2100      	movs	r1, #0
 80a1694:	4628      	mov	r0, r5
 80a1696:	f7ff ffb6 	bl	80a1606 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
 80a169a:	f114 34ff 	adds.w	r4, r4, #4294967295
 80a169e:	d2e5      	bcs.n	80a166c <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
 80a16a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a16a4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a16a4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a16a6:	4c0c      	ldr	r4, [pc, #48]	; (80a16d8 <_GLOBAL__sub_I_SPI+0x34>)
 80a16a8:	4e0c      	ldr	r6, [pc, #48]	; (80a16dc <_GLOBAL__sub_I_SPI+0x38>)
 80a16aa:	4d0d      	ldr	r5, [pc, #52]	; (80a16e0 <_GLOBAL__sub_I_SPI+0x3c>)
 80a16ac:	2100      	movs	r1, #0
 80a16ae:	4620      	mov	r0, r4
 80a16b0:	f7ff faa8 	bl	80a0c04 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a16b4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a16b6:	4c0b      	ldr	r4, [pc, #44]	; (80a16e4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a16b8:	4632      	mov	r2, r6
 80a16ba:	4629      	mov	r1, r5
 80a16bc:	f000 f84c 	bl	80a1758 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a16c0:	2101      	movs	r1, #1
 80a16c2:	4620      	mov	r0, r4
 80a16c4:	f7ff fa9e 	bl	80a0c04 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a16c8:	4632      	mov	r2, r6
 80a16ca:	4629      	mov	r1, r5
 80a16cc:	4620      	mov	r0, r4
 80a16ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a16d2:	f000 b841 	b.w	80a1758 <__aeabi_atexit>
 80a16d6:	bf00      	nop
 80a16d8:	20000894 	.word	0x20000894
 80a16dc:	200003b0 	.word	0x200003b0
 80a16e0:	080a0bf5 	.word	0x080a0bf5
 80a16e4:	200008a4 	.word	0x200008a4

080a16e8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a16e8:	b513      	push	{r0, r1, r4, lr}
 80a16ea:	4c08      	ldr	r4, [pc, #32]	; (80a170c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a16ec:	2300      	movs	r3, #0
 80a16ee:	461a      	mov	r2, r3
 80a16f0:	4619      	mov	r1, r3
 80a16f2:	9300      	str	r3, [sp, #0]
 80a16f4:	4620      	mov	r0, r4
 80a16f6:	f7ff fceb 	bl	80a10d0 <_ZN9IPAddressC1Ehhhh>
 80a16fa:	4620      	mov	r0, r4
 80a16fc:	4a04      	ldr	r2, [pc, #16]	; (80a1710 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a16fe:	4905      	ldr	r1, [pc, #20]	; (80a1714 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1700:	b002      	add	sp, #8
 80a1702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1706:	f000 b827 	b.w	80a1758 <__aeabi_atexit>
 80a170a:	bf00      	nop
 80a170c:	200008b8 	.word	0x200008b8
 80a1710:	200003b0 	.word	0x200003b0
 80a1714:	080a1023 	.word	0x080a1023

080a1718 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1718:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a171a:	4d0b      	ldr	r5, [pc, #44]	; (80a1748 <_Z19__fetch_global_Wirev+0x30>)
 80a171c:	6829      	ldr	r1, [r5, #0]
 80a171e:	f011 0401 	ands.w	r4, r1, #1
 80a1722:	d10f      	bne.n	80a1744 <_Z19__fetch_global_Wirev+0x2c>
 80a1724:	4628      	mov	r0, r5
 80a1726:	f7fe fcbc 	bl	80a00a2 <__cxa_guard_acquire>
 80a172a:	b158      	cbz	r0, 80a1744 <_Z19__fetch_global_Wirev+0x2c>
 80a172c:	4621      	mov	r1, r4
 80a172e:	4807      	ldr	r0, [pc, #28]	; (80a174c <_Z19__fetch_global_Wirev+0x34>)
 80a1730:	f7ff fe5e 	bl	80a13f0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1734:	4628      	mov	r0, r5
 80a1736:	f7fe fcb9 	bl	80a00ac <__cxa_guard_release>
 80a173a:	4a05      	ldr	r2, [pc, #20]	; (80a1750 <_Z19__fetch_global_Wirev+0x38>)
 80a173c:	4905      	ldr	r1, [pc, #20]	; (80a1754 <_Z19__fetch_global_Wirev+0x3c>)
 80a173e:	4803      	ldr	r0, [pc, #12]	; (80a174c <_Z19__fetch_global_Wirev+0x34>)
 80a1740:	f000 f80a 	bl	80a1758 <__aeabi_atexit>
	return wire;
}
 80a1744:	4801      	ldr	r0, [pc, #4]	; (80a174c <_Z19__fetch_global_Wirev+0x34>)
 80a1746:	bd38      	pop	{r3, r4, r5, pc}
 80a1748:	200008d0 	.word	0x200008d0
 80a174c:	200008d4 	.word	0x200008d4
 80a1750:	200003b0 	.word	0x200003b0
 80a1754:	080a1399 	.word	0x080a1399

080a1758 <__aeabi_atexit>:
 80a1758:	460b      	mov	r3, r1
 80a175a:	4601      	mov	r1, r0
 80a175c:	4618      	mov	r0, r3
 80a175e:	f001 b897 	b.w	80a2890 <__cxa_atexit>

080a1762 <_ZdlPvj>:
 80a1762:	f7fe bc9c 	b.w	80a009e <_ZdlPv>
	...

080a1768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1768:	4b18      	ldr	r3, [pc, #96]	; (80a17cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a176a:	681a      	ldr	r2, [r3, #0]
 80a176c:	07d1      	lsls	r1, r2, #31
 80a176e:	bf5c      	itt	pl
 80a1770:	2201      	movpl	r2, #1
 80a1772:	601a      	strpl	r2, [r3, #0]
 80a1774:	4b16      	ldr	r3, [pc, #88]	; (80a17d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1776:	681a      	ldr	r2, [r3, #0]
 80a1778:	07d2      	lsls	r2, r2, #31
 80a177a:	bf5c      	itt	pl
 80a177c:	2201      	movpl	r2, #1
 80a177e:	601a      	strpl	r2, [r3, #0]
 80a1780:	4b14      	ldr	r3, [pc, #80]	; (80a17d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1782:	681a      	ldr	r2, [r3, #0]
 80a1784:	07d0      	lsls	r0, r2, #31
 80a1786:	bf5c      	itt	pl
 80a1788:	2201      	movpl	r2, #1
 80a178a:	601a      	strpl	r2, [r3, #0]
 80a178c:	4b12      	ldr	r3, [pc, #72]	; (80a17d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a178e:	681a      	ldr	r2, [r3, #0]
 80a1790:	07d1      	lsls	r1, r2, #31
 80a1792:	bf5c      	itt	pl
 80a1794:	2201      	movpl	r2, #1
 80a1796:	601a      	strpl	r2, [r3, #0]
 80a1798:	4b10      	ldr	r3, [pc, #64]	; (80a17dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a179a:	681a      	ldr	r2, [r3, #0]
 80a179c:	07d2      	lsls	r2, r2, #31
 80a179e:	bf5c      	itt	pl
 80a17a0:	2201      	movpl	r2, #1
 80a17a2:	601a      	strpl	r2, [r3, #0]
 80a17a4:	4b0e      	ldr	r3, [pc, #56]	; (80a17e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a17a6:	681a      	ldr	r2, [r3, #0]
 80a17a8:	07d0      	lsls	r0, r2, #31
 80a17aa:	bf5c      	itt	pl
 80a17ac:	2201      	movpl	r2, #1
 80a17ae:	601a      	strpl	r2, [r3, #0]
 80a17b0:	4b0c      	ldr	r3, [pc, #48]	; (80a17e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a17b2:	681a      	ldr	r2, [r3, #0]
 80a17b4:	07d1      	lsls	r1, r2, #31
 80a17b6:	bf5c      	itt	pl
 80a17b8:	2201      	movpl	r2, #1
 80a17ba:	601a      	strpl	r2, [r3, #0]
 80a17bc:	4b0a      	ldr	r3, [pc, #40]	; (80a17e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a17be:	681a      	ldr	r2, [r3, #0]
 80a17c0:	07d2      	lsls	r2, r2, #31
 80a17c2:	bf5c      	itt	pl
 80a17c4:	2201      	movpl	r2, #1
 80a17c6:	601a      	strpl	r2, [r3, #0]
 80a17c8:	4770      	bx	lr
 80a17ca:	bf00      	nop
 80a17cc:	20000904 	.word	0x20000904
 80a17d0:	20000900 	.word	0x20000900
 80a17d4:	200008fc 	.word	0x200008fc
 80a17d8:	200008f8 	.word	0x200008f8
 80a17dc:	200008f4 	.word	0x200008f4
 80a17e0:	200008f0 	.word	0x200008f0
 80a17e4:	200008ec 	.word	0x200008ec
 80a17e8:	200008e8 	.word	0x200008e8

080a17ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a17ec:	4b24      	ldr	r3, [pc, #144]	; (80a1880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a17ee:	681a      	ldr	r2, [r3, #0]
 80a17f0:	07d0      	lsls	r0, r2, #31
 80a17f2:	bf5c      	itt	pl
 80a17f4:	2201      	movpl	r2, #1
 80a17f6:	601a      	strpl	r2, [r3, #0]
 80a17f8:	4b22      	ldr	r3, [pc, #136]	; (80a1884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a17fa:	681a      	ldr	r2, [r3, #0]
 80a17fc:	07d1      	lsls	r1, r2, #31
 80a17fe:	bf5c      	itt	pl
 80a1800:	2201      	movpl	r2, #1
 80a1802:	601a      	strpl	r2, [r3, #0]
 80a1804:	4b20      	ldr	r3, [pc, #128]	; (80a1888 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1806:	681a      	ldr	r2, [r3, #0]
 80a1808:	07d2      	lsls	r2, r2, #31
 80a180a:	bf5c      	itt	pl
 80a180c:	2201      	movpl	r2, #1
 80a180e:	601a      	strpl	r2, [r3, #0]
 80a1810:	4b1e      	ldr	r3, [pc, #120]	; (80a188c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1812:	681a      	ldr	r2, [r3, #0]
 80a1814:	07d0      	lsls	r0, r2, #31
 80a1816:	bf5c      	itt	pl
 80a1818:	2201      	movpl	r2, #1
 80a181a:	601a      	strpl	r2, [r3, #0]
 80a181c:	4b1c      	ldr	r3, [pc, #112]	; (80a1890 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a181e:	681a      	ldr	r2, [r3, #0]
 80a1820:	07d1      	lsls	r1, r2, #31
 80a1822:	bf5c      	itt	pl
 80a1824:	2201      	movpl	r2, #1
 80a1826:	601a      	strpl	r2, [r3, #0]
 80a1828:	4b1a      	ldr	r3, [pc, #104]	; (80a1894 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a182a:	681a      	ldr	r2, [r3, #0]
 80a182c:	07d2      	lsls	r2, r2, #31
 80a182e:	bf5c      	itt	pl
 80a1830:	2201      	movpl	r2, #1
 80a1832:	601a      	strpl	r2, [r3, #0]
 80a1834:	4b18      	ldr	r3, [pc, #96]	; (80a1898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1836:	681a      	ldr	r2, [r3, #0]
 80a1838:	07d0      	lsls	r0, r2, #31
 80a183a:	bf5c      	itt	pl
 80a183c:	2201      	movpl	r2, #1
 80a183e:	601a      	strpl	r2, [r3, #0]
 80a1840:	4b16      	ldr	r3, [pc, #88]	; (80a189c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1842:	681a      	ldr	r2, [r3, #0]
 80a1844:	07d1      	lsls	r1, r2, #31
 80a1846:	bf5c      	itt	pl
 80a1848:	2201      	movpl	r2, #1
 80a184a:	601a      	strpl	r2, [r3, #0]
 80a184c:	4b14      	ldr	r3, [pc, #80]	; (80a18a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a184e:	681a      	ldr	r2, [r3, #0]
 80a1850:	07d2      	lsls	r2, r2, #31
 80a1852:	bf5c      	itt	pl
 80a1854:	2201      	movpl	r2, #1
 80a1856:	601a      	strpl	r2, [r3, #0]
 80a1858:	4b12      	ldr	r3, [pc, #72]	; (80a18a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a185a:	681a      	ldr	r2, [r3, #0]
 80a185c:	07d0      	lsls	r0, r2, #31
 80a185e:	bf5c      	itt	pl
 80a1860:	2201      	movpl	r2, #1
 80a1862:	601a      	strpl	r2, [r3, #0]
 80a1864:	4b10      	ldr	r3, [pc, #64]	; (80a18a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1866:	681a      	ldr	r2, [r3, #0]
 80a1868:	07d1      	lsls	r1, r2, #31
 80a186a:	bf5c      	itt	pl
 80a186c:	2201      	movpl	r2, #1
 80a186e:	601a      	strpl	r2, [r3, #0]
 80a1870:	4b0e      	ldr	r3, [pc, #56]	; (80a18ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1872:	681a      	ldr	r2, [r3, #0]
 80a1874:	07d2      	lsls	r2, r2, #31
 80a1876:	bf5c      	itt	pl
 80a1878:	2201      	movpl	r2, #1
 80a187a:	601a      	strpl	r2, [r3, #0]
 80a187c:	4770      	bx	lr
 80a187e:	bf00      	nop
 80a1880:	20000934 	.word	0x20000934
 80a1884:	20000930 	.word	0x20000930
 80a1888:	2000092c 	.word	0x2000092c
 80a188c:	20000928 	.word	0x20000928
 80a1890:	20000924 	.word	0x20000924
 80a1894:	20000920 	.word	0x20000920
 80a1898:	2000091c 	.word	0x2000091c
 80a189c:	20000918 	.word	0x20000918
 80a18a0:	20000914 	.word	0x20000914
 80a18a4:	20000910 	.word	0x20000910
 80a18a8:	2000090c 	.word	0x2000090c
 80a18ac:	20000908 	.word	0x20000908

080a18b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a18b0:	4b24      	ldr	r3, [pc, #144]	; (80a1944 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a18b2:	681a      	ldr	r2, [r3, #0]
 80a18b4:	07d0      	lsls	r0, r2, #31
 80a18b6:	bf5c      	itt	pl
 80a18b8:	2201      	movpl	r2, #1
 80a18ba:	601a      	strpl	r2, [r3, #0]
 80a18bc:	4b22      	ldr	r3, [pc, #136]	; (80a1948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a18be:	681a      	ldr	r2, [r3, #0]
 80a18c0:	07d1      	lsls	r1, r2, #31
 80a18c2:	bf5c      	itt	pl
 80a18c4:	2201      	movpl	r2, #1
 80a18c6:	601a      	strpl	r2, [r3, #0]
 80a18c8:	4b20      	ldr	r3, [pc, #128]	; (80a194c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a18ca:	681a      	ldr	r2, [r3, #0]
 80a18cc:	07d2      	lsls	r2, r2, #31
 80a18ce:	bf5c      	itt	pl
 80a18d0:	2201      	movpl	r2, #1
 80a18d2:	601a      	strpl	r2, [r3, #0]
 80a18d4:	4b1e      	ldr	r3, [pc, #120]	; (80a1950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a18d6:	681a      	ldr	r2, [r3, #0]
 80a18d8:	07d0      	lsls	r0, r2, #31
 80a18da:	bf5c      	itt	pl
 80a18dc:	2201      	movpl	r2, #1
 80a18de:	601a      	strpl	r2, [r3, #0]
 80a18e0:	4b1c      	ldr	r3, [pc, #112]	; (80a1954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a18e2:	681a      	ldr	r2, [r3, #0]
 80a18e4:	07d1      	lsls	r1, r2, #31
 80a18e6:	bf5c      	itt	pl
 80a18e8:	2201      	movpl	r2, #1
 80a18ea:	601a      	strpl	r2, [r3, #0]
 80a18ec:	4b1a      	ldr	r3, [pc, #104]	; (80a1958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a18ee:	681a      	ldr	r2, [r3, #0]
 80a18f0:	07d2      	lsls	r2, r2, #31
 80a18f2:	bf5c      	itt	pl
 80a18f4:	2201      	movpl	r2, #1
 80a18f6:	601a      	strpl	r2, [r3, #0]
 80a18f8:	4b18      	ldr	r3, [pc, #96]	; (80a195c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a18fa:	681a      	ldr	r2, [r3, #0]
 80a18fc:	07d0      	lsls	r0, r2, #31
 80a18fe:	bf5c      	itt	pl
 80a1900:	2201      	movpl	r2, #1
 80a1902:	601a      	strpl	r2, [r3, #0]
 80a1904:	4b16      	ldr	r3, [pc, #88]	; (80a1960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1906:	681a      	ldr	r2, [r3, #0]
 80a1908:	07d1      	lsls	r1, r2, #31
 80a190a:	bf5c      	itt	pl
 80a190c:	2201      	movpl	r2, #1
 80a190e:	601a      	strpl	r2, [r3, #0]
 80a1910:	4b14      	ldr	r3, [pc, #80]	; (80a1964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1912:	681a      	ldr	r2, [r3, #0]
 80a1914:	07d2      	lsls	r2, r2, #31
 80a1916:	bf5c      	itt	pl
 80a1918:	2201      	movpl	r2, #1
 80a191a:	601a      	strpl	r2, [r3, #0]
 80a191c:	4b12      	ldr	r3, [pc, #72]	; (80a1968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a191e:	681a      	ldr	r2, [r3, #0]
 80a1920:	07d0      	lsls	r0, r2, #31
 80a1922:	bf5c      	itt	pl
 80a1924:	2201      	movpl	r2, #1
 80a1926:	601a      	strpl	r2, [r3, #0]
 80a1928:	4b10      	ldr	r3, [pc, #64]	; (80a196c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a192a:	681a      	ldr	r2, [r3, #0]
 80a192c:	07d1      	lsls	r1, r2, #31
 80a192e:	bf5c      	itt	pl
 80a1930:	2201      	movpl	r2, #1
 80a1932:	601a      	strpl	r2, [r3, #0]
 80a1934:	4b0e      	ldr	r3, [pc, #56]	; (80a1970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1936:	681a      	ldr	r2, [r3, #0]
 80a1938:	07d2      	lsls	r2, r2, #31
 80a193a:	bf5c      	itt	pl
 80a193c:	2201      	movpl	r2, #1
 80a193e:	601a      	strpl	r2, [r3, #0]
 80a1940:	4770      	bx	lr
 80a1942:	bf00      	nop
 80a1944:	20000964 	.word	0x20000964
 80a1948:	20000960 	.word	0x20000960
 80a194c:	2000095c 	.word	0x2000095c
 80a1950:	20000958 	.word	0x20000958
 80a1954:	20000954 	.word	0x20000954
 80a1958:	20000950 	.word	0x20000950
 80a195c:	2000094c 	.word	0x2000094c
 80a1960:	20000948 	.word	0x20000948
 80a1964:	20000944 	.word	0x20000944
 80a1968:	20000940 	.word	0x20000940
 80a196c:	2000093c 	.word	0x2000093c
 80a1970:	20000938 	.word	0x20000938

080a1974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1974:	4b18      	ldr	r3, [pc, #96]	; (80a19d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1976:	681a      	ldr	r2, [r3, #0]
 80a1978:	07d1      	lsls	r1, r2, #31
 80a197a:	bf5c      	itt	pl
 80a197c:	2201      	movpl	r2, #1
 80a197e:	601a      	strpl	r2, [r3, #0]
 80a1980:	4b16      	ldr	r3, [pc, #88]	; (80a19dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1982:	681a      	ldr	r2, [r3, #0]
 80a1984:	07d2      	lsls	r2, r2, #31
 80a1986:	bf5c      	itt	pl
 80a1988:	2201      	movpl	r2, #1
 80a198a:	601a      	strpl	r2, [r3, #0]
 80a198c:	4b14      	ldr	r3, [pc, #80]	; (80a19e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a198e:	681a      	ldr	r2, [r3, #0]
 80a1990:	07d0      	lsls	r0, r2, #31
 80a1992:	bf5c      	itt	pl
 80a1994:	2201      	movpl	r2, #1
 80a1996:	601a      	strpl	r2, [r3, #0]
 80a1998:	4b12      	ldr	r3, [pc, #72]	; (80a19e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a199a:	681a      	ldr	r2, [r3, #0]
 80a199c:	07d1      	lsls	r1, r2, #31
 80a199e:	bf5c      	itt	pl
 80a19a0:	2201      	movpl	r2, #1
 80a19a2:	601a      	strpl	r2, [r3, #0]
 80a19a4:	4b10      	ldr	r3, [pc, #64]	; (80a19e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a19a6:	681a      	ldr	r2, [r3, #0]
 80a19a8:	07d2      	lsls	r2, r2, #31
 80a19aa:	bf5c      	itt	pl
 80a19ac:	2201      	movpl	r2, #1
 80a19ae:	601a      	strpl	r2, [r3, #0]
 80a19b0:	4b0e      	ldr	r3, [pc, #56]	; (80a19ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a19b2:	681a      	ldr	r2, [r3, #0]
 80a19b4:	07d0      	lsls	r0, r2, #31
 80a19b6:	bf5c      	itt	pl
 80a19b8:	2201      	movpl	r2, #1
 80a19ba:	601a      	strpl	r2, [r3, #0]
 80a19bc:	4b0c      	ldr	r3, [pc, #48]	; (80a19f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a19be:	681a      	ldr	r2, [r3, #0]
 80a19c0:	07d1      	lsls	r1, r2, #31
 80a19c2:	bf5c      	itt	pl
 80a19c4:	2201      	movpl	r2, #1
 80a19c6:	601a      	strpl	r2, [r3, #0]
 80a19c8:	4b0a      	ldr	r3, [pc, #40]	; (80a19f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a19ca:	681a      	ldr	r2, [r3, #0]
 80a19cc:	07d2      	lsls	r2, r2, #31
 80a19ce:	bf5c      	itt	pl
 80a19d0:	2201      	movpl	r2, #1
 80a19d2:	601a      	strpl	r2, [r3, #0]
 80a19d4:	4770      	bx	lr
 80a19d6:	bf00      	nop
 80a19d8:	20000984 	.word	0x20000984
 80a19dc:	20000980 	.word	0x20000980
 80a19e0:	2000097c 	.word	0x2000097c
 80a19e4:	20000978 	.word	0x20000978
 80a19e8:	20000974 	.word	0x20000974
 80a19ec:	20000970 	.word	0x20000970
 80a19f0:	2000096c 	.word	0x2000096c
 80a19f4:	20000968 	.word	0x20000968

080a19f8 <__aeabi_drsub>:
 80a19f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a19fc:	e002      	b.n	80a1a04 <__adddf3>
 80a19fe:	bf00      	nop

080a1a00 <__aeabi_dsub>:
 80a1a00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1a04 <__adddf3>:
 80a1a04:	b530      	push	{r4, r5, lr}
 80a1a06:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1a0a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1a0e:	ea94 0f05 	teq	r4, r5
 80a1a12:	bf08      	it	eq
 80a1a14:	ea90 0f02 	teqeq	r0, r2
 80a1a18:	bf1f      	itttt	ne
 80a1a1a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1a1e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1a22:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1a26:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1a2a:	f000 80e2 	beq.w	80a1bf2 <__adddf3+0x1ee>
 80a1a2e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1a32:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1a36:	bfb8      	it	lt
 80a1a38:	426d      	neglt	r5, r5
 80a1a3a:	dd0c      	ble.n	80a1a56 <__adddf3+0x52>
 80a1a3c:	442c      	add	r4, r5
 80a1a3e:	ea80 0202 	eor.w	r2, r0, r2
 80a1a42:	ea81 0303 	eor.w	r3, r1, r3
 80a1a46:	ea82 0000 	eor.w	r0, r2, r0
 80a1a4a:	ea83 0101 	eor.w	r1, r3, r1
 80a1a4e:	ea80 0202 	eor.w	r2, r0, r2
 80a1a52:	ea81 0303 	eor.w	r3, r1, r3
 80a1a56:	2d36      	cmp	r5, #54	; 0x36
 80a1a58:	bf88      	it	hi
 80a1a5a:	bd30      	pophi	{r4, r5, pc}
 80a1a5c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1a60:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1a64:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1a68:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1a6c:	d002      	beq.n	80a1a74 <__adddf3+0x70>
 80a1a6e:	4240      	negs	r0, r0
 80a1a70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1a74:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1a78:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1a7c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1a80:	d002      	beq.n	80a1a88 <__adddf3+0x84>
 80a1a82:	4252      	negs	r2, r2
 80a1a84:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1a88:	ea94 0f05 	teq	r4, r5
 80a1a8c:	f000 80a7 	beq.w	80a1bde <__adddf3+0x1da>
 80a1a90:	f1a4 0401 	sub.w	r4, r4, #1
 80a1a94:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1a98:	db0d      	blt.n	80a1ab6 <__adddf3+0xb2>
 80a1a9a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a1a9e:	fa22 f205 	lsr.w	r2, r2, r5
 80a1aa2:	1880      	adds	r0, r0, r2
 80a1aa4:	f141 0100 	adc.w	r1, r1, #0
 80a1aa8:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1aac:	1880      	adds	r0, r0, r2
 80a1aae:	fa43 f305 	asr.w	r3, r3, r5
 80a1ab2:	4159      	adcs	r1, r3
 80a1ab4:	e00e      	b.n	80a1ad4 <__adddf3+0xd0>
 80a1ab6:	f1a5 0520 	sub.w	r5, r5, #32
 80a1aba:	f10e 0e20 	add.w	lr, lr, #32
 80a1abe:	2a01      	cmp	r2, #1
 80a1ac0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1ac4:	bf28      	it	cs
 80a1ac6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1aca:	fa43 f305 	asr.w	r3, r3, r5
 80a1ace:	18c0      	adds	r0, r0, r3
 80a1ad0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a1ad4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1ad8:	d507      	bpl.n	80a1aea <__adddf3+0xe6>
 80a1ada:	f04f 0e00 	mov.w	lr, #0
 80a1ade:	f1dc 0c00 	rsbs	ip, ip, #0
 80a1ae2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a1ae6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a1aea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a1aee:	d31b      	bcc.n	80a1b28 <__adddf3+0x124>
 80a1af0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a1af4:	d30c      	bcc.n	80a1b10 <__adddf3+0x10c>
 80a1af6:	0849      	lsrs	r1, r1, #1
 80a1af8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a1afc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a1b00:	f104 0401 	add.w	r4, r4, #1
 80a1b04:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a1b08:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a1b0c:	f080 809a 	bcs.w	80a1c44 <__adddf3+0x240>
 80a1b10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1b14:	bf08      	it	eq
 80a1b16:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1b1a:	f150 0000 	adcs.w	r0, r0, #0
 80a1b1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1b22:	ea41 0105 	orr.w	r1, r1, r5
 80a1b26:	bd30      	pop	{r4, r5, pc}
 80a1b28:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a1b2c:	4140      	adcs	r0, r0
 80a1b2e:	eb41 0101 	adc.w	r1, r1, r1
 80a1b32:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1b36:	f1a4 0401 	sub.w	r4, r4, #1
 80a1b3a:	d1e9      	bne.n	80a1b10 <__adddf3+0x10c>
 80a1b3c:	f091 0f00 	teq	r1, #0
 80a1b40:	bf04      	itt	eq
 80a1b42:	4601      	moveq	r1, r0
 80a1b44:	2000      	moveq	r0, #0
 80a1b46:	fab1 f381 	clz	r3, r1
 80a1b4a:	bf08      	it	eq
 80a1b4c:	3320      	addeq	r3, #32
 80a1b4e:	f1a3 030b 	sub.w	r3, r3, #11
 80a1b52:	f1b3 0220 	subs.w	r2, r3, #32
 80a1b56:	da0c      	bge.n	80a1b72 <__adddf3+0x16e>
 80a1b58:	320c      	adds	r2, #12
 80a1b5a:	dd08      	ble.n	80a1b6e <__adddf3+0x16a>
 80a1b5c:	f102 0c14 	add.w	ip, r2, #20
 80a1b60:	f1c2 020c 	rsb	r2, r2, #12
 80a1b64:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1b68:	fa21 f102 	lsr.w	r1, r1, r2
 80a1b6c:	e00c      	b.n	80a1b88 <__adddf3+0x184>
 80a1b6e:	f102 0214 	add.w	r2, r2, #20
 80a1b72:	bfd8      	it	le
 80a1b74:	f1c2 0c20 	rsble	ip, r2, #32
 80a1b78:	fa01 f102 	lsl.w	r1, r1, r2
 80a1b7c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1b80:	bfdc      	itt	le
 80a1b82:	ea41 010c 	orrle.w	r1, r1, ip
 80a1b86:	4090      	lslle	r0, r2
 80a1b88:	1ae4      	subs	r4, r4, r3
 80a1b8a:	bfa2      	ittt	ge
 80a1b8c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1b90:	4329      	orrge	r1, r5
 80a1b92:	bd30      	popge	{r4, r5, pc}
 80a1b94:	ea6f 0404 	mvn.w	r4, r4
 80a1b98:	3c1f      	subs	r4, #31
 80a1b9a:	da1c      	bge.n	80a1bd6 <__adddf3+0x1d2>
 80a1b9c:	340c      	adds	r4, #12
 80a1b9e:	dc0e      	bgt.n	80a1bbe <__adddf3+0x1ba>
 80a1ba0:	f104 0414 	add.w	r4, r4, #20
 80a1ba4:	f1c4 0220 	rsb	r2, r4, #32
 80a1ba8:	fa20 f004 	lsr.w	r0, r0, r4
 80a1bac:	fa01 f302 	lsl.w	r3, r1, r2
 80a1bb0:	ea40 0003 	orr.w	r0, r0, r3
 80a1bb4:	fa21 f304 	lsr.w	r3, r1, r4
 80a1bb8:	ea45 0103 	orr.w	r1, r5, r3
 80a1bbc:	bd30      	pop	{r4, r5, pc}
 80a1bbe:	f1c4 040c 	rsb	r4, r4, #12
 80a1bc2:	f1c4 0220 	rsb	r2, r4, #32
 80a1bc6:	fa20 f002 	lsr.w	r0, r0, r2
 80a1bca:	fa01 f304 	lsl.w	r3, r1, r4
 80a1bce:	ea40 0003 	orr.w	r0, r0, r3
 80a1bd2:	4629      	mov	r1, r5
 80a1bd4:	bd30      	pop	{r4, r5, pc}
 80a1bd6:	fa21 f004 	lsr.w	r0, r1, r4
 80a1bda:	4629      	mov	r1, r5
 80a1bdc:	bd30      	pop	{r4, r5, pc}
 80a1bde:	f094 0f00 	teq	r4, #0
 80a1be2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1be6:	bf06      	itte	eq
 80a1be8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1bec:	3401      	addeq	r4, #1
 80a1bee:	3d01      	subne	r5, #1
 80a1bf0:	e74e      	b.n	80a1a90 <__adddf3+0x8c>
 80a1bf2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1bf6:	bf18      	it	ne
 80a1bf8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1bfc:	d029      	beq.n	80a1c52 <__adddf3+0x24e>
 80a1bfe:	ea94 0f05 	teq	r4, r5
 80a1c02:	bf08      	it	eq
 80a1c04:	ea90 0f02 	teqeq	r0, r2
 80a1c08:	d005      	beq.n	80a1c16 <__adddf3+0x212>
 80a1c0a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1c0e:	bf04      	itt	eq
 80a1c10:	4619      	moveq	r1, r3
 80a1c12:	4610      	moveq	r0, r2
 80a1c14:	bd30      	pop	{r4, r5, pc}
 80a1c16:	ea91 0f03 	teq	r1, r3
 80a1c1a:	bf1e      	ittt	ne
 80a1c1c:	2100      	movne	r1, #0
 80a1c1e:	2000      	movne	r0, #0
 80a1c20:	bd30      	popne	{r4, r5, pc}
 80a1c22:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1c26:	d105      	bne.n	80a1c34 <__adddf3+0x230>
 80a1c28:	0040      	lsls	r0, r0, #1
 80a1c2a:	4149      	adcs	r1, r1
 80a1c2c:	bf28      	it	cs
 80a1c2e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1c32:	bd30      	pop	{r4, r5, pc}
 80a1c34:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1c38:	bf3c      	itt	cc
 80a1c3a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1c3e:	bd30      	popcc	{r4, r5, pc}
 80a1c40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1c44:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1c48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1c4c:	f04f 0000 	mov.w	r0, #0
 80a1c50:	bd30      	pop	{r4, r5, pc}
 80a1c52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1c56:	bf1a      	itte	ne
 80a1c58:	4619      	movne	r1, r3
 80a1c5a:	4610      	movne	r0, r2
 80a1c5c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1c60:	bf1c      	itt	ne
 80a1c62:	460b      	movne	r3, r1
 80a1c64:	4602      	movne	r2, r0
 80a1c66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1c6a:	bf06      	itte	eq
 80a1c6c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1c70:	ea91 0f03 	teqeq	r1, r3
 80a1c74:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1c78:	bd30      	pop	{r4, r5, pc}
 80a1c7a:	bf00      	nop

080a1c7c <__aeabi_ui2d>:
 80a1c7c:	f090 0f00 	teq	r0, #0
 80a1c80:	bf04      	itt	eq
 80a1c82:	2100      	moveq	r1, #0
 80a1c84:	4770      	bxeq	lr
 80a1c86:	b530      	push	{r4, r5, lr}
 80a1c88:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1c8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1c90:	f04f 0500 	mov.w	r5, #0
 80a1c94:	f04f 0100 	mov.w	r1, #0
 80a1c98:	e750      	b.n	80a1b3c <__adddf3+0x138>
 80a1c9a:	bf00      	nop

080a1c9c <__aeabi_i2d>:
 80a1c9c:	f090 0f00 	teq	r0, #0
 80a1ca0:	bf04      	itt	eq
 80a1ca2:	2100      	moveq	r1, #0
 80a1ca4:	4770      	bxeq	lr
 80a1ca6:	b530      	push	{r4, r5, lr}
 80a1ca8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1cac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1cb0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1cb4:	bf48      	it	mi
 80a1cb6:	4240      	negmi	r0, r0
 80a1cb8:	f04f 0100 	mov.w	r1, #0
 80a1cbc:	e73e      	b.n	80a1b3c <__adddf3+0x138>
 80a1cbe:	bf00      	nop

080a1cc0 <__aeabi_f2d>:
 80a1cc0:	0042      	lsls	r2, r0, #1
 80a1cc2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1cc6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1cca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1cce:	bf1f      	itttt	ne
 80a1cd0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1cd4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1cd8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1cdc:	4770      	bxne	lr
 80a1cde:	f092 0f00 	teq	r2, #0
 80a1ce2:	bf14      	ite	ne
 80a1ce4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1ce8:	4770      	bxeq	lr
 80a1cea:	b530      	push	{r4, r5, lr}
 80a1cec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1cf0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1cf4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1cf8:	e720      	b.n	80a1b3c <__adddf3+0x138>
 80a1cfa:	bf00      	nop

080a1cfc <__aeabi_ul2d>:
 80a1cfc:	ea50 0201 	orrs.w	r2, r0, r1
 80a1d00:	bf08      	it	eq
 80a1d02:	4770      	bxeq	lr
 80a1d04:	b530      	push	{r4, r5, lr}
 80a1d06:	f04f 0500 	mov.w	r5, #0
 80a1d0a:	e00a      	b.n	80a1d22 <__aeabi_l2d+0x16>

080a1d0c <__aeabi_l2d>:
 80a1d0c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1d10:	bf08      	it	eq
 80a1d12:	4770      	bxeq	lr
 80a1d14:	b530      	push	{r4, r5, lr}
 80a1d16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1d1a:	d502      	bpl.n	80a1d22 <__aeabi_l2d+0x16>
 80a1d1c:	4240      	negs	r0, r0
 80a1d1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1d22:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1d26:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1d2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1d2e:	f43f aedc 	beq.w	80a1aea <__adddf3+0xe6>
 80a1d32:	f04f 0203 	mov.w	r2, #3
 80a1d36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1d3a:	bf18      	it	ne
 80a1d3c:	3203      	addne	r2, #3
 80a1d3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1d42:	bf18      	it	ne
 80a1d44:	3203      	addne	r2, #3
 80a1d46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1d4a:	f1c2 0320 	rsb	r3, r2, #32
 80a1d4e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1d52:	fa20 f002 	lsr.w	r0, r0, r2
 80a1d56:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1d5a:	ea40 000e 	orr.w	r0, r0, lr
 80a1d5e:	fa21 f102 	lsr.w	r1, r1, r2
 80a1d62:	4414      	add	r4, r2
 80a1d64:	e6c1      	b.n	80a1aea <__adddf3+0xe6>
 80a1d66:	bf00      	nop

080a1d68 <__aeabi_dmul>:
 80a1d68:	b570      	push	{r4, r5, r6, lr}
 80a1d6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1d6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1d72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1d76:	bf1d      	ittte	ne
 80a1d78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1d7c:	ea94 0f0c 	teqne	r4, ip
 80a1d80:	ea95 0f0c 	teqne	r5, ip
 80a1d84:	f000 f8de 	bleq	80a1f44 <__aeabi_dmul+0x1dc>
 80a1d88:	442c      	add	r4, r5
 80a1d8a:	ea81 0603 	eor.w	r6, r1, r3
 80a1d8e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1d92:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1d96:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a1d9a:	bf18      	it	ne
 80a1d9c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1da0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1da8:	d038      	beq.n	80a1e1c <__aeabi_dmul+0xb4>
 80a1daa:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1dae:	f04f 0500 	mov.w	r5, #0
 80a1db2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a1db6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1dba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1dbe:	f04f 0600 	mov.w	r6, #0
 80a1dc2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a1dc6:	f09c 0f00 	teq	ip, #0
 80a1dca:	bf18      	it	ne
 80a1dcc:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1dd0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1dd4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1dd8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1ddc:	d204      	bcs.n	80a1de8 <__aeabi_dmul+0x80>
 80a1dde:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1de2:	416d      	adcs	r5, r5
 80a1de4:	eb46 0606 	adc.w	r6, r6, r6
 80a1de8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1dec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1df0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1df4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1df8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1dfc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1e00:	bf88      	it	hi
 80a1e02:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1e06:	d81e      	bhi.n	80a1e46 <__aeabi_dmul+0xde>
 80a1e08:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1e0c:	bf08      	it	eq
 80a1e0e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1e12:	f150 0000 	adcs.w	r0, r0, #0
 80a1e16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1e1a:	bd70      	pop	{r4, r5, r6, pc}
 80a1e1c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1e20:	ea46 0101 	orr.w	r1, r6, r1
 80a1e24:	ea40 0002 	orr.w	r0, r0, r2
 80a1e28:	ea81 0103 	eor.w	r1, r1, r3
 80a1e2c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1e30:	bfc2      	ittt	gt
 80a1e32:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1e36:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1e3a:	bd70      	popgt	{r4, r5, r6, pc}
 80a1e3c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1e40:	f04f 0e00 	mov.w	lr, #0
 80a1e44:	3c01      	subs	r4, #1
 80a1e46:	f300 80ab 	bgt.w	80a1fa0 <__aeabi_dmul+0x238>
 80a1e4a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a1e4e:	bfde      	ittt	le
 80a1e50:	2000      	movle	r0, #0
 80a1e52:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a1e56:	bd70      	pople	{r4, r5, r6, pc}
 80a1e58:	f1c4 0400 	rsb	r4, r4, #0
 80a1e5c:	3c20      	subs	r4, #32
 80a1e5e:	da35      	bge.n	80a1ecc <__aeabi_dmul+0x164>
 80a1e60:	340c      	adds	r4, #12
 80a1e62:	dc1b      	bgt.n	80a1e9c <__aeabi_dmul+0x134>
 80a1e64:	f104 0414 	add.w	r4, r4, #20
 80a1e68:	f1c4 0520 	rsb	r5, r4, #32
 80a1e6c:	fa00 f305 	lsl.w	r3, r0, r5
 80a1e70:	fa20 f004 	lsr.w	r0, r0, r4
 80a1e74:	fa01 f205 	lsl.w	r2, r1, r5
 80a1e78:	ea40 0002 	orr.w	r0, r0, r2
 80a1e7c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a1e80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1e84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1e88:	fa21 f604 	lsr.w	r6, r1, r4
 80a1e8c:	eb42 0106 	adc.w	r1, r2, r6
 80a1e90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1e94:	bf08      	it	eq
 80a1e96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1e9a:	bd70      	pop	{r4, r5, r6, pc}
 80a1e9c:	f1c4 040c 	rsb	r4, r4, #12
 80a1ea0:	f1c4 0520 	rsb	r5, r4, #32
 80a1ea4:	fa00 f304 	lsl.w	r3, r0, r4
 80a1ea8:	fa20 f005 	lsr.w	r0, r0, r5
 80a1eac:	fa01 f204 	lsl.w	r2, r1, r4
 80a1eb0:	ea40 0002 	orr.w	r0, r0, r2
 80a1eb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1eb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1ebc:	f141 0100 	adc.w	r1, r1, #0
 80a1ec0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1ec4:	bf08      	it	eq
 80a1ec6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1eca:	bd70      	pop	{r4, r5, r6, pc}
 80a1ecc:	f1c4 0520 	rsb	r5, r4, #32
 80a1ed0:	fa00 f205 	lsl.w	r2, r0, r5
 80a1ed4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a1ed8:	fa20 f304 	lsr.w	r3, r0, r4
 80a1edc:	fa01 f205 	lsl.w	r2, r1, r5
 80a1ee0:	ea43 0302 	orr.w	r3, r3, r2
 80a1ee4:	fa21 f004 	lsr.w	r0, r1, r4
 80a1ee8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1eec:	fa21 f204 	lsr.w	r2, r1, r4
 80a1ef0:	ea20 0002 	bic.w	r0, r0, r2
 80a1ef4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a1ef8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1efc:	bf08      	it	eq
 80a1efe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1f02:	bd70      	pop	{r4, r5, r6, pc}
 80a1f04:	f094 0f00 	teq	r4, #0
 80a1f08:	d10f      	bne.n	80a1f2a <__aeabi_dmul+0x1c2>
 80a1f0a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a1f0e:	0040      	lsls	r0, r0, #1
 80a1f10:	eb41 0101 	adc.w	r1, r1, r1
 80a1f14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1f18:	bf08      	it	eq
 80a1f1a:	3c01      	subeq	r4, #1
 80a1f1c:	d0f7      	beq.n	80a1f0e <__aeabi_dmul+0x1a6>
 80a1f1e:	ea41 0106 	orr.w	r1, r1, r6
 80a1f22:	f095 0f00 	teq	r5, #0
 80a1f26:	bf18      	it	ne
 80a1f28:	4770      	bxne	lr
 80a1f2a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a1f2e:	0052      	lsls	r2, r2, #1
 80a1f30:	eb43 0303 	adc.w	r3, r3, r3
 80a1f34:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a1f38:	bf08      	it	eq
 80a1f3a:	3d01      	subeq	r5, #1
 80a1f3c:	d0f7      	beq.n	80a1f2e <__aeabi_dmul+0x1c6>
 80a1f3e:	ea43 0306 	orr.w	r3, r3, r6
 80a1f42:	4770      	bx	lr
 80a1f44:	ea94 0f0c 	teq	r4, ip
 80a1f48:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1f4c:	bf18      	it	ne
 80a1f4e:	ea95 0f0c 	teqne	r5, ip
 80a1f52:	d00c      	beq.n	80a1f6e <__aeabi_dmul+0x206>
 80a1f54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1f58:	bf18      	it	ne
 80a1f5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1f5e:	d1d1      	bne.n	80a1f04 <__aeabi_dmul+0x19c>
 80a1f60:	ea81 0103 	eor.w	r1, r1, r3
 80a1f64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1f68:	f04f 0000 	mov.w	r0, #0
 80a1f6c:	bd70      	pop	{r4, r5, r6, pc}
 80a1f6e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1f72:	bf06      	itte	eq
 80a1f74:	4610      	moveq	r0, r2
 80a1f76:	4619      	moveq	r1, r3
 80a1f78:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1f7c:	d019      	beq.n	80a1fb2 <__aeabi_dmul+0x24a>
 80a1f7e:	ea94 0f0c 	teq	r4, ip
 80a1f82:	d102      	bne.n	80a1f8a <__aeabi_dmul+0x222>
 80a1f84:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a1f88:	d113      	bne.n	80a1fb2 <__aeabi_dmul+0x24a>
 80a1f8a:	ea95 0f0c 	teq	r5, ip
 80a1f8e:	d105      	bne.n	80a1f9c <__aeabi_dmul+0x234>
 80a1f90:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a1f94:	bf1c      	itt	ne
 80a1f96:	4610      	movne	r0, r2
 80a1f98:	4619      	movne	r1, r3
 80a1f9a:	d10a      	bne.n	80a1fb2 <__aeabi_dmul+0x24a>
 80a1f9c:	ea81 0103 	eor.w	r1, r1, r3
 80a1fa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1fa4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1fa8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1fac:	f04f 0000 	mov.w	r0, #0
 80a1fb0:	bd70      	pop	{r4, r5, r6, pc}
 80a1fb2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1fb6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a1fba:	bd70      	pop	{r4, r5, r6, pc}

080a1fbc <__aeabi_ddiv>:
 80a1fbc:	b570      	push	{r4, r5, r6, lr}
 80a1fbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1fc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1fc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1fca:	bf1d      	ittte	ne
 80a1fcc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1fd0:	ea94 0f0c 	teqne	r4, ip
 80a1fd4:	ea95 0f0c 	teqne	r5, ip
 80a1fd8:	f000 f8a7 	bleq	80a212a <__aeabi_ddiv+0x16e>
 80a1fdc:	eba4 0405 	sub.w	r4, r4, r5
 80a1fe0:	ea81 0e03 	eor.w	lr, r1, r3
 80a1fe4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1fe8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1fec:	f000 8088 	beq.w	80a2100 <__aeabi_ddiv+0x144>
 80a1ff0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1ff4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a1ff8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a1ffc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2000:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2004:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2008:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a200c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2010:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2014:	429d      	cmp	r5, r3
 80a2016:	bf08      	it	eq
 80a2018:	4296      	cmpeq	r6, r2
 80a201a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a201e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2022:	d202      	bcs.n	80a202a <__aeabi_ddiv+0x6e>
 80a2024:	085b      	lsrs	r3, r3, #1
 80a2026:	ea4f 0232 	mov.w	r2, r2, rrx
 80a202a:	1ab6      	subs	r6, r6, r2
 80a202c:	eb65 0503 	sbc.w	r5, r5, r3
 80a2030:	085b      	lsrs	r3, r3, #1
 80a2032:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2036:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a203a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a203e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2042:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2046:	bf22      	ittt	cs
 80a2048:	1ab6      	subcs	r6, r6, r2
 80a204a:	4675      	movcs	r5, lr
 80a204c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2050:	085b      	lsrs	r3, r3, #1
 80a2052:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2056:	ebb6 0e02 	subs.w	lr, r6, r2
 80a205a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a205e:	bf22      	ittt	cs
 80a2060:	1ab6      	subcs	r6, r6, r2
 80a2062:	4675      	movcs	r5, lr
 80a2064:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2068:	085b      	lsrs	r3, r3, #1
 80a206a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a206e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2072:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2076:	bf22      	ittt	cs
 80a2078:	1ab6      	subcs	r6, r6, r2
 80a207a:	4675      	movcs	r5, lr
 80a207c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2080:	085b      	lsrs	r3, r3, #1
 80a2082:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2086:	ebb6 0e02 	subs.w	lr, r6, r2
 80a208a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a208e:	bf22      	ittt	cs
 80a2090:	1ab6      	subcs	r6, r6, r2
 80a2092:	4675      	movcs	r5, lr
 80a2094:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2098:	ea55 0e06 	orrs.w	lr, r5, r6
 80a209c:	d018      	beq.n	80a20d0 <__aeabi_ddiv+0x114>
 80a209e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a20a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a20a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a20aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a20ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a20b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a20b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a20ba:	d1c0      	bne.n	80a203e <__aeabi_ddiv+0x82>
 80a20bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a20c0:	d10b      	bne.n	80a20da <__aeabi_ddiv+0x11e>
 80a20c2:	ea41 0100 	orr.w	r1, r1, r0
 80a20c6:	f04f 0000 	mov.w	r0, #0
 80a20ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a20ce:	e7b6      	b.n	80a203e <__aeabi_ddiv+0x82>
 80a20d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a20d4:	bf04      	itt	eq
 80a20d6:	4301      	orreq	r1, r0
 80a20d8:	2000      	moveq	r0, #0
 80a20da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a20de:	bf88      	it	hi
 80a20e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a20e4:	f63f aeaf 	bhi.w	80a1e46 <__aeabi_dmul+0xde>
 80a20e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a20ec:	bf04      	itt	eq
 80a20ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a20f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a20f6:	f150 0000 	adcs.w	r0, r0, #0
 80a20fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a20fe:	bd70      	pop	{r4, r5, r6, pc}
 80a2100:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2104:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2108:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a210c:	bfc2      	ittt	gt
 80a210e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2112:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2116:	bd70      	popgt	{r4, r5, r6, pc}
 80a2118:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a211c:	f04f 0e00 	mov.w	lr, #0
 80a2120:	3c01      	subs	r4, #1
 80a2122:	e690      	b.n	80a1e46 <__aeabi_dmul+0xde>
 80a2124:	ea45 0e06 	orr.w	lr, r5, r6
 80a2128:	e68d      	b.n	80a1e46 <__aeabi_dmul+0xde>
 80a212a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a212e:	ea94 0f0c 	teq	r4, ip
 80a2132:	bf08      	it	eq
 80a2134:	ea95 0f0c 	teqeq	r5, ip
 80a2138:	f43f af3b 	beq.w	80a1fb2 <__aeabi_dmul+0x24a>
 80a213c:	ea94 0f0c 	teq	r4, ip
 80a2140:	d10a      	bne.n	80a2158 <__aeabi_ddiv+0x19c>
 80a2142:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2146:	f47f af34 	bne.w	80a1fb2 <__aeabi_dmul+0x24a>
 80a214a:	ea95 0f0c 	teq	r5, ip
 80a214e:	f47f af25 	bne.w	80a1f9c <__aeabi_dmul+0x234>
 80a2152:	4610      	mov	r0, r2
 80a2154:	4619      	mov	r1, r3
 80a2156:	e72c      	b.n	80a1fb2 <__aeabi_dmul+0x24a>
 80a2158:	ea95 0f0c 	teq	r5, ip
 80a215c:	d106      	bne.n	80a216c <__aeabi_ddiv+0x1b0>
 80a215e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2162:	f43f aefd 	beq.w	80a1f60 <__aeabi_dmul+0x1f8>
 80a2166:	4610      	mov	r0, r2
 80a2168:	4619      	mov	r1, r3
 80a216a:	e722      	b.n	80a1fb2 <__aeabi_dmul+0x24a>
 80a216c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2170:	bf18      	it	ne
 80a2172:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2176:	f47f aec5 	bne.w	80a1f04 <__aeabi_dmul+0x19c>
 80a217a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a217e:	f47f af0d 	bne.w	80a1f9c <__aeabi_dmul+0x234>
 80a2182:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a2186:	f47f aeeb 	bne.w	80a1f60 <__aeabi_dmul+0x1f8>
 80a218a:	e712      	b.n	80a1fb2 <__aeabi_dmul+0x24a>

080a218c <__gedf2>:
 80a218c:	f04f 3cff 	mov.w	ip, #4294967295
 80a2190:	e006      	b.n	80a21a0 <__cmpdf2+0x4>
 80a2192:	bf00      	nop

080a2194 <__ledf2>:
 80a2194:	f04f 0c01 	mov.w	ip, #1
 80a2198:	e002      	b.n	80a21a0 <__cmpdf2+0x4>
 80a219a:	bf00      	nop

080a219c <__cmpdf2>:
 80a219c:	f04f 0c01 	mov.w	ip, #1
 80a21a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a21a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a21a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a21ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a21b0:	bf18      	it	ne
 80a21b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a21b6:	d01b      	beq.n	80a21f0 <__cmpdf2+0x54>
 80a21b8:	b001      	add	sp, #4
 80a21ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a21be:	bf0c      	ite	eq
 80a21c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a21c4:	ea91 0f03 	teqne	r1, r3
 80a21c8:	bf02      	ittt	eq
 80a21ca:	ea90 0f02 	teqeq	r0, r2
 80a21ce:	2000      	moveq	r0, #0
 80a21d0:	4770      	bxeq	lr
 80a21d2:	f110 0f00 	cmn.w	r0, #0
 80a21d6:	ea91 0f03 	teq	r1, r3
 80a21da:	bf58      	it	pl
 80a21dc:	4299      	cmppl	r1, r3
 80a21de:	bf08      	it	eq
 80a21e0:	4290      	cmpeq	r0, r2
 80a21e2:	bf2c      	ite	cs
 80a21e4:	17d8      	asrcs	r0, r3, #31
 80a21e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a21ea:	f040 0001 	orr.w	r0, r0, #1
 80a21ee:	4770      	bx	lr
 80a21f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a21f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a21f8:	d102      	bne.n	80a2200 <__cmpdf2+0x64>
 80a21fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a21fe:	d107      	bne.n	80a2210 <__cmpdf2+0x74>
 80a2200:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2204:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2208:	d1d6      	bne.n	80a21b8 <__cmpdf2+0x1c>
 80a220a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a220e:	d0d3      	beq.n	80a21b8 <__cmpdf2+0x1c>
 80a2210:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2214:	4770      	bx	lr
 80a2216:	bf00      	nop

080a2218 <__aeabi_cdrcmple>:
 80a2218:	4684      	mov	ip, r0
 80a221a:	4610      	mov	r0, r2
 80a221c:	4662      	mov	r2, ip
 80a221e:	468c      	mov	ip, r1
 80a2220:	4619      	mov	r1, r3
 80a2222:	4663      	mov	r3, ip
 80a2224:	e000      	b.n	80a2228 <__aeabi_cdcmpeq>
 80a2226:	bf00      	nop

080a2228 <__aeabi_cdcmpeq>:
 80a2228:	b501      	push	{r0, lr}
 80a222a:	f7ff ffb7 	bl	80a219c <__cmpdf2>
 80a222e:	2800      	cmp	r0, #0
 80a2230:	bf48      	it	mi
 80a2232:	f110 0f00 	cmnmi.w	r0, #0
 80a2236:	bd01      	pop	{r0, pc}

080a2238 <__aeabi_dcmpeq>:
 80a2238:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a223c:	f7ff fff4 	bl	80a2228 <__aeabi_cdcmpeq>
 80a2240:	bf0c      	ite	eq
 80a2242:	2001      	moveq	r0, #1
 80a2244:	2000      	movne	r0, #0
 80a2246:	f85d fb08 	ldr.w	pc, [sp], #8
 80a224a:	bf00      	nop

080a224c <__aeabi_dcmplt>:
 80a224c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2250:	f7ff ffea 	bl	80a2228 <__aeabi_cdcmpeq>
 80a2254:	bf34      	ite	cc
 80a2256:	2001      	movcc	r0, #1
 80a2258:	2000      	movcs	r0, #0
 80a225a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a225e:	bf00      	nop

080a2260 <__aeabi_dcmple>:
 80a2260:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2264:	f7ff ffe0 	bl	80a2228 <__aeabi_cdcmpeq>
 80a2268:	bf94      	ite	ls
 80a226a:	2001      	movls	r0, #1
 80a226c:	2000      	movhi	r0, #0
 80a226e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2272:	bf00      	nop

080a2274 <__aeabi_dcmpge>:
 80a2274:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2278:	f7ff ffce 	bl	80a2218 <__aeabi_cdrcmple>
 80a227c:	bf94      	ite	ls
 80a227e:	2001      	movls	r0, #1
 80a2280:	2000      	movhi	r0, #0
 80a2282:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2286:	bf00      	nop

080a2288 <__aeabi_dcmpgt>:
 80a2288:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a228c:	f7ff ffc4 	bl	80a2218 <__aeabi_cdrcmple>
 80a2290:	bf34      	ite	cc
 80a2292:	2001      	movcc	r0, #1
 80a2294:	2000      	movcs	r0, #0
 80a2296:	f85d fb08 	ldr.w	pc, [sp], #8
 80a229a:	bf00      	nop

080a229c <__aeabi_d2iz>:
 80a229c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a22a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a22a4:	d215      	bcs.n	80a22d2 <__aeabi_d2iz+0x36>
 80a22a6:	d511      	bpl.n	80a22cc <__aeabi_d2iz+0x30>
 80a22a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a22ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a22b0:	d912      	bls.n	80a22d8 <__aeabi_d2iz+0x3c>
 80a22b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a22b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a22ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a22be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a22c2:	fa23 f002 	lsr.w	r0, r3, r2
 80a22c6:	bf18      	it	ne
 80a22c8:	4240      	negne	r0, r0
 80a22ca:	4770      	bx	lr
 80a22cc:	f04f 0000 	mov.w	r0, #0
 80a22d0:	4770      	bx	lr
 80a22d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a22d6:	d105      	bne.n	80a22e4 <__aeabi_d2iz+0x48>
 80a22d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a22dc:	bf08      	it	eq
 80a22de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a22e2:	4770      	bx	lr
 80a22e4:	f04f 0000 	mov.w	r0, #0
 80a22e8:	4770      	bx	lr
 80a22ea:	bf00      	nop

080a22ec <__aeabi_d2uiz>:
 80a22ec:	004a      	lsls	r2, r1, #1
 80a22ee:	d211      	bcs.n	80a2314 <__aeabi_d2uiz+0x28>
 80a22f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a22f4:	d211      	bcs.n	80a231a <__aeabi_d2uiz+0x2e>
 80a22f6:	d50d      	bpl.n	80a2314 <__aeabi_d2uiz+0x28>
 80a22f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a22fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2300:	d40e      	bmi.n	80a2320 <__aeabi_d2uiz+0x34>
 80a2302:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a230a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a230e:	fa23 f002 	lsr.w	r0, r3, r2
 80a2312:	4770      	bx	lr
 80a2314:	f04f 0000 	mov.w	r0, #0
 80a2318:	4770      	bx	lr
 80a231a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a231e:	d102      	bne.n	80a2326 <__aeabi_d2uiz+0x3a>
 80a2320:	f04f 30ff 	mov.w	r0, #4294967295
 80a2324:	4770      	bx	lr
 80a2326:	f04f 0000 	mov.w	r0, #0
 80a232a:	4770      	bx	lr

080a232c <__aeabi_d2f>:
 80a232c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2330:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a2334:	bf24      	itt	cs
 80a2336:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a233a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a233e:	d90d      	bls.n	80a235c <__aeabi_d2f+0x30>
 80a2340:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2344:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a2348:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a234c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a2350:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a2354:	bf08      	it	eq
 80a2356:	f020 0001 	biceq.w	r0, r0, #1
 80a235a:	4770      	bx	lr
 80a235c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a2360:	d121      	bne.n	80a23a6 <__aeabi_d2f+0x7a>
 80a2362:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a2366:	bfbc      	itt	lt
 80a2368:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a236c:	4770      	bxlt	lr
 80a236e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2372:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a2376:	f1c2 0218 	rsb	r2, r2, #24
 80a237a:	f1c2 0c20 	rsb	ip, r2, #32
 80a237e:	fa10 f30c 	lsls.w	r3, r0, ip
 80a2382:	fa20 f002 	lsr.w	r0, r0, r2
 80a2386:	bf18      	it	ne
 80a2388:	f040 0001 	orrne.w	r0, r0, #1
 80a238c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2390:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a2394:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a2398:	ea40 000c 	orr.w	r0, r0, ip
 80a239c:	fa23 f302 	lsr.w	r3, r3, r2
 80a23a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a23a4:	e7cc      	b.n	80a2340 <__aeabi_d2f+0x14>
 80a23a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a23aa:	d107      	bne.n	80a23bc <__aeabi_d2f+0x90>
 80a23ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a23b0:	bf1e      	ittt	ne
 80a23b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a23b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a23ba:	4770      	bxne	lr
 80a23bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a23c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a23c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a23c8:	4770      	bx	lr
 80a23ca:	bf00      	nop

080a23cc <__aeabi_frsub>:
 80a23cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a23d0:	e002      	b.n	80a23d8 <__addsf3>
 80a23d2:	bf00      	nop

080a23d4 <__aeabi_fsub>:
 80a23d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a23d8 <__addsf3>:
 80a23d8:	0042      	lsls	r2, r0, #1
 80a23da:	bf1f      	itttt	ne
 80a23dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a23e0:	ea92 0f03 	teqne	r2, r3
 80a23e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a23e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a23ec:	d06a      	beq.n	80a24c4 <__addsf3+0xec>
 80a23ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a23f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a23f6:	bfc1      	itttt	gt
 80a23f8:	18d2      	addgt	r2, r2, r3
 80a23fa:	4041      	eorgt	r1, r0
 80a23fc:	4048      	eorgt	r0, r1
 80a23fe:	4041      	eorgt	r1, r0
 80a2400:	bfb8      	it	lt
 80a2402:	425b      	neglt	r3, r3
 80a2404:	2b19      	cmp	r3, #25
 80a2406:	bf88      	it	hi
 80a2408:	4770      	bxhi	lr
 80a240a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a240e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2412:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a2416:	bf18      	it	ne
 80a2418:	4240      	negne	r0, r0
 80a241a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a241e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a2422:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a2426:	bf18      	it	ne
 80a2428:	4249      	negne	r1, r1
 80a242a:	ea92 0f03 	teq	r2, r3
 80a242e:	d03f      	beq.n	80a24b0 <__addsf3+0xd8>
 80a2430:	f1a2 0201 	sub.w	r2, r2, #1
 80a2434:	fa41 fc03 	asr.w	ip, r1, r3
 80a2438:	eb10 000c 	adds.w	r0, r0, ip
 80a243c:	f1c3 0320 	rsb	r3, r3, #32
 80a2440:	fa01 f103 	lsl.w	r1, r1, r3
 80a2444:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2448:	d502      	bpl.n	80a2450 <__addsf3+0x78>
 80a244a:	4249      	negs	r1, r1
 80a244c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2450:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2454:	d313      	bcc.n	80a247e <__addsf3+0xa6>
 80a2456:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a245a:	d306      	bcc.n	80a246a <__addsf3+0x92>
 80a245c:	0840      	lsrs	r0, r0, #1
 80a245e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2462:	f102 0201 	add.w	r2, r2, #1
 80a2466:	2afe      	cmp	r2, #254	; 0xfe
 80a2468:	d251      	bcs.n	80a250e <__addsf3+0x136>
 80a246a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a246e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2472:	bf08      	it	eq
 80a2474:	f020 0001 	biceq.w	r0, r0, #1
 80a2478:	ea40 0003 	orr.w	r0, r0, r3
 80a247c:	4770      	bx	lr
 80a247e:	0049      	lsls	r1, r1, #1
 80a2480:	eb40 0000 	adc.w	r0, r0, r0
 80a2484:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a2488:	f1a2 0201 	sub.w	r2, r2, #1
 80a248c:	d1ed      	bne.n	80a246a <__addsf3+0x92>
 80a248e:	fab0 fc80 	clz	ip, r0
 80a2492:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2496:	ebb2 020c 	subs.w	r2, r2, ip
 80a249a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a249e:	bfaa      	itet	ge
 80a24a0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a24a4:	4252      	neglt	r2, r2
 80a24a6:	4318      	orrge	r0, r3
 80a24a8:	bfbc      	itt	lt
 80a24aa:	40d0      	lsrlt	r0, r2
 80a24ac:	4318      	orrlt	r0, r3
 80a24ae:	4770      	bx	lr
 80a24b0:	f092 0f00 	teq	r2, #0
 80a24b4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a24b8:	bf06      	itte	eq
 80a24ba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a24be:	3201      	addeq	r2, #1
 80a24c0:	3b01      	subne	r3, #1
 80a24c2:	e7b5      	b.n	80a2430 <__addsf3+0x58>
 80a24c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a24c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a24cc:	bf18      	it	ne
 80a24ce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a24d2:	d021      	beq.n	80a2518 <__addsf3+0x140>
 80a24d4:	ea92 0f03 	teq	r2, r3
 80a24d8:	d004      	beq.n	80a24e4 <__addsf3+0x10c>
 80a24da:	f092 0f00 	teq	r2, #0
 80a24de:	bf08      	it	eq
 80a24e0:	4608      	moveq	r0, r1
 80a24e2:	4770      	bx	lr
 80a24e4:	ea90 0f01 	teq	r0, r1
 80a24e8:	bf1c      	itt	ne
 80a24ea:	2000      	movne	r0, #0
 80a24ec:	4770      	bxne	lr
 80a24ee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a24f2:	d104      	bne.n	80a24fe <__addsf3+0x126>
 80a24f4:	0040      	lsls	r0, r0, #1
 80a24f6:	bf28      	it	cs
 80a24f8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a24fc:	4770      	bx	lr
 80a24fe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a2502:	bf3c      	itt	cc
 80a2504:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a2508:	4770      	bxcc	lr
 80a250a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a250e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a2512:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2516:	4770      	bx	lr
 80a2518:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a251c:	bf16      	itet	ne
 80a251e:	4608      	movne	r0, r1
 80a2520:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2524:	4601      	movne	r1, r0
 80a2526:	0242      	lsls	r2, r0, #9
 80a2528:	bf06      	itte	eq
 80a252a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a252e:	ea90 0f01 	teqeq	r0, r1
 80a2532:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2536:	4770      	bx	lr

080a2538 <__aeabi_ui2f>:
 80a2538:	f04f 0300 	mov.w	r3, #0
 80a253c:	e004      	b.n	80a2548 <__aeabi_i2f+0x8>
 80a253e:	bf00      	nop

080a2540 <__aeabi_i2f>:
 80a2540:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2544:	bf48      	it	mi
 80a2546:	4240      	negmi	r0, r0
 80a2548:	ea5f 0c00 	movs.w	ip, r0
 80a254c:	bf08      	it	eq
 80a254e:	4770      	bxeq	lr
 80a2550:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2554:	4601      	mov	r1, r0
 80a2556:	f04f 0000 	mov.w	r0, #0
 80a255a:	e01c      	b.n	80a2596 <__aeabi_l2f+0x2a>

080a255c <__aeabi_ul2f>:
 80a255c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2560:	bf08      	it	eq
 80a2562:	4770      	bxeq	lr
 80a2564:	f04f 0300 	mov.w	r3, #0
 80a2568:	e00a      	b.n	80a2580 <__aeabi_l2f+0x14>
 80a256a:	bf00      	nop

080a256c <__aeabi_l2f>:
 80a256c:	ea50 0201 	orrs.w	r2, r0, r1
 80a2570:	bf08      	it	eq
 80a2572:	4770      	bxeq	lr
 80a2574:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2578:	d502      	bpl.n	80a2580 <__aeabi_l2f+0x14>
 80a257a:	4240      	negs	r0, r0
 80a257c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2580:	ea5f 0c01 	movs.w	ip, r1
 80a2584:	bf02      	ittt	eq
 80a2586:	4684      	moveq	ip, r0
 80a2588:	4601      	moveq	r1, r0
 80a258a:	2000      	moveq	r0, #0
 80a258c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2590:	bf08      	it	eq
 80a2592:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2596:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a259a:	fabc f28c 	clz	r2, ip
 80a259e:	3a08      	subs	r2, #8
 80a25a0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a25a4:	db10      	blt.n	80a25c8 <__aeabi_l2f+0x5c>
 80a25a6:	fa01 fc02 	lsl.w	ip, r1, r2
 80a25aa:	4463      	add	r3, ip
 80a25ac:	fa00 fc02 	lsl.w	ip, r0, r2
 80a25b0:	f1c2 0220 	rsb	r2, r2, #32
 80a25b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a25b8:	fa20 f202 	lsr.w	r2, r0, r2
 80a25bc:	eb43 0002 	adc.w	r0, r3, r2
 80a25c0:	bf08      	it	eq
 80a25c2:	f020 0001 	biceq.w	r0, r0, #1
 80a25c6:	4770      	bx	lr
 80a25c8:	f102 0220 	add.w	r2, r2, #32
 80a25cc:	fa01 fc02 	lsl.w	ip, r1, r2
 80a25d0:	f1c2 0220 	rsb	r2, r2, #32
 80a25d4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a25d8:	fa21 f202 	lsr.w	r2, r1, r2
 80a25dc:	eb43 0002 	adc.w	r0, r3, r2
 80a25e0:	bf08      	it	eq
 80a25e2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a25e6:	4770      	bx	lr

080a25e8 <__aeabi_fmul>:
 80a25e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a25ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a25f0:	bf1e      	ittt	ne
 80a25f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a25f6:	ea92 0f0c 	teqne	r2, ip
 80a25fa:	ea93 0f0c 	teqne	r3, ip
 80a25fe:	d06f      	beq.n	80a26e0 <__aeabi_fmul+0xf8>
 80a2600:	441a      	add	r2, r3
 80a2602:	ea80 0c01 	eor.w	ip, r0, r1
 80a2606:	0240      	lsls	r0, r0, #9
 80a2608:	bf18      	it	ne
 80a260a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a260e:	d01e      	beq.n	80a264e <__aeabi_fmul+0x66>
 80a2610:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2614:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2618:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a261c:	fba0 3101 	umull	r3, r1, r0, r1
 80a2620:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2624:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2628:	bf3e      	ittt	cc
 80a262a:	0049      	lslcc	r1, r1, #1
 80a262c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2630:	005b      	lslcc	r3, r3, #1
 80a2632:	ea40 0001 	orr.w	r0, r0, r1
 80a2636:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a263a:	2afd      	cmp	r2, #253	; 0xfd
 80a263c:	d81d      	bhi.n	80a267a <__aeabi_fmul+0x92>
 80a263e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2642:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2646:	bf08      	it	eq
 80a2648:	f020 0001 	biceq.w	r0, r0, #1
 80a264c:	4770      	bx	lr
 80a264e:	f090 0f00 	teq	r0, #0
 80a2652:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2656:	bf08      	it	eq
 80a2658:	0249      	lsleq	r1, r1, #9
 80a265a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a265e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2662:	3a7f      	subs	r2, #127	; 0x7f
 80a2664:	bfc2      	ittt	gt
 80a2666:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a266a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a266e:	4770      	bxgt	lr
 80a2670:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2674:	f04f 0300 	mov.w	r3, #0
 80a2678:	3a01      	subs	r2, #1
 80a267a:	dc5d      	bgt.n	80a2738 <__aeabi_fmul+0x150>
 80a267c:	f112 0f19 	cmn.w	r2, #25
 80a2680:	bfdc      	itt	le
 80a2682:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a2686:	4770      	bxle	lr
 80a2688:	f1c2 0200 	rsb	r2, r2, #0
 80a268c:	0041      	lsls	r1, r0, #1
 80a268e:	fa21 f102 	lsr.w	r1, r1, r2
 80a2692:	f1c2 0220 	rsb	r2, r2, #32
 80a2696:	fa00 fc02 	lsl.w	ip, r0, r2
 80a269a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a269e:	f140 0000 	adc.w	r0, r0, #0
 80a26a2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a26a6:	bf08      	it	eq
 80a26a8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a26ac:	4770      	bx	lr
 80a26ae:	f092 0f00 	teq	r2, #0
 80a26b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a26b6:	bf02      	ittt	eq
 80a26b8:	0040      	lsleq	r0, r0, #1
 80a26ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a26be:	3a01      	subeq	r2, #1
 80a26c0:	d0f9      	beq.n	80a26b6 <__aeabi_fmul+0xce>
 80a26c2:	ea40 000c 	orr.w	r0, r0, ip
 80a26c6:	f093 0f00 	teq	r3, #0
 80a26ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a26ce:	bf02      	ittt	eq
 80a26d0:	0049      	lsleq	r1, r1, #1
 80a26d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a26d6:	3b01      	subeq	r3, #1
 80a26d8:	d0f9      	beq.n	80a26ce <__aeabi_fmul+0xe6>
 80a26da:	ea41 010c 	orr.w	r1, r1, ip
 80a26de:	e78f      	b.n	80a2600 <__aeabi_fmul+0x18>
 80a26e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a26e4:	ea92 0f0c 	teq	r2, ip
 80a26e8:	bf18      	it	ne
 80a26ea:	ea93 0f0c 	teqne	r3, ip
 80a26ee:	d00a      	beq.n	80a2706 <__aeabi_fmul+0x11e>
 80a26f0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a26f4:	bf18      	it	ne
 80a26f6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a26fa:	d1d8      	bne.n	80a26ae <__aeabi_fmul+0xc6>
 80a26fc:	ea80 0001 	eor.w	r0, r0, r1
 80a2700:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2704:	4770      	bx	lr
 80a2706:	f090 0f00 	teq	r0, #0
 80a270a:	bf17      	itett	ne
 80a270c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2710:	4608      	moveq	r0, r1
 80a2712:	f091 0f00 	teqne	r1, #0
 80a2716:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a271a:	d014      	beq.n	80a2746 <__aeabi_fmul+0x15e>
 80a271c:	ea92 0f0c 	teq	r2, ip
 80a2720:	d101      	bne.n	80a2726 <__aeabi_fmul+0x13e>
 80a2722:	0242      	lsls	r2, r0, #9
 80a2724:	d10f      	bne.n	80a2746 <__aeabi_fmul+0x15e>
 80a2726:	ea93 0f0c 	teq	r3, ip
 80a272a:	d103      	bne.n	80a2734 <__aeabi_fmul+0x14c>
 80a272c:	024b      	lsls	r3, r1, #9
 80a272e:	bf18      	it	ne
 80a2730:	4608      	movne	r0, r1
 80a2732:	d108      	bne.n	80a2746 <__aeabi_fmul+0x15e>
 80a2734:	ea80 0001 	eor.w	r0, r0, r1
 80a2738:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a273c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2740:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2744:	4770      	bx	lr
 80a2746:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a274a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a274e:	4770      	bx	lr

080a2750 <__aeabi_fdiv>:
 80a2750:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2754:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2758:	bf1e      	ittt	ne
 80a275a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a275e:	ea92 0f0c 	teqne	r2, ip
 80a2762:	ea93 0f0c 	teqne	r3, ip
 80a2766:	d069      	beq.n	80a283c <__aeabi_fdiv+0xec>
 80a2768:	eba2 0203 	sub.w	r2, r2, r3
 80a276c:	ea80 0c01 	eor.w	ip, r0, r1
 80a2770:	0249      	lsls	r1, r1, #9
 80a2772:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2776:	d037      	beq.n	80a27e8 <__aeabi_fdiv+0x98>
 80a2778:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a277c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2780:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2784:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2788:	428b      	cmp	r3, r1
 80a278a:	bf38      	it	cc
 80a278c:	005b      	lslcc	r3, r3, #1
 80a278e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2792:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2796:	428b      	cmp	r3, r1
 80a2798:	bf24      	itt	cs
 80a279a:	1a5b      	subcs	r3, r3, r1
 80a279c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a27a0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a27a4:	bf24      	itt	cs
 80a27a6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a27aa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a27ae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a27b2:	bf24      	itt	cs
 80a27b4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a27b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a27bc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a27c0:	bf24      	itt	cs
 80a27c2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a27c6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a27ca:	011b      	lsls	r3, r3, #4
 80a27cc:	bf18      	it	ne
 80a27ce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a27d2:	d1e0      	bne.n	80a2796 <__aeabi_fdiv+0x46>
 80a27d4:	2afd      	cmp	r2, #253	; 0xfd
 80a27d6:	f63f af50 	bhi.w	80a267a <__aeabi_fmul+0x92>
 80a27da:	428b      	cmp	r3, r1
 80a27dc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a27e0:	bf08      	it	eq
 80a27e2:	f020 0001 	biceq.w	r0, r0, #1
 80a27e6:	4770      	bx	lr
 80a27e8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a27ec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a27f0:	327f      	adds	r2, #127	; 0x7f
 80a27f2:	bfc2      	ittt	gt
 80a27f4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a27f8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a27fc:	4770      	bxgt	lr
 80a27fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2802:	f04f 0300 	mov.w	r3, #0
 80a2806:	3a01      	subs	r2, #1
 80a2808:	e737      	b.n	80a267a <__aeabi_fmul+0x92>
 80a280a:	f092 0f00 	teq	r2, #0
 80a280e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2812:	bf02      	ittt	eq
 80a2814:	0040      	lsleq	r0, r0, #1
 80a2816:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a281a:	3a01      	subeq	r2, #1
 80a281c:	d0f9      	beq.n	80a2812 <__aeabi_fdiv+0xc2>
 80a281e:	ea40 000c 	orr.w	r0, r0, ip
 80a2822:	f093 0f00 	teq	r3, #0
 80a2826:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a282a:	bf02      	ittt	eq
 80a282c:	0049      	lsleq	r1, r1, #1
 80a282e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2832:	3b01      	subeq	r3, #1
 80a2834:	d0f9      	beq.n	80a282a <__aeabi_fdiv+0xda>
 80a2836:	ea41 010c 	orr.w	r1, r1, ip
 80a283a:	e795      	b.n	80a2768 <__aeabi_fdiv+0x18>
 80a283c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2840:	ea92 0f0c 	teq	r2, ip
 80a2844:	d108      	bne.n	80a2858 <__aeabi_fdiv+0x108>
 80a2846:	0242      	lsls	r2, r0, #9
 80a2848:	f47f af7d 	bne.w	80a2746 <__aeabi_fmul+0x15e>
 80a284c:	ea93 0f0c 	teq	r3, ip
 80a2850:	f47f af70 	bne.w	80a2734 <__aeabi_fmul+0x14c>
 80a2854:	4608      	mov	r0, r1
 80a2856:	e776      	b.n	80a2746 <__aeabi_fmul+0x15e>
 80a2858:	ea93 0f0c 	teq	r3, ip
 80a285c:	d104      	bne.n	80a2868 <__aeabi_fdiv+0x118>
 80a285e:	024b      	lsls	r3, r1, #9
 80a2860:	f43f af4c 	beq.w	80a26fc <__aeabi_fmul+0x114>
 80a2864:	4608      	mov	r0, r1
 80a2866:	e76e      	b.n	80a2746 <__aeabi_fmul+0x15e>
 80a2868:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a286c:	bf18      	it	ne
 80a286e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2872:	d1ca      	bne.n	80a280a <__aeabi_fdiv+0xba>
 80a2874:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2878:	f47f af5c 	bne.w	80a2734 <__aeabi_fmul+0x14c>
 80a287c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2880:	f47f af3c 	bne.w	80a26fc <__aeabi_fmul+0x114>
 80a2884:	e75f      	b.n	80a2746 <__aeabi_fmul+0x15e>
 80a2886:	bf00      	nop

080a2888 <atof>:
 80a2888:	2100      	movs	r1, #0
 80a288a:	f000 be8d 	b.w	80a35a8 <strtod>
	...

080a2890 <__cxa_atexit>:
 80a2890:	b510      	push	{r4, lr}
 80a2892:	4c05      	ldr	r4, [pc, #20]	; (80a28a8 <__cxa_atexit+0x18>)
 80a2894:	4613      	mov	r3, r2
 80a2896:	b12c      	cbz	r4, 80a28a4 <__cxa_atexit+0x14>
 80a2898:	460a      	mov	r2, r1
 80a289a:	4601      	mov	r1, r0
 80a289c:	2002      	movs	r0, #2
 80a289e:	f3af 8000 	nop.w
 80a28a2:	bd10      	pop	{r4, pc}
 80a28a4:	4620      	mov	r0, r4
 80a28a6:	bd10      	pop	{r4, pc}
 80a28a8:	00000000 	.word	0x00000000

080a28ac <_localeconv_r>:
 80a28ac:	4800      	ldr	r0, [pc, #0]	; (80a28b0 <_localeconv_r+0x4>)
 80a28ae:	4770      	bx	lr
 80a28b0:	20000374 	.word	0x20000374

080a28b4 <memcpy>:
 80a28b4:	b510      	push	{r4, lr}
 80a28b6:	1e43      	subs	r3, r0, #1
 80a28b8:	440a      	add	r2, r1
 80a28ba:	4291      	cmp	r1, r2
 80a28bc:	d004      	beq.n	80a28c8 <memcpy+0x14>
 80a28be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a28c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a28c6:	e7f8      	b.n	80a28ba <memcpy+0x6>
 80a28c8:	bd10      	pop	{r4, pc}

080a28ca <memset>:
 80a28ca:	4603      	mov	r3, r0
 80a28cc:	4402      	add	r2, r0
 80a28ce:	4293      	cmp	r3, r2
 80a28d0:	d002      	beq.n	80a28d8 <memset+0xe>
 80a28d2:	f803 1b01 	strb.w	r1, [r3], #1
 80a28d6:	e7fa      	b.n	80a28ce <memset+0x4>
 80a28d8:	4770      	bx	lr
	...

080a28dc <srand>:
 80a28dc:	b538      	push	{r3, r4, r5, lr}
 80a28de:	4b12      	ldr	r3, [pc, #72]	; (80a2928 <srand+0x4c>)
 80a28e0:	4605      	mov	r5, r0
 80a28e2:	681c      	ldr	r4, [r3, #0]
 80a28e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a28e6:	b9d3      	cbnz	r3, 80a291e <srand+0x42>
 80a28e8:	2018      	movs	r0, #24
 80a28ea:	f7fe f963 	bl	80a0bb4 <malloc>
 80a28ee:	f243 330e 	movw	r3, #13070	; 0x330e
 80a28f2:	63a0      	str	r0, [r4, #56]	; 0x38
 80a28f4:	8003      	strh	r3, [r0, #0]
 80a28f6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a28fa:	8043      	strh	r3, [r0, #2]
 80a28fc:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2900:	8083      	strh	r3, [r0, #4]
 80a2902:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2906:	80c3      	strh	r3, [r0, #6]
 80a2908:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a290c:	8103      	strh	r3, [r0, #8]
 80a290e:	2305      	movs	r3, #5
 80a2910:	8143      	strh	r3, [r0, #10]
 80a2912:	230b      	movs	r3, #11
 80a2914:	8183      	strh	r3, [r0, #12]
 80a2916:	2201      	movs	r2, #1
 80a2918:	2300      	movs	r3, #0
 80a291a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a291e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2920:	2200      	movs	r2, #0
 80a2922:	611d      	str	r5, [r3, #16]
 80a2924:	615a      	str	r2, [r3, #20]
 80a2926:	bd38      	pop	{r3, r4, r5, pc}
 80a2928:	20000370 	.word	0x20000370

080a292c <strlen>:
 80a292c:	4603      	mov	r3, r0
 80a292e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2932:	2a00      	cmp	r2, #0
 80a2934:	d1fb      	bne.n	80a292e <strlen+0x2>
 80a2936:	1a18      	subs	r0, r3, r0
 80a2938:	3801      	subs	r0, #1
 80a293a:	4770      	bx	lr

080a293c <strncmp>:
 80a293c:	b530      	push	{r4, r5, lr}
 80a293e:	b182      	cbz	r2, 80a2962 <strncmp+0x26>
 80a2940:	1e45      	subs	r5, r0, #1
 80a2942:	3901      	subs	r1, #1
 80a2944:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a2948:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a294c:	42a3      	cmp	r3, r4
 80a294e:	d106      	bne.n	80a295e <strncmp+0x22>
 80a2950:	43ec      	mvns	r4, r5
 80a2952:	4414      	add	r4, r2
 80a2954:	42e0      	cmn	r0, r4
 80a2956:	d001      	beq.n	80a295c <strncmp+0x20>
 80a2958:	2b00      	cmp	r3, #0
 80a295a:	d1f3      	bne.n	80a2944 <strncmp+0x8>
 80a295c:	461c      	mov	r4, r3
 80a295e:	1b18      	subs	r0, r3, r4
 80a2960:	bd30      	pop	{r4, r5, pc}
 80a2962:	4610      	mov	r0, r2
 80a2964:	bd30      	pop	{r4, r5, pc}

080a2966 <sulp>:
 80a2966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a296a:	460f      	mov	r7, r1
 80a296c:	4690      	mov	r8, r2
 80a296e:	f001 fc05 	bl	80a417c <__ulp>
 80a2972:	4604      	mov	r4, r0
 80a2974:	460d      	mov	r5, r1
 80a2976:	f1b8 0f00 	cmp.w	r8, #0
 80a297a:	d011      	beq.n	80a29a0 <sulp+0x3a>
 80a297c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a2980:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a2984:	2b00      	cmp	r3, #0
 80a2986:	dd0b      	ble.n	80a29a0 <sulp+0x3a>
 80a2988:	051b      	lsls	r3, r3, #20
 80a298a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a298e:	2400      	movs	r4, #0
 80a2990:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a2994:	4622      	mov	r2, r4
 80a2996:	462b      	mov	r3, r5
 80a2998:	f7ff f9e6 	bl	80a1d68 <__aeabi_dmul>
 80a299c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a29a0:	4620      	mov	r0, r4
 80a29a2:	4629      	mov	r1, r5
 80a29a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a29a8 <_strtod_r>:
 80a29a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a29ac:	4682      	mov	sl, r0
 80a29ae:	460c      	mov	r4, r1
 80a29b0:	b09d      	sub	sp, #116	; 0x74
 80a29b2:	2300      	movs	r3, #0
 80a29b4:	9213      	str	r2, [sp, #76]	; 0x4c
 80a29b6:	9318      	str	r3, [sp, #96]	; 0x60
 80a29b8:	f04f 0800 	mov.w	r8, #0
 80a29bc:	f04f 0900 	mov.w	r9, #0
 80a29c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80a29c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a29c4:	781a      	ldrb	r2, [r3, #0]
 80a29c6:	2a0d      	cmp	r2, #13
 80a29c8:	d805      	bhi.n	80a29d6 <_strtod_r+0x2e>
 80a29ca:	2a09      	cmp	r2, #9
 80a29cc:	d213      	bcs.n	80a29f6 <_strtod_r+0x4e>
 80a29ce:	2a00      	cmp	r2, #0
 80a29d0:	f000 81ad 	beq.w	80a2d2e <_strtod_r+0x386>
 80a29d4:	e012      	b.n	80a29fc <_strtod_r+0x54>
 80a29d6:	2a2b      	cmp	r2, #43	; 0x2b
 80a29d8:	d004      	beq.n	80a29e4 <_strtod_r+0x3c>
 80a29da:	2a2d      	cmp	r2, #45	; 0x2d
 80a29dc:	d004      	beq.n	80a29e8 <_strtod_r+0x40>
 80a29de:	2a20      	cmp	r2, #32
 80a29e0:	d10c      	bne.n	80a29fc <_strtod_r+0x54>
 80a29e2:	e008      	b.n	80a29f6 <_strtod_r+0x4e>
 80a29e4:	2200      	movs	r2, #0
 80a29e6:	e000      	b.n	80a29ea <_strtod_r+0x42>
 80a29e8:	2201      	movs	r2, #1
 80a29ea:	920c      	str	r2, [sp, #48]	; 0x30
 80a29ec:	1c5a      	adds	r2, r3, #1
 80a29ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80a29f0:	785b      	ldrb	r3, [r3, #1]
 80a29f2:	b92b      	cbnz	r3, 80a2a00 <_strtod_r+0x58>
 80a29f4:	e19b      	b.n	80a2d2e <_strtod_r+0x386>
 80a29f6:	3301      	adds	r3, #1
 80a29f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80a29fa:	e7e2      	b.n	80a29c2 <_strtod_r+0x1a>
 80a29fc:	2300      	movs	r3, #0
 80a29fe:	930c      	str	r3, [sp, #48]	; 0x30
 80a2a00:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a2a02:	782b      	ldrb	r3, [r5, #0]
 80a2a04:	2b30      	cmp	r3, #48	; 0x30
 80a2a06:	d15c      	bne.n	80a2ac2 <_strtod_r+0x11a>
 80a2a08:	786b      	ldrb	r3, [r5, #1]
 80a2a0a:	2b58      	cmp	r3, #88	; 0x58
 80a2a0c:	d001      	beq.n	80a2a12 <_strtod_r+0x6a>
 80a2a0e:	2b78      	cmp	r3, #120	; 0x78
 80a2a10:	d14c      	bne.n	80a2aac <_strtod_r+0x104>
 80a2a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a2a14:	4aa8      	ldr	r2, [pc, #672]	; (80a2cb8 <_strtod_r+0x310>)
 80a2a16:	9301      	str	r3, [sp, #4]
 80a2a18:	ab18      	add	r3, sp, #96	; 0x60
 80a2a1a:	9300      	str	r3, [sp, #0]
 80a2a1c:	a917      	add	r1, sp, #92	; 0x5c
 80a2a1e:	ab19      	add	r3, sp, #100	; 0x64
 80a2a20:	4650      	mov	r0, sl
 80a2a22:	f000 fe14 	bl	80a364e <__gethex>
 80a2a26:	f010 0607 	ands.w	r6, r0, #7
 80a2a2a:	4604      	mov	r4, r0
 80a2a2c:	f000 8585 	beq.w	80a353a <_strtod_r+0xb92>
 80a2a30:	2e06      	cmp	r6, #6
 80a2a32:	d105      	bne.n	80a2a40 <_strtod_r+0x98>
 80a2a34:	3501      	adds	r5, #1
 80a2a36:	2300      	movs	r3, #0
 80a2a38:	9517      	str	r5, [sp, #92]	; 0x5c
 80a2a3a:	930c      	str	r3, [sp, #48]	; 0x30
 80a2a3c:	f000 bd7d 	b.w	80a353a <_strtod_r+0xb92>
 80a2a40:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a2a42:	b13a      	cbz	r2, 80a2a54 <_strtod_r+0xac>
 80a2a44:	2135      	movs	r1, #53	; 0x35
 80a2a46:	a81a      	add	r0, sp, #104	; 0x68
 80a2a48:	f001 fc7f 	bl	80a434a <__copybits>
 80a2a4c:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a2a4e:	4650      	mov	r0, sl
 80a2a50:	f001 f904 	bl	80a3c5c <_Bfree>
 80a2a54:	2e06      	cmp	r6, #6
 80a2a56:	d822      	bhi.n	80a2a9e <_strtod_r+0xf6>
 80a2a58:	e8df f006 	tbb	[pc, r6]
 80a2a5c:	18080d04 	.word	0x18080d04
 80a2a60:	0d1d      	.short	0x0d1d
 80a2a62:	04          	.byte	0x04
 80a2a63:	00          	.byte	0x00
 80a2a64:	f04f 0900 	mov.w	r9, #0
 80a2a68:	46c8      	mov	r8, r9
 80a2a6a:	e018      	b.n	80a2a9e <_strtod_r+0xf6>
 80a2a6c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a2a70:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80a2a74:	e013      	b.n	80a2a9e <_strtod_r+0xf6>
 80a2a76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a2a78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a2a7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a2a7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a2a82:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a2a86:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a2a8a:	e008      	b.n	80a2a9e <_strtod_r+0xf6>
 80a2a8c:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80a2cbc <_strtod_r+0x314>
 80a2a90:	f04f 0800 	mov.w	r8, #0
 80a2a94:	e003      	b.n	80a2a9e <_strtod_r+0xf6>
 80a2a96:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a2a9a:	f04f 38ff 	mov.w	r8, #4294967295
 80a2a9e:	0721      	lsls	r1, r4, #28
 80a2aa0:	f140 854b 	bpl.w	80a353a <_strtod_r+0xb92>
 80a2aa4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a2aa8:	f000 bd47 	b.w	80a353a <_strtod_r+0xb92>
 80a2aac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a2aae:	1c5a      	adds	r2, r3, #1
 80a2ab0:	9217      	str	r2, [sp, #92]	; 0x5c
 80a2ab2:	785b      	ldrb	r3, [r3, #1]
 80a2ab4:	2b30      	cmp	r3, #48	; 0x30
 80a2ab6:	d0f9      	beq.n	80a2aac <_strtod_r+0x104>
 80a2ab8:	2b00      	cmp	r3, #0
 80a2aba:	f000 853e 	beq.w	80a353a <_strtod_r+0xb92>
 80a2abe:	2301      	movs	r3, #1
 80a2ac0:	e000      	b.n	80a2ac4 <_strtod_r+0x11c>
 80a2ac2:	2300      	movs	r3, #0
 80a2ac4:	9305      	str	r3, [sp, #20]
 80a2ac6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a2ac8:	220a      	movs	r2, #10
 80a2aca:	9306      	str	r3, [sp, #24]
 80a2acc:	2300      	movs	r3, #0
 80a2ace:	469b      	mov	fp, r3
 80a2ad0:	9302      	str	r3, [sp, #8]
 80a2ad2:	9304      	str	r3, [sp, #16]
 80a2ad4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a2ad6:	782e      	ldrb	r6, [r5, #0]
 80a2ad8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80a2adc:	b2d9      	uxtb	r1, r3
 80a2ade:	2909      	cmp	r1, #9
 80a2ae0:	d811      	bhi.n	80a2b06 <_strtod_r+0x15e>
 80a2ae2:	f1bb 0f08 	cmp.w	fp, #8
 80a2ae6:	bfd5      	itete	le
 80a2ae8:	9904      	ldrle	r1, [sp, #16]
 80a2aea:	9902      	ldrgt	r1, [sp, #8]
 80a2aec:	fb02 3301 	mlale	r3, r2, r1, r3
 80a2af0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a2af4:	f105 0501 	add.w	r5, r5, #1
 80a2af8:	bfd4      	ite	le
 80a2afa:	9304      	strle	r3, [sp, #16]
 80a2afc:	9302      	strgt	r3, [sp, #8]
 80a2afe:	f10b 0b01 	add.w	fp, fp, #1
 80a2b02:	9517      	str	r5, [sp, #92]	; 0x5c
 80a2b04:	e7e6      	b.n	80a2ad4 <_strtod_r+0x12c>
 80a2b06:	4650      	mov	r0, sl
 80a2b08:	f7ff fed0 	bl	80a28ac <_localeconv_r>
 80a2b0c:	6807      	ldr	r7, [r0, #0]
 80a2b0e:	4650      	mov	r0, sl
 80a2b10:	f7ff fecc 	bl	80a28ac <_localeconv_r>
 80a2b14:	6800      	ldr	r0, [r0, #0]
 80a2b16:	f7ff ff09 	bl	80a292c <strlen>
 80a2b1a:	4639      	mov	r1, r7
 80a2b1c:	4602      	mov	r2, r0
 80a2b1e:	4628      	mov	r0, r5
 80a2b20:	f7ff ff0c 	bl	80a293c <strncmp>
 80a2b24:	4607      	mov	r7, r0
 80a2b26:	b128      	cbz	r0, 80a2b34 <_strtod_r+0x18c>
 80a2b28:	2000      	movs	r0, #0
 80a2b2a:	4633      	mov	r3, r6
 80a2b2c:	465d      	mov	r5, fp
 80a2b2e:	4602      	mov	r2, r0
 80a2b30:	4601      	mov	r1, r0
 80a2b32:	e05a      	b.n	80a2bea <_strtod_r+0x242>
 80a2b34:	4650      	mov	r0, sl
 80a2b36:	f7ff feb9 	bl	80a28ac <_localeconv_r>
 80a2b3a:	6800      	ldr	r0, [r0, #0]
 80a2b3c:	f7ff fef6 	bl	80a292c <strlen>
 80a2b40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a2b42:	181a      	adds	r2, r3, r0
 80a2b44:	9217      	str	r2, [sp, #92]	; 0x5c
 80a2b46:	5c1b      	ldrb	r3, [r3, r0]
 80a2b48:	f1bb 0f00 	cmp.w	fp, #0
 80a2b4c:	d145      	bne.n	80a2bda <_strtod_r+0x232>
 80a2b4e:	4658      	mov	r0, fp
 80a2b50:	2b30      	cmp	r3, #48	; 0x30
 80a2b52:	d105      	bne.n	80a2b60 <_strtod_r+0x1b8>
 80a2b54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a2b56:	3001      	adds	r0, #1
 80a2b58:	1c5a      	adds	r2, r3, #1
 80a2b5a:	9217      	str	r2, [sp, #92]	; 0x5c
 80a2b5c:	785b      	ldrb	r3, [r3, #1]
 80a2b5e:	e7f7      	b.n	80a2b50 <_strtod_r+0x1a8>
 80a2b60:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80a2b64:	2a08      	cmp	r2, #8
 80a2b66:	d846      	bhi.n	80a2bf6 <_strtod_r+0x24e>
 80a2b68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a2b6a:	9206      	str	r2, [sp, #24]
 80a2b6c:	4602      	mov	r2, r0
 80a2b6e:	2000      	movs	r0, #0
 80a2b70:	4605      	mov	r5, r0
 80a2b72:	3b30      	subs	r3, #48	; 0x30
 80a2b74:	f100 0101 	add.w	r1, r0, #1
 80a2b78:	d029      	beq.n	80a2bce <_strtod_r+0x226>
 80a2b7a:	440a      	add	r2, r1
 80a2b7c:	4629      	mov	r1, r5
 80a2b7e:	eb05 0c00 	add.w	ip, r5, r0
 80a2b82:	260a      	movs	r6, #10
 80a2b84:	4561      	cmp	r1, ip
 80a2b86:	d00f      	beq.n	80a2ba8 <_strtod_r+0x200>
 80a2b88:	3101      	adds	r1, #1
 80a2b8a:	f101 3eff 	add.w	lr, r1, #4294967295
 80a2b8e:	f1be 0f08 	cmp.w	lr, #8
 80a2b92:	dc03      	bgt.n	80a2b9c <_strtod_r+0x1f4>
 80a2b94:	9f04      	ldr	r7, [sp, #16]
 80a2b96:	4377      	muls	r7, r6
 80a2b98:	9704      	str	r7, [sp, #16]
 80a2b9a:	e7f3      	b.n	80a2b84 <_strtod_r+0x1dc>
 80a2b9c:	2910      	cmp	r1, #16
 80a2b9e:	bfde      	ittt	le
 80a2ba0:	9f02      	ldrle	r7, [sp, #8]
 80a2ba2:	4377      	mulle	r7, r6
 80a2ba4:	9702      	strle	r7, [sp, #8]
 80a2ba6:	e7ed      	b.n	80a2b84 <_strtod_r+0x1dc>
 80a2ba8:	4428      	add	r0, r5
 80a2baa:	2808      	cmp	r0, #8
 80a2bac:	f100 0501 	add.w	r5, r0, #1
 80a2bb0:	dc05      	bgt.n	80a2bbe <_strtod_r+0x216>
 80a2bb2:	9804      	ldr	r0, [sp, #16]
 80a2bb4:	210a      	movs	r1, #10
 80a2bb6:	fb01 3300 	mla	r3, r1, r0, r3
 80a2bba:	9304      	str	r3, [sp, #16]
 80a2bbc:	e006      	b.n	80a2bcc <_strtod_r+0x224>
 80a2bbe:	2d10      	cmp	r5, #16
 80a2bc0:	bfdf      	itttt	le
 80a2bc2:	9802      	ldrle	r0, [sp, #8]
 80a2bc4:	210a      	movle	r1, #10
 80a2bc6:	fb01 3300 	mlale	r3, r1, r0, r3
 80a2bca:	9302      	strle	r3, [sp, #8]
 80a2bcc:	2100      	movs	r1, #0
 80a2bce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a2bd0:	1c58      	adds	r0, r3, #1
 80a2bd2:	9017      	str	r0, [sp, #92]	; 0x5c
 80a2bd4:	785b      	ldrb	r3, [r3, #1]
 80a2bd6:	4608      	mov	r0, r1
 80a2bd8:	e002      	b.n	80a2be0 <_strtod_r+0x238>
 80a2bda:	465d      	mov	r5, fp
 80a2bdc:	4638      	mov	r0, r7
 80a2bde:	463a      	mov	r2, r7
 80a2be0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a2be4:	2909      	cmp	r1, #9
 80a2be6:	d9c4      	bls.n	80a2b72 <_strtod_r+0x1ca>
 80a2be8:	2101      	movs	r1, #1
 80a2bea:	2b65      	cmp	r3, #101	; 0x65
 80a2bec:	d001      	beq.n	80a2bf2 <_strtod_r+0x24a>
 80a2bee:	2b45      	cmp	r3, #69	; 0x45
 80a2bf0:	d14f      	bne.n	80a2c92 <_strtod_r+0x2ea>
 80a2bf2:	b96d      	cbnz	r5, 80a2c10 <_strtod_r+0x268>
 80a2bf4:	e004      	b.n	80a2c00 <_strtod_r+0x258>
 80a2bf6:	2b65      	cmp	r3, #101	; 0x65
 80a2bf8:	f040 84ad 	bne.w	80a3556 <_strtod_r+0xbae>
 80a2bfc:	2200      	movs	r2, #0
 80a2bfe:	2101      	movs	r1, #1
 80a2c00:	b928      	cbnz	r0, 80a2c0e <_strtod_r+0x266>
 80a2c02:	9b05      	ldr	r3, [sp, #20]
 80a2c04:	2b00      	cmp	r3, #0
 80a2c06:	f000 8092 	beq.w	80a2d2e <_strtod_r+0x386>
 80a2c0a:	4605      	mov	r5, r0
 80a2c0c:	e000      	b.n	80a2c10 <_strtod_r+0x268>
 80a2c0e:	2500      	movs	r5, #0
 80a2c10:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a2c12:	1c63      	adds	r3, r4, #1
 80a2c14:	9317      	str	r3, [sp, #92]	; 0x5c
 80a2c16:	7863      	ldrb	r3, [r4, #1]
 80a2c18:	2b2b      	cmp	r3, #43	; 0x2b
 80a2c1a:	d006      	beq.n	80a2c2a <_strtod_r+0x282>
 80a2c1c:	2b2d      	cmp	r3, #45	; 0x2d
 80a2c1e:	d002      	beq.n	80a2c26 <_strtod_r+0x27e>
 80a2c20:	2600      	movs	r6, #0
 80a2c22:	9603      	str	r6, [sp, #12]
 80a2c24:	e006      	b.n	80a2c34 <_strtod_r+0x28c>
 80a2c26:	2301      	movs	r3, #1
 80a2c28:	e000      	b.n	80a2c2c <_strtod_r+0x284>
 80a2c2a:	2300      	movs	r3, #0
 80a2c2c:	9303      	str	r3, [sp, #12]
 80a2c2e:	1ca3      	adds	r3, r4, #2
 80a2c30:	9317      	str	r3, [sp, #92]	; 0x5c
 80a2c32:	78a3      	ldrb	r3, [r4, #2]
 80a2c34:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80a2c38:	2e09      	cmp	r6, #9
 80a2c3a:	d829      	bhi.n	80a2c90 <_strtod_r+0x2e8>
 80a2c3c:	2b30      	cmp	r3, #48	; 0x30
 80a2c3e:	d104      	bne.n	80a2c4a <_strtod_r+0x2a2>
 80a2c40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a2c42:	1c5e      	adds	r6, r3, #1
 80a2c44:	9617      	str	r6, [sp, #92]	; 0x5c
 80a2c46:	785b      	ldrb	r3, [r3, #1]
 80a2c48:	e7f8      	b.n	80a2c3c <_strtod_r+0x294>
 80a2c4a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80a2c4e:	2e08      	cmp	r6, #8
 80a2c50:	d81f      	bhi.n	80a2c92 <_strtod_r+0x2ea>
 80a2c52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80a2c56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a2c58:	461f      	mov	r7, r3
 80a2c5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a2c5c:	1c5e      	adds	r6, r3, #1
 80a2c5e:	9617      	str	r6, [sp, #92]	; 0x5c
 80a2c60:	785b      	ldrb	r3, [r3, #1]
 80a2c62:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80a2c66:	f1bc 0f09 	cmp.w	ip, #9
 80a2c6a:	d805      	bhi.n	80a2c78 <_strtod_r+0x2d0>
 80a2c6c:	260a      	movs	r6, #10
 80a2c6e:	fb06 3e0e 	mla	lr, r6, lr, r3
 80a2c72:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80a2c76:	e7f0      	b.n	80a2c5a <_strtod_r+0x2b2>
 80a2c78:	1bf6      	subs	r6, r6, r7
 80a2c7a:	2e08      	cmp	r6, #8
 80a2c7c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80a2c80:	dc02      	bgt.n	80a2c88 <_strtod_r+0x2e0>
 80a2c82:	4576      	cmp	r6, lr
 80a2c84:	bfa8      	it	ge
 80a2c86:	4676      	movge	r6, lr
 80a2c88:	9f03      	ldr	r7, [sp, #12]
 80a2c8a:	b11f      	cbz	r7, 80a2c94 <_strtod_r+0x2ec>
 80a2c8c:	4276      	negs	r6, r6
 80a2c8e:	e001      	b.n	80a2c94 <_strtod_r+0x2ec>
 80a2c90:	9417      	str	r4, [sp, #92]	; 0x5c
 80a2c92:	2600      	movs	r6, #0
 80a2c94:	2d00      	cmp	r5, #0
 80a2c96:	d152      	bne.n	80a2d3e <_strtod_r+0x396>
 80a2c98:	2800      	cmp	r0, #0
 80a2c9a:	f040 844e 	bne.w	80a353a <_strtod_r+0xb92>
 80a2c9e:	9a05      	ldr	r2, [sp, #20]
 80a2ca0:	2a00      	cmp	r2, #0
 80a2ca2:	f040 844a 	bne.w	80a353a <_strtod_r+0xb92>
 80a2ca6:	2900      	cmp	r1, #0
 80a2ca8:	d141      	bne.n	80a2d2e <_strtod_r+0x386>
 80a2caa:	2b4e      	cmp	r3, #78	; 0x4e
 80a2cac:	d020      	beq.n	80a2cf0 <_strtod_r+0x348>
 80a2cae:	dc07      	bgt.n	80a2cc0 <_strtod_r+0x318>
 80a2cb0:	2b49      	cmp	r3, #73	; 0x49
 80a2cb2:	d00a      	beq.n	80a2cca <_strtod_r+0x322>
 80a2cb4:	e03b      	b.n	80a2d2e <_strtod_r+0x386>
 80a2cb6:	bf00      	nop
 80a2cb8:	080a46c4 	.word	0x080a46c4
 80a2cbc:	7ff00000 	.word	0x7ff00000
 80a2cc0:	2b69      	cmp	r3, #105	; 0x69
 80a2cc2:	d002      	beq.n	80a2cca <_strtod_r+0x322>
 80a2cc4:	2b6e      	cmp	r3, #110	; 0x6e
 80a2cc6:	d013      	beq.n	80a2cf0 <_strtod_r+0x348>
 80a2cc8:	e031      	b.n	80a2d2e <_strtod_r+0x386>
 80a2cca:	49aa      	ldr	r1, [pc, #680]	; (80a2f74 <_strtod_r+0x5cc>)
 80a2ccc:	a817      	add	r0, sp, #92	; 0x5c
 80a2cce:	f000 feef 	bl	80a3ab0 <__match>
 80a2cd2:	b360      	cbz	r0, 80a2d2e <_strtod_r+0x386>
 80a2cd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a2cd6:	49a8      	ldr	r1, [pc, #672]	; (80a2f78 <_strtod_r+0x5d0>)
 80a2cd8:	3b01      	subs	r3, #1
 80a2cda:	a817      	add	r0, sp, #92	; 0x5c
 80a2cdc:	9317      	str	r3, [sp, #92]	; 0x5c
 80a2cde:	f000 fee7 	bl	80a3ab0 <__match>
 80a2ce2:	b910      	cbnz	r0, 80a2cea <_strtod_r+0x342>
 80a2ce4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a2ce6:	3301      	adds	r3, #1
 80a2ce8:	9317      	str	r3, [sp, #92]	; 0x5c
 80a2cea:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80a2f94 <_strtod_r+0x5ec>
 80a2cee:	e01a      	b.n	80a2d26 <_strtod_r+0x37e>
 80a2cf0:	49a2      	ldr	r1, [pc, #648]	; (80a2f7c <_strtod_r+0x5d4>)
 80a2cf2:	a817      	add	r0, sp, #92	; 0x5c
 80a2cf4:	f000 fedc 	bl	80a3ab0 <__match>
 80a2cf8:	b1c8      	cbz	r0, 80a2d2e <_strtod_r+0x386>
 80a2cfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a2cfc:	781b      	ldrb	r3, [r3, #0]
 80a2cfe:	2b28      	cmp	r3, #40	; 0x28
 80a2d00:	d10f      	bne.n	80a2d22 <_strtod_r+0x37a>
 80a2d02:	aa1a      	add	r2, sp, #104	; 0x68
 80a2d04:	499e      	ldr	r1, [pc, #632]	; (80a2f80 <_strtod_r+0x5d8>)
 80a2d06:	a817      	add	r0, sp, #92	; 0x5c
 80a2d08:	f000 fee5 	bl	80a3ad6 <__hexnan>
 80a2d0c:	2805      	cmp	r0, #5
 80a2d0e:	d108      	bne.n	80a2d22 <_strtod_r+0x37a>
 80a2d10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a2d12:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a2d16:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a2d1a:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a2d1e:	f000 bc0c 	b.w	80a353a <_strtod_r+0xb92>
 80a2d22:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80a2f98 <_strtod_r+0x5f0>
 80a2d26:	f04f 0800 	mov.w	r8, #0
 80a2d2a:	f000 bc06 	b.w	80a353a <_strtod_r+0xb92>
 80a2d2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a2d30:	9417      	str	r4, [sp, #92]	; 0x5c
 80a2d32:	2b00      	cmp	r3, #0
 80a2d34:	f000 840c 	beq.w	80a3550 <_strtod_r+0xba8>
 80a2d38:	2300      	movs	r3, #0
 80a2d3a:	930c      	str	r3, [sp, #48]	; 0x30
 80a2d3c:	e3ff      	b.n	80a353e <_strtod_r+0xb96>
 80a2d3e:	462c      	mov	r4, r5
 80a2d40:	f1bb 0f00 	cmp.w	fp, #0
 80a2d44:	bf08      	it	eq
 80a2d46:	46ab      	moveq	fp, r5
 80a2d48:	9804      	ldr	r0, [sp, #16]
 80a2d4a:	2d10      	cmp	r5, #16
 80a2d4c:	bfa8      	it	ge
 80a2d4e:	2410      	movge	r4, #16
 80a2d50:	1ab7      	subs	r7, r6, r2
 80a2d52:	f7fe ff93 	bl	80a1c7c <__aeabi_ui2d>
 80a2d56:	2c09      	cmp	r4, #9
 80a2d58:	4680      	mov	r8, r0
 80a2d5a:	4689      	mov	r9, r1
 80a2d5c:	dd13      	ble.n	80a2d86 <_strtod_r+0x3de>
 80a2d5e:	4b89      	ldr	r3, [pc, #548]	; (80a2f84 <_strtod_r+0x5dc>)
 80a2d60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80a2d64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a2d68:	f7fe fffe 	bl	80a1d68 <__aeabi_dmul>
 80a2d6c:	4680      	mov	r8, r0
 80a2d6e:	9802      	ldr	r0, [sp, #8]
 80a2d70:	4689      	mov	r9, r1
 80a2d72:	f7fe ff83 	bl	80a1c7c <__aeabi_ui2d>
 80a2d76:	4602      	mov	r2, r0
 80a2d78:	460b      	mov	r3, r1
 80a2d7a:	4640      	mov	r0, r8
 80a2d7c:	4649      	mov	r1, r9
 80a2d7e:	f7fe fe41 	bl	80a1a04 <__adddf3>
 80a2d82:	4680      	mov	r8, r0
 80a2d84:	4689      	mov	r9, r1
 80a2d86:	2d0f      	cmp	r5, #15
 80a2d88:	dc33      	bgt.n	80a2df2 <_strtod_r+0x44a>
 80a2d8a:	2f00      	cmp	r7, #0
 80a2d8c:	f000 83d5 	beq.w	80a353a <_strtod_r+0xb92>
 80a2d90:	dd22      	ble.n	80a2dd8 <_strtod_r+0x430>
 80a2d92:	2f16      	cmp	r7, #22
 80a2d94:	dc07      	bgt.n	80a2da6 <_strtod_r+0x3fe>
 80a2d96:	4d7b      	ldr	r5, [pc, #492]	; (80a2f84 <_strtod_r+0x5dc>)
 80a2d98:	4642      	mov	r2, r8
 80a2d9a:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 80a2d9e:	464b      	mov	r3, r9
 80a2da0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a2da4:	e013      	b.n	80a2dce <_strtod_r+0x426>
 80a2da6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80a2daa:	429f      	cmp	r7, r3
 80a2dac:	dc21      	bgt.n	80a2df2 <_strtod_r+0x44a>
 80a2dae:	4c75      	ldr	r4, [pc, #468]	; (80a2f84 <_strtod_r+0x5dc>)
 80a2db0:	f1c5 050f 	rsb	r5, r5, #15
 80a2db4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80a2db8:	1b7d      	subs	r5, r7, r5
 80a2dba:	4642      	mov	r2, r8
 80a2dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a2dc0:	464b      	mov	r3, r9
 80a2dc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80a2dc6:	f7fe ffcf 	bl	80a1d68 <__aeabi_dmul>
 80a2dca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a2dce:	f7fe ffcb 	bl	80a1d68 <__aeabi_dmul>
 80a2dd2:	4680      	mov	r8, r0
 80a2dd4:	4689      	mov	r9, r1
 80a2dd6:	e3b0      	b.n	80a353a <_strtod_r+0xb92>
 80a2dd8:	f117 0f16 	cmn.w	r7, #22
 80a2ddc:	db09      	blt.n	80a2df2 <_strtod_r+0x44a>
 80a2dde:	4d69      	ldr	r5, [pc, #420]	; (80a2f84 <_strtod_r+0x5dc>)
 80a2de0:	4640      	mov	r0, r8
 80a2de2:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 80a2de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2dea:	4649      	mov	r1, r9
 80a2dec:	f7ff f8e6 	bl	80a1fbc <__aeabi_ddiv>
 80a2df0:	e7ef      	b.n	80a2dd2 <_strtod_r+0x42a>
 80a2df2:	1b2c      	subs	r4, r5, r4
 80a2df4:	443c      	add	r4, r7
 80a2df6:	2c00      	cmp	r4, #0
 80a2df8:	dd5d      	ble.n	80a2eb6 <_strtod_r+0x50e>
 80a2dfa:	f014 010f 	ands.w	r1, r4, #15
 80a2dfe:	d00a      	beq.n	80a2e16 <_strtod_r+0x46e>
 80a2e00:	4b60      	ldr	r3, [pc, #384]	; (80a2f84 <_strtod_r+0x5dc>)
 80a2e02:	4642      	mov	r2, r8
 80a2e04:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80a2e08:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a2e0c:	464b      	mov	r3, r9
 80a2e0e:	f7fe ffab 	bl	80a1d68 <__aeabi_dmul>
 80a2e12:	4680      	mov	r8, r0
 80a2e14:	4689      	mov	r9, r1
 80a2e16:	f034 040f 	bics.w	r4, r4, #15
 80a2e1a:	f000 80c1 	beq.w	80a2fa0 <_strtod_r+0x5f8>
 80a2e1e:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80a2e22:	dd0f      	ble.n	80a2e44 <_strtod_r+0x49c>
 80a2e24:	f04f 0b00 	mov.w	fp, #0
 80a2e28:	f8cd b008 	str.w	fp, [sp, #8]
 80a2e2c:	f8cd b014 	str.w	fp, [sp, #20]
 80a2e30:	f8cd b010 	str.w	fp, [sp, #16]
 80a2e34:	2322      	movs	r3, #34	; 0x22
 80a2e36:	f8ca 3000 	str.w	r3, [sl]
 80a2e3a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80a2f94 <_strtod_r+0x5ec>
 80a2e3e:	f04f 0800 	mov.w	r8, #0
 80a2e42:	e189      	b.n	80a3158 <_strtod_r+0x7b0>
 80a2e44:	4640      	mov	r0, r8
 80a2e46:	4649      	mov	r1, r9
 80a2e48:	2300      	movs	r3, #0
 80a2e4a:	4e4f      	ldr	r6, [pc, #316]	; (80a2f88 <_strtod_r+0x5e0>)
 80a2e4c:	1124      	asrs	r4, r4, #4
 80a2e4e:	9302      	str	r3, [sp, #8]
 80a2e50:	2c01      	cmp	r4, #1
 80a2e52:	dd0c      	ble.n	80a2e6e <_strtod_r+0x4c6>
 80a2e54:	07e2      	lsls	r2, r4, #31
 80a2e56:	d504      	bpl.n	80a2e62 <_strtod_r+0x4ba>
 80a2e58:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a2e5c:	f7fe ff84 	bl	80a1d68 <__aeabi_dmul>
 80a2e60:	2301      	movs	r3, #1
 80a2e62:	9a02      	ldr	r2, [sp, #8]
 80a2e64:	1064      	asrs	r4, r4, #1
 80a2e66:	3201      	adds	r2, #1
 80a2e68:	9202      	str	r2, [sp, #8]
 80a2e6a:	3608      	adds	r6, #8
 80a2e6c:	e7f0      	b.n	80a2e50 <_strtod_r+0x4a8>
 80a2e6e:	b10b      	cbz	r3, 80a2e74 <_strtod_r+0x4cc>
 80a2e70:	4680      	mov	r8, r0
 80a2e72:	4689      	mov	r9, r1
 80a2e74:	4b44      	ldr	r3, [pc, #272]	; (80a2f88 <_strtod_r+0x5e0>)
 80a2e76:	9a02      	ldr	r2, [sp, #8]
 80a2e78:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a2e7c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80a2e80:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a2e84:	4642      	mov	r2, r8
 80a2e86:	464b      	mov	r3, r9
 80a2e88:	f7fe ff6e 	bl	80a1d68 <__aeabi_dmul>
 80a2e8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a2e90:	4689      	mov	r9, r1
 80a2e92:	460a      	mov	r2, r1
 80a2e94:	0d1b      	lsrs	r3, r3, #20
 80a2e96:	493d      	ldr	r1, [pc, #244]	; (80a2f8c <_strtod_r+0x5e4>)
 80a2e98:	051b      	lsls	r3, r3, #20
 80a2e9a:	428b      	cmp	r3, r1
 80a2e9c:	4680      	mov	r8, r0
 80a2e9e:	d8c1      	bhi.n	80a2e24 <_strtod_r+0x47c>
 80a2ea0:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a2ea4:	428b      	cmp	r3, r1
 80a2ea6:	bf86      	itte	hi
 80a2ea8:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 80a2f9c <_strtod_r+0x5f4>
 80a2eac:	f04f 38ff 	movhi.w	r8, #4294967295
 80a2eb0:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a2eb4:	e074      	b.n	80a2fa0 <_strtod_r+0x5f8>
 80a2eb6:	d073      	beq.n	80a2fa0 <_strtod_r+0x5f8>
 80a2eb8:	4264      	negs	r4, r4
 80a2eba:	f014 020f 	ands.w	r2, r4, #15
 80a2ebe:	d00a      	beq.n	80a2ed6 <_strtod_r+0x52e>
 80a2ec0:	4b30      	ldr	r3, [pc, #192]	; (80a2f84 <_strtod_r+0x5dc>)
 80a2ec2:	4640      	mov	r0, r8
 80a2ec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a2ec8:	4649      	mov	r1, r9
 80a2eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2ece:	f7ff f875 	bl	80a1fbc <__aeabi_ddiv>
 80a2ed2:	4680      	mov	r8, r0
 80a2ed4:	4689      	mov	r9, r1
 80a2ed6:	1124      	asrs	r4, r4, #4
 80a2ed8:	d062      	beq.n	80a2fa0 <_strtod_r+0x5f8>
 80a2eda:	2c1f      	cmp	r4, #31
 80a2edc:	dd08      	ble.n	80a2ef0 <_strtod_r+0x548>
 80a2ede:	f04f 0b00 	mov.w	fp, #0
 80a2ee2:	f8cd b008 	str.w	fp, [sp, #8]
 80a2ee6:	f8cd b014 	str.w	fp, [sp, #20]
 80a2eea:	f8cd b010 	str.w	fp, [sp, #16]
 80a2eee:	e12c      	b.n	80a314a <_strtod_r+0x7a2>
 80a2ef0:	4640      	mov	r0, r8
 80a2ef2:	4649      	mov	r1, r9
 80a2ef4:	f014 0f10 	tst.w	r4, #16
 80a2ef8:	bf0c      	ite	eq
 80a2efa:	2300      	moveq	r3, #0
 80a2efc:	236a      	movne	r3, #106	; 0x6a
 80a2efe:	4e24      	ldr	r6, [pc, #144]	; (80a2f90 <_strtod_r+0x5e8>)
 80a2f00:	9303      	str	r3, [sp, #12]
 80a2f02:	2300      	movs	r3, #0
 80a2f04:	2c00      	cmp	r4, #0
 80a2f06:	dd09      	ble.n	80a2f1c <_strtod_r+0x574>
 80a2f08:	07e2      	lsls	r2, r4, #31
 80a2f0a:	d504      	bpl.n	80a2f16 <_strtod_r+0x56e>
 80a2f0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a2f10:	f7fe ff2a 	bl	80a1d68 <__aeabi_dmul>
 80a2f14:	2301      	movs	r3, #1
 80a2f16:	1064      	asrs	r4, r4, #1
 80a2f18:	3608      	adds	r6, #8
 80a2f1a:	e7f3      	b.n	80a2f04 <_strtod_r+0x55c>
 80a2f1c:	b10b      	cbz	r3, 80a2f22 <_strtod_r+0x57a>
 80a2f1e:	4680      	mov	r8, r0
 80a2f20:	4689      	mov	r9, r1
 80a2f22:	9b03      	ldr	r3, [sp, #12]
 80a2f24:	b1eb      	cbz	r3, 80a2f62 <_strtod_r+0x5ba>
 80a2f26:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80a2f2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a2f2e:	2b00      	cmp	r3, #0
 80a2f30:	4649      	mov	r1, r9
 80a2f32:	dd16      	ble.n	80a2f62 <_strtod_r+0x5ba>
 80a2f34:	2b1f      	cmp	r3, #31
 80a2f36:	dd0e      	ble.n	80a2f56 <_strtod_r+0x5ae>
 80a2f38:	2b34      	cmp	r3, #52	; 0x34
 80a2f3a:	bfde      	ittt	le
 80a2f3c:	3b20      	suble	r3, #32
 80a2f3e:	f04f 32ff 	movle.w	r2, #4294967295
 80a2f42:	fa02 f303 	lslle.w	r3, r2, r3
 80a2f46:	f04f 0800 	mov.w	r8, #0
 80a2f4a:	bfcc      	ite	gt
 80a2f4c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a2f50:	ea03 0901 	andle.w	r9, r3, r1
 80a2f54:	e005      	b.n	80a2f62 <_strtod_r+0x5ba>
 80a2f56:	f04f 32ff 	mov.w	r2, #4294967295
 80a2f5a:	fa02 f303 	lsl.w	r3, r2, r3
 80a2f5e:	ea03 0808 	and.w	r8, r3, r8
 80a2f62:	2200      	movs	r2, #0
 80a2f64:	2300      	movs	r3, #0
 80a2f66:	4640      	mov	r0, r8
 80a2f68:	4649      	mov	r1, r9
 80a2f6a:	f7ff f965 	bl	80a2238 <__aeabi_dcmpeq>
 80a2f6e:	2800      	cmp	r0, #0
 80a2f70:	d1b5      	bne.n	80a2ede <_strtod_r+0x536>
 80a2f72:	e017      	b.n	80a2fa4 <_strtod_r+0x5fc>
 80a2f74:	080a46d8 	.word	0x080a46d8
 80a2f78:	080a46db 	.word	0x080a46db
 80a2f7c:	080a46e1 	.word	0x080a46e1
 80a2f80:	080a46e4 	.word	0x080a46e4
 80a2f84:	080a4720 	.word	0x080a4720
 80a2f88:	080a47e8 	.word	0x080a47e8
 80a2f8c:	7ca00000 	.word	0x7ca00000
 80a2f90:	080a46f8 	.word	0x080a46f8
 80a2f94:	7ff00000 	.word	0x7ff00000
 80a2f98:	fff80000 	.word	0xfff80000
 80a2f9c:	7fefffff 	.word	0x7fefffff
 80a2fa0:	2300      	movs	r3, #0
 80a2fa2:	9303      	str	r3, [sp, #12]
 80a2fa4:	9b04      	ldr	r3, [sp, #16]
 80a2fa6:	465a      	mov	r2, fp
 80a2fa8:	9300      	str	r3, [sp, #0]
 80a2faa:	9906      	ldr	r1, [sp, #24]
 80a2fac:	462b      	mov	r3, r5
 80a2fae:	4650      	mov	r0, sl
 80a2fb0:	f000 fea6 	bl	80a3d00 <__s2b>
 80a2fb4:	9005      	str	r0, [sp, #20]
 80a2fb6:	2800      	cmp	r0, #0
 80a2fb8:	f43f af34 	beq.w	80a2e24 <_strtod_r+0x47c>
 80a2fbc:	2f00      	cmp	r7, #0
 80a2fbe:	f1c7 0300 	rsb	r3, r7, #0
 80a2fc2:	bfa8      	it	ge
 80a2fc4:	2300      	movge	r3, #0
 80a2fc6:	930d      	str	r3, [sp, #52]	; 0x34
 80a2fc8:	f04f 0b00 	mov.w	fp, #0
 80a2fcc:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 80a2fd0:	9312      	str	r3, [sp, #72]	; 0x48
 80a2fd2:	f8cd b008 	str.w	fp, [sp, #8]
 80a2fd6:	9b05      	ldr	r3, [sp, #20]
 80a2fd8:	4650      	mov	r0, sl
 80a2fda:	6859      	ldr	r1, [r3, #4]
 80a2fdc:	f000 fe09 	bl	80a3bf2 <_Balloc>
 80a2fe0:	9004      	str	r0, [sp, #16]
 80a2fe2:	2800      	cmp	r0, #0
 80a2fe4:	f43f af26 	beq.w	80a2e34 <_strtod_r+0x48c>
 80a2fe8:	9b05      	ldr	r3, [sp, #20]
 80a2fea:	300c      	adds	r0, #12
 80a2fec:	691a      	ldr	r2, [r3, #16]
 80a2fee:	f103 010c 	add.w	r1, r3, #12
 80a2ff2:	3202      	adds	r2, #2
 80a2ff4:	0092      	lsls	r2, r2, #2
 80a2ff6:	f7ff fc5d 	bl	80a28b4 <memcpy>
 80a2ffa:	ab1a      	add	r3, sp, #104	; 0x68
 80a2ffc:	9301      	str	r3, [sp, #4]
 80a2ffe:	ab19      	add	r3, sp, #100	; 0x64
 80a3000:	9300      	str	r3, [sp, #0]
 80a3002:	4642      	mov	r2, r8
 80a3004:	464b      	mov	r3, r9
 80a3006:	4650      	mov	r0, sl
 80a3008:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a300c:	f001 f927 	bl	80a425e <__d2b>
 80a3010:	9018      	str	r0, [sp, #96]	; 0x60
 80a3012:	2800      	cmp	r0, #0
 80a3014:	f43f af0e 	beq.w	80a2e34 <_strtod_r+0x48c>
 80a3018:	2101      	movs	r1, #1
 80a301a:	4650      	mov	r0, sl
 80a301c:	f000 fefb 	bl	80a3e16 <__i2b>
 80a3020:	9002      	str	r0, [sp, #8]
 80a3022:	2800      	cmp	r0, #0
 80a3024:	f43f af06 	beq.w	80a2e34 <_strtod_r+0x48c>
 80a3028:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a302a:	9903      	ldr	r1, [sp, #12]
 80a302c:	2b00      	cmp	r3, #0
 80a302e:	bfac      	ite	ge
 80a3030:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80a3032:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80a3034:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80a3036:	bfac      	ite	ge
 80a3038:	18d6      	addge	r6, r2, r3
 80a303a:	1ad2      	sublt	r2, r2, r3
 80a303c:	eba3 0301 	sub.w	r3, r3, r1
 80a3040:	4423      	add	r3, r4
 80a3042:	49b1      	ldr	r1, [pc, #708]	; (80a3308 <_strtod_r+0x960>)
 80a3044:	f103 33ff 	add.w	r3, r3, #4294967295
 80a3048:	bfac      	ite	ge
 80a304a:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80a304c:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 80a304e:	428b      	cmp	r3, r1
 80a3050:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 80a3054:	f280 8085 	bge.w	80a3162 <_strtod_r+0x7ba>
 80a3058:	1ac9      	subs	r1, r1, r3
 80a305a:	291f      	cmp	r1, #31
 80a305c:	bfc8      	it	gt
 80a305e:	4dab      	ldrgt	r5, [pc, #684]	; (80a330c <_strtod_r+0x964>)
 80a3060:	f04f 0701 	mov.w	r7, #1
 80a3064:	bfd4      	ite	le
 80a3066:	fa07 f301 	lslle.w	r3, r7, r1
 80a306a:	1aed      	subgt	r5, r5, r3
 80a306c:	eba4 0401 	sub.w	r4, r4, r1
 80a3070:	bfd9      	ittee	le
 80a3072:	9307      	strle	r3, [sp, #28]
 80a3074:	2500      	movle	r5, #0
 80a3076:	fa07 f505 	lslgt.w	r5, r7, r5
 80a307a:	9707      	strgt	r7, [sp, #28]
 80a307c:	1937      	adds	r7, r6, r4
 80a307e:	9b03      	ldr	r3, [sp, #12]
 80a3080:	42be      	cmp	r6, r7
 80a3082:	4414      	add	r4, r2
 80a3084:	441c      	add	r4, r3
 80a3086:	4633      	mov	r3, r6
 80a3088:	bfa8      	it	ge
 80a308a:	463b      	movge	r3, r7
 80a308c:	42a3      	cmp	r3, r4
 80a308e:	bfa8      	it	ge
 80a3090:	4623      	movge	r3, r4
 80a3092:	2b00      	cmp	r3, #0
 80a3094:	bfc2      	ittt	gt
 80a3096:	1aff      	subgt	r7, r7, r3
 80a3098:	1ae4      	subgt	r4, r4, r3
 80a309a:	1af6      	subgt	r6, r6, r3
 80a309c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a309e:	2b00      	cmp	r3, #0
 80a30a0:	d163      	bne.n	80a316a <_strtod_r+0x7c2>
 80a30a2:	2f00      	cmp	r7, #0
 80a30a4:	dc7a      	bgt.n	80a319c <_strtod_r+0x7f4>
 80a30a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a30a8:	2b00      	cmp	r3, #0
 80a30aa:	f040 8081 	bne.w	80a31b0 <_strtod_r+0x808>
 80a30ae:	2c00      	cmp	r4, #0
 80a30b0:	f300 8088 	bgt.w	80a31c4 <_strtod_r+0x81c>
 80a30b4:	2e00      	cmp	r6, #0
 80a30b6:	f300 808f 	bgt.w	80a31d8 <_strtod_r+0x830>
 80a30ba:	9a04      	ldr	r2, [sp, #16]
 80a30bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a30be:	4650      	mov	r0, sl
 80a30c0:	f000 fffd 	bl	80a40be <__mdiff>
 80a30c4:	4683      	mov	fp, r0
 80a30c6:	2800      	cmp	r0, #0
 80a30c8:	f43f aeb4 	beq.w	80a2e34 <_strtod_r+0x48c>
 80a30cc:	68c3      	ldr	r3, [r0, #12]
 80a30ce:	2400      	movs	r4, #0
 80a30d0:	60c4      	str	r4, [r0, #12]
 80a30d2:	9902      	ldr	r1, [sp, #8]
 80a30d4:	9306      	str	r3, [sp, #24]
 80a30d6:	f000 ffd6 	bl	80a4086 <__mcmp>
 80a30da:	42a0      	cmp	r0, r4
 80a30dc:	f280 808b 	bge.w	80a31f6 <_strtod_r+0x84e>
 80a30e0:	9b06      	ldr	r3, [sp, #24]
 80a30e2:	2b00      	cmp	r3, #0
 80a30e4:	f040 8202 	bne.w	80a34ec <_strtod_r+0xb44>
 80a30e8:	f1b8 0f00 	cmp.w	r8, #0
 80a30ec:	f040 81fe 	bne.w	80a34ec <_strtod_r+0xb44>
 80a30f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a30f4:	2b00      	cmp	r3, #0
 80a30f6:	f040 81f9 	bne.w	80a34ec <_strtod_r+0xb44>
 80a30fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a30fe:	0d1b      	lsrs	r3, r3, #20
 80a3100:	051b      	lsls	r3, r3, #20
 80a3102:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a3106:	f240 81f1 	bls.w	80a34ec <_strtod_r+0xb44>
 80a310a:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a310e:	2b00      	cmp	r3, #0
 80a3110:	d06c      	beq.n	80a31ec <_strtod_r+0x844>
 80a3112:	4659      	mov	r1, fp
 80a3114:	2201      	movs	r2, #1
 80a3116:	4650      	mov	r0, sl
 80a3118:	f000 ff64 	bl	80a3fe4 <__lshift>
 80a311c:	9902      	ldr	r1, [sp, #8]
 80a311e:	4683      	mov	fp, r0
 80a3120:	f000 ffb1 	bl	80a4086 <__mcmp>
 80a3124:	2800      	cmp	r0, #0
 80a3126:	f340 81e1 	ble.w	80a34ec <_strtod_r+0xb44>
 80a312a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a312e:	9a03      	ldr	r2, [sp, #12]
 80a3130:	0d1b      	lsrs	r3, r3, #20
 80a3132:	051b      	lsls	r3, r3, #20
 80a3134:	2a00      	cmp	r2, #0
 80a3136:	f000 808d 	beq.w	80a3254 <_strtod_r+0x8ac>
 80a313a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a313e:	f300 8089 	bgt.w	80a3254 <_strtod_r+0x8ac>
 80a3142:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80a3146:	f300 81d3 	bgt.w	80a34f0 <_strtod_r+0xb48>
 80a314a:	2322      	movs	r3, #34	; 0x22
 80a314c:	f04f 0800 	mov.w	r8, #0
 80a3150:	f04f 0900 	mov.w	r9, #0
 80a3154:	f8ca 3000 	str.w	r3, [sl]
 80a3158:	9b05      	ldr	r3, [sp, #20]
 80a315a:	2b00      	cmp	r3, #0
 80a315c:	f040 81d9 	bne.w	80a3512 <_strtod_r+0xb6a>
 80a3160:	e1eb      	b.n	80a353a <_strtod_r+0xb92>
 80a3162:	2301      	movs	r3, #1
 80a3164:	2500      	movs	r5, #0
 80a3166:	9307      	str	r3, [sp, #28]
 80a3168:	e788      	b.n	80a307c <_strtod_r+0x6d4>
 80a316a:	461a      	mov	r2, r3
 80a316c:	9902      	ldr	r1, [sp, #8]
 80a316e:	4650      	mov	r0, sl
 80a3170:	f000 feea 	bl	80a3f48 <__pow5mult>
 80a3174:	9002      	str	r0, [sp, #8]
 80a3176:	2800      	cmp	r0, #0
 80a3178:	f43f ae5c 	beq.w	80a2e34 <_strtod_r+0x48c>
 80a317c:	4601      	mov	r1, r0
 80a317e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a3180:	4650      	mov	r0, sl
 80a3182:	f000 fe51 	bl	80a3e28 <__multiply>
 80a3186:	9006      	str	r0, [sp, #24]
 80a3188:	2800      	cmp	r0, #0
 80a318a:	f43f ae53 	beq.w	80a2e34 <_strtod_r+0x48c>
 80a318e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a3190:	4650      	mov	r0, sl
 80a3192:	f000 fd63 	bl	80a3c5c <_Bfree>
 80a3196:	9b06      	ldr	r3, [sp, #24]
 80a3198:	9318      	str	r3, [sp, #96]	; 0x60
 80a319a:	e782      	b.n	80a30a2 <_strtod_r+0x6fa>
 80a319c:	463a      	mov	r2, r7
 80a319e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a31a0:	4650      	mov	r0, sl
 80a31a2:	f000 ff1f 	bl	80a3fe4 <__lshift>
 80a31a6:	9018      	str	r0, [sp, #96]	; 0x60
 80a31a8:	2800      	cmp	r0, #0
 80a31aa:	f47f af7c 	bne.w	80a30a6 <_strtod_r+0x6fe>
 80a31ae:	e641      	b.n	80a2e34 <_strtod_r+0x48c>
 80a31b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80a31b2:	9904      	ldr	r1, [sp, #16]
 80a31b4:	4650      	mov	r0, sl
 80a31b6:	f000 fec7 	bl	80a3f48 <__pow5mult>
 80a31ba:	9004      	str	r0, [sp, #16]
 80a31bc:	2800      	cmp	r0, #0
 80a31be:	f47f af76 	bne.w	80a30ae <_strtod_r+0x706>
 80a31c2:	e637      	b.n	80a2e34 <_strtod_r+0x48c>
 80a31c4:	4622      	mov	r2, r4
 80a31c6:	9904      	ldr	r1, [sp, #16]
 80a31c8:	4650      	mov	r0, sl
 80a31ca:	f000 ff0b 	bl	80a3fe4 <__lshift>
 80a31ce:	9004      	str	r0, [sp, #16]
 80a31d0:	2800      	cmp	r0, #0
 80a31d2:	f47f af6f 	bne.w	80a30b4 <_strtod_r+0x70c>
 80a31d6:	e62d      	b.n	80a2e34 <_strtod_r+0x48c>
 80a31d8:	4632      	mov	r2, r6
 80a31da:	9902      	ldr	r1, [sp, #8]
 80a31dc:	4650      	mov	r0, sl
 80a31de:	f000 ff01 	bl	80a3fe4 <__lshift>
 80a31e2:	9002      	str	r0, [sp, #8]
 80a31e4:	2800      	cmp	r0, #0
 80a31e6:	f47f af68 	bne.w	80a30ba <_strtod_r+0x712>
 80a31ea:	e623      	b.n	80a2e34 <_strtod_r+0x48c>
 80a31ec:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a31f0:	2b01      	cmp	r3, #1
 80a31f2:	dc8e      	bgt.n	80a3112 <_strtod_r+0x76a>
 80a31f4:	e17a      	b.n	80a34ec <_strtod_r+0xb44>
 80a31f6:	d161      	bne.n	80a32bc <_strtod_r+0x914>
 80a31f8:	9a06      	ldr	r2, [sp, #24]
 80a31fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a31fe:	b322      	cbz	r2, 80a324a <_strtod_r+0x8a2>
 80a3200:	4943      	ldr	r1, [pc, #268]	; (80a3310 <_strtod_r+0x968>)
 80a3202:	464a      	mov	r2, r9
 80a3204:	428b      	cmp	r3, r1
 80a3206:	d12e      	bne.n	80a3266 <_strtod_r+0x8be>
 80a3208:	9b03      	ldr	r3, [sp, #12]
 80a320a:	4641      	mov	r1, r8
 80a320c:	b163      	cbz	r3, 80a3228 <_strtod_r+0x880>
 80a320e:	4b41      	ldr	r3, [pc, #260]	; (80a3314 <_strtod_r+0x96c>)
 80a3210:	4013      	ands	r3, r2
 80a3212:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a3216:	d807      	bhi.n	80a3228 <_strtod_r+0x880>
 80a3218:	0d1b      	lsrs	r3, r3, #20
 80a321a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a321e:	f04f 30ff 	mov.w	r0, #4294967295
 80a3222:	fa00 f303 	lsl.w	r3, r0, r3
 80a3226:	e001      	b.n	80a322c <_strtod_r+0x884>
 80a3228:	f04f 33ff 	mov.w	r3, #4294967295
 80a322c:	428b      	cmp	r3, r1
 80a322e:	d11a      	bne.n	80a3266 <_strtod_r+0x8be>
 80a3230:	4939      	ldr	r1, [pc, #228]	; (80a3318 <_strtod_r+0x970>)
 80a3232:	428a      	cmp	r2, r1
 80a3234:	d102      	bne.n	80a323c <_strtod_r+0x894>
 80a3236:	3301      	adds	r3, #1
 80a3238:	f43f adfc 	beq.w	80a2e34 <_strtod_r+0x48c>
 80a323c:	4b35      	ldr	r3, [pc, #212]	; (80a3314 <_strtod_r+0x96c>)
 80a323e:	f04f 0800 	mov.w	r8, #0
 80a3242:	4013      	ands	r3, r2
 80a3244:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80a3248:	e150      	b.n	80a34ec <_strtod_r+0xb44>
 80a324a:	b963      	cbnz	r3, 80a3266 <_strtod_r+0x8be>
 80a324c:	f1b8 0f00 	cmp.w	r8, #0
 80a3250:	d109      	bne.n	80a3266 <_strtod_r+0x8be>
 80a3252:	e76a      	b.n	80a312a <_strtod_r+0x782>
 80a3254:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a3258:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a325c:	f04f 38ff 	mov.w	r8, #4294967295
 80a3260:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a3264:	e142      	b.n	80a34ec <_strtod_r+0xb44>
 80a3266:	b115      	cbz	r5, 80a326e <_strtod_r+0x8c6>
 80a3268:	ea15 0f09 	tst.w	r5, r9
 80a326c:	e002      	b.n	80a3274 <_strtod_r+0x8cc>
 80a326e:	9b07      	ldr	r3, [sp, #28]
 80a3270:	ea13 0f08 	tst.w	r3, r8
 80a3274:	f000 813a 	beq.w	80a34ec <_strtod_r+0xb44>
 80a3278:	9b06      	ldr	r3, [sp, #24]
 80a327a:	9a03      	ldr	r2, [sp, #12]
 80a327c:	4640      	mov	r0, r8
 80a327e:	4649      	mov	r1, r9
 80a3280:	b153      	cbz	r3, 80a3298 <_strtod_r+0x8f0>
 80a3282:	f7ff fb70 	bl	80a2966 <sulp>
 80a3286:	4602      	mov	r2, r0
 80a3288:	460b      	mov	r3, r1
 80a328a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a328e:	f7fe fbb9 	bl	80a1a04 <__adddf3>
 80a3292:	4680      	mov	r8, r0
 80a3294:	4689      	mov	r9, r1
 80a3296:	e129      	b.n	80a34ec <_strtod_r+0xb44>
 80a3298:	f7ff fb65 	bl	80a2966 <sulp>
 80a329c:	4602      	mov	r2, r0
 80a329e:	460b      	mov	r3, r1
 80a32a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a32a4:	f7fe fbac 	bl	80a1a00 <__aeabi_dsub>
 80a32a8:	2200      	movs	r2, #0
 80a32aa:	2300      	movs	r3, #0
 80a32ac:	4680      	mov	r8, r0
 80a32ae:	4689      	mov	r9, r1
 80a32b0:	f7fe ffc2 	bl	80a2238 <__aeabi_dcmpeq>
 80a32b4:	2800      	cmp	r0, #0
 80a32b6:	f47f af48 	bne.w	80a314a <_strtod_r+0x7a2>
 80a32ba:	e117      	b.n	80a34ec <_strtod_r+0xb44>
 80a32bc:	9902      	ldr	r1, [sp, #8]
 80a32be:	4658      	mov	r0, fp
 80a32c0:	f001 f81b 	bl	80a42fa <__ratio>
 80a32c4:	2200      	movs	r2, #0
 80a32c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a32ca:	4606      	mov	r6, r0
 80a32cc:	460f      	mov	r7, r1
 80a32ce:	f7fe ffc7 	bl	80a2260 <__aeabi_dcmple>
 80a32d2:	2800      	cmp	r0, #0
 80a32d4:	d03f      	beq.n	80a3356 <_strtod_r+0x9ae>
 80a32d6:	9b06      	ldr	r3, [sp, #24]
 80a32d8:	b113      	cbz	r3, 80a32e0 <_strtod_r+0x938>
 80a32da:	2600      	movs	r6, #0
 80a32dc:	4f0f      	ldr	r7, [pc, #60]	; (80a331c <_strtod_r+0x974>)
 80a32de:	e010      	b.n	80a3302 <_strtod_r+0x95a>
 80a32e0:	f1b8 0f00 	cmp.w	r8, #0
 80a32e4:	d103      	bne.n	80a32ee <_strtod_r+0x946>
 80a32e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a32ea:	b93b      	cbnz	r3, 80a32fc <_strtod_r+0x954>
 80a32ec:	e01a      	b.n	80a3324 <_strtod_r+0x97c>
 80a32ee:	f1b8 0f01 	cmp.w	r8, #1
 80a32f2:	d103      	bne.n	80a32fc <_strtod_r+0x954>
 80a32f4:	f1b9 0f00 	cmp.w	r9, #0
 80a32f8:	f43f af27 	beq.w	80a314a <_strtod_r+0x7a2>
 80a32fc:	4f08      	ldr	r7, [pc, #32]	; (80a3320 <_strtod_r+0x978>)
 80a32fe:	2600      	movs	r6, #0
 80a3300:	2400      	movs	r4, #0
 80a3302:	4d06      	ldr	r5, [pc, #24]	; (80a331c <_strtod_r+0x974>)
 80a3304:	e03c      	b.n	80a3380 <_strtod_r+0x9d8>
 80a3306:	bf00      	nop
 80a3308:	fffffc02 	.word	0xfffffc02
 80a330c:	fffffbe2 	.word	0xfffffbe2
 80a3310:	000fffff 	.word	0x000fffff
 80a3314:	7ff00000 	.word	0x7ff00000
 80a3318:	7fefffff 	.word	0x7fefffff
 80a331c:	3ff00000 	.word	0x3ff00000
 80a3320:	bff00000 	.word	0xbff00000
 80a3324:	2200      	movs	r2, #0
 80a3326:	4b9a      	ldr	r3, [pc, #616]	; (80a3590 <_strtod_r+0xbe8>)
 80a3328:	4630      	mov	r0, r6
 80a332a:	4639      	mov	r1, r7
 80a332c:	f7fe ff8e 	bl	80a224c <__aeabi_dcmplt>
 80a3330:	b940      	cbnz	r0, 80a3344 <_strtod_r+0x99c>
 80a3332:	2200      	movs	r2, #0
 80a3334:	4b97      	ldr	r3, [pc, #604]	; (80a3594 <_strtod_r+0xbec>)
 80a3336:	4630      	mov	r0, r6
 80a3338:	4639      	mov	r1, r7
 80a333a:	f7fe fd15 	bl	80a1d68 <__aeabi_dmul>
 80a333e:	4604      	mov	r4, r0
 80a3340:	460d      	mov	r5, r1
 80a3342:	e001      	b.n	80a3348 <_strtod_r+0x9a0>
 80a3344:	9c06      	ldr	r4, [sp, #24]
 80a3346:	4d93      	ldr	r5, [pc, #588]	; (80a3594 <_strtod_r+0xbec>)
 80a3348:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a334c:	9414      	str	r4, [sp, #80]	; 0x50
 80a334e:	9315      	str	r3, [sp, #84]	; 0x54
 80a3350:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80a3354:	e014      	b.n	80a3380 <_strtod_r+0x9d8>
 80a3356:	4b8f      	ldr	r3, [pc, #572]	; (80a3594 <_strtod_r+0xbec>)
 80a3358:	2200      	movs	r2, #0
 80a335a:	4630      	mov	r0, r6
 80a335c:	4639      	mov	r1, r7
 80a335e:	f7fe fd03 	bl	80a1d68 <__aeabi_dmul>
 80a3362:	9b06      	ldr	r3, [sp, #24]
 80a3364:	4604      	mov	r4, r0
 80a3366:	460d      	mov	r5, r1
 80a3368:	b923      	cbnz	r3, 80a3374 <_strtod_r+0x9cc>
 80a336a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a336e:	900e      	str	r0, [sp, #56]	; 0x38
 80a3370:	930f      	str	r3, [sp, #60]	; 0x3c
 80a3372:	e003      	b.n	80a337c <_strtod_r+0x9d4>
 80a3374:	4602      	mov	r2, r0
 80a3376:	460b      	mov	r3, r1
 80a3378:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80a337c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80a3380:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a3384:	0d1b      	lsrs	r3, r3, #20
 80a3386:	051b      	lsls	r3, r3, #20
 80a3388:	9307      	str	r3, [sp, #28]
 80a338a:	9a07      	ldr	r2, [sp, #28]
 80a338c:	4b82      	ldr	r3, [pc, #520]	; (80a3598 <_strtod_r+0xbf0>)
 80a338e:	429a      	cmp	r2, r3
 80a3390:	d12b      	bne.n	80a33ea <_strtod_r+0xa42>
 80a3392:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3396:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a339a:	4640      	mov	r0, r8
 80a339c:	4649      	mov	r1, r9
 80a339e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a33a2:	f000 feeb 	bl	80a417c <__ulp>
 80a33a6:	4602      	mov	r2, r0
 80a33a8:	460b      	mov	r3, r1
 80a33aa:	4630      	mov	r0, r6
 80a33ac:	4639      	mov	r1, r7
 80a33ae:	f7fe fcdb 	bl	80a1d68 <__aeabi_dmul>
 80a33b2:	4642      	mov	r2, r8
 80a33b4:	464b      	mov	r3, r9
 80a33b6:	f7fe fb25 	bl	80a1a04 <__adddf3>
 80a33ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a33be:	0d1b      	lsrs	r3, r3, #20
 80a33c0:	4a76      	ldr	r2, [pc, #472]	; (80a359c <_strtod_r+0xbf4>)
 80a33c2:	051b      	lsls	r3, r3, #20
 80a33c4:	4293      	cmp	r3, r2
 80a33c6:	4680      	mov	r8, r0
 80a33c8:	d90c      	bls.n	80a33e4 <_strtod_r+0xa3c>
 80a33ca:	4b75      	ldr	r3, [pc, #468]	; (80a35a0 <_strtod_r+0xbf8>)
 80a33cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a33ce:	429a      	cmp	r2, r3
 80a33d0:	d103      	bne.n	80a33da <_strtod_r+0xa32>
 80a33d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a33d4:	3301      	adds	r3, #1
 80a33d6:	f43f ad2d 	beq.w	80a2e34 <_strtod_r+0x48c>
 80a33da:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80a35a0 <_strtod_r+0xbf8>
 80a33de:	f04f 38ff 	mov.w	r8, #4294967295
 80a33e2:	e072      	b.n	80a34ca <_strtod_r+0xb22>
 80a33e4:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80a33e8:	e039      	b.n	80a345e <_strtod_r+0xab6>
 80a33ea:	9b03      	ldr	r3, [sp, #12]
 80a33ec:	b33b      	cbz	r3, 80a343e <_strtod_r+0xa96>
 80a33ee:	9b07      	ldr	r3, [sp, #28]
 80a33f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a33f4:	d823      	bhi.n	80a343e <_strtod_r+0xa96>
 80a33f6:	a35e      	add	r3, pc, #376	; (adr r3, 80a3570 <_strtod_r+0xbc8>)
 80a33f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a33fc:	4620      	mov	r0, r4
 80a33fe:	4629      	mov	r1, r5
 80a3400:	f7fe ff2e 	bl	80a2260 <__aeabi_dcmple>
 80a3404:	b1b8      	cbz	r0, 80a3436 <_strtod_r+0xa8e>
 80a3406:	4629      	mov	r1, r5
 80a3408:	4620      	mov	r0, r4
 80a340a:	f7fe ff6f 	bl	80a22ec <__aeabi_d2uiz>
 80a340e:	2800      	cmp	r0, #0
 80a3410:	bf08      	it	eq
 80a3412:	2001      	moveq	r0, #1
 80a3414:	f7fe fc32 	bl	80a1c7c <__aeabi_ui2d>
 80a3418:	9b06      	ldr	r3, [sp, #24]
 80a341a:	4604      	mov	r4, r0
 80a341c:	460d      	mov	r5, r1
 80a341e:	b923      	cbnz	r3, 80a342a <_strtod_r+0xa82>
 80a3420:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a3424:	9010      	str	r0, [sp, #64]	; 0x40
 80a3426:	9311      	str	r3, [sp, #68]	; 0x44
 80a3428:	e003      	b.n	80a3432 <_strtod_r+0xa8a>
 80a342a:	4602      	mov	r2, r0
 80a342c:	460b      	mov	r3, r1
 80a342e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a3432:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a3436:	9a07      	ldr	r2, [sp, #28]
 80a3438:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a343c:	1a9f      	subs	r7, r3, r2
 80a343e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a3442:	f000 fe9b 	bl	80a417c <__ulp>
 80a3446:	4602      	mov	r2, r0
 80a3448:	460b      	mov	r3, r1
 80a344a:	4630      	mov	r0, r6
 80a344c:	4639      	mov	r1, r7
 80a344e:	f7fe fc8b 	bl	80a1d68 <__aeabi_dmul>
 80a3452:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a3456:	f7fe fad5 	bl	80a1a04 <__adddf3>
 80a345a:	4680      	mov	r8, r0
 80a345c:	4689      	mov	r9, r1
 80a345e:	9b03      	ldr	r3, [sp, #12]
 80a3460:	bb9b      	cbnz	r3, 80a34ca <_strtod_r+0xb22>
 80a3462:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a3466:	0d1b      	lsrs	r3, r3, #20
 80a3468:	9a07      	ldr	r2, [sp, #28]
 80a346a:	051b      	lsls	r3, r3, #20
 80a346c:	429a      	cmp	r2, r3
 80a346e:	464e      	mov	r6, r9
 80a3470:	d12b      	bne.n	80a34ca <_strtod_r+0xb22>
 80a3472:	4629      	mov	r1, r5
 80a3474:	4620      	mov	r0, r4
 80a3476:	f7fe ff11 	bl	80a229c <__aeabi_d2iz>
 80a347a:	f7fe fc0f 	bl	80a1c9c <__aeabi_i2d>
 80a347e:	460b      	mov	r3, r1
 80a3480:	4602      	mov	r2, r0
 80a3482:	4629      	mov	r1, r5
 80a3484:	4620      	mov	r0, r4
 80a3486:	f7fe fabb 	bl	80a1a00 <__aeabi_dsub>
 80a348a:	9b06      	ldr	r3, [sp, #24]
 80a348c:	4604      	mov	r4, r0
 80a348e:	460d      	mov	r5, r1
 80a3490:	b92b      	cbnz	r3, 80a349e <_strtod_r+0xaf6>
 80a3492:	f1b8 0f00 	cmp.w	r8, #0
 80a3496:	d102      	bne.n	80a349e <_strtod_r+0xaf6>
 80a3498:	f3c9 0613 	ubfx	r6, r9, #0, #20
 80a349c:	b17e      	cbz	r6, 80a34be <_strtod_r+0xb16>
 80a349e:	a336      	add	r3, pc, #216	; (adr r3, 80a3578 <_strtod_r+0xbd0>)
 80a34a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a34a4:	4620      	mov	r0, r4
 80a34a6:	4629      	mov	r1, r5
 80a34a8:	f7fe fed0 	bl	80a224c <__aeabi_dcmplt>
 80a34ac:	bb88      	cbnz	r0, 80a3512 <_strtod_r+0xb6a>
 80a34ae:	a334      	add	r3, pc, #208	; (adr r3, 80a3580 <_strtod_r+0xbd8>)
 80a34b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a34b4:	4620      	mov	r0, r4
 80a34b6:	4629      	mov	r1, r5
 80a34b8:	f7fe fee6 	bl	80a2288 <__aeabi_dcmpgt>
 80a34bc:	e004      	b.n	80a34c8 <_strtod_r+0xb20>
 80a34be:	a332      	add	r3, pc, #200	; (adr r3, 80a3588 <_strtod_r+0xbe0>)
 80a34c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a34c4:	f7fe fec2 	bl	80a224c <__aeabi_dcmplt>
 80a34c8:	bb18      	cbnz	r0, 80a3512 <_strtod_r+0xb6a>
 80a34ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a34cc:	4650      	mov	r0, sl
 80a34ce:	f000 fbc5 	bl	80a3c5c <_Bfree>
 80a34d2:	9904      	ldr	r1, [sp, #16]
 80a34d4:	4650      	mov	r0, sl
 80a34d6:	f000 fbc1 	bl	80a3c5c <_Bfree>
 80a34da:	9902      	ldr	r1, [sp, #8]
 80a34dc:	4650      	mov	r0, sl
 80a34de:	f000 fbbd 	bl	80a3c5c <_Bfree>
 80a34e2:	4659      	mov	r1, fp
 80a34e4:	4650      	mov	r0, sl
 80a34e6:	f000 fbb9 	bl	80a3c5c <_Bfree>
 80a34ea:	e574      	b.n	80a2fd6 <_strtod_r+0x62e>
 80a34ec:	9b03      	ldr	r3, [sp, #12]
 80a34ee:	b183      	cbz	r3, 80a3512 <_strtod_r+0xb6a>
 80a34f0:	4b2c      	ldr	r3, [pc, #176]	; (80a35a4 <_strtod_r+0xbfc>)
 80a34f2:	4640      	mov	r0, r8
 80a34f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80a34f6:	2300      	movs	r3, #0
 80a34f8:	930a      	str	r3, [sp, #40]	; 0x28
 80a34fa:	4649      	mov	r1, r9
 80a34fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a3500:	f7fe fc32 	bl	80a1d68 <__aeabi_dmul>
 80a3504:	4680      	mov	r8, r0
 80a3506:	4689      	mov	r9, r1
 80a3508:	b919      	cbnz	r1, 80a3512 <_strtod_r+0xb6a>
 80a350a:	b910      	cbnz	r0, 80a3512 <_strtod_r+0xb6a>
 80a350c:	2322      	movs	r3, #34	; 0x22
 80a350e:	f8ca 3000 	str.w	r3, [sl]
 80a3512:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a3514:	4650      	mov	r0, sl
 80a3516:	f000 fba1 	bl	80a3c5c <_Bfree>
 80a351a:	9904      	ldr	r1, [sp, #16]
 80a351c:	4650      	mov	r0, sl
 80a351e:	f000 fb9d 	bl	80a3c5c <_Bfree>
 80a3522:	9902      	ldr	r1, [sp, #8]
 80a3524:	4650      	mov	r0, sl
 80a3526:	f000 fb99 	bl	80a3c5c <_Bfree>
 80a352a:	9905      	ldr	r1, [sp, #20]
 80a352c:	4650      	mov	r0, sl
 80a352e:	f000 fb95 	bl	80a3c5c <_Bfree>
 80a3532:	4659      	mov	r1, fp
 80a3534:	4650      	mov	r0, sl
 80a3536:	f000 fb91 	bl	80a3c5c <_Bfree>
 80a353a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a353c:	b113      	cbz	r3, 80a3544 <_strtod_r+0xb9c>
 80a353e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a3540:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a3542:	6013      	str	r3, [r2, #0]
 80a3544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a3546:	b11b      	cbz	r3, 80a3550 <_strtod_r+0xba8>
 80a3548:	4642      	mov	r2, r8
 80a354a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a354e:	e007      	b.n	80a3560 <_strtod_r+0xbb8>
 80a3550:	4642      	mov	r2, r8
 80a3552:	464b      	mov	r3, r9
 80a3554:	e004      	b.n	80a3560 <_strtod_r+0xbb8>
 80a3556:	2500      	movs	r5, #0
 80a3558:	462a      	mov	r2, r5
 80a355a:	2101      	movs	r1, #1
 80a355c:	f7ff bb47 	b.w	80a2bee <_strtod_r+0x246>
 80a3560:	4610      	mov	r0, r2
 80a3562:	4619      	mov	r1, r3
 80a3564:	b01d      	add	sp, #116	; 0x74
 80a3566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a356a:	bf00      	nop
 80a356c:	f3af 8000 	nop.w
 80a3570:	ffc00000 	.word	0xffc00000
 80a3574:	41dfffff 	.word	0x41dfffff
 80a3578:	94a03595 	.word	0x94a03595
 80a357c:	3fdfffff 	.word	0x3fdfffff
 80a3580:	35afe535 	.word	0x35afe535
 80a3584:	3fe00000 	.word	0x3fe00000
 80a3588:	94a03595 	.word	0x94a03595
 80a358c:	3fcfffff 	.word	0x3fcfffff
 80a3590:	3ff00000 	.word	0x3ff00000
 80a3594:	3fe00000 	.word	0x3fe00000
 80a3598:	7fe00000 	.word	0x7fe00000
 80a359c:	7c9fffff 	.word	0x7c9fffff
 80a35a0:	7fefffff 	.word	0x7fefffff
 80a35a4:	39500000 	.word	0x39500000

080a35a8 <strtod>:
 80a35a8:	4b02      	ldr	r3, [pc, #8]	; (80a35b4 <strtod+0xc>)
 80a35aa:	460a      	mov	r2, r1
 80a35ac:	4601      	mov	r1, r0
 80a35ae:	6818      	ldr	r0, [r3, #0]
 80a35b0:	f7ff b9fa 	b.w	80a29a8 <_strtod_r>
 80a35b4:	20000370 	.word	0x20000370

080a35b8 <rshift>:
 80a35b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a35ba:	6906      	ldr	r6, [r0, #16]
 80a35bc:	114b      	asrs	r3, r1, #5
 80a35be:	42b3      	cmp	r3, r6
 80a35c0:	f100 0514 	add.w	r5, r0, #20
 80a35c4:	da27      	bge.n	80a3616 <rshift+0x5e>
 80a35c6:	f011 011f 	ands.w	r1, r1, #31
 80a35ca:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80a35ce:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80a35d2:	d101      	bne.n	80a35d8 <rshift+0x20>
 80a35d4:	4629      	mov	r1, r5
 80a35d6:	e016      	b.n	80a3606 <rshift+0x4e>
 80a35d8:	1d14      	adds	r4, r2, #4
 80a35da:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80a35de:	462b      	mov	r3, r5
 80a35e0:	f1c1 0e20 	rsb	lr, r1, #32
 80a35e4:	40ca      	lsrs	r2, r1
 80a35e6:	42b4      	cmp	r4, r6
 80a35e8:	d209      	bcs.n	80a35fe <rshift+0x46>
 80a35ea:	6827      	ldr	r7, [r4, #0]
 80a35ec:	fa07 f70e 	lsl.w	r7, r7, lr
 80a35f0:	433a      	orrs	r2, r7
 80a35f2:	f843 2b04 	str.w	r2, [r3], #4
 80a35f6:	f854 2b04 	ldr.w	r2, [r4], #4
 80a35fa:	40ca      	lsrs	r2, r1
 80a35fc:	e7f3      	b.n	80a35e6 <rshift+0x2e>
 80a35fe:	601a      	str	r2, [r3, #0]
 80a3600:	b152      	cbz	r2, 80a3618 <rshift+0x60>
 80a3602:	3304      	adds	r3, #4
 80a3604:	e008      	b.n	80a3618 <rshift+0x60>
 80a3606:	42b2      	cmp	r2, r6
 80a3608:	460b      	mov	r3, r1
 80a360a:	d205      	bcs.n	80a3618 <rshift+0x60>
 80a360c:	f852 3b04 	ldr.w	r3, [r2], #4
 80a3610:	f841 3b04 	str.w	r3, [r1], #4
 80a3614:	e7f7      	b.n	80a3606 <rshift+0x4e>
 80a3616:	462b      	mov	r3, r5
 80a3618:	1b5b      	subs	r3, r3, r5
 80a361a:	109b      	asrs	r3, r3, #2
 80a361c:	6103      	str	r3, [r0, #16]
 80a361e:	b903      	cbnz	r3, 80a3622 <rshift+0x6a>
 80a3620:	6143      	str	r3, [r0, #20]
 80a3622:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3624 <__hexdig_fun>:
 80a3624:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a3628:	2b09      	cmp	r3, #9
 80a362a:	d801      	bhi.n	80a3630 <__hexdig_fun+0xc>
 80a362c:	3820      	subs	r0, #32
 80a362e:	e00a      	b.n	80a3646 <__hexdig_fun+0x22>
 80a3630:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a3634:	2b05      	cmp	r3, #5
 80a3636:	d801      	bhi.n	80a363c <__hexdig_fun+0x18>
 80a3638:	3847      	subs	r0, #71	; 0x47
 80a363a:	e004      	b.n	80a3646 <__hexdig_fun+0x22>
 80a363c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a3640:	2b05      	cmp	r3, #5
 80a3642:	d802      	bhi.n	80a364a <__hexdig_fun+0x26>
 80a3644:	3827      	subs	r0, #39	; 0x27
 80a3646:	b2c0      	uxtb	r0, r0
 80a3648:	4770      	bx	lr
 80a364a:	2000      	movs	r0, #0
 80a364c:	4770      	bx	lr

080a364e <__gethex>:
 80a364e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3652:	b08b      	sub	sp, #44	; 0x2c
 80a3654:	468a      	mov	sl, r1
 80a3656:	4690      	mov	r8, r2
 80a3658:	9306      	str	r3, [sp, #24]
 80a365a:	9002      	str	r0, [sp, #8]
 80a365c:	f7ff f926 	bl	80a28ac <_localeconv_r>
 80a3660:	6803      	ldr	r3, [r0, #0]
 80a3662:	f04f 0b00 	mov.w	fp, #0
 80a3666:	4618      	mov	r0, r3
 80a3668:	9303      	str	r3, [sp, #12]
 80a366a:	f7ff f95f 	bl	80a292c <strlen>
 80a366e:	9b03      	ldr	r3, [sp, #12]
 80a3670:	9001      	str	r0, [sp, #4]
 80a3672:	4403      	add	r3, r0
 80a3674:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a3678:	9307      	str	r3, [sp, #28]
 80a367a:	f8da 3000 	ldr.w	r3, [sl]
 80a367e:	3302      	adds	r3, #2
 80a3680:	461f      	mov	r7, r3
 80a3682:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a3686:	2830      	cmp	r0, #48	; 0x30
 80a3688:	d102      	bne.n	80a3690 <__gethex+0x42>
 80a368a:	f10b 0b01 	add.w	fp, fp, #1
 80a368e:	e7f7      	b.n	80a3680 <__gethex+0x32>
 80a3690:	f7ff ffc8 	bl	80a3624 <__hexdig_fun>
 80a3694:	4604      	mov	r4, r0
 80a3696:	b9e0      	cbnz	r0, 80a36d2 <__gethex+0x84>
 80a3698:	9a01      	ldr	r2, [sp, #4]
 80a369a:	9903      	ldr	r1, [sp, #12]
 80a369c:	4638      	mov	r0, r7
 80a369e:	f7ff f94d 	bl	80a293c <strncmp>
 80a36a2:	2800      	cmp	r0, #0
 80a36a4:	d134      	bne.n	80a3710 <__gethex+0xc2>
 80a36a6:	9b01      	ldr	r3, [sp, #4]
 80a36a8:	5cf8      	ldrb	r0, [r7, r3]
 80a36aa:	18fe      	adds	r6, r7, r3
 80a36ac:	f7ff ffba 	bl	80a3624 <__hexdig_fun>
 80a36b0:	b380      	cbz	r0, 80a3714 <__gethex+0xc6>
 80a36b2:	4633      	mov	r3, r6
 80a36b4:	7818      	ldrb	r0, [r3, #0]
 80a36b6:	461f      	mov	r7, r3
 80a36b8:	2830      	cmp	r0, #48	; 0x30
 80a36ba:	f103 0301 	add.w	r3, r3, #1
 80a36be:	d0f9      	beq.n	80a36b4 <__gethex+0x66>
 80a36c0:	f7ff ffb0 	bl	80a3624 <__hexdig_fun>
 80a36c4:	fab0 f580 	clz	r5, r0
 80a36c8:	4634      	mov	r4, r6
 80a36ca:	096d      	lsrs	r5, r5, #5
 80a36cc:	f04f 0b01 	mov.w	fp, #1
 80a36d0:	e001      	b.n	80a36d6 <__gethex+0x88>
 80a36d2:	2500      	movs	r5, #0
 80a36d4:	462c      	mov	r4, r5
 80a36d6:	463a      	mov	r2, r7
 80a36d8:	4616      	mov	r6, r2
 80a36da:	7830      	ldrb	r0, [r6, #0]
 80a36dc:	3201      	adds	r2, #1
 80a36de:	f7ff ffa1 	bl	80a3624 <__hexdig_fun>
 80a36e2:	2800      	cmp	r0, #0
 80a36e4:	d1f8      	bne.n	80a36d8 <__gethex+0x8a>
 80a36e6:	9a01      	ldr	r2, [sp, #4]
 80a36e8:	9903      	ldr	r1, [sp, #12]
 80a36ea:	4630      	mov	r0, r6
 80a36ec:	f7ff f926 	bl	80a293c <strncmp>
 80a36f0:	b950      	cbnz	r0, 80a3708 <__gethex+0xba>
 80a36f2:	b954      	cbnz	r4, 80a370a <__gethex+0xbc>
 80a36f4:	9b01      	ldr	r3, [sp, #4]
 80a36f6:	18f4      	adds	r4, r6, r3
 80a36f8:	4622      	mov	r2, r4
 80a36fa:	4616      	mov	r6, r2
 80a36fc:	7830      	ldrb	r0, [r6, #0]
 80a36fe:	3201      	adds	r2, #1
 80a3700:	f7ff ff90 	bl	80a3624 <__hexdig_fun>
 80a3704:	2800      	cmp	r0, #0
 80a3706:	d1f8      	bne.n	80a36fa <__gethex+0xac>
 80a3708:	b134      	cbz	r4, 80a3718 <__gethex+0xca>
 80a370a:	1ba4      	subs	r4, r4, r6
 80a370c:	00a4      	lsls	r4, r4, #2
 80a370e:	e003      	b.n	80a3718 <__gethex+0xca>
 80a3710:	463e      	mov	r6, r7
 80a3712:	e000      	b.n	80a3716 <__gethex+0xc8>
 80a3714:	4604      	mov	r4, r0
 80a3716:	2501      	movs	r5, #1
 80a3718:	7833      	ldrb	r3, [r6, #0]
 80a371a:	2b50      	cmp	r3, #80	; 0x50
 80a371c:	d001      	beq.n	80a3722 <__gethex+0xd4>
 80a371e:	2b70      	cmp	r3, #112	; 0x70
 80a3720:	d12a      	bne.n	80a3778 <__gethex+0x12a>
 80a3722:	7873      	ldrb	r3, [r6, #1]
 80a3724:	2b2b      	cmp	r3, #43	; 0x2b
 80a3726:	d008      	beq.n	80a373a <__gethex+0xec>
 80a3728:	2b2d      	cmp	r3, #45	; 0x2d
 80a372a:	d003      	beq.n	80a3734 <__gethex+0xe6>
 80a372c:	1c71      	adds	r1, r6, #1
 80a372e:	f04f 0900 	mov.w	r9, #0
 80a3732:	e005      	b.n	80a3740 <__gethex+0xf2>
 80a3734:	f04f 0901 	mov.w	r9, #1
 80a3738:	e001      	b.n	80a373e <__gethex+0xf0>
 80a373a:	f04f 0900 	mov.w	r9, #0
 80a373e:	1cb1      	adds	r1, r6, #2
 80a3740:	7808      	ldrb	r0, [r1, #0]
 80a3742:	f7ff ff6f 	bl	80a3624 <__hexdig_fun>
 80a3746:	1e43      	subs	r3, r0, #1
 80a3748:	b2db      	uxtb	r3, r3
 80a374a:	2b18      	cmp	r3, #24
 80a374c:	d814      	bhi.n	80a3778 <__gethex+0x12a>
 80a374e:	f1a0 0210 	sub.w	r2, r0, #16
 80a3752:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a3756:	f7ff ff65 	bl	80a3624 <__hexdig_fun>
 80a375a:	1e43      	subs	r3, r0, #1
 80a375c:	b2db      	uxtb	r3, r3
 80a375e:	2b18      	cmp	r3, #24
 80a3760:	d804      	bhi.n	80a376c <__gethex+0x11e>
 80a3762:	230a      	movs	r3, #10
 80a3764:	fb03 0202 	mla	r2, r3, r2, r0
 80a3768:	3a10      	subs	r2, #16
 80a376a:	e7f2      	b.n	80a3752 <__gethex+0x104>
 80a376c:	f1b9 0f00 	cmp.w	r9, #0
 80a3770:	d000      	beq.n	80a3774 <__gethex+0x126>
 80a3772:	4252      	negs	r2, r2
 80a3774:	4414      	add	r4, r2
 80a3776:	e000      	b.n	80a377a <__gethex+0x12c>
 80a3778:	4631      	mov	r1, r6
 80a377a:	f8ca 1000 	str.w	r1, [sl]
 80a377e:	b12d      	cbz	r5, 80a378c <__gethex+0x13e>
 80a3780:	f1bb 0f00 	cmp.w	fp, #0
 80a3784:	bf14      	ite	ne
 80a3786:	2000      	movne	r0, #0
 80a3788:	2006      	moveq	r0, #6
 80a378a:	e17c      	b.n	80a3a86 <__gethex+0x438>
 80a378c:	4629      	mov	r1, r5
 80a378e:	1bf3      	subs	r3, r6, r7
 80a3790:	3b01      	subs	r3, #1
 80a3792:	2b07      	cmp	r3, #7
 80a3794:	dd02      	ble.n	80a379c <__gethex+0x14e>
 80a3796:	3101      	adds	r1, #1
 80a3798:	105b      	asrs	r3, r3, #1
 80a379a:	e7fa      	b.n	80a3792 <__gethex+0x144>
 80a379c:	9802      	ldr	r0, [sp, #8]
 80a379e:	f000 fa28 	bl	80a3bf2 <_Balloc>
 80a37a2:	f04f 0900 	mov.w	r9, #0
 80a37a6:	4605      	mov	r5, r0
 80a37a8:	46cb      	mov	fp, r9
 80a37aa:	9b01      	ldr	r3, [sp, #4]
 80a37ac:	f100 0a14 	add.w	sl, r0, #20
 80a37b0:	f1c3 0301 	rsb	r3, r3, #1
 80a37b4:	f8cd a010 	str.w	sl, [sp, #16]
 80a37b8:	9308      	str	r3, [sp, #32]
 80a37ba:	42b7      	cmp	r7, r6
 80a37bc:	d22f      	bcs.n	80a381e <__gethex+0x1d0>
 80a37be:	1e73      	subs	r3, r6, #1
 80a37c0:	9305      	str	r3, [sp, #20]
 80a37c2:	9a07      	ldr	r2, [sp, #28]
 80a37c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a37c8:	4293      	cmp	r3, r2
 80a37ca:	d00b      	beq.n	80a37e4 <__gethex+0x196>
 80a37cc:	f1bb 0f20 	cmp.w	fp, #32
 80a37d0:	d116      	bne.n	80a3800 <__gethex+0x1b2>
 80a37d2:	9b04      	ldr	r3, [sp, #16]
 80a37d4:	f8c3 9000 	str.w	r9, [r3]
 80a37d8:	3304      	adds	r3, #4
 80a37da:	f04f 0900 	mov.w	r9, #0
 80a37de:	9304      	str	r3, [sp, #16]
 80a37e0:	46cb      	mov	fp, r9
 80a37e2:	e00d      	b.n	80a3800 <__gethex+0x1b2>
 80a37e4:	9b05      	ldr	r3, [sp, #20]
 80a37e6:	9a08      	ldr	r2, [sp, #32]
 80a37e8:	4413      	add	r3, r2
 80a37ea:	429f      	cmp	r7, r3
 80a37ec:	d8ee      	bhi.n	80a37cc <__gethex+0x17e>
 80a37ee:	4618      	mov	r0, r3
 80a37f0:	9a01      	ldr	r2, [sp, #4]
 80a37f2:	9903      	ldr	r1, [sp, #12]
 80a37f4:	9309      	str	r3, [sp, #36]	; 0x24
 80a37f6:	f7ff f8a1 	bl	80a293c <strncmp>
 80a37fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a37fc:	b168      	cbz	r0, 80a381a <__gethex+0x1cc>
 80a37fe:	e7e5      	b.n	80a37cc <__gethex+0x17e>
 80a3800:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a3804:	f7ff ff0e 	bl	80a3624 <__hexdig_fun>
 80a3808:	f000 000f 	and.w	r0, r0, #15
 80a380c:	fa00 f00b 	lsl.w	r0, r0, fp
 80a3810:	9b05      	ldr	r3, [sp, #20]
 80a3812:	ea49 0900 	orr.w	r9, r9, r0
 80a3816:	f10b 0b04 	add.w	fp, fp, #4
 80a381a:	461e      	mov	r6, r3
 80a381c:	e7cd      	b.n	80a37ba <__gethex+0x16c>
 80a381e:	9804      	ldr	r0, [sp, #16]
 80a3820:	f840 9b04 	str.w	r9, [r0], #4
 80a3824:	ebca 0000 	rsb	r0, sl, r0
 80a3828:	1080      	asrs	r0, r0, #2
 80a382a:	6128      	str	r0, [r5, #16]
 80a382c:	0147      	lsls	r7, r0, #5
 80a382e:	4648      	mov	r0, r9
 80a3830:	f000 faa4 	bl	80a3d7c <__hi0bits>
 80a3834:	f8d8 6000 	ldr.w	r6, [r8]
 80a3838:	1a38      	subs	r0, r7, r0
 80a383a:	42b0      	cmp	r0, r6
 80a383c:	dd26      	ble.n	80a388c <__gethex+0x23e>
 80a383e:	1b87      	subs	r7, r0, r6
 80a3840:	4639      	mov	r1, r7
 80a3842:	4628      	mov	r0, r5
 80a3844:	f000 fd9b 	bl	80a437e <__any_on>
 80a3848:	b1c8      	cbz	r0, 80a387e <__gethex+0x230>
 80a384a:	1e7b      	subs	r3, r7, #1
 80a384c:	1159      	asrs	r1, r3, #5
 80a384e:	f003 021f 	and.w	r2, r3, #31
 80a3852:	f04f 0901 	mov.w	r9, #1
 80a3856:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80a385a:	fa09 f202 	lsl.w	r2, r9, r2
 80a385e:	420a      	tst	r2, r1
 80a3860:	d00e      	beq.n	80a3880 <__gethex+0x232>
 80a3862:	454b      	cmp	r3, r9
 80a3864:	dc02      	bgt.n	80a386c <__gethex+0x21e>
 80a3866:	f04f 0902 	mov.w	r9, #2
 80a386a:	e009      	b.n	80a3880 <__gethex+0x232>
 80a386c:	1eb9      	subs	r1, r7, #2
 80a386e:	4628      	mov	r0, r5
 80a3870:	f000 fd85 	bl	80a437e <__any_on>
 80a3874:	2800      	cmp	r0, #0
 80a3876:	d0f6      	beq.n	80a3866 <__gethex+0x218>
 80a3878:	f04f 0903 	mov.w	r9, #3
 80a387c:	e000      	b.n	80a3880 <__gethex+0x232>
 80a387e:	4681      	mov	r9, r0
 80a3880:	4639      	mov	r1, r7
 80a3882:	4628      	mov	r0, r5
 80a3884:	f7ff fe98 	bl	80a35b8 <rshift>
 80a3888:	443c      	add	r4, r7
 80a388a:	e00c      	b.n	80a38a6 <__gethex+0x258>
 80a388c:	da09      	bge.n	80a38a2 <__gethex+0x254>
 80a388e:	1a37      	subs	r7, r6, r0
 80a3890:	4629      	mov	r1, r5
 80a3892:	463a      	mov	r2, r7
 80a3894:	9802      	ldr	r0, [sp, #8]
 80a3896:	f000 fba5 	bl	80a3fe4 <__lshift>
 80a389a:	4605      	mov	r5, r0
 80a389c:	1be4      	subs	r4, r4, r7
 80a389e:	f100 0a14 	add.w	sl, r0, #20
 80a38a2:	f04f 0900 	mov.w	r9, #0
 80a38a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a38aa:	429c      	cmp	r4, r3
 80a38ac:	dd08      	ble.n	80a38c0 <__gethex+0x272>
 80a38ae:	9802      	ldr	r0, [sp, #8]
 80a38b0:	4629      	mov	r1, r5
 80a38b2:	f000 f9d3 	bl	80a3c5c <_Bfree>
 80a38b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a38b8:	2300      	movs	r3, #0
 80a38ba:	6013      	str	r3, [r2, #0]
 80a38bc:	20a3      	movs	r0, #163	; 0xa3
 80a38be:	e0e2      	b.n	80a3a86 <__gethex+0x438>
 80a38c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a38c4:	4284      	cmp	r4, r0
 80a38c6:	da53      	bge.n	80a3970 <__gethex+0x322>
 80a38c8:	1b04      	subs	r4, r0, r4
 80a38ca:	42a6      	cmp	r6, r4
 80a38cc:	dc2e      	bgt.n	80a392c <__gethex+0x2de>
 80a38ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a38d2:	2b02      	cmp	r3, #2
 80a38d4:	d01a      	beq.n	80a390c <__gethex+0x2be>
 80a38d6:	2b03      	cmp	r3, #3
 80a38d8:	d01c      	beq.n	80a3914 <__gethex+0x2c6>
 80a38da:	2b01      	cmp	r3, #1
 80a38dc:	d11d      	bne.n	80a391a <__gethex+0x2cc>
 80a38de:	42a6      	cmp	r6, r4
 80a38e0:	d11b      	bne.n	80a391a <__gethex+0x2cc>
 80a38e2:	2e01      	cmp	r6, #1
 80a38e4:	dc0b      	bgt.n	80a38fe <__gethex+0x2b0>
 80a38e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a38ea:	9a06      	ldr	r2, [sp, #24]
 80a38ec:	2062      	movs	r0, #98	; 0x62
 80a38ee:	6013      	str	r3, [r2, #0]
 80a38f0:	2301      	movs	r3, #1
 80a38f2:	612b      	str	r3, [r5, #16]
 80a38f4:	f8ca 3000 	str.w	r3, [sl]
 80a38f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a38fa:	601d      	str	r5, [r3, #0]
 80a38fc:	e0c3      	b.n	80a3a86 <__gethex+0x438>
 80a38fe:	1e71      	subs	r1, r6, #1
 80a3900:	4628      	mov	r0, r5
 80a3902:	f000 fd3c 	bl	80a437e <__any_on>
 80a3906:	2800      	cmp	r0, #0
 80a3908:	d1ed      	bne.n	80a38e6 <__gethex+0x298>
 80a390a:	e006      	b.n	80a391a <__gethex+0x2cc>
 80a390c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a390e:	2b00      	cmp	r3, #0
 80a3910:	d0e9      	beq.n	80a38e6 <__gethex+0x298>
 80a3912:	e002      	b.n	80a391a <__gethex+0x2cc>
 80a3914:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a3916:	2b00      	cmp	r3, #0
 80a3918:	d1e5      	bne.n	80a38e6 <__gethex+0x298>
 80a391a:	9802      	ldr	r0, [sp, #8]
 80a391c:	4629      	mov	r1, r5
 80a391e:	f000 f99d 	bl	80a3c5c <_Bfree>
 80a3922:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a3924:	2300      	movs	r3, #0
 80a3926:	6013      	str	r3, [r2, #0]
 80a3928:	2050      	movs	r0, #80	; 0x50
 80a392a:	e0ac      	b.n	80a3a86 <__gethex+0x438>
 80a392c:	1e67      	subs	r7, r4, #1
 80a392e:	f1b9 0f00 	cmp.w	r9, #0
 80a3932:	d106      	bne.n	80a3942 <__gethex+0x2f4>
 80a3934:	b13f      	cbz	r7, 80a3946 <__gethex+0x2f8>
 80a3936:	4639      	mov	r1, r7
 80a3938:	4628      	mov	r0, r5
 80a393a:	f000 fd20 	bl	80a437e <__any_on>
 80a393e:	4681      	mov	r9, r0
 80a3940:	e001      	b.n	80a3946 <__gethex+0x2f8>
 80a3942:	f04f 0901 	mov.w	r9, #1
 80a3946:	117a      	asrs	r2, r7, #5
 80a3948:	2301      	movs	r3, #1
 80a394a:	f007 071f 	and.w	r7, r7, #31
 80a394e:	fa03 f707 	lsl.w	r7, r3, r7
 80a3952:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80a3956:	4621      	mov	r1, r4
 80a3958:	421f      	tst	r7, r3
 80a395a:	4628      	mov	r0, r5
 80a395c:	bf18      	it	ne
 80a395e:	f049 0902 	orrne.w	r9, r9, #2
 80a3962:	1b36      	subs	r6, r6, r4
 80a3964:	f7ff fe28 	bl	80a35b8 <rshift>
 80a3968:	2702      	movs	r7, #2
 80a396a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80a396e:	e000      	b.n	80a3972 <__gethex+0x324>
 80a3970:	2701      	movs	r7, #1
 80a3972:	f1b9 0f00 	cmp.w	r9, #0
 80a3976:	f000 8081 	beq.w	80a3a7c <__gethex+0x42e>
 80a397a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a397e:	2b02      	cmp	r3, #2
 80a3980:	d00e      	beq.n	80a39a0 <__gethex+0x352>
 80a3982:	2b03      	cmp	r3, #3
 80a3984:	d010      	beq.n	80a39a8 <__gethex+0x35a>
 80a3986:	2b01      	cmp	r3, #1
 80a3988:	d176      	bne.n	80a3a78 <__gethex+0x42a>
 80a398a:	f019 0f02 	tst.w	r9, #2
 80a398e:	d073      	beq.n	80a3a78 <__gethex+0x42a>
 80a3990:	f8da 0000 	ldr.w	r0, [sl]
 80a3994:	ea49 0900 	orr.w	r9, r9, r0
 80a3998:	f019 0f01 	tst.w	r9, #1
 80a399c:	d107      	bne.n	80a39ae <__gethex+0x360>
 80a399e:	e06b      	b.n	80a3a78 <__gethex+0x42a>
 80a39a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a39a2:	f1c3 0301 	rsb	r3, r3, #1
 80a39a6:	9315      	str	r3, [sp, #84]	; 0x54
 80a39a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a39aa:	2b00      	cmp	r3, #0
 80a39ac:	d064      	beq.n	80a3a78 <__gethex+0x42a>
 80a39ae:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80a39b2:	f105 0314 	add.w	r3, r5, #20
 80a39b6:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80a39ba:	eb03 0109 	add.w	r1, r3, r9
 80a39be:	2000      	movs	r0, #0
 80a39c0:	681a      	ldr	r2, [r3, #0]
 80a39c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80a39c6:	d002      	beq.n	80a39ce <__gethex+0x380>
 80a39c8:	3201      	adds	r2, #1
 80a39ca:	601a      	str	r2, [r3, #0]
 80a39cc:	e020      	b.n	80a3a10 <__gethex+0x3c2>
 80a39ce:	f843 0b04 	str.w	r0, [r3], #4
 80a39d2:	4299      	cmp	r1, r3
 80a39d4:	d8f4      	bhi.n	80a39c0 <__gethex+0x372>
 80a39d6:	68ab      	ldr	r3, [r5, #8]
 80a39d8:	459a      	cmp	sl, r3
 80a39da:	db12      	blt.n	80a3a02 <__gethex+0x3b4>
 80a39dc:	6869      	ldr	r1, [r5, #4]
 80a39de:	9802      	ldr	r0, [sp, #8]
 80a39e0:	3101      	adds	r1, #1
 80a39e2:	f000 f906 	bl	80a3bf2 <_Balloc>
 80a39e6:	4683      	mov	fp, r0
 80a39e8:	692a      	ldr	r2, [r5, #16]
 80a39ea:	f105 010c 	add.w	r1, r5, #12
 80a39ee:	3202      	adds	r2, #2
 80a39f0:	0092      	lsls	r2, r2, #2
 80a39f2:	300c      	adds	r0, #12
 80a39f4:	f7fe ff5e 	bl	80a28b4 <memcpy>
 80a39f8:	4629      	mov	r1, r5
 80a39fa:	9802      	ldr	r0, [sp, #8]
 80a39fc:	f000 f92e 	bl	80a3c5c <_Bfree>
 80a3a00:	465d      	mov	r5, fp
 80a3a02:	692b      	ldr	r3, [r5, #16]
 80a3a04:	1c5a      	adds	r2, r3, #1
 80a3a06:	612a      	str	r2, [r5, #16]
 80a3a08:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80a3a0c:	2201      	movs	r2, #1
 80a3a0e:	615a      	str	r2, [r3, #20]
 80a3a10:	2f02      	cmp	r7, #2
 80a3a12:	f105 0214 	add.w	r2, r5, #20
 80a3a16:	d111      	bne.n	80a3a3c <__gethex+0x3ee>
 80a3a18:	f8d8 3000 	ldr.w	r3, [r8]
 80a3a1c:	3b01      	subs	r3, #1
 80a3a1e:	429e      	cmp	r6, r3
 80a3a20:	d127      	bne.n	80a3a72 <__gethex+0x424>
 80a3a22:	1171      	asrs	r1, r6, #5
 80a3a24:	2301      	movs	r3, #1
 80a3a26:	f006 061f 	and.w	r6, r6, #31
 80a3a2a:	fa03 f606 	lsl.w	r6, r3, r6
 80a3a2e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80a3a32:	421e      	tst	r6, r3
 80a3a34:	bf0c      	ite	eq
 80a3a36:	2702      	moveq	r7, #2
 80a3a38:	2701      	movne	r7, #1
 80a3a3a:	e01a      	b.n	80a3a72 <__gethex+0x424>
 80a3a3c:	692b      	ldr	r3, [r5, #16]
 80a3a3e:	459a      	cmp	sl, r3
 80a3a40:	da0a      	bge.n	80a3a58 <__gethex+0x40a>
 80a3a42:	2101      	movs	r1, #1
 80a3a44:	4628      	mov	r0, r5
 80a3a46:	f7ff fdb7 	bl	80a35b8 <rshift>
 80a3a4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a3a4e:	3401      	adds	r4, #1
 80a3a50:	429c      	cmp	r4, r3
 80a3a52:	f73f af2c 	bgt.w	80a38ae <__gethex+0x260>
 80a3a56:	e00b      	b.n	80a3a70 <__gethex+0x422>
 80a3a58:	f016 061f 	ands.w	r6, r6, #31
 80a3a5c:	d008      	beq.n	80a3a70 <__gethex+0x422>
 80a3a5e:	4491      	add	r9, r2
 80a3a60:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80a3a64:	f000 f98a 	bl	80a3d7c <__hi0bits>
 80a3a68:	f1c6 0620 	rsb	r6, r6, #32
 80a3a6c:	42b0      	cmp	r0, r6
 80a3a6e:	dbe8      	blt.n	80a3a42 <__gethex+0x3f4>
 80a3a70:	2701      	movs	r7, #1
 80a3a72:	f047 0720 	orr.w	r7, r7, #32
 80a3a76:	e001      	b.n	80a3a7c <__gethex+0x42e>
 80a3a78:	f047 0710 	orr.w	r7, r7, #16
 80a3a7c:	4638      	mov	r0, r7
 80a3a7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a3a80:	601d      	str	r5, [r3, #0]
 80a3a82:	9b06      	ldr	r3, [sp, #24]
 80a3a84:	601c      	str	r4, [r3, #0]
 80a3a86:	b00b      	add	sp, #44	; 0x2c
 80a3a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a3a8c <L_shift>:
 80a3a8c:	f1c2 0208 	rsb	r2, r2, #8
 80a3a90:	0092      	lsls	r2, r2, #2
 80a3a92:	b570      	push	{r4, r5, r6, lr}
 80a3a94:	f1c2 0620 	rsb	r6, r2, #32
 80a3a98:	6843      	ldr	r3, [r0, #4]
 80a3a9a:	6805      	ldr	r5, [r0, #0]
 80a3a9c:	fa03 f406 	lsl.w	r4, r3, r6
 80a3aa0:	432c      	orrs	r4, r5
 80a3aa2:	40d3      	lsrs	r3, r2
 80a3aa4:	6004      	str	r4, [r0, #0]
 80a3aa6:	f840 3f04 	str.w	r3, [r0, #4]!
 80a3aaa:	4288      	cmp	r0, r1
 80a3aac:	d3f4      	bcc.n	80a3a98 <L_shift+0xc>
 80a3aae:	bd70      	pop	{r4, r5, r6, pc}

080a3ab0 <__match>:
 80a3ab0:	b530      	push	{r4, r5, lr}
 80a3ab2:	6803      	ldr	r3, [r0, #0]
 80a3ab4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a3ab8:	3301      	adds	r3, #1
 80a3aba:	b14c      	cbz	r4, 80a3ad0 <__match+0x20>
 80a3abc:	781a      	ldrb	r2, [r3, #0]
 80a3abe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a3ac2:	2d19      	cmp	r5, #25
 80a3ac4:	bf98      	it	ls
 80a3ac6:	3220      	addls	r2, #32
 80a3ac8:	42a2      	cmp	r2, r4
 80a3aca:	d0f3      	beq.n	80a3ab4 <__match+0x4>
 80a3acc:	2000      	movs	r0, #0
 80a3ace:	bd30      	pop	{r4, r5, pc}
 80a3ad0:	6003      	str	r3, [r0, #0]
 80a3ad2:	2001      	movs	r0, #1
 80a3ad4:	bd30      	pop	{r4, r5, pc}

080a3ad6 <__hexnan>:
 80a3ad6:	680b      	ldr	r3, [r1, #0]
 80a3ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3adc:	115e      	asrs	r6, r3, #5
 80a3ade:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a3ae2:	f013 031f 	ands.w	r3, r3, #31
 80a3ae6:	bf18      	it	ne
 80a3ae8:	3604      	addne	r6, #4
 80a3aea:	1f35      	subs	r5, r6, #4
 80a3aec:	4617      	mov	r7, r2
 80a3aee:	2200      	movs	r2, #0
 80a3af0:	4682      	mov	sl, r0
 80a3af2:	46a8      	mov	r8, r5
 80a3af4:	462c      	mov	r4, r5
 80a3af6:	4691      	mov	r9, r2
 80a3af8:	b085      	sub	sp, #20
 80a3afa:	f8d0 b000 	ldr.w	fp, [r0]
 80a3afe:	9301      	str	r3, [sp, #4]
 80a3b00:	f846 2c04 	str.w	r2, [r6, #-4]
 80a3b04:	9200      	str	r2, [sp, #0]
 80a3b06:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80a3b0a:	2900      	cmp	r1, #0
 80a3b0c:	d03c      	beq.n	80a3b88 <__hexnan+0xb2>
 80a3b0e:	4608      	mov	r0, r1
 80a3b10:	9203      	str	r2, [sp, #12]
 80a3b12:	9102      	str	r1, [sp, #8]
 80a3b14:	f7ff fd86 	bl	80a3624 <__hexdig_fun>
 80a3b18:	9a03      	ldr	r2, [sp, #12]
 80a3b1a:	bb00      	cbnz	r0, 80a3b5e <__hexnan+0x88>
 80a3b1c:	9902      	ldr	r1, [sp, #8]
 80a3b1e:	2920      	cmp	r1, #32
 80a3b20:	d816      	bhi.n	80a3b50 <__hexnan+0x7a>
 80a3b22:	9b00      	ldr	r3, [sp, #0]
 80a3b24:	4599      	cmp	r9, r3
 80a3b26:	ddee      	ble.n	80a3b06 <__hexnan+0x30>
 80a3b28:	4544      	cmp	r4, r8
 80a3b2a:	d205      	bcs.n	80a3b38 <__hexnan+0x62>
 80a3b2c:	2a07      	cmp	r2, #7
 80a3b2e:	dc03      	bgt.n	80a3b38 <__hexnan+0x62>
 80a3b30:	4641      	mov	r1, r8
 80a3b32:	4620      	mov	r0, r4
 80a3b34:	f7ff ffaa 	bl	80a3a8c <L_shift>
 80a3b38:	42bc      	cmp	r4, r7
 80a3b3a:	d923      	bls.n	80a3b84 <__hexnan+0xae>
 80a3b3c:	2300      	movs	r3, #0
 80a3b3e:	f1a4 0804 	sub.w	r8, r4, #4
 80a3b42:	f844 3c04 	str.w	r3, [r4, #-4]
 80a3b46:	f8cd 9000 	str.w	r9, [sp]
 80a3b4a:	4644      	mov	r4, r8
 80a3b4c:	461a      	mov	r2, r3
 80a3b4e:	e7da      	b.n	80a3b06 <__hexnan+0x30>
 80a3b50:	2929      	cmp	r1, #41	; 0x29
 80a3b52:	d148      	bne.n	80a3be6 <__hexnan+0x110>
 80a3b54:	f10b 0301 	add.w	r3, fp, #1
 80a3b58:	f8ca 3000 	str.w	r3, [sl]
 80a3b5c:	e014      	b.n	80a3b88 <__hexnan+0xb2>
 80a3b5e:	3201      	adds	r2, #1
 80a3b60:	2a08      	cmp	r2, #8
 80a3b62:	f109 0901 	add.w	r9, r9, #1
 80a3b66:	dd06      	ble.n	80a3b76 <__hexnan+0xa0>
 80a3b68:	42bc      	cmp	r4, r7
 80a3b6a:	d9cc      	bls.n	80a3b06 <__hexnan+0x30>
 80a3b6c:	2300      	movs	r3, #0
 80a3b6e:	f844 3c04 	str.w	r3, [r4, #-4]
 80a3b72:	2201      	movs	r2, #1
 80a3b74:	3c04      	subs	r4, #4
 80a3b76:	6821      	ldr	r1, [r4, #0]
 80a3b78:	f000 000f 	and.w	r0, r0, #15
 80a3b7c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80a3b80:	6020      	str	r0, [r4, #0]
 80a3b82:	e7c0      	b.n	80a3b06 <__hexnan+0x30>
 80a3b84:	2208      	movs	r2, #8
 80a3b86:	e7be      	b.n	80a3b06 <__hexnan+0x30>
 80a3b88:	f1b9 0f00 	cmp.w	r9, #0
 80a3b8c:	d02b      	beq.n	80a3be6 <__hexnan+0x110>
 80a3b8e:	4544      	cmp	r4, r8
 80a3b90:	d205      	bcs.n	80a3b9e <__hexnan+0xc8>
 80a3b92:	2a07      	cmp	r2, #7
 80a3b94:	dc03      	bgt.n	80a3b9e <__hexnan+0xc8>
 80a3b96:	4641      	mov	r1, r8
 80a3b98:	4620      	mov	r0, r4
 80a3b9a:	f7ff ff77 	bl	80a3a8c <L_shift>
 80a3b9e:	42bc      	cmp	r4, r7
 80a3ba0:	d90c      	bls.n	80a3bbc <__hexnan+0xe6>
 80a3ba2:	463b      	mov	r3, r7
 80a3ba4:	f854 2b04 	ldr.w	r2, [r4], #4
 80a3ba8:	42a5      	cmp	r5, r4
 80a3baa:	f843 2b04 	str.w	r2, [r3], #4
 80a3bae:	d2f9      	bcs.n	80a3ba4 <__hexnan+0xce>
 80a3bb0:	2200      	movs	r2, #0
 80a3bb2:	f843 2b04 	str.w	r2, [r3], #4
 80a3bb6:	429d      	cmp	r5, r3
 80a3bb8:	d2fb      	bcs.n	80a3bb2 <__hexnan+0xdc>
 80a3bba:	e00b      	b.n	80a3bd4 <__hexnan+0xfe>
 80a3bbc:	9b01      	ldr	r3, [sp, #4]
 80a3bbe:	b14b      	cbz	r3, 80a3bd4 <__hexnan+0xfe>
 80a3bc0:	f1c3 0220 	rsb	r2, r3, #32
 80a3bc4:	f04f 33ff 	mov.w	r3, #4294967295
 80a3bc8:	40d3      	lsrs	r3, r2
 80a3bca:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a3bce:	4013      	ands	r3, r2
 80a3bd0:	f846 3c04 	str.w	r3, [r6, #-4]
 80a3bd4:	682b      	ldr	r3, [r5, #0]
 80a3bd6:	b943      	cbnz	r3, 80a3bea <__hexnan+0x114>
 80a3bd8:	42bd      	cmp	r5, r7
 80a3bda:	d102      	bne.n	80a3be2 <__hexnan+0x10c>
 80a3bdc:	2301      	movs	r3, #1
 80a3bde:	602b      	str	r3, [r5, #0]
 80a3be0:	e003      	b.n	80a3bea <__hexnan+0x114>
 80a3be2:	3d04      	subs	r5, #4
 80a3be4:	e7f6      	b.n	80a3bd4 <__hexnan+0xfe>
 80a3be6:	2004      	movs	r0, #4
 80a3be8:	e000      	b.n	80a3bec <__hexnan+0x116>
 80a3bea:	2005      	movs	r0, #5
 80a3bec:	b005      	add	sp, #20
 80a3bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a3bf2 <_Balloc>:
 80a3bf2:	b570      	push	{r4, r5, r6, lr}
 80a3bf4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80a3bf6:	4604      	mov	r4, r0
 80a3bf8:	460e      	mov	r6, r1
 80a3bfa:	b93d      	cbnz	r5, 80a3c0c <_Balloc+0x1a>
 80a3bfc:	2010      	movs	r0, #16
 80a3bfe:	f7fc ffd9 	bl	80a0bb4 <malloc>
 80a3c02:	6260      	str	r0, [r4, #36]	; 0x24
 80a3c04:	6045      	str	r5, [r0, #4]
 80a3c06:	6085      	str	r5, [r0, #8]
 80a3c08:	6005      	str	r5, [r0, #0]
 80a3c0a:	60c5      	str	r5, [r0, #12]
 80a3c0c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a3c0e:	68eb      	ldr	r3, [r5, #12]
 80a3c10:	b143      	cbz	r3, 80a3c24 <_Balloc+0x32>
 80a3c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a3c14:	68db      	ldr	r3, [r3, #12]
 80a3c16:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80a3c1a:	b178      	cbz	r0, 80a3c3c <_Balloc+0x4a>
 80a3c1c:	6802      	ldr	r2, [r0, #0]
 80a3c1e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80a3c22:	e017      	b.n	80a3c54 <_Balloc+0x62>
 80a3c24:	2221      	movs	r2, #33	; 0x21
 80a3c26:	2104      	movs	r1, #4
 80a3c28:	4620      	mov	r0, r4
 80a3c2a:	f000 fbca 	bl	80a43c2 <_calloc_r>
 80a3c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a3c30:	60e8      	str	r0, [r5, #12]
 80a3c32:	68db      	ldr	r3, [r3, #12]
 80a3c34:	2b00      	cmp	r3, #0
 80a3c36:	d1ec      	bne.n	80a3c12 <_Balloc+0x20>
 80a3c38:	2000      	movs	r0, #0
 80a3c3a:	bd70      	pop	{r4, r5, r6, pc}
 80a3c3c:	2101      	movs	r1, #1
 80a3c3e:	fa01 f506 	lsl.w	r5, r1, r6
 80a3c42:	1d6a      	adds	r2, r5, #5
 80a3c44:	0092      	lsls	r2, r2, #2
 80a3c46:	4620      	mov	r0, r4
 80a3c48:	f000 fbbb 	bl	80a43c2 <_calloc_r>
 80a3c4c:	2800      	cmp	r0, #0
 80a3c4e:	d0f3      	beq.n	80a3c38 <_Balloc+0x46>
 80a3c50:	6046      	str	r6, [r0, #4]
 80a3c52:	6085      	str	r5, [r0, #8]
 80a3c54:	2300      	movs	r3, #0
 80a3c56:	6103      	str	r3, [r0, #16]
 80a3c58:	60c3      	str	r3, [r0, #12]
 80a3c5a:	bd70      	pop	{r4, r5, r6, pc}

080a3c5c <_Bfree>:
 80a3c5c:	b570      	push	{r4, r5, r6, lr}
 80a3c5e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80a3c60:	4606      	mov	r6, r0
 80a3c62:	460d      	mov	r5, r1
 80a3c64:	b93c      	cbnz	r4, 80a3c76 <_Bfree+0x1a>
 80a3c66:	2010      	movs	r0, #16
 80a3c68:	f7fc ffa4 	bl	80a0bb4 <malloc>
 80a3c6c:	6270      	str	r0, [r6, #36]	; 0x24
 80a3c6e:	6044      	str	r4, [r0, #4]
 80a3c70:	6084      	str	r4, [r0, #8]
 80a3c72:	6004      	str	r4, [r0, #0]
 80a3c74:	60c4      	str	r4, [r0, #12]
 80a3c76:	b13d      	cbz	r5, 80a3c88 <_Bfree+0x2c>
 80a3c78:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80a3c7a:	686a      	ldr	r2, [r5, #4]
 80a3c7c:	68db      	ldr	r3, [r3, #12]
 80a3c7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a3c82:	6029      	str	r1, [r5, #0]
 80a3c84:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80a3c88:	bd70      	pop	{r4, r5, r6, pc}

080a3c8a <__multadd>:
 80a3c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3c8e:	4606      	mov	r6, r0
 80a3c90:	460c      	mov	r4, r1
 80a3c92:	690d      	ldr	r5, [r1, #16]
 80a3c94:	461f      	mov	r7, r3
 80a3c96:	f101 0e14 	add.w	lr, r1, #20
 80a3c9a:	2300      	movs	r3, #0
 80a3c9c:	f8de 0000 	ldr.w	r0, [lr]
 80a3ca0:	3301      	adds	r3, #1
 80a3ca2:	b281      	uxth	r1, r0
 80a3ca4:	fb02 7101 	mla	r1, r2, r1, r7
 80a3ca8:	0c00      	lsrs	r0, r0, #16
 80a3caa:	0c0f      	lsrs	r7, r1, #16
 80a3cac:	fb02 7000 	mla	r0, r2, r0, r7
 80a3cb0:	b289      	uxth	r1, r1
 80a3cb2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80a3cb6:	429d      	cmp	r5, r3
 80a3cb8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80a3cbc:	f84e 1b04 	str.w	r1, [lr], #4
 80a3cc0:	dcec      	bgt.n	80a3c9c <__multadd+0x12>
 80a3cc2:	b1d7      	cbz	r7, 80a3cfa <__multadd+0x70>
 80a3cc4:	68a3      	ldr	r3, [r4, #8]
 80a3cc6:	429d      	cmp	r5, r3
 80a3cc8:	db12      	blt.n	80a3cf0 <__multadd+0x66>
 80a3cca:	6861      	ldr	r1, [r4, #4]
 80a3ccc:	4630      	mov	r0, r6
 80a3cce:	3101      	adds	r1, #1
 80a3cd0:	f7ff ff8f 	bl	80a3bf2 <_Balloc>
 80a3cd4:	4680      	mov	r8, r0
 80a3cd6:	6922      	ldr	r2, [r4, #16]
 80a3cd8:	f104 010c 	add.w	r1, r4, #12
 80a3cdc:	3202      	adds	r2, #2
 80a3cde:	0092      	lsls	r2, r2, #2
 80a3ce0:	300c      	adds	r0, #12
 80a3ce2:	f7fe fde7 	bl	80a28b4 <memcpy>
 80a3ce6:	4621      	mov	r1, r4
 80a3ce8:	4630      	mov	r0, r6
 80a3cea:	f7ff ffb7 	bl	80a3c5c <_Bfree>
 80a3cee:	4644      	mov	r4, r8
 80a3cf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80a3cf4:	3501      	adds	r5, #1
 80a3cf6:	615f      	str	r7, [r3, #20]
 80a3cf8:	6125      	str	r5, [r4, #16]
 80a3cfa:	4620      	mov	r0, r4
 80a3cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3d00 <__s2b>:
 80a3d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3d04:	4606      	mov	r6, r0
 80a3d06:	4615      	mov	r5, r2
 80a3d08:	461f      	mov	r7, r3
 80a3d0a:	2209      	movs	r2, #9
 80a3d0c:	3308      	adds	r3, #8
 80a3d0e:	460c      	mov	r4, r1
 80a3d10:	fb93 f3f2 	sdiv	r3, r3, r2
 80a3d14:	2100      	movs	r1, #0
 80a3d16:	2201      	movs	r2, #1
 80a3d18:	429a      	cmp	r2, r3
 80a3d1a:	da02      	bge.n	80a3d22 <__s2b+0x22>
 80a3d1c:	0052      	lsls	r2, r2, #1
 80a3d1e:	3101      	adds	r1, #1
 80a3d20:	e7fa      	b.n	80a3d18 <__s2b+0x18>
 80a3d22:	4630      	mov	r0, r6
 80a3d24:	f7ff ff65 	bl	80a3bf2 <_Balloc>
 80a3d28:	9b08      	ldr	r3, [sp, #32]
 80a3d2a:	2d09      	cmp	r5, #9
 80a3d2c:	6143      	str	r3, [r0, #20]
 80a3d2e:	f04f 0301 	mov.w	r3, #1
 80a3d32:	6103      	str	r3, [r0, #16]
 80a3d34:	dd11      	ble.n	80a3d5a <__s2b+0x5a>
 80a3d36:	f104 0809 	add.w	r8, r4, #9
 80a3d3a:	46c1      	mov	r9, r8
 80a3d3c:	442c      	add	r4, r5
 80a3d3e:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a3d42:	4601      	mov	r1, r0
 80a3d44:	3b30      	subs	r3, #48	; 0x30
 80a3d46:	220a      	movs	r2, #10
 80a3d48:	4630      	mov	r0, r6
 80a3d4a:	f7ff ff9e 	bl	80a3c8a <__multadd>
 80a3d4e:	45a1      	cmp	r9, r4
 80a3d50:	d1f5      	bne.n	80a3d3e <__s2b+0x3e>
 80a3d52:	eb08 0405 	add.w	r4, r8, r5
 80a3d56:	3c08      	subs	r4, #8
 80a3d58:	e001      	b.n	80a3d5e <__s2b+0x5e>
 80a3d5a:	340a      	adds	r4, #10
 80a3d5c:	2509      	movs	r5, #9
 80a3d5e:	1b2d      	subs	r5, r5, r4
 80a3d60:	1963      	adds	r3, r4, r5
 80a3d62:	429f      	cmp	r7, r3
 80a3d64:	dd08      	ble.n	80a3d78 <__s2b+0x78>
 80a3d66:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a3d6a:	4601      	mov	r1, r0
 80a3d6c:	3b30      	subs	r3, #48	; 0x30
 80a3d6e:	220a      	movs	r2, #10
 80a3d70:	4630      	mov	r0, r6
 80a3d72:	f7ff ff8a 	bl	80a3c8a <__multadd>
 80a3d76:	e7f3      	b.n	80a3d60 <__s2b+0x60>
 80a3d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a3d7c <__hi0bits>:
 80a3d7c:	0c03      	lsrs	r3, r0, #16
 80a3d7e:	041b      	lsls	r3, r3, #16
 80a3d80:	b913      	cbnz	r3, 80a3d88 <__hi0bits+0xc>
 80a3d82:	0400      	lsls	r0, r0, #16
 80a3d84:	2310      	movs	r3, #16
 80a3d86:	e000      	b.n	80a3d8a <__hi0bits+0xe>
 80a3d88:	2300      	movs	r3, #0
 80a3d8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80a3d8e:	bf04      	itt	eq
 80a3d90:	0200      	lsleq	r0, r0, #8
 80a3d92:	3308      	addeq	r3, #8
 80a3d94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80a3d98:	bf04      	itt	eq
 80a3d9a:	0100      	lsleq	r0, r0, #4
 80a3d9c:	3304      	addeq	r3, #4
 80a3d9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80a3da2:	bf04      	itt	eq
 80a3da4:	0080      	lsleq	r0, r0, #2
 80a3da6:	3302      	addeq	r3, #2
 80a3da8:	2800      	cmp	r0, #0
 80a3daa:	db03      	blt.n	80a3db4 <__hi0bits+0x38>
 80a3dac:	0042      	lsls	r2, r0, #1
 80a3dae:	d503      	bpl.n	80a3db8 <__hi0bits+0x3c>
 80a3db0:	1c58      	adds	r0, r3, #1
 80a3db2:	4770      	bx	lr
 80a3db4:	4618      	mov	r0, r3
 80a3db6:	4770      	bx	lr
 80a3db8:	2020      	movs	r0, #32
 80a3dba:	4770      	bx	lr

080a3dbc <__lo0bits>:
 80a3dbc:	6803      	ldr	r3, [r0, #0]
 80a3dbe:	f013 0207 	ands.w	r2, r3, #7
 80a3dc2:	d00b      	beq.n	80a3ddc <__lo0bits+0x20>
 80a3dc4:	07d9      	lsls	r1, r3, #31
 80a3dc6:	d422      	bmi.n	80a3e0e <__lo0bits+0x52>
 80a3dc8:	079a      	lsls	r2, r3, #30
 80a3dca:	bf4b      	itete	mi
 80a3dcc:	085b      	lsrmi	r3, r3, #1
 80a3dce:	089b      	lsrpl	r3, r3, #2
 80a3dd0:	6003      	strmi	r3, [r0, #0]
 80a3dd2:	6003      	strpl	r3, [r0, #0]
 80a3dd4:	bf4c      	ite	mi
 80a3dd6:	2001      	movmi	r0, #1
 80a3dd8:	2002      	movpl	r0, #2
 80a3dda:	4770      	bx	lr
 80a3ddc:	b299      	uxth	r1, r3
 80a3dde:	b909      	cbnz	r1, 80a3de4 <__lo0bits+0x28>
 80a3de0:	0c1b      	lsrs	r3, r3, #16
 80a3de2:	2210      	movs	r2, #16
 80a3de4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80a3de8:	bf04      	itt	eq
 80a3dea:	0a1b      	lsreq	r3, r3, #8
 80a3dec:	3208      	addeq	r2, #8
 80a3dee:	0719      	lsls	r1, r3, #28
 80a3df0:	bf04      	itt	eq
 80a3df2:	091b      	lsreq	r3, r3, #4
 80a3df4:	3204      	addeq	r2, #4
 80a3df6:	0799      	lsls	r1, r3, #30
 80a3df8:	bf04      	itt	eq
 80a3dfa:	089b      	lsreq	r3, r3, #2
 80a3dfc:	3202      	addeq	r2, #2
 80a3dfe:	07d9      	lsls	r1, r3, #31
 80a3e00:	d402      	bmi.n	80a3e08 <__lo0bits+0x4c>
 80a3e02:	085b      	lsrs	r3, r3, #1
 80a3e04:	d005      	beq.n	80a3e12 <__lo0bits+0x56>
 80a3e06:	3201      	adds	r2, #1
 80a3e08:	6003      	str	r3, [r0, #0]
 80a3e0a:	4610      	mov	r0, r2
 80a3e0c:	4770      	bx	lr
 80a3e0e:	2000      	movs	r0, #0
 80a3e10:	4770      	bx	lr
 80a3e12:	2020      	movs	r0, #32
 80a3e14:	4770      	bx	lr

080a3e16 <__i2b>:
 80a3e16:	b510      	push	{r4, lr}
 80a3e18:	460c      	mov	r4, r1
 80a3e1a:	2101      	movs	r1, #1
 80a3e1c:	f7ff fee9 	bl	80a3bf2 <_Balloc>
 80a3e20:	2201      	movs	r2, #1
 80a3e22:	6144      	str	r4, [r0, #20]
 80a3e24:	6102      	str	r2, [r0, #16]
 80a3e26:	bd10      	pop	{r4, pc}

080a3e28 <__multiply>:
 80a3e28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3e2c:	4614      	mov	r4, r2
 80a3e2e:	690a      	ldr	r2, [r1, #16]
 80a3e30:	6923      	ldr	r3, [r4, #16]
 80a3e32:	4688      	mov	r8, r1
 80a3e34:	429a      	cmp	r2, r3
 80a3e36:	bfbe      	ittt	lt
 80a3e38:	460b      	movlt	r3, r1
 80a3e3a:	46a0      	movlt	r8, r4
 80a3e3c:	461c      	movlt	r4, r3
 80a3e3e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80a3e42:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80a3e46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a3e4a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80a3e4e:	eb07 0609 	add.w	r6, r7, r9
 80a3e52:	429e      	cmp	r6, r3
 80a3e54:	bfc8      	it	gt
 80a3e56:	3101      	addgt	r1, #1
 80a3e58:	f7ff fecb 	bl	80a3bf2 <_Balloc>
 80a3e5c:	f100 0514 	add.w	r5, r0, #20
 80a3e60:	462b      	mov	r3, r5
 80a3e62:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80a3e66:	2200      	movs	r2, #0
 80a3e68:	4563      	cmp	r3, ip
 80a3e6a:	d202      	bcs.n	80a3e72 <__multiply+0x4a>
 80a3e6c:	f843 2b04 	str.w	r2, [r3], #4
 80a3e70:	e7fa      	b.n	80a3e68 <__multiply+0x40>
 80a3e72:	f104 0214 	add.w	r2, r4, #20
 80a3e76:	f108 0114 	add.w	r1, r8, #20
 80a3e7a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80a3e7e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80a3e82:	9300      	str	r3, [sp, #0]
 80a3e84:	9b00      	ldr	r3, [sp, #0]
 80a3e86:	9201      	str	r2, [sp, #4]
 80a3e88:	4293      	cmp	r3, r2
 80a3e8a:	d957      	bls.n	80a3f3c <__multiply+0x114>
 80a3e8c:	f8b2 b000 	ldrh.w	fp, [r2]
 80a3e90:	f1bb 0f00 	cmp.w	fp, #0
 80a3e94:	d023      	beq.n	80a3ede <__multiply+0xb6>
 80a3e96:	4689      	mov	r9, r1
 80a3e98:	46ae      	mov	lr, r5
 80a3e9a:	f04f 0800 	mov.w	r8, #0
 80a3e9e:	f859 4b04 	ldr.w	r4, [r9], #4
 80a3ea2:	f8be a000 	ldrh.w	sl, [lr]
 80a3ea6:	b2a3      	uxth	r3, r4
 80a3ea8:	fb0b a303 	mla	r3, fp, r3, sl
 80a3eac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80a3eb0:	f8de 4000 	ldr.w	r4, [lr]
 80a3eb4:	4443      	add	r3, r8
 80a3eb6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a3eba:	fb0b 840a 	mla	r4, fp, sl, r8
 80a3ebe:	46f2      	mov	sl, lr
 80a3ec0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80a3ec4:	b29b      	uxth	r3, r3
 80a3ec6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80a3eca:	454f      	cmp	r7, r9
 80a3ecc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a3ed0:	f84a 3b04 	str.w	r3, [sl], #4
 80a3ed4:	d901      	bls.n	80a3eda <__multiply+0xb2>
 80a3ed6:	46d6      	mov	lr, sl
 80a3ed8:	e7e1      	b.n	80a3e9e <__multiply+0x76>
 80a3eda:	f8ce 8004 	str.w	r8, [lr, #4]
 80a3ede:	9b01      	ldr	r3, [sp, #4]
 80a3ee0:	3204      	adds	r2, #4
 80a3ee2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80a3ee6:	f1ba 0f00 	cmp.w	sl, #0
 80a3eea:	d021      	beq.n	80a3f30 <__multiply+0x108>
 80a3eec:	462c      	mov	r4, r5
 80a3eee:	4689      	mov	r9, r1
 80a3ef0:	682b      	ldr	r3, [r5, #0]
 80a3ef2:	f04f 0800 	mov.w	r8, #0
 80a3ef6:	f8b9 e000 	ldrh.w	lr, [r9]
 80a3efa:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80a3efe:	b29b      	uxth	r3, r3
 80a3f00:	fb0a be0e 	mla	lr, sl, lr, fp
 80a3f04:	46a3      	mov	fp, r4
 80a3f06:	44f0      	add	r8, lr
 80a3f08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a3f0c:	f84b 3b04 	str.w	r3, [fp], #4
 80a3f10:	f859 3b04 	ldr.w	r3, [r9], #4
 80a3f14:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80a3f18:	0c1b      	lsrs	r3, r3, #16
 80a3f1a:	fb0a e303 	mla	r3, sl, r3, lr
 80a3f1e:	454f      	cmp	r7, r9
 80a3f20:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80a3f24:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80a3f28:	d901      	bls.n	80a3f2e <__multiply+0x106>
 80a3f2a:	465c      	mov	r4, fp
 80a3f2c:	e7e3      	b.n	80a3ef6 <__multiply+0xce>
 80a3f2e:	6063      	str	r3, [r4, #4]
 80a3f30:	3504      	adds	r5, #4
 80a3f32:	e7a7      	b.n	80a3e84 <__multiply+0x5c>
 80a3f34:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80a3f38:	b913      	cbnz	r3, 80a3f40 <__multiply+0x118>
 80a3f3a:	3e01      	subs	r6, #1
 80a3f3c:	2e00      	cmp	r6, #0
 80a3f3e:	dcf9      	bgt.n	80a3f34 <__multiply+0x10c>
 80a3f40:	6106      	str	r6, [r0, #16]
 80a3f42:	b003      	add	sp, #12
 80a3f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a3f48 <__pow5mult>:
 80a3f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3f4c:	4615      	mov	r5, r2
 80a3f4e:	f012 0203 	ands.w	r2, r2, #3
 80a3f52:	4606      	mov	r6, r0
 80a3f54:	460f      	mov	r7, r1
 80a3f56:	d007      	beq.n	80a3f68 <__pow5mult+0x20>
 80a3f58:	4c21      	ldr	r4, [pc, #132]	; (80a3fe0 <__pow5mult+0x98>)
 80a3f5a:	3a01      	subs	r2, #1
 80a3f5c:	2300      	movs	r3, #0
 80a3f5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a3f62:	f7ff fe92 	bl	80a3c8a <__multadd>
 80a3f66:	4607      	mov	r7, r0
 80a3f68:	10ad      	asrs	r5, r5, #2
 80a3f6a:	d036      	beq.n	80a3fda <__pow5mult+0x92>
 80a3f6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a3f6e:	b93c      	cbnz	r4, 80a3f80 <__pow5mult+0x38>
 80a3f70:	2010      	movs	r0, #16
 80a3f72:	f7fc fe1f 	bl	80a0bb4 <malloc>
 80a3f76:	6270      	str	r0, [r6, #36]	; 0x24
 80a3f78:	6044      	str	r4, [r0, #4]
 80a3f7a:	6084      	str	r4, [r0, #8]
 80a3f7c:	6004      	str	r4, [r0, #0]
 80a3f7e:	60c4      	str	r4, [r0, #12]
 80a3f80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a3f84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a3f88:	b94c      	cbnz	r4, 80a3f9e <__pow5mult+0x56>
 80a3f8a:	f240 2171 	movw	r1, #625	; 0x271
 80a3f8e:	4630      	mov	r0, r6
 80a3f90:	f7ff ff41 	bl	80a3e16 <__i2b>
 80a3f94:	4604      	mov	r4, r0
 80a3f96:	2300      	movs	r3, #0
 80a3f98:	f8c8 0008 	str.w	r0, [r8, #8]
 80a3f9c:	6003      	str	r3, [r0, #0]
 80a3f9e:	f04f 0800 	mov.w	r8, #0
 80a3fa2:	07eb      	lsls	r3, r5, #31
 80a3fa4:	d50a      	bpl.n	80a3fbc <__pow5mult+0x74>
 80a3fa6:	4639      	mov	r1, r7
 80a3fa8:	4622      	mov	r2, r4
 80a3faa:	4630      	mov	r0, r6
 80a3fac:	f7ff ff3c 	bl	80a3e28 <__multiply>
 80a3fb0:	4681      	mov	r9, r0
 80a3fb2:	4639      	mov	r1, r7
 80a3fb4:	4630      	mov	r0, r6
 80a3fb6:	f7ff fe51 	bl	80a3c5c <_Bfree>
 80a3fba:	464f      	mov	r7, r9
 80a3fbc:	106d      	asrs	r5, r5, #1
 80a3fbe:	d00c      	beq.n	80a3fda <__pow5mult+0x92>
 80a3fc0:	6820      	ldr	r0, [r4, #0]
 80a3fc2:	b108      	cbz	r0, 80a3fc8 <__pow5mult+0x80>
 80a3fc4:	4604      	mov	r4, r0
 80a3fc6:	e7ec      	b.n	80a3fa2 <__pow5mult+0x5a>
 80a3fc8:	4622      	mov	r2, r4
 80a3fca:	4621      	mov	r1, r4
 80a3fcc:	4630      	mov	r0, r6
 80a3fce:	f7ff ff2b 	bl	80a3e28 <__multiply>
 80a3fd2:	6020      	str	r0, [r4, #0]
 80a3fd4:	f8c0 8000 	str.w	r8, [r0]
 80a3fd8:	e7f4      	b.n	80a3fc4 <__pow5mult+0x7c>
 80a3fda:	4638      	mov	r0, r7
 80a3fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3fe0:	080a4810 	.word	0x080a4810

080a3fe4 <__lshift>:
 80a3fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3fe8:	460c      	mov	r4, r1
 80a3fea:	4607      	mov	r7, r0
 80a3fec:	4691      	mov	r9, r2
 80a3fee:	6926      	ldr	r6, [r4, #16]
 80a3ff0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a3ff4:	4456      	add	r6, sl
 80a3ff6:	6849      	ldr	r1, [r1, #4]
 80a3ff8:	68a3      	ldr	r3, [r4, #8]
 80a3ffa:	1c75      	adds	r5, r6, #1
 80a3ffc:	42ab      	cmp	r3, r5
 80a3ffe:	da02      	bge.n	80a4006 <__lshift+0x22>
 80a4000:	3101      	adds	r1, #1
 80a4002:	005b      	lsls	r3, r3, #1
 80a4004:	e7fa      	b.n	80a3ffc <__lshift+0x18>
 80a4006:	4638      	mov	r0, r7
 80a4008:	f7ff fdf3 	bl	80a3bf2 <_Balloc>
 80a400c:	2300      	movs	r3, #0
 80a400e:	4680      	mov	r8, r0
 80a4010:	461a      	mov	r2, r3
 80a4012:	f100 0114 	add.w	r1, r0, #20
 80a4016:	4553      	cmp	r3, sl
 80a4018:	da03      	bge.n	80a4022 <__lshift+0x3e>
 80a401a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80a401e:	3301      	adds	r3, #1
 80a4020:	e7f9      	b.n	80a4016 <__lshift+0x32>
 80a4022:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80a4026:	6920      	ldr	r0, [r4, #16]
 80a4028:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a402c:	f019 091f 	ands.w	r9, r9, #31
 80a4030:	f104 0114 	add.w	r1, r4, #20
 80a4034:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80a4038:	d014      	beq.n	80a4064 <__lshift+0x80>
 80a403a:	f1c9 0c20 	rsb	ip, r9, #32
 80a403e:	2200      	movs	r2, #0
 80a4040:	6808      	ldr	r0, [r1, #0]
 80a4042:	469a      	mov	sl, r3
 80a4044:	fa00 f009 	lsl.w	r0, r0, r9
 80a4048:	4302      	orrs	r2, r0
 80a404a:	f843 2b04 	str.w	r2, [r3], #4
 80a404e:	f851 2b04 	ldr.w	r2, [r1], #4
 80a4052:	458e      	cmp	lr, r1
 80a4054:	fa22 f20c 	lsr.w	r2, r2, ip
 80a4058:	d8f2      	bhi.n	80a4040 <__lshift+0x5c>
 80a405a:	f8ca 2004 	str.w	r2, [sl, #4]
 80a405e:	b142      	cbz	r2, 80a4072 <__lshift+0x8e>
 80a4060:	1cb5      	adds	r5, r6, #2
 80a4062:	e006      	b.n	80a4072 <__lshift+0x8e>
 80a4064:	3b04      	subs	r3, #4
 80a4066:	f851 2b04 	ldr.w	r2, [r1], #4
 80a406a:	458e      	cmp	lr, r1
 80a406c:	f843 2f04 	str.w	r2, [r3, #4]!
 80a4070:	d8f9      	bhi.n	80a4066 <__lshift+0x82>
 80a4072:	3d01      	subs	r5, #1
 80a4074:	4638      	mov	r0, r7
 80a4076:	f8c8 5010 	str.w	r5, [r8, #16]
 80a407a:	4621      	mov	r1, r4
 80a407c:	f7ff fdee 	bl	80a3c5c <_Bfree>
 80a4080:	4640      	mov	r0, r8
 80a4082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a4086 <__mcmp>:
 80a4086:	6903      	ldr	r3, [r0, #16]
 80a4088:	690a      	ldr	r2, [r1, #16]
 80a408a:	b510      	push	{r4, lr}
 80a408c:	1a9b      	subs	r3, r3, r2
 80a408e:	d111      	bne.n	80a40b4 <__mcmp+0x2e>
 80a4090:	0092      	lsls	r2, r2, #2
 80a4092:	3014      	adds	r0, #20
 80a4094:	3114      	adds	r1, #20
 80a4096:	1883      	adds	r3, r0, r2
 80a4098:	440a      	add	r2, r1
 80a409a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80a409e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80a40a2:	428c      	cmp	r4, r1
 80a40a4:	d002      	beq.n	80a40ac <__mcmp+0x26>
 80a40a6:	d307      	bcc.n	80a40b8 <__mcmp+0x32>
 80a40a8:	2001      	movs	r0, #1
 80a40aa:	bd10      	pop	{r4, pc}
 80a40ac:	4298      	cmp	r0, r3
 80a40ae:	d3f4      	bcc.n	80a409a <__mcmp+0x14>
 80a40b0:	2000      	movs	r0, #0
 80a40b2:	bd10      	pop	{r4, pc}
 80a40b4:	4618      	mov	r0, r3
 80a40b6:	bd10      	pop	{r4, pc}
 80a40b8:	f04f 30ff 	mov.w	r0, #4294967295
 80a40bc:	bd10      	pop	{r4, pc}

080a40be <__mdiff>:
 80a40be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a40c2:	460c      	mov	r4, r1
 80a40c4:	4607      	mov	r7, r0
 80a40c6:	4611      	mov	r1, r2
 80a40c8:	4620      	mov	r0, r4
 80a40ca:	4615      	mov	r5, r2
 80a40cc:	f7ff ffdb 	bl	80a4086 <__mcmp>
 80a40d0:	1e06      	subs	r6, r0, #0
 80a40d2:	d108      	bne.n	80a40e6 <__mdiff+0x28>
 80a40d4:	4631      	mov	r1, r6
 80a40d6:	4638      	mov	r0, r7
 80a40d8:	f7ff fd8b 	bl	80a3bf2 <_Balloc>
 80a40dc:	2301      	movs	r3, #1
 80a40de:	6103      	str	r3, [r0, #16]
 80a40e0:	6146      	str	r6, [r0, #20]
 80a40e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a40e6:	bfbc      	itt	lt
 80a40e8:	4623      	movlt	r3, r4
 80a40ea:	462c      	movlt	r4, r5
 80a40ec:	4638      	mov	r0, r7
 80a40ee:	6861      	ldr	r1, [r4, #4]
 80a40f0:	bfba      	itte	lt
 80a40f2:	461d      	movlt	r5, r3
 80a40f4:	2601      	movlt	r6, #1
 80a40f6:	2600      	movge	r6, #0
 80a40f8:	f7ff fd7b 	bl	80a3bf2 <_Balloc>
 80a40fc:	692b      	ldr	r3, [r5, #16]
 80a40fe:	60c6      	str	r6, [r0, #12]
 80a4100:	6926      	ldr	r6, [r4, #16]
 80a4102:	f105 0914 	add.w	r9, r5, #20
 80a4106:	f104 0114 	add.w	r1, r4, #20
 80a410a:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80a410e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80a4112:	f100 0514 	add.w	r5, r0, #20
 80a4116:	f04f 0c00 	mov.w	ip, #0
 80a411a:	f851 2b04 	ldr.w	r2, [r1], #4
 80a411e:	f859 4b04 	ldr.w	r4, [r9], #4
 80a4122:	b293      	uxth	r3, r2
 80a4124:	449c      	add	ip, r3
 80a4126:	b2a3      	uxth	r3, r4
 80a4128:	0c24      	lsrs	r4, r4, #16
 80a412a:	ebc3 030c 	rsb	r3, r3, ip
 80a412e:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 80a4132:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80a4136:	b29b      	uxth	r3, r3
 80a4138:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80a413c:	45c8      	cmp	r8, r9
 80a413e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a4142:	468e      	mov	lr, r1
 80a4144:	f845 2b04 	str.w	r2, [r5], #4
 80a4148:	d8e7      	bhi.n	80a411a <__mdiff+0x5c>
 80a414a:	45be      	cmp	lr, r7
 80a414c:	d20e      	bcs.n	80a416c <__mdiff+0xae>
 80a414e:	f85e 1b04 	ldr.w	r1, [lr], #4
 80a4152:	b28a      	uxth	r2, r1
 80a4154:	4462      	add	r2, ip
 80a4156:	1413      	asrs	r3, r2, #16
 80a4158:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80a415c:	b292      	uxth	r2, r2
 80a415e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80a4162:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a4166:	f845 2b04 	str.w	r2, [r5], #4
 80a416a:	e7ee      	b.n	80a414a <__mdiff+0x8c>
 80a416c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80a4170:	b90b      	cbnz	r3, 80a4176 <__mdiff+0xb8>
 80a4172:	3e01      	subs	r6, #1
 80a4174:	e7fa      	b.n	80a416c <__mdiff+0xae>
 80a4176:	6106      	str	r6, [r0, #16]
 80a4178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a417c <__ulp>:
 80a417c:	4b10      	ldr	r3, [pc, #64]	; (80a41c0 <__ulp+0x44>)
 80a417e:	400b      	ands	r3, r1
 80a4180:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a4184:	2b00      	cmp	r3, #0
 80a4186:	dd02      	ble.n	80a418e <__ulp+0x12>
 80a4188:	2000      	movs	r0, #0
 80a418a:	4619      	mov	r1, r3
 80a418c:	4770      	bx	lr
 80a418e:	425b      	negs	r3, r3
 80a4190:	151b      	asrs	r3, r3, #20
 80a4192:	2b13      	cmp	r3, #19
 80a4194:	f04f 0000 	mov.w	r0, #0
 80a4198:	f04f 0100 	mov.w	r1, #0
 80a419c:	dc04      	bgt.n	80a41a8 <__ulp+0x2c>
 80a419e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80a41a2:	fa42 f103 	asr.w	r1, r2, r3
 80a41a6:	4770      	bx	lr
 80a41a8:	3b14      	subs	r3, #20
 80a41aa:	2b1e      	cmp	r3, #30
 80a41ac:	f04f 0201 	mov.w	r2, #1
 80a41b0:	bfce      	itee	gt
 80a41b2:	4613      	movgt	r3, r2
 80a41b4:	f1c3 031f 	rsble	r3, r3, #31
 80a41b8:	fa02 f303 	lslle.w	r3, r2, r3
 80a41bc:	4618      	mov	r0, r3
 80a41be:	4770      	bx	lr
 80a41c0:	7ff00000 	.word	0x7ff00000

080a41c4 <__b2d>:
 80a41c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a41c6:	6905      	ldr	r5, [r0, #16]
 80a41c8:	f100 0614 	add.w	r6, r0, #20
 80a41cc:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80a41d0:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80a41d4:	1f2f      	subs	r7, r5, #4
 80a41d6:	4620      	mov	r0, r4
 80a41d8:	f7ff fdd0 	bl	80a3d7c <__hi0bits>
 80a41dc:	f1c0 0320 	rsb	r3, r0, #32
 80a41e0:	280a      	cmp	r0, #10
 80a41e2:	600b      	str	r3, [r1, #0]
 80a41e4:	dc14      	bgt.n	80a4210 <__b2d+0x4c>
 80a41e6:	f1c0 0e0b 	rsb	lr, r0, #11
 80a41ea:	fa24 f10e 	lsr.w	r1, r4, lr
 80a41ee:	42be      	cmp	r6, r7
 80a41f0:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80a41f4:	bf34      	ite	cc
 80a41f6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a41fa:	2100      	movcs	r1, #0
 80a41fc:	3015      	adds	r0, #21
 80a41fe:	fa04 f000 	lsl.w	r0, r4, r0
 80a4202:	fa21 f10e 	lsr.w	r1, r1, lr
 80a4206:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a420a:	ea40 0201 	orr.w	r2, r0, r1
 80a420e:	e023      	b.n	80a4258 <__b2d+0x94>
 80a4210:	42be      	cmp	r6, r7
 80a4212:	bf3a      	itte	cc
 80a4214:	f1a5 0708 	subcc.w	r7, r5, #8
 80a4218:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a421c:	2100      	movcs	r1, #0
 80a421e:	380b      	subs	r0, #11
 80a4220:	d015      	beq.n	80a424e <__b2d+0x8a>
 80a4222:	4084      	lsls	r4, r0
 80a4224:	f1c0 0520 	rsb	r5, r0, #32
 80a4228:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80a422c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80a4230:	42b7      	cmp	r7, r6
 80a4232:	fa21 fe05 	lsr.w	lr, r1, r5
 80a4236:	ea44 030e 	orr.w	r3, r4, lr
 80a423a:	bf8c      	ite	hi
 80a423c:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 80a4240:	2400      	movls	r4, #0
 80a4242:	fa01 f000 	lsl.w	r0, r1, r0
 80a4246:	40ec      	lsrs	r4, r5
 80a4248:	ea40 0204 	orr.w	r2, r0, r4
 80a424c:	e004      	b.n	80a4258 <__b2d+0x94>
 80a424e:	460a      	mov	r2, r1
 80a4250:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80a4254:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a4258:	4610      	mov	r0, r2
 80a425a:	4619      	mov	r1, r3
 80a425c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a425e <__d2b>:
 80a425e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a4262:	461c      	mov	r4, r3
 80a4264:	2101      	movs	r1, #1
 80a4266:	4690      	mov	r8, r2
 80a4268:	9e08      	ldr	r6, [sp, #32]
 80a426a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a426c:	f7ff fcc1 	bl	80a3bf2 <_Balloc>
 80a4270:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80a4274:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80a4278:	4607      	mov	r7, r0
 80a427a:	b10c      	cbz	r4, 80a4280 <__d2b+0x22>
 80a427c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80a4280:	9201      	str	r2, [sp, #4]
 80a4282:	f1b8 0f00 	cmp.w	r8, #0
 80a4286:	d019      	beq.n	80a42bc <__d2b+0x5e>
 80a4288:	a802      	add	r0, sp, #8
 80a428a:	f840 8d08 	str.w	r8, [r0, #-8]!
 80a428e:	f7ff fd95 	bl	80a3dbc <__lo0bits>
 80a4292:	9b00      	ldr	r3, [sp, #0]
 80a4294:	b148      	cbz	r0, 80a42aa <__d2b+0x4c>
 80a4296:	9a01      	ldr	r2, [sp, #4]
 80a4298:	f1c0 0120 	rsb	r1, r0, #32
 80a429c:	fa02 f101 	lsl.w	r1, r2, r1
 80a42a0:	430b      	orrs	r3, r1
 80a42a2:	40c2      	lsrs	r2, r0
 80a42a4:	617b      	str	r3, [r7, #20]
 80a42a6:	9201      	str	r2, [sp, #4]
 80a42a8:	e000      	b.n	80a42ac <__d2b+0x4e>
 80a42aa:	617b      	str	r3, [r7, #20]
 80a42ac:	9b01      	ldr	r3, [sp, #4]
 80a42ae:	2b00      	cmp	r3, #0
 80a42b0:	bf14      	ite	ne
 80a42b2:	2102      	movne	r1, #2
 80a42b4:	2101      	moveq	r1, #1
 80a42b6:	61bb      	str	r3, [r7, #24]
 80a42b8:	6139      	str	r1, [r7, #16]
 80a42ba:	e007      	b.n	80a42cc <__d2b+0x6e>
 80a42bc:	a801      	add	r0, sp, #4
 80a42be:	f7ff fd7d 	bl	80a3dbc <__lo0bits>
 80a42c2:	9b01      	ldr	r3, [sp, #4]
 80a42c4:	2101      	movs	r1, #1
 80a42c6:	617b      	str	r3, [r7, #20]
 80a42c8:	6139      	str	r1, [r7, #16]
 80a42ca:	3020      	adds	r0, #32
 80a42cc:	b134      	cbz	r4, 80a42dc <__d2b+0x7e>
 80a42ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80a42d2:	4404      	add	r4, r0
 80a42d4:	6034      	str	r4, [r6, #0]
 80a42d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a42da:	e009      	b.n	80a42f0 <__d2b+0x92>
 80a42dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a42e0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80a42e4:	6030      	str	r0, [r6, #0]
 80a42e6:	6918      	ldr	r0, [r3, #16]
 80a42e8:	f7ff fd48 	bl	80a3d7c <__hi0bits>
 80a42ec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80a42f0:	6028      	str	r0, [r5, #0]
 80a42f2:	4638      	mov	r0, r7
 80a42f4:	b002      	add	sp, #8
 80a42f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a42fa <__ratio>:
 80a42fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a42fe:	4688      	mov	r8, r1
 80a4300:	4669      	mov	r1, sp
 80a4302:	4681      	mov	r9, r0
 80a4304:	f7ff ff5e 	bl	80a41c4 <__b2d>
 80a4308:	460d      	mov	r5, r1
 80a430a:	4604      	mov	r4, r0
 80a430c:	a901      	add	r1, sp, #4
 80a430e:	4640      	mov	r0, r8
 80a4310:	f7ff ff58 	bl	80a41c4 <__b2d>
 80a4314:	460f      	mov	r7, r1
 80a4316:	4606      	mov	r6, r0
 80a4318:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a431c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a4320:	4620      	mov	r0, r4
 80a4322:	1a9a      	subs	r2, r3, r2
 80a4324:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80a4328:	1ac9      	subs	r1, r1, r3
 80a432a:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80a432e:	2b00      	cmp	r3, #0
 80a4330:	bfcc      	ite	gt
 80a4332:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80a4336:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 80a433a:	4632      	mov	r2, r6
 80a433c:	463b      	mov	r3, r7
 80a433e:	4629      	mov	r1, r5
 80a4340:	f7fd fe3c 	bl	80a1fbc <__aeabi_ddiv>
 80a4344:	b003      	add	sp, #12
 80a4346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a434a <__copybits>:
 80a434a:	3901      	subs	r1, #1
 80a434c:	b510      	push	{r4, lr}
 80a434e:	1149      	asrs	r1, r1, #5
 80a4350:	6914      	ldr	r4, [r2, #16]
 80a4352:	3101      	adds	r1, #1
 80a4354:	f102 0314 	add.w	r3, r2, #20
 80a4358:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a435c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a4360:	42a3      	cmp	r3, r4
 80a4362:	4602      	mov	r2, r0
 80a4364:	d204      	bcs.n	80a4370 <__copybits+0x26>
 80a4366:	f853 2b04 	ldr.w	r2, [r3], #4
 80a436a:	f840 2b04 	str.w	r2, [r0], #4
 80a436e:	e7f7      	b.n	80a4360 <__copybits+0x16>
 80a4370:	2300      	movs	r3, #0
 80a4372:	428a      	cmp	r2, r1
 80a4374:	d202      	bcs.n	80a437c <__copybits+0x32>
 80a4376:	f842 3b04 	str.w	r3, [r2], #4
 80a437a:	e7fa      	b.n	80a4372 <__copybits+0x28>
 80a437c:	bd10      	pop	{r4, pc}

080a437e <__any_on>:
 80a437e:	f100 0214 	add.w	r2, r0, #20
 80a4382:	6900      	ldr	r0, [r0, #16]
 80a4384:	114b      	asrs	r3, r1, #5
 80a4386:	4298      	cmp	r0, r3
 80a4388:	b510      	push	{r4, lr}
 80a438a:	db0c      	blt.n	80a43a6 <__any_on+0x28>
 80a438c:	dd0c      	ble.n	80a43a8 <__any_on+0x2a>
 80a438e:	f011 011f 	ands.w	r1, r1, #31
 80a4392:	d009      	beq.n	80a43a8 <__any_on+0x2a>
 80a4394:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a4398:	fa24 f001 	lsr.w	r0, r4, r1
 80a439c:	fa00 f101 	lsl.w	r1, r0, r1
 80a43a0:	428c      	cmp	r4, r1
 80a43a2:	d10c      	bne.n	80a43be <__any_on+0x40>
 80a43a4:	e000      	b.n	80a43a8 <__any_on+0x2a>
 80a43a6:	4603      	mov	r3, r0
 80a43a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a43ac:	4293      	cmp	r3, r2
 80a43ae:	d904      	bls.n	80a43ba <__any_on+0x3c>
 80a43b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a43b4:	2900      	cmp	r1, #0
 80a43b6:	d0f9      	beq.n	80a43ac <__any_on+0x2e>
 80a43b8:	e001      	b.n	80a43be <__any_on+0x40>
 80a43ba:	2000      	movs	r0, #0
 80a43bc:	bd10      	pop	{r4, pc}
 80a43be:	2001      	movs	r0, #1
 80a43c0:	bd10      	pop	{r4, pc}

080a43c2 <_calloc_r>:
 80a43c2:	b538      	push	{r3, r4, r5, lr}
 80a43c4:	fb02 f401 	mul.w	r4, r2, r1
 80a43c8:	4621      	mov	r1, r4
 80a43ca:	f7fc fc0b 	bl	80a0be4 <_malloc_r>
 80a43ce:	4605      	mov	r5, r0
 80a43d0:	b118      	cbz	r0, 80a43da <_calloc_r+0x18>
 80a43d2:	4622      	mov	r2, r4
 80a43d4:	2100      	movs	r1, #0
 80a43d6:	f7fe fa78 	bl	80a28ca <memset>
 80a43da:	4628      	mov	r0, r5
 80a43dc:	bd38      	pop	{r3, r4, r5, pc}

080a43de <link_code_end>:
	...

080a43e0 <dynalib_user>:
 80a43e0:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a43f0:	0000 0000 6f62 7474 6e6f 0065 6f73 6c67     ....bottone.sogl
 80a4400:	6169 5400 6d65 7270 6165 7574 6172 6120     ia.Tempreatura a
 80a4410:	7474 6175 656c 7300 7465 6f53 6c67 6169     ttuale.setSoglia
 80a4420:	5200 6c65 7961 4900 766e 6c61 6469 7220     .Relay.Invalid r
 80a4430:	6165 6964 676e 0000                         eading..

080a4438 <_ZTV8SPIClass>:
	...
 80a4440:	0bf5 080a 0bf7 080a 6e6c 6600 006e 6f63     ........ln.fn.co
 80a4450:	6564 6400 7465 6961 006c 0a0d 2500 3130     de.detail....%01
 80a4460:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
 80a4470:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
 80a4480:	6564 6174 6c69 2073 203d 6200 7561 0064     details = .baud.
 80a4490:	6553 6972 6c61 5500 4253 6553 6972 6c61     Serial.USBSerial
 80a44a0:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
 80a44b0:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
 80a44c0:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
 80a44d0:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
 80a44e0:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
 80a44f0:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 80a4500:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
 80a4510:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
 80a4520:	6170 696e 0063 6c61 006c 005a 2b25 3330     panic.all.Z.%+03
 80a4530:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
 80a4540:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
 80a4550:	656d 0000                                   me..

080a4554 <_ZTV9IPAddress>:
	...
 80a455c:	1033 080a 1023 080a 1025 080a               3...#...%...

080a4568 <_ZTV9USBSerial>:
	...
 80a4570:	10ed 080a 113d 080a 114b 080a 0d49 080a     ....=...K...I...
 80a4580:	1129 080a 10ef 080a 1105 080a 1137 080a     )...........7...
 80a4590:	111b 080a 10e9 080a                         ........

080a4598 <_ZTV11USARTSerial>:
	...
 80a45a0:	1295 080a 12e5 080a 12f3 080a 0d49 080a     ............I...
 80a45b0:	12a9 080a 12cb 080a 12b7 080a 12df 080a     ................
 80a45c0:	1297 080a 129b 080a                         ........

080a45c8 <_ZTV7TwoWire>:
	...
 80a45d0:	1399 080a 13e3 080a 13bb 080a 139b 080a     ................
 80a45e0:	13c3 080a 13cb 080a 13d3 080a 13db 080a     ................

080a45f0 <_ZTVN5spark9WiFiClassE>:
	...
 80a45f8:	14b3 080a 14a9 080a 149f 080a 141d 080a     ................
 80a4608:	0e1f 080a 1493 080a 1487 080a 147f 080a     ................
 80a4618:	1475 080a 146b 080a 1427 080a               u...k...'...

080a4624 <_ZTVN5spark12NetworkClassE>:
	...
 80a462c:	14d1 080a 14db 080a 14e5 080a 14ef 080a     ................
 80a463c:	14f9 080a 1505 080a 1511 080a 151d 080a     ................
 80a464c:	1525 080a 152f 080a 1539 080a               %.../...9...

080a4658 <__sf_fake_stdin>:
	...

080a4678 <__sf_fake_stdout>:
	...

080a4698 <__sf_fake_stderr>:
	...
 80a46b8:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

080a46c4 <fpi.5342>:
 80a46c4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80a46d4:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

080a46e4 <fpinan.5378>:
 80a46e4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 80a46f4:	0000 0000                                   ....

080a46f8 <tinytens>:
 80a46f8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80a4708:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80a4718:	6f43 64ac 0628 1168                         Co.d(.h.

080a4720 <__mprec_tens>:
 80a4720:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80a4730:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80a4740:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80a4750:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80a4760:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80a4770:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80a4780:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80a4790:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80a47a0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80a47b0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80a47c0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80a47d0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80a47e0:	9db4 79d9 7843 44ea                         ...yCx.D

080a47e8 <__mprec_bigtens>:
 80a47e8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80a47f8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80a4808:	bf3c 7f73 4fdd 7515                         <.s..O.u

080a4810 <p05.5385>:
 80a4810:	0005 0000 0019 0000 007d 0000               ........}...

080a481c <link_const_variable_data_end>:
 80a481c:	080a0291 	.word	0x080a0291
 80a4820:	080a05f9 	.word	0x080a05f9
 80a4824:	080a05fd 	.word	0x080a05fd
 80a4828:	080a0835 	.word	0x080a0835
 80a482c:	080a0c35 	.word	0x080a0c35
 80a4830:	080a0e2d 	.word	0x080a0e2d
 80a4834:	080a0e3d 	.word	0x080a0e3d
 80a4838:	080a0e75 	.word	0x080a0e75
 80a483c:	080a14bd 	.word	0x080a14bd
 80a4840:	080a1589 	.word	0x080a1589
 80a4844:	080a16a5 	.word	0x080a16a5
 80a4848:	080a16e9 	.word	0x080a16e9
 80a484c:	080a1769 	.word	0x080a1769
 80a4850:	080a17ed 	.word	0x080a17ed
 80a4854:	080a18b1 	.word	0x080a18b1
 80a4858:	080a1975 	.word	0x080a1975

080a485c <link_constructors_end>:
 80a485c:	00000000 	.word	0x00000000
