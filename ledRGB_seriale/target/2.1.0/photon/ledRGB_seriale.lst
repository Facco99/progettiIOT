
c:/IOT/progetti/ledRGB_seriale/target/2.1.0/photon/ledRGB_seriale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001234  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a1250  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a1254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004e8  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a12bc  080a12bc  000212bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a12e4  080a12e4  000212e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000eb454  00000000  00000000  000212e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011afb  00000000  00000000  0010c73c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013914  00000000  00000000  0011e237  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001ba8  00000000  00000000  00131b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004160  00000000  00000000  001336f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024eb9  00000000  00000000  00137853  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000265f0  00000000  00000000  0015c70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aae8d  00000000  00000000  00182cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000043d0  00000000  00000000  0022db8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f807 	bl	80a1040 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f80f 	bl	80a105c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a1254 	.word	0x080a1254
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20000550 	.word	0x20000550
 80a0058:	20000550 	.word	0x20000550

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fc19 	bl	80a0894 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a122c 	.word	0x080a122c
 80a0080:	080a124c 	.word	0x080a124c

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b814 	b.w	80a00b0 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f81f 	bl	80a00cc <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f000 bbc1 	b.w	80a0818 <_post_loop>

080a0096 <_Znaj>:
 80a0096:	f000 bab1 	b.w	80a05fc <malloc>

080a009a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009a:	f000 bab7 	b.w	80a060c <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:
 */

char comando;

// setup() runs once, when the device is first turned on.
void setup() {
 80a00b0:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
 80a00b2:	f000 fcef 	bl	80a0a94 <_Z16_fetch_usbserialv>
 80a00b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00ba:	f000 fcd1 	bl	80a0a60 <_ZN9USBSerial5beginEl>
  leds.init();

}
 80a00be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  leds.init();
 80a00c2:	4801      	ldr	r0, [pc, #4]	; (80a00c8 <setup+0x18>)
 80a00c4:	f000 b8f2 	b.w	80a02ac <_ZN12ChainableLED4initEv>
 80a00c8:	20000070 	.word	0x20000070

080a00cc <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a00cc:	b507      	push	{r0, r1, r2, lr}
  // The core of your code will likely live here.

  comando = Serial.read();
 80a00ce:	f000 fce1 	bl	80a0a94 <_Z16_fetch_usbserialv>
 80a00d2:	6803      	ldr	r3, [r0, #0]
 80a00d4:	695b      	ldr	r3, [r3, #20]
 80a00d6:	4798      	blx	r3
 80a00d8:	4b0e      	ldr	r3, [pc, #56]	; (80a0114 <loop+0x48>)
 80a00da:	b2c0      	uxtb	r0, r0

  if(comando == 'r'){
 80a00dc:	2872      	cmp	r0, #114	; 0x72
  comando = Serial.read();
 80a00de:	7018      	strb	r0, [r3, #0]
  if(comando == 'r'){
 80a00e0:	d109      	bne.n	80a00f6 <loop+0x2a>
    leds.setColorRGB(0, 255, 0, 0);
 80a00e2:	2300      	movs	r3, #0
 80a00e4:	22ff      	movs	r2, #255	; 0xff
 80a00e6:	9300      	str	r3, [sp, #0]
  }else if(comando == 'b'){
    leds.setColorRGB(0, 0, 0, 255);
 80a00e8:	4619      	mov	r1, r3
  }else if(comando == 'g'){
    leds.setColorRGB(0, 0, 255, 0);
 80a00ea:	480b      	ldr	r0, [pc, #44]	; (80a0118 <loop+0x4c>)
 80a00ec:	f000 f896 	bl	80a021c <_ZN12ChainableLED11setColorRGBEhhhh>
  }
 80a00f0:	b003      	add	sp, #12
 80a00f2:	f85d fb04 	ldr.w	pc, [sp], #4
  }else if(comando == 'b'){
 80a00f6:	2862      	cmp	r0, #98	; 0x62
 80a00f8:	d104      	bne.n	80a0104 <loop+0x38>
    leds.setColorRGB(0, 0, 0, 255);
 80a00fa:	23ff      	movs	r3, #255	; 0xff
 80a00fc:	9300      	str	r3, [sp, #0]
 80a00fe:	2300      	movs	r3, #0
 80a0100:	461a      	mov	r2, r3
 80a0102:	e7f1      	b.n	80a00e8 <loop+0x1c>
  }else if(comando == 'g'){
 80a0104:	2867      	cmp	r0, #103	; 0x67
 80a0106:	d1f3      	bne.n	80a00f0 <loop+0x24>
    leds.setColorRGB(0, 0, 255, 0);
 80a0108:	2200      	movs	r2, #0
 80a010a:	23ff      	movs	r3, #255	; 0xff
 80a010c:	4611      	mov	r1, r2
 80a010e:	9200      	str	r2, [sp, #0]
 80a0110:	e7eb      	b.n	80a00ea <loop+0x1e>
 80a0112:	bf00      	nop
 80a0114:	2000006c 	.word	0x2000006c
 80a0118:	20000070 	.word	0x20000070

080a011c <_GLOBAL__sub_I_leds>:
 80a011c:	b510      	push	{r4, lr}
ChainableLED leds(D2, D3, NUM_LEDS);
 80a011e:	4c07      	ldr	r4, [pc, #28]	; (80a013c <_GLOBAL__sub_I_leds+0x20>)
 80a0120:	2203      	movs	r2, #3
 80a0122:	2102      	movs	r1, #2
 80a0124:	4620      	mov	r0, r4
 80a0126:	2301      	movs	r3, #1
 80a0128:	f000 f80e 	bl	80a0148 <_ZN12ChainableLEDC1Ehhh>
 80a012c:	4620      	mov	r0, r4
 80a012e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
ChainableLED leds(D2, D3, NUM_LEDS);
 80a0132:	4a03      	ldr	r2, [pc, #12]	; (80a0140 <_GLOBAL__sub_I_leds+0x24>)
 80a0134:	4903      	ldr	r1, [pc, #12]	; (80a0144 <_GLOBAL__sub_I_leds+0x28>)
 80a0136:	f000 bf63 	b.w	80a1000 <__aeabi_atexit>
 80a013a:	bf00      	nop
 80a013c:	20000070 	.word	0x20000070
 80a0140:	20000068 	.word	0x20000068
 80a0144:	080a0163 	.word	0x080a0163

080a0148 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
 80a0148:	b510      	push	{r4, lr}
 80a014a:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
 80a014c:	7001      	strb	r1, [r0, #0]
 80a014e:	7042      	strb	r2, [r0, #1]
 80a0150:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
 80a0152:	2101      	movs	r1, #1
 80a0154:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80a0158:	f000 ff5c 	bl	80a1014 <calloc>
 80a015c:	6060      	str	r0, [r4, #4]
}
 80a015e:	4620      	mov	r0, r4
 80a0160:	bd10      	pop	{r4, pc}

080a0162 <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
 80a0162:	b510      	push	{r4, lr}
 80a0164:	4604      	mov	r4, r0
{
    free(_led_state);
 80a0166:	6840      	ldr	r0, [r0, #4]
 80a0168:	f000 fa50 	bl	80a060c <free>
}
 80a016c:	4620      	mov	r0, r4
 80a016e:	bd10      	pop	{r4, pc}

080a0170 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
 80a0170:	b510      	push	{r4, lr}
 80a0172:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
 80a0174:	2100      	movs	r1, #0
 80a0176:	7800      	ldrb	r0, [r0, #0]
 80a0178:	f000 fed1 	bl	80a0f1e <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a017c:	2014      	movs	r0, #20
 80a017e:	f000 f8cf 	bl	80a0320 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
 80a0182:	7820      	ldrb	r0, [r4, #0]
 80a0184:	2101      	movs	r1, #1
 80a0186:	f000 feca 	bl	80a0f1e <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
 80a018a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a018e:	2014      	movs	r0, #20
 80a0190:	f000 b8c6 	b.w	80a0320 <HAL_Delay_Microseconds>

080a0194 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
 80a0194:	b570      	push	{r4, r5, r6, lr}
 80a0196:	4606      	mov	r6, r0
 80a0198:	460c      	mov	r4, r1
 80a019a:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
 80a019c:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
 80a019e:	bf4c      	ite	mi
 80a01a0:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
 80a01a2:	2100      	movpl	r1, #0
 80a01a4:	7870      	ldrb	r0, [r6, #1]
 80a01a6:	f000 feba 	bl	80a0f1e <digitalWrite>
        clk();
 80a01aa:	3d01      	subs	r5, #1
 80a01ac:	4630      	mov	r0, r6
 80a01ae:	f7ff ffdf 	bl	80a0170 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
 80a01b2:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
 80a01b4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
 80a01b8:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
 80a01ba:	d1ef      	bne.n	80a019c <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
 80a01bc:	bd70      	pop	{r4, r5, r6, pc}

080a01be <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
 80a01be:	f013 0f80 	tst.w	r3, #128	; 0x80
{
 80a01c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a01c4:	460d      	mov	r5, r1
 80a01c6:	4616      	mov	r6, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
 80a01c8:	bf14      	ite	ne
 80a01ca:	21c0      	movne	r1, #192	; 0xc0
 80a01cc:	21e0      	moveq	r1, #224	; 0xe0
{
 80a01ce:	4604      	mov	r4, r0
 80a01d0:	461f      	mov	r7, r3
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
 80a01d2:	065a      	lsls	r2, r3, #25
 80a01d4:	bf58      	it	pl
 80a01d6:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
 80a01da:	0633      	lsls	r3, r6, #24
 80a01dc:	bf58      	it	pl
 80a01de:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
 80a01e2:	0670      	lsls	r0, r6, #25
 80a01e4:	bf58      	it	pl
 80a01e6:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
 80a01ea:	062a      	lsls	r2, r5, #24
 80a01ec:	bf58      	it	pl
 80a01ee:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
 80a01f2:	066b      	lsls	r3, r5, #25
 80a01f4:	bf58      	it	pl
 80a01f6:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
 80a01fa:	4620      	mov	r0, r4
 80a01fc:	f7ff ffca 	bl	80a0194 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
 80a0200:	4639      	mov	r1, r7
 80a0202:	4620      	mov	r0, r4
 80a0204:	f7ff ffc6 	bl	80a0194 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
 80a0208:	4631      	mov	r1, r6
 80a020a:	4620      	mov	r0, r4
 80a020c:	f7ff ffc2 	bl	80a0194 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
 80a0210:	4629      	mov	r1, r5
 80a0212:	4620      	mov	r0, r4
}
 80a0214:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    sendByte(red);
 80a0218:	f7ff bfbc 	b.w	80a0194 <_ZN12ChainableLED8sendByteEh>

080a021c <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
 80a021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0220:	4604      	mov	r4, r0
 80a0222:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
 80a0224:	2100      	movs	r1, #0
{
 80a0226:	4690      	mov	r8, r2
 80a0228:	4699      	mov	r9, r3
 80a022a:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
 80a022e:	f7ff ffb1 	bl	80a0194 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0232:	2100      	movs	r1, #0
 80a0234:	4620      	mov	r0, r4
 80a0236:	f7ff ffad 	bl	80a0194 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a023a:	2100      	movs	r1, #0
 80a023c:	4620      	mov	r0, r4
 80a023e:	f7ff ffa9 	bl	80a0194 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0242:	2100      	movs	r1, #0
 80a0244:	4620      	mov	r0, r4
 80a0246:	f7ff ffa5 	bl	80a0194 <_ZN12ChainableLED8sendByteEh>
 80a024a:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
 80a024c:	78a3      	ldrb	r3, [r4, #2]
 80a024e:	b2f5      	uxtb	r5, r6
 80a0250:	42ab      	cmp	r3, r5
 80a0252:	d919      	bls.n	80a0288 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
 80a0254:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80a0258:	42af      	cmp	r7, r5
 80a025a:	f100 0201 	add.w	r2, r0, #1
 80a025e:	f100 0302 	add.w	r3, r0, #2
 80a0262:	d108      	bne.n	80a0276 <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
        {
            _led_state[i*3 + _CL_RED] = red;
 80a0264:	6861      	ldr	r1, [r4, #4]
 80a0266:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
 80a026a:	6861      	ldr	r1, [r4, #4]
 80a026c:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
 80a0270:	6861      	ldr	r1, [r4, #4]
 80a0272:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
 80a0276:	6861      	ldr	r1, [r4, #4]
 80a0278:	3601      	adds	r6, #1
 80a027a:	5ccb      	ldrb	r3, [r1, r3]
 80a027c:	5c8a      	ldrb	r2, [r1, r2]
 80a027e:	5c09      	ldrb	r1, [r1, r0]
 80a0280:	4620      	mov	r0, r4
 80a0282:	f7ff ff9c 	bl	80a01be <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
 80a0286:	e7e1      	b.n	80a024c <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
 80a0288:	4620      	mov	r0, r4
 80a028a:	2100      	movs	r1, #0
 80a028c:	f7ff ff82 	bl	80a0194 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0290:	4620      	mov	r0, r4
 80a0292:	2100      	movs	r1, #0
 80a0294:	f7ff ff7e 	bl	80a0194 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0298:	4620      	mov	r0, r4
 80a029a:	2100      	movs	r1, #0
 80a029c:	f7ff ff7a 	bl	80a0194 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a02a0:	4620      	mov	r0, r4
}
 80a02a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
 80a02a6:	2100      	movs	r1, #0
 80a02a8:	f7ff bf74 	b.w	80a0194 <_ZN12ChainableLED8sendByteEh>

080a02ac <_ZN12ChainableLED4initEv>:
{
 80a02ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a02ae:	4604      	mov	r4, r0
    pinMode(_data_pin, OUTPUT);
 80a02b0:	2500      	movs	r5, #0
    pinMode(_clk_pin, OUTPUT);
 80a02b2:	2101      	movs	r1, #1
 80a02b4:	7800      	ldrb	r0, [r0, #0]
 80a02b6:	f000 fe21 	bl	80a0efc <pinMode>
    pinMode(_data_pin, OUTPUT);
 80a02ba:	2101      	movs	r1, #1
 80a02bc:	7860      	ldrb	r0, [r4, #1]
 80a02be:	f000 fe1d 	bl	80a0efc <pinMode>
        setColorRGB(i, 0, 0, 0);
 80a02c2:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
 80a02c4:	78a3      	ldrb	r3, [r4, #2]
 80a02c6:	b2e9      	uxtb	r1, r5
 80a02c8:	428b      	cmp	r3, r1
 80a02ca:	d907      	bls.n	80a02dc <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
 80a02cc:	2300      	movs	r3, #0
 80a02ce:	4620      	mov	r0, r4
 80a02d0:	461a      	mov	r2, r3
 80a02d2:	9600      	str	r6, [sp, #0]
 80a02d4:	f7ff ffa2 	bl	80a021c <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
 80a02d8:	3501      	adds	r5, #1
 80a02da:	e7f3      	b.n	80a02c4 <_ZN12ChainableLED4initEv+0x18>
}
 80a02dc:	b002      	add	sp, #8
 80a02de:	bd70      	pop	{r4, r5, r6, pc}

080a02e0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a02e0:	b508      	push	{r3, lr}
 80a02e2:	4b02      	ldr	r3, [pc, #8]	; (80a02ec <HAL_Pin_Mode+0xc>)
 80a02e4:	681b      	ldr	r3, [r3, #0]
 80a02e6:	689b      	ldr	r3, [r3, #8]
 80a02e8:	9301      	str	r3, [sp, #4]
 80a02ea:	bd08      	pop	{r3, pc}
 80a02ec:	080601b0 	.word	0x080601b0

080a02f0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a02f0:	b508      	push	{r3, lr}
 80a02f2:	4b02      	ldr	r3, [pc, #8]	; (80a02fc <HAL_Get_Pin_Mode+0xc>)
 80a02f4:	681b      	ldr	r3, [r3, #0]
 80a02f6:	68db      	ldr	r3, [r3, #12]
 80a02f8:	9301      	str	r3, [sp, #4]
 80a02fa:	bd08      	pop	{r3, pc}
 80a02fc:	080601b0 	.word	0x080601b0

080a0300 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0300:	b508      	push	{r3, lr}
 80a0302:	4b02      	ldr	r3, [pc, #8]	; (80a030c <HAL_GPIO_Write+0xc>)
 80a0304:	681b      	ldr	r3, [r3, #0]
 80a0306:	691b      	ldr	r3, [r3, #16]
 80a0308:	9301      	str	r3, [sp, #4]
 80a030a:	bd08      	pop	{r3, pc}
 80a030c:	080601b0 	.word	0x080601b0

080a0310 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0310:	b508      	push	{r3, lr}
 80a0312:	4b02      	ldr	r3, [pc, #8]	; (80a031c <HAL_RNG_GetRandomNumber+0xc>)
 80a0314:	681b      	ldr	r3, [r3, #0]
 80a0316:	685b      	ldr	r3, [r3, #4]
 80a0318:	9301      	str	r3, [sp, #4]
 80a031a:	bd08      	pop	{r3, pc}
 80a031c:	0806019c 	.word	0x0806019c

080a0320 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0320:	b508      	push	{r3, lr}
 80a0322:	4b02      	ldr	r3, [pc, #8]	; (80a032c <HAL_Delay_Microseconds+0xc>)
 80a0324:	681b      	ldr	r3, [r3, #0]
 80a0326:	68db      	ldr	r3, [r3, #12]
 80a0328:	9301      	str	r3, [sp, #4]
 80a032a:	bd08      	pop	{r3, pc}
 80a032c:	0806019c 	.word	0x0806019c

080a0330 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0330:	b508      	push	{r3, lr}
 80a0332:	4b02      	ldr	r3, [pc, #8]	; (80a033c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0334:	681b      	ldr	r3, [r3, #0]
 80a0336:	695b      	ldr	r3, [r3, #20]
 80a0338:	9301      	str	r3, [sp, #4]
 80a033a:	bd08      	pop	{r3, pc}
 80a033c:	0806019c 	.word	0x0806019c

080a0340 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0340:	b508      	push	{r3, lr}
 80a0342:	4b02      	ldr	r3, [pc, #8]	; (80a034c <os_mutex_recursive_create+0xc>)
 80a0344:	681b      	ldr	r3, [r3, #0]
 80a0346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0348:	9301      	str	r3, [sp, #4]
 80a034a:	bd08      	pop	{r3, pc}
 80a034c:	080601d0 	.word	0x080601d0

080a0350 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0350:	b508      	push	{r3, lr}
 80a0352:	4b02      	ldr	r3, [pc, #8]	; (80a035c <os_mutex_recursive_destroy+0xc>)
 80a0354:	681b      	ldr	r3, [r3, #0]
 80a0356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0358:	9301      	str	r3, [sp, #4]
 80a035a:	bd08      	pop	{r3, pc}
 80a035c:	080601d0 	.word	0x080601d0

080a0360 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0360:	b508      	push	{r3, lr}
 80a0362:	4b02      	ldr	r3, [pc, #8]	; (80a036c <hal_usart_init+0xc>)
 80a0364:	681b      	ldr	r3, [r3, #0]
 80a0366:	699b      	ldr	r3, [r3, #24]
 80a0368:	9301      	str	r3, [sp, #4]
 80a036a:	bd08      	pop	{r3, pc}
 80a036c:	080601c4 	.word	0x080601c4

080a0370 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0370:	b508      	push	{r3, lr}
 80a0372:	4b02      	ldr	r3, [pc, #8]	; (80a037c <hal_usart_write+0xc>)
 80a0374:	681b      	ldr	r3, [r3, #0]
 80a0376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0378:	9301      	str	r3, [sp, #4]
 80a037a:	bd08      	pop	{r3, pc}
 80a037c:	080601c4 	.word	0x080601c4

080a0380 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0380:	b508      	push	{r3, lr}
 80a0382:	4b02      	ldr	r3, [pc, #8]	; (80a038c <hal_usart_available+0xc>)
 80a0384:	681b      	ldr	r3, [r3, #0]
 80a0386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0388:	9301      	str	r3, [sp, #4]
 80a038a:	bd08      	pop	{r3, pc}
 80a038c:	080601c4 	.word	0x080601c4

080a0390 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a0390:	b508      	push	{r3, lr}
 80a0392:	4b02      	ldr	r3, [pc, #8]	; (80a039c <hal_usart_read+0xc>)
 80a0394:	681b      	ldr	r3, [r3, #0]
 80a0396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0398:	9301      	str	r3, [sp, #4]
 80a039a:	bd08      	pop	{r3, pc}
 80a039c:	080601c4 	.word	0x080601c4

080a03a0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a03a0:	b508      	push	{r3, lr}
 80a03a2:	4b02      	ldr	r3, [pc, #8]	; (80a03ac <hal_usart_peek+0xc>)
 80a03a4:	681b      	ldr	r3, [r3, #0]
 80a03a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a03a8:	9301      	str	r3, [sp, #4]
 80a03aa:	bd08      	pop	{r3, pc}
 80a03ac:	080601c4 	.word	0x080601c4

080a03b0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a03b0:	b508      	push	{r3, lr}
 80a03b2:	4b02      	ldr	r3, [pc, #8]	; (80a03bc <hal_usart_flush+0xc>)
 80a03b4:	681b      	ldr	r3, [r3, #0]
 80a03b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a03b8:	9301      	str	r3, [sp, #4]
 80a03ba:	bd08      	pop	{r3, pc}
 80a03bc:	080601c4 	.word	0x080601c4

080a03c0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a03c0:	b508      	push	{r3, lr}
 80a03c2:	4b02      	ldr	r3, [pc, #8]	; (80a03cc <hal_usart_is_enabled+0xc>)
 80a03c4:	681b      	ldr	r3, [r3, #0]
 80a03c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a03c8:	9301      	str	r3, [sp, #4]
 80a03ca:	bd08      	pop	{r3, pc}
 80a03cc:	080601c4 	.word	0x080601c4

080a03d0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a03d0:	b508      	push	{r3, lr}
 80a03d2:	4b02      	ldr	r3, [pc, #8]	; (80a03dc <hal_usart_available_data_for_write+0xc>)
 80a03d4:	681b      	ldr	r3, [r3, #0]
 80a03d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a03d8:	9301      	str	r3, [sp, #4]
 80a03da:	bd08      	pop	{r3, pc}
 80a03dc:	080601c4 	.word	0x080601c4

080a03e0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a03e0:	b508      	push	{r3, lr}
 80a03e2:	4b02      	ldr	r3, [pc, #8]	; (80a03ec <hal_i2c_write+0xc>)
 80a03e4:	681b      	ldr	r3, [r3, #0]
 80a03e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a03e8:	9301      	str	r3, [sp, #4]
 80a03ea:	bd08      	pop	{r3, pc}
 80a03ec:	080601ac 	.word	0x080601ac

080a03f0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a03f0:	b508      	push	{r3, lr}
 80a03f2:	4b02      	ldr	r3, [pc, #8]	; (80a03fc <hal_i2c_available+0xc>)
 80a03f4:	681b      	ldr	r3, [r3, #0]
 80a03f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a03f8:	9301      	str	r3, [sp, #4]
 80a03fa:	bd08      	pop	{r3, pc}
 80a03fc:	080601ac 	.word	0x080601ac

080a0400 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0400:	b508      	push	{r3, lr}
 80a0402:	4b02      	ldr	r3, [pc, #8]	; (80a040c <hal_i2c_read+0xc>)
 80a0404:	681b      	ldr	r3, [r3, #0]
 80a0406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0408:	9301      	str	r3, [sp, #4]
 80a040a:	bd08      	pop	{r3, pc}
 80a040c:	080601ac 	.word	0x080601ac

080a0410 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0410:	b508      	push	{r3, lr}
 80a0412:	4b02      	ldr	r3, [pc, #8]	; (80a041c <hal_i2c_peek+0xc>)
 80a0414:	681b      	ldr	r3, [r3, #0]
 80a0416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0418:	9301      	str	r3, [sp, #4]
 80a041a:	bd08      	pop	{r3, pc}
 80a041c:	080601ac 	.word	0x080601ac

080a0420 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0420:	b508      	push	{r3, lr}
 80a0422:	4b02      	ldr	r3, [pc, #8]	; (80a042c <hal_i2c_flush+0xc>)
 80a0424:	681b      	ldr	r3, [r3, #0]
 80a0426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0428:	9301      	str	r3, [sp, #4]
 80a042a:	bd08      	pop	{r3, pc}
 80a042c:	080601ac 	.word	0x080601ac

080a0430 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a0430:	b508      	push	{r3, lr}
 80a0432:	4b02      	ldr	r3, [pc, #8]	; (80a043c <hal_i2c_is_enabled+0xc>)
 80a0434:	681b      	ldr	r3, [r3, #0]
 80a0436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0438:	9301      	str	r3, [sp, #4]
 80a043a:	bd08      	pop	{r3, pc}
 80a043c:	080601ac 	.word	0x080601ac

080a0440 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0440:	b508      	push	{r3, lr}
 80a0442:	4b03      	ldr	r3, [pc, #12]	; (80a0450 <hal_i2c_init+0x10>)
 80a0444:	681b      	ldr	r3, [r3, #0]
 80a0446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a044a:	9301      	str	r3, [sp, #4]
 80a044c:	bd08      	pop	{r3, pc}
 80a044e:	0000      	.short	0x0000
 80a0450:	080601ac 	.word	0x080601ac

080a0454 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a0454:	b508      	push	{r3, lr}
 80a0456:	4b02      	ldr	r3, [pc, #8]	; (80a0460 <hal_spi_init+0xc>)
 80a0458:	681b      	ldr	r3, [r3, #0]
 80a045a:	69db      	ldr	r3, [r3, #28]
 80a045c:	9301      	str	r3, [sp, #4]
 80a045e:	bd08      	pop	{r3, pc}
 80a0460:	080601b4 	.word	0x080601b4

080a0464 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b02      	ldr	r3, [pc, #8]	; (80a0470 <hal_spi_is_enabled+0xc>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	6a1b      	ldr	r3, [r3, #32]
 80a046c:	9301      	str	r3, [sp, #4]
 80a046e:	bd08      	pop	{r3, pc}
 80a0470:	080601b4 	.word	0x080601b4

080a0474 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0474:	b508      	push	{r3, lr}
 80a0476:	4b02      	ldr	r3, [pc, #8]	; (80a0480 <HAL_USB_USART_Init+0xc>)
 80a0478:	681b      	ldr	r3, [r3, #0]
 80a047a:	681b      	ldr	r3, [r3, #0]
 80a047c:	9301      	str	r3, [sp, #4]
 80a047e:	bd08      	pop	{r3, pc}
 80a0480:	080601d8 	.word	0x080601d8

080a0484 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0484:	b508      	push	{r3, lr}
 80a0486:	4b02      	ldr	r3, [pc, #8]	; (80a0490 <HAL_USB_USART_Begin+0xc>)
 80a0488:	681b      	ldr	r3, [r3, #0]
 80a048a:	685b      	ldr	r3, [r3, #4]
 80a048c:	9301      	str	r3, [sp, #4]
 80a048e:	bd08      	pop	{r3, pc}
 80a0490:	080601d8 	.word	0x080601d8

080a0494 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0494:	b508      	push	{r3, lr}
 80a0496:	4b02      	ldr	r3, [pc, #8]	; (80a04a0 <HAL_USB_USART_Available_Data+0xc>)
 80a0498:	681b      	ldr	r3, [r3, #0]
 80a049a:	691b      	ldr	r3, [r3, #16]
 80a049c:	9301      	str	r3, [sp, #4]
 80a049e:	bd08      	pop	{r3, pc}
 80a04a0:	080601d8 	.word	0x080601d8

080a04a4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a04a4:	b508      	push	{r3, lr}
 80a04a6:	4b02      	ldr	r3, [pc, #8]	; (80a04b0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a04a8:	681b      	ldr	r3, [r3, #0]
 80a04aa:	695b      	ldr	r3, [r3, #20]
 80a04ac:	9301      	str	r3, [sp, #4]
 80a04ae:	bd08      	pop	{r3, pc}
 80a04b0:	080601d8 	.word	0x080601d8

080a04b4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a04b4:	b508      	push	{r3, lr}
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <HAL_USB_USART_Receive_Data+0xc>)
 80a04b8:	681b      	ldr	r3, [r3, #0]
 80a04ba:	699b      	ldr	r3, [r3, #24]
 80a04bc:	9301      	str	r3, [sp, #4]
 80a04be:	bd08      	pop	{r3, pc}
 80a04c0:	080601d8 	.word	0x080601d8

080a04c4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a04c4:	b508      	push	{r3, lr}
 80a04c6:	4b02      	ldr	r3, [pc, #8]	; (80a04d0 <HAL_USB_USART_Send_Data+0xc>)
 80a04c8:	681b      	ldr	r3, [r3, #0]
 80a04ca:	69db      	ldr	r3, [r3, #28]
 80a04cc:	9301      	str	r3, [sp, #4]
 80a04ce:	bd08      	pop	{r3, pc}
 80a04d0:	080601d8 	.word	0x080601d8

080a04d4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a04d4:	b508      	push	{r3, lr}
 80a04d6:	4b02      	ldr	r3, [pc, #8]	; (80a04e0 <HAL_USB_USART_Flush_Data+0xc>)
 80a04d8:	681b      	ldr	r3, [r3, #0]
 80a04da:	6a1b      	ldr	r3, [r3, #32]
 80a04dc:	9301      	str	r3, [sp, #4]
 80a04de:	bd08      	pop	{r3, pc}
 80a04e0:	080601d8 	.word	0x080601d8

080a04e4 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a04e4:	b508      	push	{r3, lr}
 80a04e6:	4b02      	ldr	r3, [pc, #8]	; (80a04f0 <inet_gethostbyname+0xc>)
 80a04e8:	681b      	ldr	r3, [r3, #0]
 80a04ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a04ec:	9301      	str	r3, [sp, #4]
 80a04ee:	bd08      	pop	{r3, pc}
 80a04f0:	080601c0 	.word	0x080601c0

080a04f4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a04f4:	b508      	push	{r3, lr}
 80a04f6:	4b02      	ldr	r3, [pc, #8]	; (80a0500 <set_system_mode+0xc>)
 80a04f8:	681b      	ldr	r3, [r3, #0]
 80a04fa:	685b      	ldr	r3, [r3, #4]
 80a04fc:	9301      	str	r3, [sp, #4]
 80a04fe:	bd08      	pop	{r3, pc}
 80a0500:	080601a4 	.word	0x080601a4

080a0504 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0504:	b508      	push	{r3, lr}
 80a0506:	4b03      	ldr	r3, [pc, #12]	; (80a0514 <system_ctrl_set_app_request_handler+0x10>)
 80a0508:	681b      	ldr	r3, [r3, #0]
 80a050a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a050e:	9301      	str	r3, [sp, #4]
 80a0510:	bd08      	pop	{r3, pc}
 80a0512:	0000      	.short	0x0000
 80a0514:	080601a4 	.word	0x080601a4

080a0518 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0518:	b508      	push	{r3, lr}
 80a051a:	4b03      	ldr	r3, [pc, #12]	; (80a0528 <system_ctrl_set_result+0x10>)
 80a051c:	681b      	ldr	r3, [r3, #0]
 80a051e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0522:	9301      	str	r3, [sp, #4]
 80a0524:	bd08      	pop	{r3, pc}
 80a0526:	0000      	.short	0x0000
 80a0528:	080601a4 	.word	0x080601a4

080a052c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a052c:	b508      	push	{r3, lr}
 80a052e:	4b02      	ldr	r3, [pc, #8]	; (80a0538 <network_connect+0xc>)
 80a0530:	681b      	ldr	r3, [r3, #0]
 80a0532:	685b      	ldr	r3, [r3, #4]
 80a0534:	9301      	str	r3, [sp, #4]
 80a0536:	bd08      	pop	{r3, pc}
 80a0538:	080601c8 	.word	0x080601c8

080a053c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a053c:	b508      	push	{r3, lr}
 80a053e:	4b02      	ldr	r3, [pc, #8]	; (80a0548 <network_connecting+0xc>)
 80a0540:	681b      	ldr	r3, [r3, #0]
 80a0542:	689b      	ldr	r3, [r3, #8]
 80a0544:	9301      	str	r3, [sp, #4]
 80a0546:	bd08      	pop	{r3, pc}
 80a0548:	080601c8 	.word	0x080601c8

080a054c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a054c:	b508      	push	{r3, lr}
 80a054e:	4b02      	ldr	r3, [pc, #8]	; (80a0558 <network_disconnect+0xc>)
 80a0550:	681b      	ldr	r3, [r3, #0]
 80a0552:	68db      	ldr	r3, [r3, #12]
 80a0554:	9301      	str	r3, [sp, #4]
 80a0556:	bd08      	pop	{r3, pc}
 80a0558:	080601c8 	.word	0x080601c8

080a055c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a055c:	b508      	push	{r3, lr}
 80a055e:	4b02      	ldr	r3, [pc, #8]	; (80a0568 <network_ready+0xc>)
 80a0560:	681b      	ldr	r3, [r3, #0]
 80a0562:	691b      	ldr	r3, [r3, #16]
 80a0564:	9301      	str	r3, [sp, #4]
 80a0566:	bd08      	pop	{r3, pc}
 80a0568:	080601c8 	.word	0x080601c8

080a056c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a056c:	b508      	push	{r3, lr}
 80a056e:	4b02      	ldr	r3, [pc, #8]	; (80a0578 <network_on+0xc>)
 80a0570:	681b      	ldr	r3, [r3, #0]
 80a0572:	695b      	ldr	r3, [r3, #20]
 80a0574:	9301      	str	r3, [sp, #4]
 80a0576:	bd08      	pop	{r3, pc}
 80a0578:	080601c8 	.word	0x080601c8

080a057c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a057c:	b508      	push	{r3, lr}
 80a057e:	4b02      	ldr	r3, [pc, #8]	; (80a0588 <network_off+0xc>)
 80a0580:	681b      	ldr	r3, [r3, #0]
 80a0582:	699b      	ldr	r3, [r3, #24]
 80a0584:	9301      	str	r3, [sp, #4]
 80a0586:	bd08      	pop	{r3, pc}
 80a0588:	080601c8 	.word	0x080601c8

080a058c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a058c:	b508      	push	{r3, lr}
 80a058e:	4b02      	ldr	r3, [pc, #8]	; (80a0598 <network_listen+0xc>)
 80a0590:	681b      	ldr	r3, [r3, #0]
 80a0592:	69db      	ldr	r3, [r3, #28]
 80a0594:	9301      	str	r3, [sp, #4]
 80a0596:	bd08      	pop	{r3, pc}
 80a0598:	080601c8 	.word	0x080601c8

080a059c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a059c:	b508      	push	{r3, lr}
 80a059e:	4b02      	ldr	r3, [pc, #8]	; (80a05a8 <network_listening+0xc>)
 80a05a0:	681b      	ldr	r3, [r3, #0]
 80a05a2:	6a1b      	ldr	r3, [r3, #32]
 80a05a4:	9301      	str	r3, [sp, #4]
 80a05a6:	bd08      	pop	{r3, pc}
 80a05a8:	080601c8 	.word	0x080601c8

080a05ac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a05ac:	b508      	push	{r3, lr}
 80a05ae:	4b02      	ldr	r3, [pc, #8]	; (80a05b8 <network_set_listen_timeout+0xc>)
 80a05b0:	681b      	ldr	r3, [r3, #0]
 80a05b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a05b4:	9301      	str	r3, [sp, #4]
 80a05b6:	bd08      	pop	{r3, pc}
 80a05b8:	080601c8 	.word	0x080601c8

080a05bc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a05bc:	b508      	push	{r3, lr}
 80a05be:	4b02      	ldr	r3, [pc, #8]	; (80a05c8 <network_get_listen_timeout+0xc>)
 80a05c0:	681b      	ldr	r3, [r3, #0]
 80a05c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a05c4:	9301      	str	r3, [sp, #4]
 80a05c6:	bd08      	pop	{r3, pc}
 80a05c8:	080601c8 	.word	0x080601c8

080a05cc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a05cc:	b508      	push	{r3, lr}
 80a05ce:	4b02      	ldr	r3, [pc, #8]	; (80a05d8 <network_is_on+0xc>)
 80a05d0:	681b      	ldr	r3, [r3, #0]
 80a05d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a05d4:	9301      	str	r3, [sp, #4]
 80a05d6:	bd08      	pop	{r3, pc}
 80a05d8:	080601c8 	.word	0x080601c8

080a05dc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a05dc:	b508      	push	{r3, lr}
 80a05de:	4b02      	ldr	r3, [pc, #8]	; (80a05e8 <network_is_off+0xc>)
 80a05e0:	681b      	ldr	r3, [r3, #0]
 80a05e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a05e4:	9301      	str	r3, [sp, #4]
 80a05e6:	bd08      	pop	{r3, pc}
 80a05e8:	080601c8 	.word	0x080601c8

080a05ec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a05ec:	b508      	push	{r3, lr}
 80a05ee:	4b02      	ldr	r3, [pc, #8]	; (80a05f8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a05f0:	681b      	ldr	r3, [r3, #0]
 80a05f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a05f4:	9301      	str	r3, [sp, #4]
 80a05f6:	bd08      	pop	{r3, pc}
 80a05f8:	080601cc 	.word	0x080601cc

080a05fc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a05fc:	b508      	push	{r3, lr}
 80a05fe:	4b02      	ldr	r3, [pc, #8]	; (80a0608 <malloc+0xc>)
 80a0600:	681b      	ldr	r3, [r3, #0]
 80a0602:	681b      	ldr	r3, [r3, #0]
 80a0604:	9301      	str	r3, [sp, #4]
 80a0606:	bd08      	pop	{r3, pc}
 80a0608:	080601a0 	.word	0x080601a0

080a060c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a060c:	b508      	push	{r3, lr}
 80a060e:	4b02      	ldr	r3, [pc, #8]	; (80a0618 <free+0xc>)
 80a0610:	681b      	ldr	r3, [r3, #0]
 80a0612:	685b      	ldr	r3, [r3, #4]
 80a0614:	9301      	str	r3, [sp, #4]
 80a0616:	bd08      	pop	{r3, pc}
 80a0618:	080601a0 	.word	0x080601a0

080a061c <_malloc_r>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a061c:	b508      	push	{r3, lr}
 80a061e:	4b02      	ldr	r3, [pc, #8]	; (80a0628 <_malloc_r+0xc>)
 80a0620:	681b      	ldr	r3, [r3, #0]
 80a0622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0624:	9301      	str	r3, [sp, #4]
 80a0626:	bd08      	pop	{r3, pc}
 80a0628:	080601a0 	.word	0x080601a0

080a062c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a062c:	b508      	push	{r3, lr}
 80a062e:	4b02      	ldr	r3, [pc, #8]	; (80a0638 <newlib_impure_ptr_callback+0xc>)
 80a0630:	681b      	ldr	r3, [r3, #0]
 80a0632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0634:	9301      	str	r3, [sp, #4]
 80a0636:	bd08      	pop	{r3, pc}
 80a0638:	080601a0 	.word	0x080601a0

080a063c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a063c:	b570      	push	{r4, r5, r6, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a063e:	2600      	movs	r6, #0
 80a0640:	4604      	mov	r4, r0
 80a0642:	460d      	mov	r5, r1
 80a0644:	f840 6f08 	str.w	r6, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0648:	f7ff fe7a 	bl	80a0340 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a064c:	4628      	mov	r0, r5
    _spi = spi;
 80a064e:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a0650:	f7ff ff00 	bl	80a0454 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a0654:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0656:	6066      	str	r6, [r4, #4]
}
 80a0658:	bd70      	pop	{r4, r5, r6, pc}

080a065a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a065a:	b510      	push	{r4, lr}
 80a065c:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a065e:	6800      	ldr	r0, [r0, #0]
 80a0660:	b118      	cbz	r0, 80a066a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a0662:	f7ff ffd3 	bl	80a060c <free>
            wakeupSource_ = nullptr;
 80a0666:	2300      	movs	r3, #0
 80a0668:	6023      	str	r3, [r4, #0]
        }
    }
 80a066a:	bd10      	pop	{r4, pc}

080a066c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a066c:	b510      	push	{r4, lr}
 80a066e:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a0670:	f7ff fff3 	bl	80a065a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a0674:	4620      	mov	r0, r4
 80a0676:	bd10      	pop	{r4, pc}

080a0678 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0678:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a067a:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a067c:	b510      	push	{r4, lr}
 80a067e:	4b08      	ldr	r3, [pc, #32]	; (80a06a0 <_GLOBAL__sub_I_System+0x28>)
 80a0680:	4c08      	ldr	r4, [pc, #32]	; (80a06a4 <_GLOBAL__sub_I_System+0x2c>)
 80a0682:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a0684:	4b08      	ldr	r3, [pc, #32]	; (80a06a8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a0686:	6020      	str	r0, [r4, #0]
 80a0688:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a068a:	71a0      	strb	r0, [r4, #6]
 80a068c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a068e:	f7ff ff31 	bl	80a04f4 <set_system_mode>
SystemClass System;
 80a0692:	4620      	mov	r0, r4
 80a0694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a0698:	4a04      	ldr	r2, [pc, #16]	; (80a06ac <_GLOBAL__sub_I_System+0x34>)
 80a069a:	4905      	ldr	r1, [pc, #20]	; (80a06b0 <_GLOBAL__sub_I_System+0x38>)
 80a069c:	f000 bcb0 	b.w	80a1000 <__aeabi_atexit>
 80a06a0:	20000084 	.word	0x20000084
 80a06a4:	20000078 	.word	0x20000078
 80a06a8:	ffff0000 	.word	0xffff0000
 80a06ac:	20000068 	.word	0x20000068
 80a06b0:	080a066d 	.word	0x080a066d

080a06b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a06b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a06b6:	4606      	mov	r6, r0
 80a06b8:	460d      	mov	r5, r1
  size_t n = 0;
 80a06ba:	2400      	movs	r4, #0
 80a06bc:	188f      	adds	r7, r1, r2
  while (size--) {
 80a06be:	42bd      	cmp	r5, r7
 80a06c0:	d00c      	beq.n	80a06dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a06c2:	6833      	ldr	r3, [r6, #0]
 80a06c4:	4630      	mov	r0, r6
 80a06c6:	689b      	ldr	r3, [r3, #8]
 80a06c8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a06cc:	4798      	blx	r3
     if (chunk>=0)
 80a06ce:	1e03      	subs	r3, r0, #0
 80a06d0:	db01      	blt.n	80a06d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a06d2:	441c      	add	r4, r3
  while (size--) {
 80a06d4:	e7f3      	b.n	80a06be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a06d6:	2c00      	cmp	r4, #0
 80a06d8:	bf08      	it	eq
 80a06da:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a06dc:	4620      	mov	r0, r4
 80a06de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a06e0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a06e0:	b570      	push	{r4, r5, r6, lr}
 80a06e2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a06e4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a06e6:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a06e8:	b149      	cbz	r1, 80a06fe <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a06ea:	f000 fcf1 	bl	80a10d0 <strlen>
 80a06ee:	682b      	ldr	r3, [r5, #0]
 80a06f0:	4602      	mov	r2, r0
 80a06f2:	4621      	mov	r1, r4
 80a06f4:	4628      	mov	r0, r5
    }
 80a06f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a06fa:	68db      	ldr	r3, [r3, #12]
 80a06fc:	4718      	bx	r3
    }
 80a06fe:	bd70      	pop	{r4, r5, r6, pc}

080a0700 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0700:	6803      	ldr	r3, [r0, #0]
 80a0702:	689b      	ldr	r3, [r3, #8]
 80a0704:	4718      	bx	r3

080a0706 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0706:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0708:	2a01      	cmp	r2, #1
 80a070a:	bf98      	it	ls
 80a070c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a070e:	b530      	push	{r4, r5, lr}
 80a0710:	b08b      	sub	sp, #44	; 0x2c
 80a0712:	460c      	mov	r4, r1
  *str = '\0';
 80a0714:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0718:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a071a:	4625      	mov	r5, r4
 80a071c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0720:	fb04 5312 	mls	r3, r4, r2, r5
 80a0724:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0726:	2b09      	cmp	r3, #9
 80a0728:	bf94      	ite	ls
 80a072a:	3330      	addls	r3, #48	; 0x30
 80a072c:	3337      	addhi	r3, #55	; 0x37
 80a072e:	b2db      	uxtb	r3, r3
  } while(n);
 80a0730:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0732:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0736:	d9f0      	bls.n	80a071a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0738:	f7ff ffd2 	bl	80a06e0 <_ZN5Print5writeEPKc>
}
 80a073c:	b00b      	add	sp, #44	; 0x2c
 80a073e:	bd30      	pop	{r4, r5, pc}

080a0740 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0740:	2300      	movs	r3, #0
 80a0742:	6840      	ldr	r0, [r0, #4]
 80a0744:	461a      	mov	r2, r3
 80a0746:	4619      	mov	r1, r3
 80a0748:	f7ff bf10 	b.w	80a056c <network_on>

080a074c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a074c:	4b01      	ldr	r3, [pc, #4]	; (80a0754 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a074e:	4a02      	ldr	r2, [pc, #8]	; (80a0758 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0750:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0752:	4770      	bx	lr
 80a0754:	20000088 	.word	0x20000088
 80a0758:	080a10f4 	.word	0x080a10f4

080a075c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a075c:	4b02      	ldr	r3, [pc, #8]	; (80a0768 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a075e:	681a      	ldr	r2, [r3, #0]
 80a0760:	4b02      	ldr	r3, [pc, #8]	; (80a076c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0762:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0764:	4770      	bx	lr
 80a0766:	bf00      	nop
 80a0768:	20000000 	.word	0x20000000
 80a076c:	2000008c 	.word	0x2000008c

080a0770 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0770:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0772:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0774:	4604      	mov	r4, r0
      if (_M_manager)
 80a0776:	b113      	cbz	r3, 80a077e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0778:	2203      	movs	r2, #3
 80a077a:	4601      	mov	r1, r0
 80a077c:	4798      	blx	r3
    }
 80a077e:	4620      	mov	r0, r4
 80a0780:	bd10      	pop	{r4, pc}

080a0782 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0782:	b510      	push	{r4, lr}
 80a0784:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0786:	f7ff fff3 	bl	80a0770 <_ZNSt14_Function_baseD1Ev>
 80a078a:	4620      	mov	r0, r4
 80a078c:	bd10      	pop	{r4, pc}
	...

080a0790 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a0790:	2300      	movs	r3, #0
 80a0792:	4803      	ldr	r0, [pc, #12]	; (80a07a0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0794:	4a03      	ldr	r2, [pc, #12]	; (80a07a4 <_GLOBAL__sub_I_RGB+0x14>)
 80a0796:	4904      	ldr	r1, [pc, #16]	; (80a07a8 <_GLOBAL__sub_I_RGB+0x18>)
 80a0798:	6083      	str	r3, [r0, #8]
 80a079a:	f000 bc31 	b.w	80a1000 <__aeabi_atexit>
 80a079e:	bf00      	nop
 80a07a0:	20000090 	.word	0x20000090
 80a07a4:	20000068 	.word	0x20000068
 80a07a8:	080a0783 	.word	0x080a0783

080a07ac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a07ac:	4b01      	ldr	r3, [pc, #4]	; (80a07b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a07ae:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a07b0:	4770      	bx	lr
 80a07b2:	bf00      	nop
 80a07b4:	20000004 	.word	0x20000004

080a07b8 <serialEventRun>:
{
 80a07b8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a07ba:	4b13      	ldr	r3, [pc, #76]	; (80a0808 <serialEventRun+0x50>)
 80a07bc:	b143      	cbz	r3, 80a07d0 <serialEventRun+0x18>
 80a07be:	f000 f969 	bl	80a0a94 <_Z16_fetch_usbserialv>
 80a07c2:	6803      	ldr	r3, [r0, #0]
 80a07c4:	691b      	ldr	r3, [r3, #16]
 80a07c6:	4798      	blx	r3
 80a07c8:	2800      	cmp	r0, #0
 80a07ca:	dd01      	ble.n	80a07d0 <serialEventRun+0x18>
        serialEvent();
 80a07cc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a07d0:	4b0e      	ldr	r3, [pc, #56]	; (80a080c <serialEventRun+0x54>)
 80a07d2:	b143      	cbz	r3, 80a07e6 <serialEventRun+0x2e>
 80a07d4:	f000 fa16 	bl	80a0c04 <_Z22__fetch_global_Serial1v>
 80a07d8:	6803      	ldr	r3, [r0, #0]
 80a07da:	691b      	ldr	r3, [r3, #16]
 80a07dc:	4798      	blx	r3
 80a07de:	2800      	cmp	r0, #0
 80a07e0:	dd01      	ble.n	80a07e6 <serialEventRun+0x2e>
        serialEvent1();
 80a07e2:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a07e6:	4b0a      	ldr	r3, [pc, #40]	; (80a0810 <serialEventRun+0x58>)
 80a07e8:	b10b      	cbz	r3, 80a07ee <serialEventRun+0x36>
 80a07ea:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a07ee:	4b09      	ldr	r3, [pc, #36]	; (80a0814 <serialEventRun+0x5c>)
 80a07f0:	b143      	cbz	r3, 80a0804 <serialEventRun+0x4c>
 80a07f2:	f000 f98d 	bl	80a0b10 <_Z17_fetch_usbserial1v>
 80a07f6:	6803      	ldr	r3, [r0, #0]
 80a07f8:	691b      	ldr	r3, [r3, #16]
 80a07fa:	4798      	blx	r3
 80a07fc:	2800      	cmp	r0, #0
 80a07fe:	dd01      	ble.n	80a0804 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0800:	f3af 8000 	nop.w
}
 80a0804:	bd08      	pop	{r3, pc}
 80a0806:	bf00      	nop
	...

080a0818 <_post_loop>:
{
 80a0818:	b508      	push	{r3, lr}
	serialEventRun();
 80a081a:	f7ff ffcd 	bl	80a07b8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a081e:	f7ff fd87 	bl	80a0330 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0822:	4b01      	ldr	r3, [pc, #4]	; (80a0828 <_post_loop+0x10>)
 80a0824:	6018      	str	r0, [r3, #0]
}
 80a0826:	bd08      	pop	{r3, pc}
 80a0828:	2000051c 	.word	0x2000051c

080a082c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a082c:	4802      	ldr	r0, [pc, #8]	; (80a0838 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a082e:	4a03      	ldr	r2, [pc, #12]	; (80a083c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0830:	4903      	ldr	r1, [pc, #12]	; (80a0840 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0832:	1a12      	subs	r2, r2, r0
 80a0834:	f000 bc04 	b.w	80a1040 <memcpy>
 80a0838:	40024000 	.word	0x40024000
 80a083c:	40024004 	.word	0x40024004
 80a0840:	080a1250 	.word	0x080a1250

080a0844 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0844:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0846:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0848:	461a      	mov	r2, r3
 80a084a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a084e:	9300      	str	r3, [sp, #0]
 80a0850:	f7ff fe62 	bl	80a0518 <system_ctrl_set_result>
}
 80a0854:	b003      	add	sp, #12
 80a0856:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a085c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a085c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a085e:	8843      	ldrh	r3, [r0, #2]
 80a0860:	2b0a      	cmp	r3, #10
 80a0862:	d008      	beq.n	80a0876 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0864:	2b50      	cmp	r3, #80	; 0x50
 80a0866:	d10b      	bne.n	80a0880 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0868:	4b09      	ldr	r3, [pc, #36]	; (80a0890 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a086a:	681b      	ldr	r3, [r3, #0]
 80a086c:	b14b      	cbz	r3, 80a0882 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a086e:	b003      	add	sp, #12
 80a0870:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0874:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a0876:	f7ff ffe5 	bl	80a0844 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a087a:	b003      	add	sp, #12
 80a087c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0880:	2300      	movs	r3, #0
 80a0882:	461a      	mov	r2, r3
 80a0884:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0888:	9300      	str	r3, [sp, #0]
 80a088a:	f7ff fe45 	bl	80a0518 <system_ctrl_set_result>
}
 80a088e:	e7f4      	b.n	80a087a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a0890:	200000a4 	.word	0x200000a4

080a0894 <module_user_init_hook>:
{
 80a0894:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0896:	4c12      	ldr	r4, [pc, #72]	; (80a08e0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0898:	2100      	movs	r1, #0
 80a089a:	4812      	ldr	r0, [pc, #72]	; (80a08e4 <module_user_init_hook+0x50>)
 80a089c:	f7ff fec6 	bl	80a062c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a08a0:	4d11      	ldr	r5, [pc, #68]	; (80a08e8 <module_user_init_hook+0x54>)
 80a08a2:	6823      	ldr	r3, [r4, #0]
 80a08a4:	42ab      	cmp	r3, r5
 80a08a6:	bf0c      	ite	eq
 80a08a8:	2201      	moveq	r2, #1
 80a08aa:	2200      	movne	r2, #0
 80a08ac:	4b0f      	ldr	r3, [pc, #60]	; (80a08ec <module_user_init_hook+0x58>)
 80a08ae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a08b0:	d002      	beq.n	80a08b8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a08b2:	f7ff ffbb 	bl	80a082c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a08b6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a08b8:	f7ff fd2a 	bl	80a0310 <HAL_RNG_GetRandomNumber>
 80a08bc:	4604      	mov	r4, r0
    srand(seed);
 80a08be:	f000 fbe3 	bl	80a1088 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a08c2:	4b0b      	ldr	r3, [pc, #44]	; (80a08f0 <module_user_init_hook+0x5c>)
 80a08c4:	b113      	cbz	r3, 80a08cc <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a08c6:	4620      	mov	r0, r4
 80a08c8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a08cc:	2100      	movs	r1, #0
 80a08ce:	4808      	ldr	r0, [pc, #32]	; (80a08f0 <module_user_init_hook+0x5c>)
 80a08d0:	f7ff fe8c 	bl	80a05ec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a08d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a08d8:	2100      	movs	r1, #0
 80a08da:	4806      	ldr	r0, [pc, #24]	; (80a08f4 <module_user_init_hook+0x60>)
 80a08dc:	f7ff be12 	b.w	80a0504 <system_ctrl_set_app_request_handler>
 80a08e0:	40024000 	.word	0x40024000
 80a08e4:	080a07ad 	.word	0x080a07ad
 80a08e8:	9a271c1e 	.word	0x9a271c1e
 80a08ec:	200000a0 	.word	0x200000a0
 80a08f0:	00000000 	.word	0x00000000
 80a08f4:	080a085d 	.word	0x080a085d

080a08f8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a08f8:	4770      	bx	lr

080a08fa <_ZN9IPAddressD0Ev>:
 80a08fa:	b510      	push	{r4, lr}
 80a08fc:	4604      	mov	r4, r0
 80a08fe:	2118      	movs	r1, #24
 80a0900:	f000 fb83 	bl	80a100a <_ZdlPvj>
 80a0904:	4620      	mov	r0, r4
 80a0906:	bd10      	pop	{r4, pc}

080a0908 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a090a:	460e      	mov	r6, r1
 80a090c:	2400      	movs	r4, #0
 80a090e:	f100 0708 	add.w	r7, r0, #8
 80a0912:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0914:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a0918:	220a      	movs	r2, #10
 80a091a:	4630      	mov	r0, r6
 80a091c:	f7ff fef3 	bl	80a0706 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0920:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0922:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a0924:	d101      	bne.n	80a092a <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a0926:	4620      	mov	r0, r4
 80a0928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a092a:	2c00      	cmp	r4, #0
 80a092c:	d0f2      	beq.n	80a0914 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a092e:	212e      	movs	r1, #46	; 0x2e
 80a0930:	4630      	mov	r0, r6
 80a0932:	f7ff fee5 	bl	80a0700 <_ZN5Print5printEc>
 80a0936:	4404      	add	r4, r0
 80a0938:	e7ec      	b.n	80a0914 <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a093c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a093c:	b510      	push	{r4, lr}
 80a093e:	4604      	mov	r4, r0
 80a0940:	4b04      	ldr	r3, [pc, #16]	; (80a0954 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0942:	2211      	movs	r2, #17
 80a0944:	2100      	movs	r1, #0
 80a0946:	f840 3b04 	str.w	r3, [r0], #4
 80a094a:	f000 fb87 	bl	80a105c <memset>
}
 80a094e:	4620      	mov	r0, r4
 80a0950:	bd10      	pop	{r4, pc}
 80a0952:	bf00      	nop
 80a0954:	080a111c 	.word	0x080a111c

080a0958 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0958:	4603      	mov	r3, r0
 80a095a:	4a07      	ldr	r2, [pc, #28]	; (80a0978 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a095c:	b510      	push	{r4, lr}
 80a095e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a0962:	f101 0210 	add.w	r2, r1, #16
 80a0966:	f851 4b04 	ldr.w	r4, [r1], #4
 80a096a:	4291      	cmp	r1, r2
 80a096c:	f843 4b04 	str.w	r4, [r3], #4
 80a0970:	d1f9      	bne.n	80a0966 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0972:	780a      	ldrb	r2, [r1, #0]
 80a0974:	701a      	strb	r2, [r3, #0]
}
 80a0976:	bd10      	pop	{r4, pc}
 80a0978:	080a111c 	.word	0x080a111c

080a097c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a097c:	4a02      	ldr	r2, [pc, #8]	; (80a0988 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a097e:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a0982:	2204      	movs	r2, #4
 80a0984:	7502      	strb	r2, [r0, #20]
}
 80a0986:	4770      	bx	lr
 80a0988:	080a111c 	.word	0x080a111c

080a098c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a098c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a098e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0992:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a0996:	2304      	movs	r3, #4
 80a0998:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a099c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a09a0:	6044      	str	r4, [r0, #4]
 80a09a2:	7503      	strb	r3, [r0, #20]
}
 80a09a4:	bd10      	pop	{r4, pc}
	...

080a09a8 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a09a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a09aa:	4d04      	ldr	r5, [pc, #16]	; (80a09bc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a09ac:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a09ae:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a09b2:	9500      	str	r5, [sp, #0]
 80a09b4:	f7ff ffea 	bl	80a098c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a09b8:	b003      	add	sp, #12
 80a09ba:	bd30      	pop	{r4, r5, pc}
 80a09bc:	080a111c 	.word	0x080a111c

080a09c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a09c0:	7441      	strb	r1, [r0, #17]
}
 80a09c2:	4770      	bx	lr

080a09c4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a09c4:	4770      	bx	lr

080a09c6 <_ZN9USBSerial4readEv>:
{
 80a09c6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a09c8:	2100      	movs	r1, #0
 80a09ca:	7c00      	ldrb	r0, [r0, #16]
 80a09cc:	f7ff fd72 	bl	80a04b4 <HAL_USB_USART_Receive_Data>
}
 80a09d0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a09d4:	bd08      	pop	{r3, pc}

080a09d6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a09d6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a09d8:	2101      	movs	r1, #1
 80a09da:	7c00      	ldrb	r0, [r0, #16]
 80a09dc:	f7ff fd6a 	bl	80a04b4 <HAL_USB_USART_Receive_Data>
}
 80a09e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a09e4:	bd08      	pop	{r3, pc}

080a09e6 <_ZN9USBSerial17availableForWriteEv>:
{
 80a09e6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a09e8:	7c00      	ldrb	r0, [r0, #16]
 80a09ea:	f7ff fd5b 	bl	80a04a4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a09ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a09f2:	bd08      	pop	{r3, pc}

080a09f4 <_ZN9USBSerial9availableEv>:
{
 80a09f4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a09f6:	7c00      	ldrb	r0, [r0, #16]
 80a09f8:	f7ff fd4c 	bl	80a0494 <HAL_USB_USART_Available_Data>
}
 80a09fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0a00:	bd08      	pop	{r3, pc}

080a0a02 <_ZN9USBSerial5writeEh>:
{
 80a0a02:	b538      	push	{r3, r4, r5, lr}
 80a0a04:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0a06:	7c00      	ldrb	r0, [r0, #16]
{
 80a0a08:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0a0a:	f7ff fd4b 	bl	80a04a4 <HAL_USB_USART_Available_Data_For_Write>
 80a0a0e:	2800      	cmp	r0, #0
 80a0a10:	dc01      	bgt.n	80a0a16 <_ZN9USBSerial5writeEh+0x14>
 80a0a12:	7c60      	ldrb	r0, [r4, #17]
 80a0a14:	b128      	cbz	r0, 80a0a22 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0a16:	4629      	mov	r1, r5
 80a0a18:	7c20      	ldrb	r0, [r4, #16]
 80a0a1a:	f7ff fd53 	bl	80a04c4 <HAL_USB_USART_Send_Data>
 80a0a1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a0a22:	bd38      	pop	{r3, r4, r5, pc}

080a0a24 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a0a24:	7c00      	ldrb	r0, [r0, #16]
 80a0a26:	f7ff bd55 	b.w	80a04d4 <HAL_USB_USART_Flush_Data>

080a0a2a <_ZN9USBSerialD0Ev>:
 80a0a2a:	b510      	push	{r4, lr}
 80a0a2c:	4604      	mov	r4, r0
 80a0a2e:	2114      	movs	r1, #20
 80a0a30:	f000 faeb 	bl	80a100a <_ZdlPvj>
 80a0a34:	4620      	mov	r0, r4
 80a0a36:	bd10      	pop	{r4, pc}

080a0a38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0a38:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0a3e:	4604      	mov	r4, r0
 80a0a40:	4608      	mov	r0, r1
 80a0a42:	2100      	movs	r1, #0
 80a0a44:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0a48:	4b04      	ldr	r3, [pc, #16]	; (80a0a5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a0a4a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0a4c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a0a4e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a0a50:	4611      	mov	r1, r2
  _blocking = true;
 80a0a52:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a0a54:	f7ff fd0e 	bl	80a0474 <HAL_USB_USART_Init>
}
 80a0a58:	4620      	mov	r0, r4
 80a0a5a:	bd10      	pop	{r4, pc}
 80a0a5c:	080a1130 	.word	0x080a1130

080a0a60 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0a60:	2200      	movs	r2, #0
 80a0a62:	7c00      	ldrb	r0, [r0, #16]
 80a0a64:	f7ff bd0e 	b.w	80a0484 <HAL_USB_USART_Begin>

080a0a68 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0a68:	b510      	push	{r4, lr}
 80a0a6a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0a6c:	2214      	movs	r2, #20
 80a0a6e:	2100      	movs	r1, #0
 80a0a70:	f000 faf4 	bl	80a105c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0a74:	4b05      	ldr	r3, [pc, #20]	; (80a0a8c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0a76:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a0a78:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0a7a:	4b05      	ldr	r3, [pc, #20]	; (80a0a90 <_Z19acquireSerialBufferv+0x28>)
 80a0a7c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0a7e:	f240 1301 	movw	r3, #257	; 0x101
 80a0a82:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0a84:	2381      	movs	r3, #129	; 0x81
 80a0a86:	8223      	strh	r3, [r4, #16]
}
 80a0a88:	bd10      	pop	{r4, pc}
 80a0a8a:	bf00      	nop
 80a0a8c:	200000d8 	.word	0x200000d8
 80a0a90:	200001d9 	.word	0x200001d9

080a0a94 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0a94:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0a96:	4d0f      	ldr	r5, [pc, #60]	; (80a0ad4 <_Z16_fetch_usbserialv+0x40>)
{
 80a0a98:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0a9a:	a801      	add	r0, sp, #4
 80a0a9c:	f7ff ffe4 	bl	80a0a68 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0aa0:	7829      	ldrb	r1, [r5, #0]
 80a0aa2:	f3bf 8f5b 	dmb	ish
 80a0aa6:	f011 0401 	ands.w	r4, r1, #1
 80a0aaa:	d110      	bne.n	80a0ace <_Z16_fetch_usbserialv+0x3a>
 80a0aac:	4628      	mov	r0, r5
 80a0aae:	f7ff faf6 	bl	80a009e <__cxa_guard_acquire>
 80a0ab2:	b160      	cbz	r0, 80a0ace <_Z16_fetch_usbserialv+0x3a>
 80a0ab4:	4621      	mov	r1, r4
 80a0ab6:	aa01      	add	r2, sp, #4
 80a0ab8:	4807      	ldr	r0, [pc, #28]	; (80a0ad8 <_Z16_fetch_usbserialv+0x44>)
 80a0aba:	f7ff ffbd 	bl	80a0a38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0abe:	4628      	mov	r0, r5
 80a0ac0:	f7ff faf2 	bl	80a00a8 <__cxa_guard_release>
 80a0ac4:	4a05      	ldr	r2, [pc, #20]	; (80a0adc <_Z16_fetch_usbserialv+0x48>)
 80a0ac6:	4906      	ldr	r1, [pc, #24]	; (80a0ae0 <_Z16_fetch_usbserialv+0x4c>)
 80a0ac8:	4803      	ldr	r0, [pc, #12]	; (80a0ad8 <_Z16_fetch_usbserialv+0x44>)
 80a0aca:	f000 fa99 	bl	80a1000 <__aeabi_atexit>
	return _usbserial;
}
 80a0ace:	4802      	ldr	r0, [pc, #8]	; (80a0ad8 <_Z16_fetch_usbserialv+0x44>)
 80a0ad0:	b007      	add	sp, #28
 80a0ad2:	bd30      	pop	{r4, r5, pc}
 80a0ad4:	200000a8 	.word	0x200000a8
 80a0ad8:	200000b0 	.word	0x200000b0
 80a0adc:	20000068 	.word	0x20000068
 80a0ae0:	080a09c5 	.word	0x080a09c5

080a0ae4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0ae4:	b510      	push	{r4, lr}
 80a0ae6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0ae8:	2214      	movs	r2, #20
 80a0aea:	2100      	movs	r1, #0
 80a0aec:	f000 fab6 	bl	80a105c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0af0:	4b05      	ldr	r3, [pc, #20]	; (80a0b08 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0af2:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a0af4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0af6:	4b05      	ldr	r3, [pc, #20]	; (80a0b0c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0af8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0afa:	f240 1301 	movw	r3, #257	; 0x101
 80a0afe:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0b00:	2381      	movs	r3, #129	; 0x81
 80a0b02:	8223      	strh	r3, [r4, #16]
}
 80a0b04:	bd10      	pop	{r4, pc}
 80a0b06:	bf00      	nop
 80a0b08:	2000025a 	.word	0x2000025a
 80a0b0c:	2000035b 	.word	0x2000035b

080a0b10 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0b10:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0b12:	4c0f      	ldr	r4, [pc, #60]	; (80a0b50 <_Z17_fetch_usbserial1v+0x40>)
{
 80a0b14:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0b16:	a801      	add	r0, sp, #4
 80a0b18:	f7ff ffe4 	bl	80a0ae4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0b1c:	7823      	ldrb	r3, [r4, #0]
 80a0b1e:	f3bf 8f5b 	dmb	ish
 80a0b22:	07db      	lsls	r3, r3, #31
 80a0b24:	d410      	bmi.n	80a0b48 <_Z17_fetch_usbserial1v+0x38>
 80a0b26:	4620      	mov	r0, r4
 80a0b28:	f7ff fab9 	bl	80a009e <__cxa_guard_acquire>
 80a0b2c:	b160      	cbz	r0, 80a0b48 <_Z17_fetch_usbserial1v+0x38>
 80a0b2e:	2101      	movs	r1, #1
 80a0b30:	aa01      	add	r2, sp, #4
 80a0b32:	4808      	ldr	r0, [pc, #32]	; (80a0b54 <_Z17_fetch_usbserial1v+0x44>)
 80a0b34:	f7ff ff80 	bl	80a0a38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0b38:	4620      	mov	r0, r4
 80a0b3a:	f7ff fab5 	bl	80a00a8 <__cxa_guard_release>
 80a0b3e:	4a06      	ldr	r2, [pc, #24]	; (80a0b58 <_Z17_fetch_usbserial1v+0x48>)
 80a0b40:	4906      	ldr	r1, [pc, #24]	; (80a0b5c <_Z17_fetch_usbserial1v+0x4c>)
 80a0b42:	4804      	ldr	r0, [pc, #16]	; (80a0b54 <_Z17_fetch_usbserial1v+0x44>)
 80a0b44:	f000 fa5c 	bl	80a1000 <__aeabi_atexit>
  return _usbserial1;
}
 80a0b48:	4802      	ldr	r0, [pc, #8]	; (80a0b54 <_Z17_fetch_usbserial1v+0x44>)
 80a0b4a:	b006      	add	sp, #24
 80a0b4c:	bd10      	pop	{r4, pc}
 80a0b4e:	bf00      	nop
 80a0b50:	200000ac 	.word	0x200000ac
 80a0b54:	200000c4 	.word	0x200000c4
 80a0b58:	20000068 	.word	0x20000068
 80a0b5c:	080a09c5 	.word	0x080a09c5

080a0b60 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a0b60:	4770      	bx	lr

080a0b62 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0b62:	7441      	strb	r1, [r0, #17]
}
 80a0b64:	4770      	bx	lr

080a0b66 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a0b66:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a0b68:	7c00      	ldrb	r0, [r0, #16]
 80a0b6a:	f7ff fc31 	bl	80a03d0 <hal_usart_available_data_for_write>
}
 80a0b6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b72:	bd08      	pop	{r3, pc}

080a0b74 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0b74:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a0b76:	7c00      	ldrb	r0, [r0, #16]
 80a0b78:	f7ff fc02 	bl	80a0380 <hal_usart_available>
}
 80a0b7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0b80:	bd08      	pop	{r3, pc}

080a0b82 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0b82:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a0b84:	7c00      	ldrb	r0, [r0, #16]
 80a0b86:	f7ff fc0b 	bl	80a03a0 <hal_usart_peek>
}
 80a0b8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0b8e:	bd08      	pop	{r3, pc}

080a0b90 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0b90:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a0b92:	7c00      	ldrb	r0, [r0, #16]
 80a0b94:	f7ff fbfc 	bl	80a0390 <hal_usart_read>
}
 80a0b98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a0b9c:	bd08      	pop	{r3, pc}

080a0b9e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a0b9e:	7c00      	ldrb	r0, [r0, #16]
 80a0ba0:	f7ff bc06 	b.w	80a03b0 <hal_usart_flush>

080a0ba4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0ba4:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0ba6:	7c46      	ldrb	r6, [r0, #17]
{
 80a0ba8:	4604      	mov	r4, r0
 80a0baa:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0bac:	b12e      	cbz	r6, 80a0bba <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a0bae:	4629      	mov	r1, r5
 80a0bb0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0bb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a0bb6:	f7ff bbdb 	b.w	80a0370 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a0bba:	7c00      	ldrb	r0, [r0, #16]
 80a0bbc:	f7ff fc08 	bl	80a03d0 <hal_usart_available_data_for_write>
 80a0bc0:	2800      	cmp	r0, #0
 80a0bc2:	dcf4      	bgt.n	80a0bae <_ZN11USARTSerial5writeEh+0xa>
}
 80a0bc4:	4630      	mov	r0, r6
 80a0bc6:	bd70      	pop	{r4, r5, r6, pc}

080a0bc8 <_ZN11USARTSerialD0Ev>:
 80a0bc8:	b510      	push	{r4, lr}
 80a0bca:	4604      	mov	r4, r0
 80a0bcc:	2114      	movs	r1, #20
 80a0bce:	f000 fa1c 	bl	80a100a <_ZdlPvj>
 80a0bd2:	4620      	mov	r0, r4
 80a0bd4:	bd10      	pop	{r4, pc}
	...

080a0bd8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a0bd8:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a0bdc:	b510      	push	{r4, lr}
 80a0bde:	4604      	mov	r4, r0
 80a0be0:	4608      	mov	r0, r1
 80a0be2:	4611      	mov	r1, r2
 80a0be4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0be8:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a0bec:	4a04      	ldr	r2, [pc, #16]	; (80a0c00 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a0bee:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a0bf0:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a0bf2:	2201      	movs	r2, #1
 80a0bf4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a0bf6:	461a      	mov	r2, r3
 80a0bf8:	f7ff fbb2 	bl	80a0360 <hal_usart_init>
}
 80a0bfc:	4620      	mov	r0, r4
 80a0bfe:	bd10      	pop	{r4, pc}
 80a0c00:	080a1160 	.word	0x080a1160

080a0c04 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0c04:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0c06:	4d0d      	ldr	r5, [pc, #52]	; (80a0c3c <_Z22__fetch_global_Serial1v+0x38>)
 80a0c08:	7829      	ldrb	r1, [r5, #0]
 80a0c0a:	f3bf 8f5b 	dmb	ish
 80a0c0e:	f011 0401 	ands.w	r4, r1, #1
 80a0c12:	d111      	bne.n	80a0c38 <_Z22__fetch_global_Serial1v+0x34>
 80a0c14:	4628      	mov	r0, r5
 80a0c16:	f7ff fa42 	bl	80a009e <__cxa_guard_acquire>
 80a0c1a:	b168      	cbz	r0, 80a0c38 <_Z22__fetch_global_Serial1v+0x34>
 80a0c1c:	4621      	mov	r1, r4
 80a0c1e:	4a08      	ldr	r2, [pc, #32]	; (80a0c40 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0c20:	4b08      	ldr	r3, [pc, #32]	; (80a0c44 <_Z22__fetch_global_Serial1v+0x40>)
 80a0c22:	4809      	ldr	r0, [pc, #36]	; (80a0c48 <_Z22__fetch_global_Serial1v+0x44>)
 80a0c24:	f7ff ffd8 	bl	80a0bd8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a0c28:	4628      	mov	r0, r5
 80a0c2a:	f7ff fa3d 	bl	80a00a8 <__cxa_guard_release>
 80a0c2e:	4a07      	ldr	r2, [pc, #28]	; (80a0c4c <_Z22__fetch_global_Serial1v+0x48>)
 80a0c30:	4907      	ldr	r1, [pc, #28]	; (80a0c50 <_Z22__fetch_global_Serial1v+0x4c>)
 80a0c32:	4805      	ldr	r0, [pc, #20]	; (80a0c48 <_Z22__fetch_global_Serial1v+0x44>)
 80a0c34:	f000 f9e4 	bl	80a1000 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0c38:	4803      	ldr	r0, [pc, #12]	; (80a0c48 <_Z22__fetch_global_Serial1v+0x44>)
 80a0c3a:	bd38      	pop	{r3, r4, r5, pc}
 80a0c3c:	200003dc 	.word	0x200003dc
 80a0c40:	200003e0 	.word	0x200003e0
 80a0c44:	20000464 	.word	0x20000464
 80a0c48:	200004e8 	.word	0x200004e8
 80a0c4c:	20000068 	.word	0x20000068
 80a0c50:	080a0b61 	.word	0x080a0b61

080a0c54 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a0c54:	4770      	bx	lr

080a0c56 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c58:	4606      	mov	r6, r0
 80a0c5a:	4615      	mov	r5, r2
 80a0c5c:	460c      	mov	r4, r1
 80a0c5e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0c60:	42bc      	cmp	r4, r7
 80a0c62:	d006      	beq.n	80a0c72 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0c64:	6833      	ldr	r3, [r6, #0]
 80a0c66:	4630      	mov	r0, r6
 80a0c68:	689b      	ldr	r3, [r3, #8]
 80a0c6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0c6e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a0c70:	e7f6      	b.n	80a0c60 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a0c72:	4628      	mov	r0, r5
 80a0c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0c76 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a0c76:	2200      	movs	r2, #0
 80a0c78:	7c00      	ldrb	r0, [r0, #16]
 80a0c7a:	f7ff bbb1 	b.w	80a03e0 <hal_i2c_write>

080a0c7e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a0c7e:	2100      	movs	r1, #0
 80a0c80:	7c00      	ldrb	r0, [r0, #16]
 80a0c82:	f7ff bbb5 	b.w	80a03f0 <hal_i2c_available>

080a0c86 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a0c86:	2100      	movs	r1, #0
 80a0c88:	7c00      	ldrb	r0, [r0, #16]
 80a0c8a:	f7ff bbb9 	b.w	80a0400 <hal_i2c_read>

080a0c8e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a0c8e:	2100      	movs	r1, #0
 80a0c90:	7c00      	ldrb	r0, [r0, #16]
 80a0c92:	f7ff bbbd 	b.w	80a0410 <hal_i2c_peek>

080a0c96 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a0c96:	2100      	movs	r1, #0
 80a0c98:	7c00      	ldrb	r0, [r0, #16]
 80a0c9a:	f7ff bbc1 	b.w	80a0420 <hal_i2c_flush>

080a0c9e <_ZN7TwoWireD0Ev>:
 80a0c9e:	b510      	push	{r4, lr}
 80a0ca0:	4604      	mov	r4, r0
 80a0ca2:	2114      	movs	r1, #20
 80a0ca4:	f000 f9b1 	bl	80a100a <_ZdlPvj>
 80a0ca8:	4620      	mov	r0, r4
 80a0caa:	bd10      	pop	{r4, pc}

080a0cac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0cac:	b510      	push	{r4, lr}
 80a0cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0cb2:	4604      	mov	r4, r0
 80a0cb4:	4608      	mov	r0, r1
 80a0cb6:	2100      	movs	r1, #0
 80a0cb8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a0cbc:	4b03      	ldr	r3, [pc, #12]	; (80a0ccc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a0cbe:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a0cc0:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a0cc2:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a0cc4:	f7ff fbbc 	bl	80a0440 <hal_i2c_init>
}
 80a0cc8:	4620      	mov	r0, r4
 80a0cca:	bd10      	pop	{r4, pc}
 80a0ccc:	080a1190 	.word	0x080a1190

080a0cd0 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a0cd0:	2200      	movs	r2, #0
 80a0cd2:	6840      	ldr	r0, [r0, #4]
 80a0cd4:	4611      	mov	r1, r2
 80a0cd6:	f7ff bc41 	b.w	80a055c <network_ready>

080a0cda <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0cdc:	4615      	mov	r5, r2
 80a0cde:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0ce0:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a0ce2:	460e      	mov	r6, r1
 80a0ce4:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a0ce6:	2100      	movs	r1, #0
 80a0ce8:	a803      	add	r0, sp, #12
 80a0cea:	f000 f9b7 	bl	80a105c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0cee:	4628      	mov	r0, r5
 80a0cf0:	f000 f9ee 	bl	80a10d0 <strlen>
 80a0cf4:	2700      	movs	r7, #0
 80a0cf6:	b281      	uxth	r1, r0
 80a0cf8:	6873      	ldr	r3, [r6, #4]
 80a0cfa:	4628      	mov	r0, r5
 80a0cfc:	9700      	str	r7, [sp, #0]
 80a0cfe:	aa03      	add	r2, sp, #12
 80a0d00:	f7ff fbf0 	bl	80a04e4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0d04:	b130      	cbz	r0, 80a0d14 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a0d06:	4639      	mov	r1, r7
 80a0d08:	4620      	mov	r0, r4
 80a0d0a:	f7ff fe37 	bl	80a097c <_ZN9IPAddressC1Em>
    }
 80a0d0e:	4620      	mov	r0, r4
 80a0d10:	b009      	add	sp, #36	; 0x24
 80a0d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0d14:	4620      	mov	r0, r4
 80a0d16:	a903      	add	r1, sp, #12
 80a0d18:	f7ff fe1e 	bl	80a0958 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a0d1c:	e7f7      	b.n	80a0d0e <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a0d1e <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a0d1e:	2200      	movs	r2, #0
 80a0d20:	6840      	ldr	r0, [r0, #4]
 80a0d22:	4611      	mov	r1, r2
 80a0d24:	f7ff bc3a 	b.w	80a059c <network_listening>

080a0d28 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a0d28:	2200      	movs	r2, #0
 80a0d2a:	6840      	ldr	r0, [r0, #4]
 80a0d2c:	4611      	mov	r1, r2
 80a0d2e:	f7ff bc45 	b.w	80a05bc <network_get_listen_timeout>

080a0d32 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a0d32:	2200      	movs	r2, #0
 80a0d34:	6840      	ldr	r0, [r0, #4]
 80a0d36:	f7ff bc39 	b.w	80a05ac <network_set_listen_timeout>

080a0d3a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0d3a:	2200      	movs	r2, #0
 80a0d3c:	6840      	ldr	r0, [r0, #4]
 80a0d3e:	f081 0101 	eor.w	r1, r1, #1
 80a0d42:	f7ff bc23 	b.w	80a058c <network_listen>

080a0d46 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a0d46:	2300      	movs	r3, #0
 80a0d48:	6840      	ldr	r0, [r0, #4]
 80a0d4a:	461a      	mov	r2, r3
 80a0d4c:	4619      	mov	r1, r3
 80a0d4e:	f7ff bc15 	b.w	80a057c <network_off>

080a0d52 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a0d52:	2200      	movs	r2, #0
 80a0d54:	6840      	ldr	r0, [r0, #4]
 80a0d56:	4611      	mov	r1, r2
 80a0d58:	f7ff bbf0 	b.w	80a053c <network_connecting>

080a0d5c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0d5c:	2200      	movs	r2, #0
 80a0d5e:	2102      	movs	r1, #2
 80a0d60:	6840      	ldr	r0, [r0, #4]
 80a0d62:	f7ff bbf3 	b.w	80a054c <network_disconnect>

080a0d66 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a0d66:	2300      	movs	r3, #0
 80a0d68:	6840      	ldr	r0, [r0, #4]
 80a0d6a:	461a      	mov	r2, r3
 80a0d6c:	f7ff bbde 	b.w	80a052c <network_connect>

080a0d70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0d70:	2204      	movs	r2, #4
 80a0d72:	4b02      	ldr	r3, [pc, #8]	; (80a0d7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0d74:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0d76:	4a02      	ldr	r2, [pc, #8]	; (80a0d80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0d78:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a0d7a:	4770      	bx	lr
 80a0d7c:	200004fc 	.word	0x200004fc
 80a0d80:	080a11b8 	.word	0x080a11b8

080a0d84 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0d84:	2300      	movs	r3, #0
 80a0d86:	6840      	ldr	r0, [r0, #4]
 80a0d88:	461a      	mov	r2, r3
 80a0d8a:	f7ff bbcf 	b.w	80a052c <network_connect>

080a0d8e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0d8e:	2200      	movs	r2, #0
 80a0d90:	2102      	movs	r1, #2
 80a0d92:	6840      	ldr	r0, [r0, #4]
 80a0d94:	f7ff bbda 	b.w	80a054c <network_disconnect>

080a0d98 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0d98:	2200      	movs	r2, #0
 80a0d9a:	6840      	ldr	r0, [r0, #4]
 80a0d9c:	4611      	mov	r1, r2
 80a0d9e:	f7ff bbcd 	b.w	80a053c <network_connecting>

080a0da2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0da2:	2200      	movs	r2, #0
 80a0da4:	6840      	ldr	r0, [r0, #4]
 80a0da6:	4611      	mov	r1, r2
 80a0da8:	f7ff bbd8 	b.w	80a055c <network_ready>

080a0dac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0dac:	2300      	movs	r3, #0
 80a0dae:	6840      	ldr	r0, [r0, #4]
 80a0db0:	461a      	mov	r2, r3
 80a0db2:	4619      	mov	r1, r3
 80a0db4:	f7ff bbda 	b.w	80a056c <network_on>

080a0db8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0db8:	2300      	movs	r3, #0
 80a0dba:	6840      	ldr	r0, [r0, #4]
 80a0dbc:	461a      	mov	r2, r3
 80a0dbe:	4619      	mov	r1, r3
 80a0dc0:	f7ff bbdc 	b.w	80a057c <network_off>

080a0dc4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a0dc4:	2100      	movs	r1, #0
 80a0dc6:	6840      	ldr	r0, [r0, #4]
 80a0dc8:	f7ff bc00 	b.w	80a05cc <network_is_on>

080a0dcc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a0dcc:	2100      	movs	r1, #0
 80a0dce:	6840      	ldr	r0, [r0, #4]
 80a0dd0:	f7ff bc04 	b.w	80a05dc <network_is_off>

080a0dd4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0dd4:	2200      	movs	r2, #0
 80a0dd6:	6840      	ldr	r0, [r0, #4]
 80a0dd8:	f081 0101 	eor.w	r1, r1, #1
 80a0ddc:	f7ff bbd6 	b.w	80a058c <network_listen>

080a0de0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0de0:	2200      	movs	r2, #0
 80a0de2:	6840      	ldr	r0, [r0, #4]
 80a0de4:	f7ff bbe2 	b.w	80a05ac <network_set_listen_timeout>

080a0de8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0de8:	2200      	movs	r2, #0
 80a0dea:	6840      	ldr	r0, [r0, #4]
 80a0dec:	4611      	mov	r1, r2
 80a0dee:	f7ff bbe5 	b.w	80a05bc <network_get_listen_timeout>

080a0df2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0df2:	2200      	movs	r2, #0
 80a0df4:	6840      	ldr	r0, [r0, #4]
 80a0df6:	4611      	mov	r1, r2
 80a0df8:	f7ff bbd0 	b.w	80a059c <network_listening>

080a0dfc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0dfc:	b570      	push	{r4, r5, r6, lr}
 80a0dfe:	4615      	mov	r5, r2
 80a0e00:	b08e      	sub	sp, #56	; 0x38
 80a0e02:	4604      	mov	r4, r0
    IPAddress addr;
 80a0e04:	a808      	add	r0, sp, #32
 80a0e06:	f7ff fd99 	bl	80a093c <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a0e0a:	2211      	movs	r2, #17
 80a0e0c:	2100      	movs	r1, #0
 80a0e0e:	a803      	add	r0, sp, #12
 80a0e10:	f000 f924 	bl	80a105c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0e14:	2600      	movs	r6, #0
 80a0e16:	4628      	mov	r0, r5
 80a0e18:	f000 f95a 	bl	80a10d0 <strlen>
 80a0e1c:	4b0a      	ldr	r3, [pc, #40]	; (80a0e48 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0e1e:	9600      	str	r6, [sp, #0]
 80a0e20:	b281      	uxth	r1, r0
 80a0e22:	685b      	ldr	r3, [r3, #4]
 80a0e24:	4628      	mov	r0, r5
 80a0e26:	aa03      	add	r2, sp, #12
 80a0e28:	f7ff fb5c 	bl	80a04e4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0e2c:	b130      	cbz	r0, 80a0e3c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a0e2e:	4631      	mov	r1, r6
 80a0e30:	4620      	mov	r0, r4
 80a0e32:	f7ff fda3 	bl	80a097c <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0e36:	4620      	mov	r0, r4
 80a0e38:	b00e      	add	sp, #56	; 0x38
 80a0e3a:	bd70      	pop	{r4, r5, r6, pc}
 80a0e3c:	4620      	mov	r0, r4
 80a0e3e:	a903      	add	r1, sp, #12
 80a0e40:	f7ff fd8a 	bl	80a0958 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a0e44:	e7f7      	b.n	80a0e36 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a0e46:	bf00      	nop
 80a0e48:	200004fc 	.word	0x200004fc

080a0e4c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a0e4c:	4b02      	ldr	r3, [pc, #8]	; (80a0e58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0e4e:	4a03      	ldr	r2, [pc, #12]	; (80a0e5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0e50:	601a      	str	r2, [r3, #0]
 80a0e52:	2200      	movs	r2, #0
 80a0e54:	605a      	str	r2, [r3, #4]

} // spark
 80a0e56:	4770      	bx	lr
 80a0e58:	20000504 	.word	0x20000504
 80a0e5c:	080a11f4 	.word	0x080a11f4

080a0e60 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a0e60:	b510      	push	{r4, lr}
 80a0e62:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0e64:	6880      	ldr	r0, [r0, #8]
 80a0e66:	b108      	cbz	r0, 80a0e6c <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a0e68:	f7ff fa72 	bl	80a0350 <os_mutex_recursive_destroy>
 80a0e6c:	4620      	mov	r0, r4
 80a0e6e:	bd10      	pop	{r4, pc}

080a0e70 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a0e70:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a0e72:	b570      	push	{r4, r5, r6, lr}
 80a0e74:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a0e76:	d901      	bls.n	80a0e7c <pinAvailable+0xc>
    return false;
 80a0e78:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a0e7a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a0e7c:	f1a0 030d 	sub.w	r3, r0, #13
 80a0e80:	2b02      	cmp	r3, #2
 80a0e82:	d90b      	bls.n	80a0e9c <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a0e84:	2801      	cmp	r0, #1
 80a0e86:	d826      	bhi.n	80a0ed6 <pinAvailable+0x66>
 80a0e88:	f000 f892 	bl	80a0fb0 <_Z19__fetch_global_Wirev>
 80a0e8c:	2100      	movs	r1, #0
 80a0e8e:	7c00      	ldrb	r0, [r0, #16]
 80a0e90:	f7ff face 	bl	80a0430 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a0e94:	f080 0001 	eor.w	r0, r0, #1
 80a0e98:	b2c0      	uxtb	r0, r0
 80a0e9a:	e7ee      	b.n	80a0e7a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0e9c:	4e13      	ldr	r6, [pc, #76]	; (80a0eec <pinAvailable+0x7c>)
 80a0e9e:	7831      	ldrb	r1, [r6, #0]
 80a0ea0:	f3bf 8f5b 	dmb	ish
 80a0ea4:	f011 0501 	ands.w	r5, r1, #1
 80a0ea8:	d10f      	bne.n	80a0eca <pinAvailable+0x5a>
 80a0eaa:	4630      	mov	r0, r6
 80a0eac:	f7ff f8f7 	bl	80a009e <__cxa_guard_acquire>
 80a0eb0:	b158      	cbz	r0, 80a0eca <pinAvailable+0x5a>
 80a0eb2:	4629      	mov	r1, r5
 80a0eb4:	480e      	ldr	r0, [pc, #56]	; (80a0ef0 <pinAvailable+0x80>)
 80a0eb6:	f7ff fbc1 	bl	80a063c <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a0eba:	4630      	mov	r0, r6
 80a0ebc:	f7ff f8f4 	bl	80a00a8 <__cxa_guard_release>
 80a0ec0:	4a0c      	ldr	r2, [pc, #48]	; (80a0ef4 <pinAvailable+0x84>)
 80a0ec2:	490d      	ldr	r1, [pc, #52]	; (80a0ef8 <pinAvailable+0x88>)
 80a0ec4:	480a      	ldr	r0, [pc, #40]	; (80a0ef0 <pinAvailable+0x80>)
 80a0ec6:	f000 f89b 	bl	80a1000 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a0eca:	4b09      	ldr	r3, [pc, #36]	; (80a0ef0 <pinAvailable+0x80>)
 80a0ecc:	7818      	ldrb	r0, [r3, #0]
 80a0ece:	f7ff fac9 	bl	80a0464 <hal_spi_is_enabled>
 80a0ed2:	2800      	cmp	r0, #0
 80a0ed4:	d1d0      	bne.n	80a0e78 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a0ed6:	3c12      	subs	r4, #18
 80a0ed8:	2c01      	cmp	r4, #1
 80a0eda:	d805      	bhi.n	80a0ee8 <pinAvailable+0x78>
 80a0edc:	f7ff fe92 	bl	80a0c04 <_Z22__fetch_global_Serial1v>
 80a0ee0:	7c00      	ldrb	r0, [r0, #16]
 80a0ee2:	f7ff fa6d 	bl	80a03c0 <hal_usart_is_enabled>
 80a0ee6:	e7d5      	b.n	80a0e94 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a0ee8:	2001      	movs	r0, #1
 80a0eea:	e7c6      	b.n	80a0e7a <pinAvailable+0xa>
 80a0eec:	2000050c 	.word	0x2000050c
 80a0ef0:	20000510 	.word	0x20000510
 80a0ef4:	20000068 	.word	0x20000068
 80a0ef8:	080a0e61 	.word	0x080a0e61

080a0efc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0efc:	2817      	cmp	r0, #23
{
 80a0efe:	b538      	push	{r3, r4, r5, lr}
 80a0f00:	4604      	mov	r4, r0
 80a0f02:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0f04:	d80a      	bhi.n	80a0f1c <pinMode+0x20>
 80a0f06:	29ff      	cmp	r1, #255	; 0xff
 80a0f08:	d008      	beq.n	80a0f1c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a0f0a:	f7ff ffb1 	bl	80a0e70 <pinAvailable>
 80a0f0e:	b128      	cbz	r0, 80a0f1c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a0f10:	4629      	mov	r1, r5
 80a0f12:	4620      	mov	r0, r4
}
 80a0f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a0f18:	f7ff b9e2 	b.w	80a02e0 <HAL_Pin_Mode>
}
 80a0f1c:	bd38      	pop	{r3, r4, r5, pc}

080a0f1e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0f1e:	b538      	push	{r3, r4, r5, lr}
 80a0f20:	4604      	mov	r4, r0
 80a0f22:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0f24:	f7ff f9e4 	bl	80a02f0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0f28:	28ff      	cmp	r0, #255	; 0xff
 80a0f2a:	d010      	beq.n	80a0f4e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a0f2c:	2806      	cmp	r0, #6
 80a0f2e:	d804      	bhi.n	80a0f3a <digitalWrite+0x1c>
 80a0f30:	234d      	movs	r3, #77	; 0x4d
 80a0f32:	fa23 f000 	lsr.w	r0, r3, r0
 80a0f36:	07c3      	lsls	r3, r0, #31
 80a0f38:	d409      	bmi.n	80a0f4e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a0f3a:	4620      	mov	r0, r4
 80a0f3c:	f7ff ff98 	bl	80a0e70 <pinAvailable>
 80a0f40:	b128      	cbz	r0, 80a0f4e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0f42:	4629      	mov	r1, r5
 80a0f44:	4620      	mov	r0, r4
}
 80a0f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a0f4a:	f7ff b9d9 	b.w	80a0300 <HAL_GPIO_Write>
}
 80a0f4e:	bd38      	pop	{r3, r4, r5, pc}

080a0f50 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0f50:	2300      	movs	r3, #0
 80a0f52:	b513      	push	{r0, r1, r4, lr}
 80a0f54:	4c07      	ldr	r4, [pc, #28]	; (80a0f74 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0f56:	461a      	mov	r2, r3
 80a0f58:	4619      	mov	r1, r3
 80a0f5a:	4620      	mov	r0, r4
 80a0f5c:	9300      	str	r3, [sp, #0]
 80a0f5e:	f7ff fd23 	bl	80a09a8 <_ZN9IPAddressC1Ehhhh>
 80a0f62:	4620      	mov	r0, r4
 80a0f64:	4a04      	ldr	r2, [pc, #16]	; (80a0f78 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0f66:	4905      	ldr	r1, [pc, #20]	; (80a0f7c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0f68:	b002      	add	sp, #8
 80a0f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0f6e:	f000 b847 	b.w	80a1000 <__aeabi_atexit>
 80a0f72:	bf00      	nop
 80a0f74:	20000520 	.word	0x20000520
 80a0f78:	20000068 	.word	0x20000068
 80a0f7c:	080a08f9 	.word	0x080a08f9

080a0f80 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a0f80:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a0f82:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a0f84:	2520      	movs	r5, #32
 80a0f86:	8043      	strh	r3, [r0, #2]
 80a0f88:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f8a:	4e08      	ldr	r6, [pc, #32]	; (80a0fac <_Z17acquireWireBufferv+0x2c>)
{
 80a0f8c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a0f8e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f90:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a0f92:	6085      	str	r5, [r0, #8]
 80a0f94:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f96:	4628      	mov	r0, r5
 80a0f98:	f000 f839 	bl	80a100e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0f9c:	4631      	mov	r1, r6
	};
 80a0f9e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0fa0:	4628      	mov	r0, r5
 80a0fa2:	f000 f834 	bl	80a100e <_ZnajRKSt9nothrow_t>
	};
 80a0fa6:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a0fa8:	4620      	mov	r0, r4
 80a0faa:	bd70      	pop	{r4, r5, r6, pc}
 80a0fac:	080a1228 	.word	0x080a1228

080a0fb0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a0fb0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0fb2:	4d0f      	ldr	r5, [pc, #60]	; (80a0ff0 <_Z19__fetch_global_Wirev+0x40>)
{
 80a0fb4:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0fb6:	7829      	ldrb	r1, [r5, #0]
 80a0fb8:	f3bf 8f5b 	dmb	ish
 80a0fbc:	f011 0401 	ands.w	r4, r1, #1
 80a0fc0:	d113      	bne.n	80a0fea <_Z19__fetch_global_Wirev+0x3a>
 80a0fc2:	4628      	mov	r0, r5
 80a0fc4:	f7ff f86b 	bl	80a009e <__cxa_guard_acquire>
 80a0fc8:	b178      	cbz	r0, 80a0fea <_Z19__fetch_global_Wirev+0x3a>
 80a0fca:	a801      	add	r0, sp, #4
 80a0fcc:	f7ff ffd8 	bl	80a0f80 <_Z17acquireWireBufferv>
 80a0fd0:	4621      	mov	r1, r4
 80a0fd2:	aa01      	add	r2, sp, #4
 80a0fd4:	4807      	ldr	r0, [pc, #28]	; (80a0ff4 <_Z19__fetch_global_Wirev+0x44>)
 80a0fd6:	f7ff fe69 	bl	80a0cac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a0fda:	4628      	mov	r0, r5
 80a0fdc:	f7ff f864 	bl	80a00a8 <__cxa_guard_release>
 80a0fe0:	4a05      	ldr	r2, [pc, #20]	; (80a0ff8 <_Z19__fetch_global_Wirev+0x48>)
 80a0fe2:	4906      	ldr	r1, [pc, #24]	; (80a0ffc <_Z19__fetch_global_Wirev+0x4c>)
 80a0fe4:	4803      	ldr	r0, [pc, #12]	; (80a0ff4 <_Z19__fetch_global_Wirev+0x44>)
 80a0fe6:	f000 f80b 	bl	80a1000 <__aeabi_atexit>
	return wire;
}
 80a0fea:	4802      	ldr	r0, [pc, #8]	; (80a0ff4 <_Z19__fetch_global_Wirev+0x44>)
 80a0fec:	b007      	add	sp, #28
 80a0fee:	bd30      	pop	{r4, r5, pc}
 80a0ff0:	20000538 	.word	0x20000538
 80a0ff4:	2000053c 	.word	0x2000053c
 80a0ff8:	20000068 	.word	0x20000068
 80a0ffc:	080a0c55 	.word	0x080a0c55

080a1000 <__aeabi_atexit>:
 80a1000:	460b      	mov	r3, r1
 80a1002:	4601      	mov	r1, r0
 80a1004:	4618      	mov	r0, r3
 80a1006:	f000 b80d 	b.w	80a1024 <__cxa_atexit>

080a100a <_ZdlPvj>:
 80a100a:	f7ff b846 	b.w	80a009a <_ZdlPv>

080a100e <_ZnajRKSt9nothrow_t>:
 80a100e:	f7ff b842 	b.w	80a0096 <_Znaj>
	...

080a1014 <calloc>:
 80a1014:	4b02      	ldr	r3, [pc, #8]	; (80a1020 <calloc+0xc>)
 80a1016:	460a      	mov	r2, r1
 80a1018:	4601      	mov	r1, r0
 80a101a:	6818      	ldr	r0, [r3, #0]
 80a101c:	f000 b826 	b.w	80a106c <_calloc_r>
 80a1020:	20000004 	.word	0x20000004

080a1024 <__cxa_atexit>:
 80a1024:	b510      	push	{r4, lr}
 80a1026:	4604      	mov	r4, r0
 80a1028:	4804      	ldr	r0, [pc, #16]	; (80a103c <__cxa_atexit+0x18>)
 80a102a:	4613      	mov	r3, r2
 80a102c:	b120      	cbz	r0, 80a1038 <__cxa_atexit+0x14>
 80a102e:	460a      	mov	r2, r1
 80a1030:	2002      	movs	r0, #2
 80a1032:	4621      	mov	r1, r4
 80a1034:	f3af 8000 	nop.w
 80a1038:	bd10      	pop	{r4, pc}
 80a103a:	bf00      	nop
 80a103c:	00000000 	.word	0x00000000

080a1040 <memcpy>:
 80a1040:	440a      	add	r2, r1
 80a1042:	4291      	cmp	r1, r2
 80a1044:	f100 33ff 	add.w	r3, r0, #4294967295
 80a1048:	d100      	bne.n	80a104c <memcpy+0xc>
 80a104a:	4770      	bx	lr
 80a104c:	b510      	push	{r4, lr}
 80a104e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1052:	4291      	cmp	r1, r2
 80a1054:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1058:	d1f9      	bne.n	80a104e <memcpy+0xe>
 80a105a:	bd10      	pop	{r4, pc}

080a105c <memset>:
 80a105c:	4603      	mov	r3, r0
 80a105e:	4402      	add	r2, r0
 80a1060:	4293      	cmp	r3, r2
 80a1062:	d100      	bne.n	80a1066 <memset+0xa>
 80a1064:	4770      	bx	lr
 80a1066:	f803 1b01 	strb.w	r1, [r3], #1
 80a106a:	e7f9      	b.n	80a1060 <memset+0x4>

080a106c <_calloc_r>:
 80a106c:	b538      	push	{r3, r4, r5, lr}
 80a106e:	fb02 f501 	mul.w	r5, r2, r1
 80a1072:	4629      	mov	r1, r5
 80a1074:	f7ff fad2 	bl	80a061c <_malloc_r>
 80a1078:	4604      	mov	r4, r0
 80a107a:	b118      	cbz	r0, 80a1084 <_calloc_r+0x18>
 80a107c:	462a      	mov	r2, r5
 80a107e:	2100      	movs	r1, #0
 80a1080:	f7ff ffec 	bl	80a105c <memset>
 80a1084:	4620      	mov	r0, r4
 80a1086:	bd38      	pop	{r3, r4, r5, pc}

080a1088 <srand>:
 80a1088:	b538      	push	{r3, r4, r5, lr}
 80a108a:	4b0d      	ldr	r3, [pc, #52]	; (80a10c0 <srand+0x38>)
 80a108c:	4604      	mov	r4, r0
 80a108e:	681d      	ldr	r5, [r3, #0]
 80a1090:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a1092:	b97b      	cbnz	r3, 80a10b4 <srand+0x2c>
 80a1094:	2018      	movs	r0, #24
 80a1096:	f7ff fab1 	bl	80a05fc <malloc>
 80a109a:	4a0a      	ldr	r2, [pc, #40]	; (80a10c4 <srand+0x3c>)
 80a109c:	4b0a      	ldr	r3, [pc, #40]	; (80a10c8 <srand+0x40>)
 80a109e:	63a8      	str	r0, [r5, #56]	; 0x38
 80a10a0:	e9c0 2300 	strd	r2, r3, [r0]
 80a10a4:	4b09      	ldr	r3, [pc, #36]	; (80a10cc <srand+0x44>)
 80a10a6:	2201      	movs	r2, #1
 80a10a8:	6083      	str	r3, [r0, #8]
 80a10aa:	230b      	movs	r3, #11
 80a10ac:	8183      	strh	r3, [r0, #12]
 80a10ae:	2300      	movs	r3, #0
 80a10b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a10b4:	2200      	movs	r2, #0
 80a10b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a10b8:	611c      	str	r4, [r3, #16]
 80a10ba:	615a      	str	r2, [r3, #20]
 80a10bc:	bd38      	pop	{r3, r4, r5, pc}
 80a10be:	bf00      	nop
 80a10c0:	20000004 	.word	0x20000004
 80a10c4:	abcd330e 	.word	0xabcd330e
 80a10c8:	e66d1234 	.word	0xe66d1234
 80a10cc:	0005deec 	.word	0x0005deec

080a10d0 <strlen>:
 80a10d0:	4603      	mov	r3, r0
 80a10d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a10d6:	2a00      	cmp	r2, #0
 80a10d8:	d1fb      	bne.n	80a10d2 <strlen+0x2>
 80a10da:	1a18      	subs	r0, r3, r0
 80a10dc:	3801      	subs	r0, #1
 80a10de:	4770      	bx	lr

080a10e0 <dynalib_user>:
 80a10e0:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a10f0:	0000 0000 7061 0070 5925 252d 2d6d 6425     ....app.%Y-%m-%d
 80a1100:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a1110:	6d69 0065                                   ime.

080a1114 <_ZTV9IPAddress>:
	...
 80a111c:	0909 080a 08f9 080a 08fb 080a               ............

080a1128 <_ZTV9USBSerial>:
	...
 80a1130:	09c5 080a 0a2b 080a 0a03 080a 06b5 080a     ....+...........
 80a1140:	09f5 080a 09c7 080a 09d7 080a 0a25 080a     ............%...
 80a1150:	09e7 080a 09c1 080a                         ........

080a1158 <_ZTV11USARTSerial>:
	...
 80a1160:	0b61 080a 0bc9 080a 0ba5 080a 06b5 080a     a...............
 80a1170:	0b75 080a 0b91 080a 0b83 080a 0b9f 080a     u...............
 80a1180:	0b63 080a 0b67 080a                         c...g...

080a1188 <_ZTV7TwoWire>:
	...
 80a1190:	0c55 080a 0c9f 080a 0c77 080a 0c57 080a     U.......w...W...
 80a11a0:	0c7f 080a 0c87 080a 0c8f 080a 0c97 080a     ................

080a11b0 <_ZTVN5spark9WiFiClassE>:
	...
 80a11b8:	0d67 080a 0d5d 080a 0d53 080a 0cd1 080a     g...]...S.......
 80a11c8:	0741 080a 0d47 080a 0dc5 080a 0dcd 080a     A...G...........
 80a11d8:	0d3b 080a 0d33 080a 0d29 080a 0d1f 080a     ;...3...).......
 80a11e8:	0cdb 080a                                   ....

080a11ec <_ZTVN5spark12NetworkClassE>:
	...
 80a11f4:	0d85 080a 0d8f 080a 0d99 080a 0da3 080a     ................
 80a1204:	0dad 080a 0db9 080a 0dc5 080a 0dcd 080a     ................
 80a1214:	0dd5 080a 0de1 080a 0de9 080a 0df3 080a     ................
 80a1224:	0dfd 080a                                   ....

080a1228 <_ZSt7nothrow>:
	...

080a1229 <link_const_variable_data_end>:
 80a1229:	00          	.byte	0x00
	...

080a122c <link_constructors_location>:
 80a122c:	080a011d 	.word	0x080a011d
 80a1230:	080a0679 	.word	0x080a0679
 80a1234:	080a074d 	.word	0x080a074d
 80a1238:	080a075d 	.word	0x080a075d
 80a123c:	080a0791 	.word	0x080a0791
 80a1240:	080a0d71 	.word	0x080a0d71
 80a1244:	080a0e4d 	.word	0x080a0e4d
 80a1248:	080a0f51 	.word	0x080a0f51

080a124c <link_constructors_end>:
 80a124c:	00000000 	.word	0x00000000
