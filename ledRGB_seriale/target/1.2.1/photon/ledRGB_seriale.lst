
c:/IOT/progetti/ledRGB_seriale/target/1.2.1/photon/ledRGB_seriale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002748  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  080a2760  080a2760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  080a2768  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000300  080a276c  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005ec  20000370  20000370  00030370  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a27dc  080a27dc  000227dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2804  080a2804  00022804  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000a3810  00000000  00000000  00022808  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f373  00000000  00000000  000c6018  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00012a66  00000000  00000000  000d538b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e60  00000000  00000000  000e7df1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002eb0  00000000  00000000  000e9c51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00024a67  00000000  00000000  000ecb01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00021f59  00000000  00000000  00111568  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a440f  00000000  00000000  001334c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ca58  00000000  00000000  001d78d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	94 20 0a 08                                         . ..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 ff2c 	bl	80a1e8a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 ff4c 	bl	80a1ed6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a276c 	.word	0x080a276c
 80a004c:	20000370 	.word	0x20000370
 80a0050:	20000370 	.word	0x20000370
 80a0054:	2000095c 	.word	0x2000095c
 80a0058:	2000095c 	.word	0x2000095c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fda5 	bl	80a0bac <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2724 	.word	0x080a2724
 80a0084:	080a275c 	.word	0x080a275c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f825 	bl	80a00dc <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bd4b 	b.w	80a0b30 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bb79 	b.w	80a0790 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bb7f 	b.w	80a07a0 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
int n;
int r, g ,b;
String intermediate;

// setup() runs once, when the device is first turned on.
void setup() {
 80a00b4:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
 80a00b6:	f000 fe79 	bl	80a0dac <_Z16_fetch_usbserialv>
 80a00ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00be:	f000 fe5b 	bl	80a0d78 <_ZN9USBSerial5beginEl>
  leds.init();
 80a00c2:	4805      	ldr	r0, [pc, #20]	; (80a00d8 <setup+0x24>)
 80a00c4:	f000 f9c8 	bl	80a0458 <_ZN12ChainableLED4initEv>
  Serial.setTimeout(100);
 80a00c8:	f000 fe70 	bl	80a0dac <_Z16_fetch_usbserialv>
}
 80a00cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
  leds.init();
  Serial.setTimeout(100);
 80a00d0:	2164      	movs	r1, #100	; 0x64
 80a00d2:	f000 bcaf 	b.w	80a0a34 <_ZN6Stream10setTimeoutEm>
 80a00d6:	bf00      	nop
 80a00d8:	20000374 	.word	0x20000374

080a00dc <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a00dc:	b530      	push	{r4, r5, lr}
 80a00de:	b095      	sub	sp, #84	; 0x54
  // The core of your code will likely live here.

  /* vocale = Serial.readStringUntil('='); */
  /* comando = Serial.readString(); */
  s = Serial.readString();
 80a00e0:	f000 fe64 	bl	80a0dac <_Z16_fetch_usbserialv>
 80a00e4:	4c4c      	ldr	r4, [pc, #304]	; (80a0218 <loop+0x13c>)
 80a00e6:	4601      	mov	r1, r0
 80a00e8:	a80e      	add	r0, sp, #56	; 0x38
 80a00ea:	f000 fca5 	bl	80a0a38 <_ZN6Stream10readStringEv>
 80a00ee:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a00f0:	4620      	mov	r0, r4
 80a00f2:	f001 fa4c 	bl	80a158e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
 80a00f6:	a80e      	add	r0, sp, #56	; 0x38
 80a00f8:	f000 fb9e 	bl	80a0838 <_ZN6StringD1Ev>
  if(s.size()>0){
 80a00fc:	6863      	ldr	r3, [r4, #4]
 80a00fe:	2b00      	cmp	r3, #0
 80a0100:	f000 8087 	beq.w	80a0212 <loop+0x136>
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80a0104:	4a45      	ldr	r2, [pc, #276]	; (80a021c <loop+0x140>)

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
      {
	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
	: allocator_type(__a), _M_p(__dat) { }
 80a0106:	a804      	add	r0, sp, #16
 80a0108:	1e51      	subs	r1, r2, #1
 80a010a:	9002      	str	r0, [sp, #8]
 80a010c:	f001 f96d 	bl	80a13ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }
 80a0110:	2301      	movs	r3, #1
 80a0112:	9303      	str	r3, [sp, #12]
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
 80a0114:	9b02      	ldr	r3, [sp, #8]
 80a0116:	2500      	movs	r5, #0
 80a0118:	705d      	strb	r5, [r3, #1]
    std::string delimiter = "=";
    std::string letter = s.substr(0, s.find(delimiter));
 80a011a:	462a      	mov	r2, r5
 80a011c:	a902      	add	r1, sp, #8
 80a011e:	4620      	mov	r0, r4
 80a0120:	f001 fa65 	bl	80a15ee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 80a0124:	4621      	mov	r1, r4
 80a0126:	4603      	mov	r3, r0
 80a0128:	462a      	mov	r2, r5
 80a012a:	a808      	add	r0, sp, #32
 80a012c:	f001 faba 	bl	80a16a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
    std::string number = s.substr(s.find(delimiter)+1);
 80a0130:	462a      	mov	r2, r5
 80a0132:	a902      	add	r1, sp, #8
 80a0134:	4620      	mov	r0, r4
 80a0136:	f001 fa5a 	bl	80a15ee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>
 80a013a:	f04f 33ff 	mov.w	r3, #4294967295
 80a013e:	1c42      	adds	r2, r0, #1
 80a0140:	4621      	mov	r1, r4
 80a0142:	a80e      	add	r0, sp, #56	; 0x38
 80a0144:	f001 faae 	bl	80a16a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>

    Serial.println(letter.c_str());
 80a0148:	f000 fe30 	bl	80a0dac <_Z16_fetch_usbserialv>
 80a014c:	9908      	ldr	r1, [sp, #32]
 80a014e:	f000 fc26 	bl	80a099e <_ZN5Print7printlnEPKc>
    Serial.println(number.c_str());
 80a0152:	f000 fe2b 	bl	80a0dac <_Z16_fetch_usbserialv>
 80a0156:	990e      	ldr	r1, [sp, #56]	; 0x38
 80a0158:	f000 fc21 	bl	80a099e <_ZN5Print7printlnEPKc>

    n = atoi( number.c_str() );
 80a015c:	980e      	ldr	r0, [sp, #56]	; 0x38
 80a015e:	f001 fe6b 	bl	80a1e38 <atoi>
 80a0162:	4c2f      	ldr	r4, [pc, #188]	; (80a0220 <loop+0x144>)
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
	       const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
 80a0164:	492f      	ldr	r1, [pc, #188]	; (80a0224 <loop+0x148>)
 80a0166:	6020      	str	r0, [r4, #0]
 80a0168:	a808      	add	r0, sp, #32
 80a016a:	f001 fa45 	bl	80a15f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>

    if(letter == "r"){
 80a016e:	4601      	mov	r1, r0
 80a0170:	b948      	cbnz	r0, 80a0186 <loop+0xaa>
      r=n;
 80a0172:	6822      	ldr	r2, [r4, #0]
 80a0174:	4b2c      	ldr	r3, [pc, #176]	; (80a0228 <loop+0x14c>)
      leds.setColorRGB(0, r, g, b);
 80a0176:	482d      	ldr	r0, [pc, #180]	; (80a022c <loop+0x150>)
    Serial.println(number.c_str());

    n = atoi( number.c_str() );

    if(letter == "r"){
      r=n;
 80a0178:	601a      	str	r2, [r3, #0]
      leds.setColorRGB(0, r, g, b);
 80a017a:	7800      	ldrb	r0, [r0, #0]
 80a017c:	4b2c      	ldr	r3, [pc, #176]	; (80a0230 <loop+0x154>)
 80a017e:	b2d2      	uxtb	r2, r2
 80a0180:	781b      	ldrb	r3, [r3, #0]
 80a0182:	9000      	str	r0, [sp, #0]
 80a0184:	e00e      	b.n	80a01a4 <loop+0xc8>
 80a0186:	492b      	ldr	r1, [pc, #172]	; (80a0234 <loop+0x158>)
 80a0188:	a808      	add	r0, sp, #32
 80a018a:	f001 fa35 	bl	80a15f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
    }else if(letter == "g"){
 80a018e:	4601      	mov	r1, r0
 80a0190:	b960      	cbnz	r0, 80a01ac <loop+0xd0>
      g=n;
 80a0192:	6823      	ldr	r3, [r4, #0]
 80a0194:	4a26      	ldr	r2, [pc, #152]	; (80a0230 <loop+0x154>)
      leds.setColorRGB(0, r, g, b);
 80a0196:	4825      	ldr	r0, [pc, #148]	; (80a022c <loop+0x150>)

    if(letter == "r"){
      r=n;
      leds.setColorRGB(0, r, g, b);
    }else if(letter == "g"){
      g=n;
 80a0198:	6013      	str	r3, [r2, #0]
      leds.setColorRGB(0, r, g, b);
 80a019a:	7800      	ldrb	r0, [r0, #0]
 80a019c:	4a22      	ldr	r2, [pc, #136]	; (80a0228 <loop+0x14c>)
 80a019e:	b2db      	uxtb	r3, r3
 80a01a0:	7812      	ldrb	r2, [r2, #0]
 80a01a2:	9000      	str	r0, [sp, #0]
 80a01a4:	4824      	ldr	r0, [pc, #144]	; (80a0238 <loop+0x15c>)
 80a01a6:	f000 f90e 	bl	80a03c6 <_ZN12ChainableLED11setColorRGBEhhhh>
 80a01aa:	e029      	b.n	80a0200 <loop+0x124>
 80a01ac:	4923      	ldr	r1, [pc, #140]	; (80a023c <loop+0x160>)
 80a01ae:	a808      	add	r0, sp, #32
 80a01b0:	f001 fa22 	bl	80a15f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
    }else if(letter == "b"){
 80a01b4:	4601      	mov	r1, r0
 80a01b6:	b948      	cbnz	r0, 80a01cc <loop+0xf0>
      b=n;
 80a01b8:	6824      	ldr	r4, [r4, #0]
 80a01ba:	4b1c      	ldr	r3, [pc, #112]	; (80a022c <loop+0x150>)
      leds.setColorRGB(0, r, g, b);
 80a01bc:	4a1a      	ldr	r2, [pc, #104]	; (80a0228 <loop+0x14c>)
      leds.setColorRGB(0, r, g, b);
    }else if(letter == "g"){
      g=n;
      leds.setColorRGB(0, r, g, b);
    }else if(letter == "b"){
      b=n;
 80a01be:	601c      	str	r4, [r3, #0]
      leds.setColorRGB(0, r, g, b);
 80a01c0:	4b1b      	ldr	r3, [pc, #108]	; (80a0230 <loop+0x154>)
 80a01c2:	b2e4      	uxtb	r4, r4
 80a01c4:	781b      	ldrb	r3, [r3, #0]
 80a01c6:	7812      	ldrb	r2, [r2, #0]
 80a01c8:	9400      	str	r4, [sp, #0]
 80a01ca:	e7eb      	b.n	80a01a4 <loop+0xc8>
 80a01cc:	491c      	ldr	r1, [pc, #112]	; (80a0240 <loop+0x164>)
 80a01ce:	a808      	add	r0, sp, #32
 80a01d0:	f001 fa12 	bl	80a15f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
    }else if(letter == "o"){
 80a01d4:	4603      	mov	r3, r0
 80a01d6:	b948      	cbnz	r0, 80a01ec <loop+0x110>
      r=0;
 80a01d8:	4a13      	ldr	r2, [pc, #76]	; (80a0228 <loop+0x14c>)
      g=0;
      b=0;
      leds.setColorRGB(0, r, g, b);
 80a01da:	4601      	mov	r1, r0
      leds.setColorRGB(0, r, g, b);
    }else if(letter == "b"){
      b=n;
      leds.setColorRGB(0, r, g, b);
    }else if(letter == "o"){
      r=0;
 80a01dc:	6010      	str	r0, [r2, #0]
      g=0;
 80a01de:	4a14      	ldr	r2, [pc, #80]	; (80a0230 <loop+0x154>)
 80a01e0:	6010      	str	r0, [r2, #0]
      b=0;
 80a01e2:	4a12      	ldr	r2, [pc, #72]	; (80a022c <loop+0x150>)
 80a01e4:	6010      	str	r0, [r2, #0]
      leds.setColorRGB(0, r, g, b);
 80a01e6:	9000      	str	r0, [sp, #0]
 80a01e8:	4602      	mov	r2, r0
 80a01ea:	e7db      	b.n	80a01a4 <loop+0xc8>
    }else{
      Serial.println("Errore, comandi disponibili: ");
 80a01ec:	f000 fdde 	bl	80a0dac <_Z16_fetch_usbserialv>
 80a01f0:	4914      	ldr	r1, [pc, #80]	; (80a0244 <loop+0x168>)
 80a01f2:	f000 fbd4 	bl	80a099e <_ZN5Print7printlnEPKc>
      Serial.println("r ROSSO, b BLU, g VERDE, o SPEGNI");
 80a01f6:	f000 fdd9 	bl	80a0dac <_Z16_fetch_usbserialv>
 80a01fa:	4913      	ldr	r1, [pc, #76]	; (80a0248 <loop+0x16c>)
 80a01fc:	f000 fbcf 	bl	80a099e <_ZN5Print7printlnEPKc>

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
 80a0200:	a80e      	add	r0, sp, #56	; 0x38
 80a0202:	f001 f8af 	bl	80a1364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80a0206:	a808      	add	r0, sp, #32
 80a0208:	f001 f8ac 	bl	80a1364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80a020c:	a802      	add	r0, sp, #8
 80a020e:	f001 f8a9 	bl	80a1364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
    g=0;
    b=0;
    leds.setColorRGB(0, r, g, b);
  } */
  
 80a0212:	b015      	add	sp, #84	; 0x54
 80a0214:	bd30      	pop	{r4, r5, pc}
 80a0216:	bf00      	nop
 80a0218:	200003a8 	.word	0x200003a8
 80a021c:	080a20a9 	.word	0x080a20a9
 80a0220:	2000037c 	.word	0x2000037c
 80a0224:	080a2182 	.word	0x080a2182
 80a0228:	20000390 	.word	0x20000390
 80a022c:	200003a4 	.word	0x200003a4
 80a0230:	200003c0 	.word	0x200003c0
 80a0234:	080a24ce 	.word	0x080a24ce
 80a0238:	20000374 	.word	0x20000374
 80a023c:	080a20aa 	.word	0x080a20aa
 80a0240:	080a21c6 	.word	0x080a21c6
 80a0244:	080a20ac 	.word	0x080a20ac
 80a0248:	080a20ca 	.word	0x080a20ca

080a024c <_GLOBAL__sub_I_leds>:
 80a024c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#include <Grove_ChainableLED.h>
 
#define NUM_LEDS  1

ChainableLED leds(D2, D3, NUM_LEDS);
 80a024e:	4d1e      	ldr	r5, [pc, #120]	; (80a02c8 <_GLOBAL__sub_I_leds+0x7c>)
 80a0250:	4c1e      	ldr	r4, [pc, #120]	; (80a02cc <_GLOBAL__sub_I_leds+0x80>)
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0252:	f000 f91f 	bl	80a0494 <HAL_Pin_Map>
 * POT BLU = A0
 * POT ROSSO = A1
 * POT VERDE = A5
 */

String comando, vocale;
 80a0256:	4e1e      	ldr	r6, [pc, #120]	; (80a02d0 <_GLOBAL__sub_I_leds+0x84>)
#include <Grove_ChainableLED.h>
 
#define NUM_LEDS  1

ChainableLED leds(D2, D3, NUM_LEDS);
 80a0258:	2301      	movs	r3, #1
 * POT BLU = A0
 * POT ROSSO = A1
 * POT VERDE = A5
 */

String comando, vocale;
 80a025a:	4f1e      	ldr	r7, [pc, #120]	; (80a02d4 <_GLOBAL__sub_I_leds+0x88>)
#include <Grove_ChainableLED.h>
 
#define NUM_LEDS  1

ChainableLED leds(D2, D3, NUM_LEDS);
 80a025c:	2203      	movs	r2, #3
 80a025e:	2102      	movs	r1, #2
 80a0260:	4628      	mov	r0, r5
 80a0262:	f000 f845 	bl	80a02f0 <_ZN12ChainableLEDC1Ehhh>
 80a0266:	4622      	mov	r2, r4
 80a0268:	491b      	ldr	r1, [pc, #108]	; (80a02d8 <_GLOBAL__sub_I_leds+0x8c>)
 80a026a:	4628      	mov	r0, r5
 80a026c:	f001 f82c 	bl	80a12c8 <__aeabi_atexit>
 * POT BLU = A0
 * POT ROSSO = A1
 * POT VERDE = A5
 */

String comando, vocale;
 80a0270:	4d1a      	ldr	r5, [pc, #104]	; (80a02dc <_GLOBAL__sub_I_leds+0x90>)
 80a0272:	4631      	mov	r1, r6
 80a0274:	4638      	mov	r0, r7
 80a0276:	f000 fb26 	bl	80a08c6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a027a:	4638      	mov	r0, r7
 80a027c:	4f18      	ldr	r7, [pc, #96]	; (80a02e0 <_GLOBAL__sub_I_leds+0x94>)
 80a027e:	4622      	mov	r2, r4
 80a0280:	4629      	mov	r1, r5
 80a0282:	f001 f821 	bl	80a12c8 <__aeabi_atexit>
 80a0286:	4631      	mov	r1, r6
 80a0288:	4638      	mov	r0, r7
 80a028a:	f000 fb1c 	bl	80a08c6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a028e:	4622      	mov	r2, r4
 80a0290:	4629      	mov	r1, r5
 80a0292:	4638      	mov	r0, r7
 80a0294:	f001 f818 	bl	80a12c8 <__aeabi_atexit>

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
      {
	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
	: allocator_type(__a), _M_p(__dat) { }
 80a0298:	4812      	ldr	r0, [pc, #72]	; (80a02e4 <_GLOBAL__sub_I_leds+0x98>)
std::string s;
int n;
int r, g ,b;
String intermediate;
 80a029a:	4f13      	ldr	r7, [pc, #76]	; (80a02e8 <_GLOBAL__sub_I_leds+0x9c>)
 80a029c:	f100 0308 	add.w	r3, r0, #8
 80a02a0:	6003      	str	r3, [r0, #0]
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }
 80a02a2:	2300      	movs	r3, #0
 * POT ROSSO = A1
 * POT VERDE = A5
 */

String comando, vocale;
std::string s;
 80a02a4:	4622      	mov	r2, r4
 80a02a6:	6043      	str	r3, [r0, #4]
 80a02a8:	7203      	strb	r3, [r0, #8]
 80a02aa:	4910      	ldr	r1, [pc, #64]	; (80a02ec <_GLOBAL__sub_I_leds+0xa0>)
 80a02ac:	f001 f80c 	bl	80a12c8 <__aeabi_atexit>
int n;
int r, g ,b;
String intermediate;
 80a02b0:	4631      	mov	r1, r6
 80a02b2:	4638      	mov	r0, r7
 80a02b4:	f000 fb07 	bl	80a08c6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02b8:	4622      	mov	r2, r4
 80a02ba:	4629      	mov	r1, r5
 80a02bc:	4638      	mov	r0, r7
    g=0;
    b=0;
    leds.setColorRGB(0, r, g, b);
  } */
  
 80a02be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

String comando, vocale;
std::string s;
int n;
int r, g ,b;
String intermediate;
 80a02c2:	f001 b801 	b.w	80a12c8 <__aeabi_atexit>
 80a02c6:	bf00      	nop
 80a02c8:	20000374 	.word	0x20000374
 80a02cc:	20000370 	.word	0x20000370
 80a02d0:	080a2112 	.word	0x080a2112
 80a02d4:	20000380 	.word	0x20000380
 80a02d8:	080a030b 	.word	0x080a030b
 80a02dc:	080a0839 	.word	0x080a0839
 80a02e0:	200003c4 	.word	0x200003c4
 80a02e4:	200003a8 	.word	0x200003a8
 80a02e8:	20000394 	.word	0x20000394
 80a02ec:	080a1471 	.word	0x080a1471

080a02f0 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
 80a02f0:	b510      	push	{r4, lr}
 80a02f2:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
 80a02f4:	7001      	strb	r1, [r0, #0]
 80a02f6:	7042      	strb	r2, [r0, #1]
 80a02f8:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
 80a02fa:	2101      	movs	r1, #1
 80a02fc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80a0300:	f001 fd9e 	bl	80a1e40 <calloc>
 80a0304:	6060      	str	r0, [r4, #4]
}
 80a0306:	4620      	mov	r0, r4
 80a0308:	bd10      	pop	{r4, pc}

080a030a <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
 80a030a:	b510      	push	{r4, lr}
 80a030c:	4604      	mov	r4, r0
{
    free(_led_state);
 80a030e:	6840      	ldr	r0, [r0, #4]
 80a0310:	f000 fa46 	bl	80a07a0 <free>
}
 80a0314:	4620      	mov	r0, r4
 80a0316:	bd10      	pop	{r4, pc}

080a0318 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
 80a0318:	b510      	push	{r4, lr}
 80a031a:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
 80a031c:	2100      	movs	r1, #0
 80a031e:	7800      	ldrb	r0, [r0, #0]
 80a0320:	f000 ff5f 	bl	80a11e2 <digitalWrite>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0324:	2014      	movs	r0, #20
 80a0326:	f000 f8ed 	bl	80a0504 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
 80a032a:	7820      	ldrb	r0, [r4, #0]
 80a032c:	2101      	movs	r1, #1
 80a032e:	f000 ff58 	bl	80a11e2 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
 80a0332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0336:	2014      	movs	r0, #20
 80a0338:	f000 b8e4 	b.w	80a0504 <HAL_Delay_Microseconds>

080a033c <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
 80a033c:	b570      	push	{r4, r5, r6, lr}
 80a033e:	4606      	mov	r6, r0
 80a0340:	460d      	mov	r5, r1
 80a0342:	2408      	movs	r4, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
 80a0344:	f015 0f80 	tst.w	r5, #128	; 0x80
            digitalWrite(_data_pin, HIGH);
 80a0348:	bf14      	ite	ne
 80a034a:	2101      	movne	r1, #1
        else
            digitalWrite(_data_pin, LOW);
 80a034c:	2100      	moveq	r1, #0
 80a034e:	7870      	ldrb	r0, [r6, #1]
 80a0350:	f000 ff47 	bl	80a11e2 <digitalWrite>
 80a0354:	3c01      	subs	r4, #1
        clk();
 80a0356:	4630      	mov	r0, r6
 80a0358:	f7ff ffde 	bl	80a0318 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
 80a035c:	006d      	lsls	r5, r5, #1
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
 80a035e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
        else
            digitalWrite(_data_pin, LOW);
        clk();

        // Advance to the next bit to send
        b <<= 1;
 80a0362:	b2ed      	uxtb	r5, r5
}

void ChainableLED::sendByte(byte b)
{
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
 80a0364:	d1ee      	bne.n	80a0344 <_ZN12ChainableLED8sendByteEh+0x8>
        clk();

        // Advance to the next bit to send
        b <<= 1;
    }
}
 80a0366:	bd70      	pop	{r4, r5, r6, pc}

080a0368 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
 80a0368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a036a:	4616      	mov	r6, r2
 80a036c:	460d      	mov	r5, r1
 80a036e:	4604      	mov	r4, r0
 80a0370:	461f      	mov	r7, r3
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
 80a0372:	f013 0f80 	tst.w	r3, #128	; 0x80
 80a0376:	bf14      	ite	ne
 80a0378:	21c0      	movne	r1, #192	; 0xc0
 80a037a:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
 80a037c:	065a      	lsls	r2, r3, #25
 80a037e:	bf58      	it	pl
 80a0380:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
 80a0384:	0633      	lsls	r3, r6, #24
 80a0386:	bf58      	it	pl
 80a0388:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
 80a038c:	0670      	lsls	r0, r6, #25
 80a038e:	bf58      	it	pl
 80a0390:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
 80a0394:	062a      	lsls	r2, r5, #24
 80a0396:	bf58      	it	pl
 80a0398:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
 80a039c:	066b      	lsls	r3, r5, #25
 80a039e:	bf58      	it	pl
 80a03a0:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
 80a03a4:	4620      	mov	r0, r4
 80a03a6:	f7ff ffc9 	bl	80a033c <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
 80a03aa:	4639      	mov	r1, r7
 80a03ac:	4620      	mov	r0, r4
 80a03ae:	f7ff ffc5 	bl	80a033c <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
 80a03b2:	4631      	mov	r1, r6
 80a03b4:	4620      	mov	r0, r4
 80a03b6:	f7ff ffc1 	bl	80a033c <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
 80a03ba:	4629      	mov	r1, r5
 80a03bc:	4620      	mov	r0, r4
}
 80a03be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    sendByte(prefix);

    // Now must send the 3 colors
    sendByte(blue);
    sendByte(green);
    sendByte(red);
 80a03c2:	f7ff bfbb 	b.w	80a033c <_ZN12ChainableLED8sendByteEh>

080a03c6 <_ZN12ChainableLED11setColorRGBEhhhh>:
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
 80a03c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a03ca:	4604      	mov	r4, r0
 80a03cc:	460e      	mov	r6, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
 80a03ce:	2100      	movs	r1, #0
    sendByte(green);
    sendByte(red);
}

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
 80a03d0:	4690      	mov	r8, r2
 80a03d2:	4699      	mov	r9, r3
 80a03d4:	f89d a020 	ldrb.w	sl, [sp, #32]
    // Send data frame prefix (32x "0")
    sendByte(0x00);
 80a03d8:	f7ff ffb0 	bl	80a033c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a03dc:	2100      	movs	r1, #0
 80a03de:	4620      	mov	r0, r4
 80a03e0:	f7ff ffac 	bl	80a033c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a03e4:	2100      	movs	r1, #0
 80a03e6:	4620      	mov	r0, r4
 80a03e8:	f7ff ffa8 	bl	80a033c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a03ec:	2100      	movs	r1, #0
 80a03ee:	4620      	mov	r0, r4
 80a03f0:	f7ff ffa4 	bl	80a033c <_ZN12ChainableLED8sendByteEh>
 80a03f4:	2500      	movs	r5, #0
    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
 80a03f6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
 80a03fa:	78a2      	ldrb	r2, [r4, #2]
 80a03fc:	b2eb      	uxtb	r3, r5
 80a03fe:	429a      	cmp	r2, r3
 80a0400:	d918      	bls.n	80a0434 <_ZN12ChainableLED11setColorRGBEhhhh+0x6e>
    {
        if (i == led)
 80a0402:	42b3      	cmp	r3, r6
 80a0404:	d10a      	bne.n	80a041c <_ZN12ChainableLED11setColorRGBEhhhh+0x56>
        {
            _led_state[i*3 + _CL_RED] = red;
 80a0406:	6862      	ldr	r2, [r4, #4]
 80a0408:	f802 8007 	strb.w	r8, [r2, r7]
            _led_state[i*3 + _CL_GREEN] = green;
 80a040c:	6862      	ldr	r2, [r4, #4]
 80a040e:	443a      	add	r2, r7
 80a0410:	f882 9001 	strb.w	r9, [r2, #1]
            _led_state[i*3 + _CL_BLUE] = blue;
 80a0414:	6862      	ldr	r2, [r4, #4]
 80a0416:	443a      	add	r2, r7
 80a0418:	f882 a002 	strb.w	sl, [r2, #2]
        }

        sendColor(_led_state[i*3 + _CL_RED],
 80a041c:	6860      	ldr	r0, [r4, #4]
 80a041e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80a0422:	1842      	adds	r2, r0, r1
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
 80a0424:	7893      	ldrb	r3, [r2, #2]
 80a0426:	5c41      	ldrb	r1, [r0, r1]
 80a0428:	7852      	ldrb	r2, [r2, #1]
 80a042a:	4620      	mov	r0, r4
 80a042c:	f7ff ff9c 	bl	80a0368 <_ZN12ChainableLED9sendColorEhhh>
 80a0430:	3501      	adds	r5, #1
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
 80a0432:	e7e2      	b.n	80a03fa <_ZN12ChainableLED11setColorRGBEhhhh+0x34>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
 80a0434:	4620      	mov	r0, r4
 80a0436:	2100      	movs	r1, #0
 80a0438:	f7ff ff80 	bl	80a033c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a043c:	4620      	mov	r0, r4
 80a043e:	2100      	movs	r1, #0
 80a0440:	f7ff ff7c 	bl	80a033c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a0444:	4620      	mov	r0, r4
 80a0446:	2100      	movs	r1, #0
 80a0448:	f7ff ff78 	bl	80a033c <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
 80a044c:	4620      	mov	r0, r4
}
 80a044e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    // Terminate data frame (32x "0")
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
    sendByte(0x00);
 80a0452:	2100      	movs	r1, #0
 80a0454:	f7ff bf72 	b.w	80a033c <_ZN12ChainableLED8sendByteEh>

080a0458 <_ZN12ChainableLED4initEv>:
}

// --------------------------------------------------------------------------------------

void ChainableLED::init()
{
 80a0458:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a045a:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
 80a045c:	2101      	movs	r1, #1
 80a045e:	7800      	ldrb	r0, [r0, #0]
 80a0460:	f000 feae 	bl	80a11c0 <pinMode>
    pinMode(_data_pin, OUTPUT);
 80a0464:	2500      	movs	r5, #0
 80a0466:	2101      	movs	r1, #1
 80a0468:	7860      	ldrb	r0, [r4, #1]
 80a046a:	f000 fea9 	bl	80a11c0 <pinMode>

    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
 80a046e:	462e      	mov	r6, r5
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
 80a0470:	78a3      	ldrb	r3, [r4, #2]
 80a0472:	b2e9      	uxtb	r1, r5
 80a0474:	428b      	cmp	r3, r1
 80a0476:	f105 0501 	add.w	r5, r5, #1
 80a047a:	d906      	bls.n	80a048a <_ZN12ChainableLED4initEv+0x32>
        setColorRGB(i, 0, 0, 0);
 80a047c:	2300      	movs	r3, #0
 80a047e:	9600      	str	r6, [sp, #0]
 80a0480:	461a      	mov	r2, r3
 80a0482:	4620      	mov	r0, r4
 80a0484:	f7ff ff9f 	bl	80a03c6 <_ZN12ChainableLED11setColorRGBEhhhh>
void ChainableLED::init()
{
    pinMode(_clk_pin, OUTPUT);
    pinMode(_data_pin, OUTPUT);

    for (byte i=0; i<_num_leds; i++)
 80a0488:	e7f2      	b.n	80a0470 <_ZN12ChainableLED4initEv+0x18>
        setColorRGB(i, 0, 0, 0);
}
 80a048a:	b002      	add	sp, #8
 80a048c:	bd70      	pop	{r4, r5, r6, pc}

080a048e <_GLOBAL__sub_I__ZN12ChainableLEDC2Ehhh>:
 80a048e:	f000 b801 	b.w	80a0494 <HAL_Pin_Map>
	...

080a0494 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a0494:	b508      	push	{r3, lr}
 80a0496:	4b02      	ldr	r3, [pc, #8]	; (80a04a0 <HAL_Pin_Map+0xc>)
 80a0498:	681b      	ldr	r3, [r3, #0]
 80a049a:	681b      	ldr	r3, [r3, #0]
 80a049c:	9301      	str	r3, [sp, #4]
 80a049e:	bd08      	pop	{r3, pc}
 80a04a0:	080601b0 	.word	0x080601b0

080a04a4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a04a4:	b508      	push	{r3, lr}
 80a04a6:	4b02      	ldr	r3, [pc, #8]	; (80a04b0 <HAL_Pin_Mode+0xc>)
 80a04a8:	681b      	ldr	r3, [r3, #0]
 80a04aa:	689b      	ldr	r3, [r3, #8]
 80a04ac:	9301      	str	r3, [sp, #4]
 80a04ae:	bd08      	pop	{r3, pc}
 80a04b0:	080601b0 	.word	0x080601b0

080a04b4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a04b4:	b508      	push	{r3, lr}
 80a04b6:	4b02      	ldr	r3, [pc, #8]	; (80a04c0 <HAL_Get_Pin_Mode+0xc>)
 80a04b8:	681b      	ldr	r3, [r3, #0]
 80a04ba:	68db      	ldr	r3, [r3, #12]
 80a04bc:	9301      	str	r3, [sp, #4]
 80a04be:	bd08      	pop	{r3, pc}
 80a04c0:	080601b0 	.word	0x080601b0

080a04c4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a04c4:	b508      	push	{r3, lr}
 80a04c6:	4b02      	ldr	r3, [pc, #8]	; (80a04d0 <HAL_GPIO_Write+0xc>)
 80a04c8:	681b      	ldr	r3, [r3, #0]
 80a04ca:	691b      	ldr	r3, [r3, #16]
 80a04cc:	9301      	str	r3, [sp, #4]
 80a04ce:	bd08      	pop	{r3, pc}
 80a04d0:	080601b0 	.word	0x080601b0

080a04d4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a04d4:	b508      	push	{r3, lr}
 80a04d6:	4b02      	ldr	r3, [pc, #8]	; (80a04e0 <HAL_SPI_Init+0xc>)
 80a04d8:	681b      	ldr	r3, [r3, #0]
 80a04da:	69db      	ldr	r3, [r3, #28]
 80a04dc:	9301      	str	r3, [sp, #4]
 80a04de:	bd08      	pop	{r3, pc}
 80a04e0:	080601b4 	.word	0x080601b4

080a04e4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a04e4:	b508      	push	{r3, lr}
 80a04e6:	4b02      	ldr	r3, [pc, #8]	; (80a04f0 <HAL_SPI_Is_Enabled+0xc>)
 80a04e8:	681b      	ldr	r3, [r3, #0]
 80a04ea:	6a1b      	ldr	r3, [r3, #32]
 80a04ec:	9301      	str	r3, [sp, #4]
 80a04ee:	bd08      	pop	{r3, pc}
 80a04f0:	080601b4 	.word	0x080601b4

080a04f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a04f4:	b508      	push	{r3, lr}
 80a04f6:	4b02      	ldr	r3, [pc, #8]	; (80a0500 <HAL_RNG_GetRandomNumber+0xc>)
 80a04f8:	681b      	ldr	r3, [r3, #0]
 80a04fa:	685b      	ldr	r3, [r3, #4]
 80a04fc:	9301      	str	r3, [sp, #4]
 80a04fe:	bd08      	pop	{r3, pc}
 80a0500:	0806019c 	.word	0x0806019c

080a0504 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0504:	b508      	push	{r3, lr}
 80a0506:	4b02      	ldr	r3, [pc, #8]	; (80a0510 <HAL_Delay_Microseconds+0xc>)
 80a0508:	681b      	ldr	r3, [r3, #0]
 80a050a:	68db      	ldr	r3, [r3, #12]
 80a050c:	9301      	str	r3, [sp, #4]
 80a050e:	bd08      	pop	{r3, pc}
 80a0510:	0806019c 	.word	0x0806019c

080a0514 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0514:	b508      	push	{r3, lr}
 80a0516:	4b02      	ldr	r3, [pc, #8]	; (80a0520 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0518:	681b      	ldr	r3, [r3, #0]
 80a051a:	695b      	ldr	r3, [r3, #20]
 80a051c:	9301      	str	r3, [sp, #4]
 80a051e:	bd08      	pop	{r3, pc}
 80a0520:	0806019c 	.word	0x0806019c

080a0524 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a0524:	b508      	push	{r3, lr}
 80a0526:	4b02      	ldr	r3, [pc, #8]	; (80a0530 <os_mutex_create+0xc>)
 80a0528:	681b      	ldr	r3, [r3, #0]
 80a052a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a052c:	9301      	str	r3, [sp, #4]
 80a052e:	bd08      	pop	{r3, pc}
 80a0530:	080601d0 	.word	0x080601d0

080a0534 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0534:	b508      	push	{r3, lr}
 80a0536:	4b02      	ldr	r3, [pc, #8]	; (80a0540 <HAL_USART_Init+0xc>)
 80a0538:	681b      	ldr	r3, [r3, #0]
 80a053a:	699b      	ldr	r3, [r3, #24]
 80a053c:	9301      	str	r3, [sp, #4]
 80a053e:	bd08      	pop	{r3, pc}
 80a0540:	080601c4 	.word	0x080601c4

080a0544 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0544:	b508      	push	{r3, lr}
 80a0546:	4b02      	ldr	r3, [pc, #8]	; (80a0550 <HAL_USART_Write_Data+0xc>)
 80a0548:	681b      	ldr	r3, [r3, #0]
 80a054a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a054c:	9301      	str	r3, [sp, #4]
 80a054e:	bd08      	pop	{r3, pc}
 80a0550:	080601c4 	.word	0x080601c4

080a0554 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0554:	b508      	push	{r3, lr}
 80a0556:	4b02      	ldr	r3, [pc, #8]	; (80a0560 <HAL_USART_Available_Data+0xc>)
 80a0558:	681b      	ldr	r3, [r3, #0]
 80a055a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a055c:	9301      	str	r3, [sp, #4]
 80a055e:	bd08      	pop	{r3, pc}
 80a0560:	080601c4 	.word	0x080601c4

080a0564 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0564:	b508      	push	{r3, lr}
 80a0566:	4b02      	ldr	r3, [pc, #8]	; (80a0570 <HAL_USART_Read_Data+0xc>)
 80a0568:	681b      	ldr	r3, [r3, #0]
 80a056a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a056c:	9301      	str	r3, [sp, #4]
 80a056e:	bd08      	pop	{r3, pc}
 80a0570:	080601c4 	.word	0x080601c4

080a0574 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0574:	b508      	push	{r3, lr}
 80a0576:	4b02      	ldr	r3, [pc, #8]	; (80a0580 <HAL_USART_Peek_Data+0xc>)
 80a0578:	681b      	ldr	r3, [r3, #0]
 80a057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a057c:	9301      	str	r3, [sp, #4]
 80a057e:	bd08      	pop	{r3, pc}
 80a0580:	080601c4 	.word	0x080601c4

080a0584 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0584:	b508      	push	{r3, lr}
 80a0586:	4b02      	ldr	r3, [pc, #8]	; (80a0590 <HAL_USART_Flush_Data+0xc>)
 80a0588:	681b      	ldr	r3, [r3, #0]
 80a058a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a058c:	9301      	str	r3, [sp, #4]
 80a058e:	bd08      	pop	{r3, pc}
 80a0590:	080601c4 	.word	0x080601c4

080a0594 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0594:	b508      	push	{r3, lr}
 80a0596:	4b02      	ldr	r3, [pc, #8]	; (80a05a0 <HAL_USART_Is_Enabled+0xc>)
 80a0598:	681b      	ldr	r3, [r3, #0]
 80a059a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a059c:	9301      	str	r3, [sp, #4]
 80a059e:	bd08      	pop	{r3, pc}
 80a05a0:	080601c4 	.word	0x080601c4

080a05a4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a05a4:	b508      	push	{r3, lr}
 80a05a6:	4b02      	ldr	r3, [pc, #8]	; (80a05b0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a05a8:	681b      	ldr	r3, [r3, #0]
 80a05aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a05ac:	9301      	str	r3, [sp, #4]
 80a05ae:	bd08      	pop	{r3, pc}
 80a05b0:	080601c4 	.word	0x080601c4

080a05b4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a05b4:	b508      	push	{r3, lr}
 80a05b6:	4b02      	ldr	r3, [pc, #8]	; (80a05c0 <HAL_I2C_Write_Data+0xc>)
 80a05b8:	681b      	ldr	r3, [r3, #0]
 80a05ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a05bc:	9301      	str	r3, [sp, #4]
 80a05be:	bd08      	pop	{r3, pc}
 80a05c0:	080601ac 	.word	0x080601ac

080a05c4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a05c4:	b508      	push	{r3, lr}
 80a05c6:	4b02      	ldr	r3, [pc, #8]	; (80a05d0 <HAL_I2C_Available_Data+0xc>)
 80a05c8:	681b      	ldr	r3, [r3, #0]
 80a05ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a05cc:	9301      	str	r3, [sp, #4]
 80a05ce:	bd08      	pop	{r3, pc}
 80a05d0:	080601ac 	.word	0x080601ac

080a05d4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a05d4:	b508      	push	{r3, lr}
 80a05d6:	4b02      	ldr	r3, [pc, #8]	; (80a05e0 <HAL_I2C_Read_Data+0xc>)
 80a05d8:	681b      	ldr	r3, [r3, #0]
 80a05da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a05dc:	9301      	str	r3, [sp, #4]
 80a05de:	bd08      	pop	{r3, pc}
 80a05e0:	080601ac 	.word	0x080601ac

080a05e4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a05e4:	b508      	push	{r3, lr}
 80a05e6:	4b02      	ldr	r3, [pc, #8]	; (80a05f0 <HAL_I2C_Peek_Data+0xc>)
 80a05e8:	681b      	ldr	r3, [r3, #0]
 80a05ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a05ec:	9301      	str	r3, [sp, #4]
 80a05ee:	bd08      	pop	{r3, pc}
 80a05f0:	080601ac 	.word	0x080601ac

080a05f4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a05f4:	b508      	push	{r3, lr}
 80a05f6:	4b02      	ldr	r3, [pc, #8]	; (80a0600 <HAL_I2C_Flush_Data+0xc>)
 80a05f8:	681b      	ldr	r3, [r3, #0]
 80a05fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a05fc:	9301      	str	r3, [sp, #4]
 80a05fe:	bd08      	pop	{r3, pc}
 80a0600:	080601ac 	.word	0x080601ac

080a0604 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0604:	b508      	push	{r3, lr}
 80a0606:	4b02      	ldr	r3, [pc, #8]	; (80a0610 <HAL_I2C_Is_Enabled+0xc>)
 80a0608:	681b      	ldr	r3, [r3, #0]
 80a060a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a060c:	9301      	str	r3, [sp, #4]
 80a060e:	bd08      	pop	{r3, pc}
 80a0610:	080601ac 	.word	0x080601ac

080a0614 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a0614:	b508      	push	{r3, lr}
 80a0616:	4b03      	ldr	r3, [pc, #12]	; (80a0624 <HAL_I2C_Init+0x10>)
 80a0618:	681b      	ldr	r3, [r3, #0]
 80a061a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a061e:	9301      	str	r3, [sp, #4]
 80a0620:	bd08      	pop	{r3, pc}
 80a0622:	0000      	.short	0x0000
 80a0624:	080601ac 	.word	0x080601ac

080a0628 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0628:	b508      	push	{r3, lr}
 80a062a:	4b02      	ldr	r3, [pc, #8]	; (80a0634 <HAL_USB_USART_Init+0xc>)
 80a062c:	681b      	ldr	r3, [r3, #0]
 80a062e:	681b      	ldr	r3, [r3, #0]
 80a0630:	9301      	str	r3, [sp, #4]
 80a0632:	bd08      	pop	{r3, pc}
 80a0634:	080601d8 	.word	0x080601d8

080a0638 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0638:	b508      	push	{r3, lr}
 80a063a:	4b02      	ldr	r3, [pc, #8]	; (80a0644 <HAL_USB_USART_Begin+0xc>)
 80a063c:	681b      	ldr	r3, [r3, #0]
 80a063e:	685b      	ldr	r3, [r3, #4]
 80a0640:	9301      	str	r3, [sp, #4]
 80a0642:	bd08      	pop	{r3, pc}
 80a0644:	080601d8 	.word	0x080601d8

080a0648 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0648:	b508      	push	{r3, lr}
 80a064a:	4b02      	ldr	r3, [pc, #8]	; (80a0654 <HAL_USB_USART_Available_Data+0xc>)
 80a064c:	681b      	ldr	r3, [r3, #0]
 80a064e:	691b      	ldr	r3, [r3, #16]
 80a0650:	9301      	str	r3, [sp, #4]
 80a0652:	bd08      	pop	{r3, pc}
 80a0654:	080601d8 	.word	0x080601d8

080a0658 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0658:	b508      	push	{r3, lr}
 80a065a:	4b02      	ldr	r3, [pc, #8]	; (80a0664 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a065c:	681b      	ldr	r3, [r3, #0]
 80a065e:	695b      	ldr	r3, [r3, #20]
 80a0660:	9301      	str	r3, [sp, #4]
 80a0662:	bd08      	pop	{r3, pc}
 80a0664:	080601d8 	.word	0x080601d8

080a0668 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0668:	b508      	push	{r3, lr}
 80a066a:	4b02      	ldr	r3, [pc, #8]	; (80a0674 <HAL_USB_USART_Receive_Data+0xc>)
 80a066c:	681b      	ldr	r3, [r3, #0]
 80a066e:	699b      	ldr	r3, [r3, #24]
 80a0670:	9301      	str	r3, [sp, #4]
 80a0672:	bd08      	pop	{r3, pc}
 80a0674:	080601d8 	.word	0x080601d8

080a0678 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0678:	b508      	push	{r3, lr}
 80a067a:	4b02      	ldr	r3, [pc, #8]	; (80a0684 <HAL_USB_USART_Send_Data+0xc>)
 80a067c:	681b      	ldr	r3, [r3, #0]
 80a067e:	69db      	ldr	r3, [r3, #28]
 80a0680:	9301      	str	r3, [sp, #4]
 80a0682:	bd08      	pop	{r3, pc}
 80a0684:	080601d8 	.word	0x080601d8

080a0688 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0688:	b508      	push	{r3, lr}
 80a068a:	4b02      	ldr	r3, [pc, #8]	; (80a0694 <HAL_USB_USART_Flush_Data+0xc>)
 80a068c:	681b      	ldr	r3, [r3, #0]
 80a068e:	6a1b      	ldr	r3, [r3, #32]
 80a0690:	9301      	str	r3, [sp, #4]
 80a0692:	bd08      	pop	{r3, pc}
 80a0694:	080601d8 	.word	0x080601d8

080a0698 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0698:	b508      	push	{r3, lr}
 80a069a:	4b02      	ldr	r3, [pc, #8]	; (80a06a4 <inet_gethostbyname+0xc>)
 80a069c:	681b      	ldr	r3, [r3, #0]
 80a069e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a06a0:	9301      	str	r3, [sp, #4]
 80a06a2:	bd08      	pop	{r3, pc}
 80a06a4:	080601c0 	.word	0x080601c0

080a06a8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a06a8:	b508      	push	{r3, lr}
 80a06aa:	4b02      	ldr	r3, [pc, #8]	; (80a06b4 <set_system_mode+0xc>)
 80a06ac:	681b      	ldr	r3, [r3, #0]
 80a06ae:	685b      	ldr	r3, [r3, #4]
 80a06b0:	9301      	str	r3, [sp, #4]
 80a06b2:	bd08      	pop	{r3, pc}
 80a06b4:	080601a4 	.word	0x080601a4

080a06b8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a06b8:	b508      	push	{r3, lr}
 80a06ba:	4b03      	ldr	r3, [pc, #12]	; (80a06c8 <system_ctrl_set_app_request_handler+0x10>)
 80a06bc:	681b      	ldr	r3, [r3, #0]
 80a06be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a06c2:	9301      	str	r3, [sp, #4]
 80a06c4:	bd08      	pop	{r3, pc}
 80a06c6:	0000      	.short	0x0000
 80a06c8:	080601a4 	.word	0x080601a4

080a06cc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a06cc:	b508      	push	{r3, lr}
 80a06ce:	4b03      	ldr	r3, [pc, #12]	; (80a06dc <system_ctrl_set_result+0x10>)
 80a06d0:	681b      	ldr	r3, [r3, #0]
 80a06d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a06d6:	9301      	str	r3, [sp, #4]
 80a06d8:	bd08      	pop	{r3, pc}
 80a06da:	0000      	.short	0x0000
 80a06dc:	080601a4 	.word	0x080601a4

080a06e0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a06e0:	b508      	push	{r3, lr}
 80a06e2:	4b02      	ldr	r3, [pc, #8]	; (80a06ec <network_connect+0xc>)
 80a06e4:	681b      	ldr	r3, [r3, #0]
 80a06e6:	685b      	ldr	r3, [r3, #4]
 80a06e8:	9301      	str	r3, [sp, #4]
 80a06ea:	bd08      	pop	{r3, pc}
 80a06ec:	080601c8 	.word	0x080601c8

080a06f0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a06f0:	b508      	push	{r3, lr}
 80a06f2:	4b02      	ldr	r3, [pc, #8]	; (80a06fc <network_connecting+0xc>)
 80a06f4:	681b      	ldr	r3, [r3, #0]
 80a06f6:	689b      	ldr	r3, [r3, #8]
 80a06f8:	9301      	str	r3, [sp, #4]
 80a06fa:	bd08      	pop	{r3, pc}
 80a06fc:	080601c8 	.word	0x080601c8

080a0700 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0700:	b508      	push	{r3, lr}
 80a0702:	4b02      	ldr	r3, [pc, #8]	; (80a070c <network_disconnect+0xc>)
 80a0704:	681b      	ldr	r3, [r3, #0]
 80a0706:	68db      	ldr	r3, [r3, #12]
 80a0708:	9301      	str	r3, [sp, #4]
 80a070a:	bd08      	pop	{r3, pc}
 80a070c:	080601c8 	.word	0x080601c8

080a0710 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0710:	b508      	push	{r3, lr}
 80a0712:	4b02      	ldr	r3, [pc, #8]	; (80a071c <network_ready+0xc>)
 80a0714:	681b      	ldr	r3, [r3, #0]
 80a0716:	691b      	ldr	r3, [r3, #16]
 80a0718:	9301      	str	r3, [sp, #4]
 80a071a:	bd08      	pop	{r3, pc}
 80a071c:	080601c8 	.word	0x080601c8

080a0720 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0720:	b508      	push	{r3, lr}
 80a0722:	4b02      	ldr	r3, [pc, #8]	; (80a072c <network_on+0xc>)
 80a0724:	681b      	ldr	r3, [r3, #0]
 80a0726:	695b      	ldr	r3, [r3, #20]
 80a0728:	9301      	str	r3, [sp, #4]
 80a072a:	bd08      	pop	{r3, pc}
 80a072c:	080601c8 	.word	0x080601c8

080a0730 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0730:	b508      	push	{r3, lr}
 80a0732:	4b02      	ldr	r3, [pc, #8]	; (80a073c <network_off+0xc>)
 80a0734:	681b      	ldr	r3, [r3, #0]
 80a0736:	699b      	ldr	r3, [r3, #24]
 80a0738:	9301      	str	r3, [sp, #4]
 80a073a:	bd08      	pop	{r3, pc}
 80a073c:	080601c8 	.word	0x080601c8

080a0740 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0740:	b508      	push	{r3, lr}
 80a0742:	4b02      	ldr	r3, [pc, #8]	; (80a074c <network_listen+0xc>)
 80a0744:	681b      	ldr	r3, [r3, #0]
 80a0746:	69db      	ldr	r3, [r3, #28]
 80a0748:	9301      	str	r3, [sp, #4]
 80a074a:	bd08      	pop	{r3, pc}
 80a074c:	080601c8 	.word	0x080601c8

080a0750 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0750:	b508      	push	{r3, lr}
 80a0752:	4b02      	ldr	r3, [pc, #8]	; (80a075c <network_listening+0xc>)
 80a0754:	681b      	ldr	r3, [r3, #0]
 80a0756:	6a1b      	ldr	r3, [r3, #32]
 80a0758:	9301      	str	r3, [sp, #4]
 80a075a:	bd08      	pop	{r3, pc}
 80a075c:	080601c8 	.word	0x080601c8

080a0760 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0760:	b508      	push	{r3, lr}
 80a0762:	4b02      	ldr	r3, [pc, #8]	; (80a076c <network_set_listen_timeout+0xc>)
 80a0764:	681b      	ldr	r3, [r3, #0]
 80a0766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0768:	9301      	str	r3, [sp, #4]
 80a076a:	bd08      	pop	{r3, pc}
 80a076c:	080601c8 	.word	0x080601c8

080a0770 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0770:	b508      	push	{r3, lr}
 80a0772:	4b02      	ldr	r3, [pc, #8]	; (80a077c <network_get_listen_timeout+0xc>)
 80a0774:	681b      	ldr	r3, [r3, #0]
 80a0776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0778:	9301      	str	r3, [sp, #4]
 80a077a:	bd08      	pop	{r3, pc}
 80a077c:	080601c8 	.word	0x080601c8

080a0780 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0780:	b508      	push	{r3, lr}
 80a0782:	4b02      	ldr	r3, [pc, #8]	; (80a078c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0784:	681b      	ldr	r3, [r3, #0]
 80a0786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0788:	9301      	str	r3, [sp, #4]
 80a078a:	bd08      	pop	{r3, pc}
 80a078c:	080601cc 	.word	0x080601cc

080a0790 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0790:	b508      	push	{r3, lr}
 80a0792:	4b02      	ldr	r3, [pc, #8]	; (80a079c <malloc+0xc>)
 80a0794:	681b      	ldr	r3, [r3, #0]
 80a0796:	681b      	ldr	r3, [r3, #0]
 80a0798:	9301      	str	r3, [sp, #4]
 80a079a:	bd08      	pop	{r3, pc}
 80a079c:	080601a0 	.word	0x080601a0

080a07a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a07a0:	b508      	push	{r3, lr}
 80a07a2:	4b02      	ldr	r3, [pc, #8]	; (80a07ac <free+0xc>)
 80a07a4:	681b      	ldr	r3, [r3, #0]
 80a07a6:	685b      	ldr	r3, [r3, #4]
 80a07a8:	9301      	str	r3, [sp, #4]
 80a07aa:	bd08      	pop	{r3, pc}
 80a07ac:	080601a0 	.word	0x080601a0

080a07b0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a07b0:	b508      	push	{r3, lr}
 80a07b2:	4b02      	ldr	r3, [pc, #8]	; (80a07bc <realloc+0xc>)
 80a07b4:	681b      	ldr	r3, [r3, #0]
 80a07b6:	689b      	ldr	r3, [r3, #8]
 80a07b8:	9301      	str	r3, [sp, #4]
 80a07ba:	bd08      	pop	{r3, pc}
 80a07bc:	080601a0 	.word	0x080601a0

080a07c0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a07c0:	b508      	push	{r3, lr}
 80a07c2:	4b02      	ldr	r3, [pc, #8]	; (80a07cc <abort+0xc>)
 80a07c4:	681b      	ldr	r3, [r3, #0]
 80a07c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a07c8:	9301      	str	r3, [sp, #4]
 80a07ca:	bd08      	pop	{r3, pc}
 80a07cc:	080601a0 	.word	0x080601a0

080a07d0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a07d0:	b508      	push	{r3, lr}
 80a07d2:	4b02      	ldr	r3, [pc, #8]	; (80a07dc <_malloc_r+0xc>)
 80a07d4:	681b      	ldr	r3, [r3, #0]
 80a07d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a07d8:	9301      	str	r3, [sp, #4]
 80a07da:	bd08      	pop	{r3, pc}
 80a07dc:	080601a0 	.word	0x080601a0

080a07e0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a07e0:	4770      	bx	lr

080a07e2 <_ZN8SPIClassD0Ev>:
 80a07e2:	b510      	push	{r4, lr}
 80a07e4:	4604      	mov	r4, r0
 80a07e6:	2110      	movs	r1, #16
 80a07e8:	f000 fd73 	bl	80a12d2 <_ZdlPvj>
 80a07ec:	4620      	mov	r0, r4
 80a07ee:	bd10      	pop	{r4, pc}

080a07f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a07f0:	b570      	push	{r4, r5, r6, lr}
 80a07f2:	4604      	mov	r4, r0
 80a07f4:	460e      	mov	r6, r1
 80a07f6:	4b07      	ldr	r3, [pc, #28]	; (80a0814 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a07f8:	2500      	movs	r5, #0
 80a07fa:	6003      	str	r3, [r0, #0]
 80a07fc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0800:	f7ff fe90 	bl	80a0524 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0804:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0806:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0808:	f7ff fe64 	bl	80a04d4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a080c:	60a5      	str	r5, [r4, #8]
}
 80a080e:	4620      	mov	r0, r4
 80a0810:	bd70      	pop	{r4, r5, r6, pc}
 80a0812:	bf00      	nop
 80a0814:	080a20f4 	.word	0x080a20f4

080a0818 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0818:	7900      	ldrb	r0, [r0, #4]
 80a081a:	f7ff be63 	b.w	80a04e4 <HAL_SPI_Is_Enabled>
	...

080a0820 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a0824:	4b03      	ldr	r3, [pc, #12]	; (80a0834 <_GLOBAL__sub_I_System+0x14>)
 80a0826:	2000      	movs	r0, #0
 80a0828:	7018      	strb	r0, [r3, #0]
 80a082a:	8058      	strh	r0, [r3, #2]
 80a082c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a082e:	f7ff bf3b 	b.w	80a06a8 <set_system_mode>
 80a0832:	bf00      	nop
 80a0834:	200003d4 	.word	0x200003d4

080a0838 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0838:	b510      	push	{r4, lr}
 80a083a:	4604      	mov	r4, r0
{
	free(buffer);
 80a083c:	6800      	ldr	r0, [r0, #0]
 80a083e:	f7ff ffaf 	bl	80a07a0 <free>
}
 80a0842:	4620      	mov	r0, r4
 80a0844:	bd10      	pop	{r4, pc}

080a0846 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0846:	b510      	push	{r4, lr}
 80a0848:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a084a:	6800      	ldr	r0, [r0, #0]
 80a084c:	b108      	cbz	r0, 80a0852 <_ZN6String10invalidateEv+0xc>
 80a084e:	f7ff ffa7 	bl	80a07a0 <free>
	buffer = NULL;
 80a0852:	2300      	movs	r3, #0
 80a0854:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0856:	60a3      	str	r3, [r4, #8]
 80a0858:	6063      	str	r3, [r4, #4]
 80a085a:	bd10      	pop	{r4, pc}

080a085c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a085c:	b538      	push	{r3, r4, r5, lr}
 80a085e:	4604      	mov	r4, r0
 80a0860:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a0862:	6800      	ldr	r0, [r0, #0]
 80a0864:	3101      	adds	r1, #1
 80a0866:	f7ff ffa3 	bl	80a07b0 <realloc>
	if (newbuffer) {
 80a086a:	b110      	cbz	r0, 80a0872 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a086c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a0870:	2001      	movs	r0, #1
	}
	return 0;
}
 80a0872:	bd38      	pop	{r3, r4, r5, pc}

080a0874 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0874:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0876:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0878:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a087a:	b113      	cbz	r3, 80a0882 <_ZN6String7reserveEj+0xe>
 80a087c:	6843      	ldr	r3, [r0, #4]
 80a087e:	428b      	cmp	r3, r1
 80a0880:	d207      	bcs.n	80a0892 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a0882:	4620      	mov	r0, r4
 80a0884:	f7ff ffea 	bl	80a085c <_ZN6String12changeBufferEj>
 80a0888:	b120      	cbz	r0, 80a0894 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a088a:	68a3      	ldr	r3, [r4, #8]
 80a088c:	b90b      	cbnz	r3, 80a0892 <_ZN6String7reserveEj+0x1e>
 80a088e:	6822      	ldr	r2, [r4, #0]
 80a0890:	7013      	strb	r3, [r2, #0]
 80a0892:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a0894:	bd10      	pop	{r4, pc}

080a0896 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a0896:	b570      	push	{r4, r5, r6, lr}
 80a0898:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a089a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a089c:	4604      	mov	r4, r0
 80a089e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a08a0:	f7ff ffe8 	bl	80a0874 <_ZN6String7reserveEj>
 80a08a4:	b918      	cbnz	r0, 80a08ae <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a08a6:	4620      	mov	r0, r4
 80a08a8:	f7ff ffcd 	bl	80a0846 <_ZN6String10invalidateEv>
		return *this;
 80a08ac:	e009      	b.n	80a08c2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a08ae:	462a      	mov	r2, r5
 80a08b0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a08b2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a08b4:	6820      	ldr	r0, [r4, #0]
 80a08b6:	f001 fae8 	bl	80a1e8a <memcpy>
	buffer[len] = 0;
 80a08ba:	6822      	ldr	r2, [r4, #0]
 80a08bc:	68a3      	ldr	r3, [r4, #8]
 80a08be:	2100      	movs	r1, #0
 80a08c0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a08c2:	4620      	mov	r0, r4
 80a08c4:	bd70      	pop	{r4, r5, r6, pc}

080a08c6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a08c6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a08c8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a08ca:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a08cc:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a08ce:	6043      	str	r3, [r0, #4]
	len = 0;
 80a08d0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a08d2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a08d4:	460d      	mov	r5, r1
 80a08d6:	b139      	cbz	r1, 80a08e8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a08d8:	4608      	mov	r0, r1
 80a08da:	f001 fb43 	bl	80a1f64 <strlen>
 80a08de:	4629      	mov	r1, r5
 80a08e0:	4602      	mov	r2, r0
 80a08e2:	4620      	mov	r0, r4
 80a08e4:	f7ff ffd7 	bl	80a0896 <_ZN6String4copyEPKcj>
}
 80a08e8:	4620      	mov	r0, r4
 80a08ea:	bd38      	pop	{r3, r4, r5, pc}

080a08ec <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a08ec:	b570      	push	{r4, r5, r6, lr}
 80a08ee:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a08f0:	460e      	mov	r6, r1
 80a08f2:	b909      	cbnz	r1, 80a08f8 <_ZN6String6concatEPKcj+0xc>
 80a08f4:	2000      	movs	r0, #0
 80a08f6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a08f8:	b16a      	cbz	r2, 80a0916 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a08fa:	6883      	ldr	r3, [r0, #8]
 80a08fc:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a08fe:	4629      	mov	r1, r5
 80a0900:	f7ff ffb8 	bl	80a0874 <_ZN6String7reserveEj>
 80a0904:	2800      	cmp	r0, #0
 80a0906:	d0f5      	beq.n	80a08f4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a0908:	6820      	ldr	r0, [r4, #0]
 80a090a:	68a3      	ldr	r3, [r4, #8]
 80a090c:	4631      	mov	r1, r6
 80a090e:	4418      	add	r0, r3
 80a0910:	f001 fb20 	bl	80a1f54 <strcpy>
	len = newlen;
 80a0914:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a0916:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a0918:	bd70      	pop	{r4, r5, r6, pc}

080a091a <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 80a091a:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a091c:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 80a091e:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 80a0922:	2201      	movs	r2, #1
 80a0924:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a0926:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a092a:	f7ff ffdf 	bl	80a08ec <_ZN6String6concatEPKcj>
}
 80a092e:	b003      	add	sp, #12
 80a0930:	f85d fb04 	ldr.w	pc, [sp], #4

080a0934 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0936:	4606      	mov	r6, r0
 80a0938:	460d      	mov	r5, r1
 80a093a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a093c:	2400      	movs	r4, #0
  while (size--) {
 80a093e:	42bd      	cmp	r5, r7
 80a0940:	d00c      	beq.n	80a095c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0942:	6833      	ldr	r3, [r6, #0]
 80a0944:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0948:	689b      	ldr	r3, [r3, #8]
 80a094a:	4630      	mov	r0, r6
 80a094c:	4798      	blx	r3
     if (chunk>=0)
 80a094e:	2800      	cmp	r0, #0
 80a0950:	db01      	blt.n	80a0956 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0952:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0954:	e7f3      	b.n	80a093e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0956:	2c00      	cmp	r4, #0
 80a0958:	bf08      	it	eq
 80a095a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a095c:	4620      	mov	r0, r4
 80a095e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0960 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0960:	b570      	push	{r4, r5, r6, lr}
 80a0962:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0964:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0966:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0968:	b149      	cbz	r1, 80a097e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a096a:	f001 fafb 	bl	80a1f64 <strlen>
 80a096e:	682b      	ldr	r3, [r5, #0]
 80a0970:	4602      	mov	r2, r0
 80a0972:	4621      	mov	r1, r4
 80a0974:	4628      	mov	r0, r5
    }
 80a0976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a097a:	68db      	ldr	r3, [r3, #12]
 80a097c:	4718      	bx	r3
    }
 80a097e:	bd70      	pop	{r4, r5, r6, pc}

080a0980 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0980:	6803      	ldr	r3, [r0, #0]
 80a0982:	689b      	ldr	r3, [r3, #8]
 80a0984:	4718      	bx	r3

080a0986 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0986:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0988:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a098a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a098c:	f7ff fff8 	bl	80a0980 <_ZN5Print5printEc>
  n += print('\n');
 80a0990:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0992:	4604      	mov	r4, r0
  n += print('\n');
 80a0994:	4628      	mov	r0, r5
 80a0996:	f7ff fff3 	bl	80a0980 <_ZN5Print5printEc>
  return n;
}
 80a099a:	4420      	add	r0, r4
 80a099c:	bd38      	pop	{r3, r4, r5, pc}

080a099e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a099e:	b538      	push	{r3, r4, r5, lr}
 80a09a0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a09a2:	f7ff ffdd 	bl	80a0960 <_ZN5Print5writeEPKc>
 80a09a6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a09a8:	4628      	mov	r0, r5
 80a09aa:	f7ff ffec 	bl	80a0986 <_ZN5Print7printlnEv>
  return n;
}
 80a09ae:	4420      	add	r0, r4
 80a09b0:	bd38      	pop	{r3, r4, r5, pc}

080a09b2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a09b2:	2a01      	cmp	r2, #1
 80a09b4:	bf98      	it	ls
 80a09b6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a09b8:	b530      	push	{r4, r5, lr}
 80a09ba:	460b      	mov	r3, r1
 80a09bc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a09be:	2100      	movs	r1, #0
 80a09c0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a09c4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a09c8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a09cc:	fb05 3312 	mls	r3, r5, r2, r3
 80a09d0:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a09d2:	2b09      	cmp	r3, #9
 80a09d4:	bf94      	ite	ls
 80a09d6:	3330      	addls	r3, #48	; 0x30
 80a09d8:	3337      	addhi	r3, #55	; 0x37
 80a09da:	b2db      	uxtb	r3, r3
 80a09dc:	4621      	mov	r1, r4
 80a09de:	f804 3901 	strb.w	r3, [r4], #-1
 80a09e2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a09e4:	2d00      	cmp	r5, #0
 80a09e6:	d1ef      	bne.n	80a09c8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a09e8:	f7ff ffba 	bl	80a0960 <_ZN5Print5writeEPKc>
}
 80a09ec:	b00b      	add	sp, #44	; 0x2c
 80a09ee:	bd30      	pop	{r4, r5, pc}

080a09f0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a09f0:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a09f2:	b922      	cbnz	r2, 80a09fe <_ZN5Print5printEmi+0xe>
 80a09f4:	6803      	ldr	r3, [r0, #0]
 80a09f6:	b2c9      	uxtb	r1, r1
 80a09f8:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a09fa:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a09fc:	4718      	bx	r3
  else return printNumber(n, base);
 80a09fe:	b2d2      	uxtb	r2, r2
}
 80a0a00:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a0a02:	f7ff bfd6 	b.w	80a09b2 <_ZN5Print11printNumberEmh>

080a0a06 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a0a06:	f7ff bff3 	b.w	80a09f0 <_ZN5Print5printEmi>

080a0a0a <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 80a0a0a:	b510      	push	{r4, lr}
 80a0a0c:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0a0e:	f7ff fd81 	bl	80a0514 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 80a0a12:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 80a0a14:	6823      	ldr	r3, [r4, #0]
 80a0a16:	4620      	mov	r0, r4
 80a0a18:	695b      	ldr	r3, [r3, #20]
 80a0a1a:	4798      	blx	r3
    if (c >= 0) return c;
 80a0a1c:	2800      	cmp	r0, #0
 80a0a1e:	da08      	bge.n	80a0a32 <_ZN6Stream9timedReadEv+0x28>
 80a0a20:	f7ff fd78 	bl	80a0514 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
 80a0a24:	68e3      	ldr	r3, [r4, #12]
 80a0a26:	1ac0      	subs	r0, r0, r3
 80a0a28:	68a3      	ldr	r3, [r4, #8]
 80a0a2a:	4298      	cmp	r0, r3
 80a0a2c:	d3f2      	bcc.n	80a0a14 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 80a0a2e:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a0a32:	bd10      	pop	{r4, pc}

080a0a34 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 80a0a34:	6081      	str	r1, [r0, #8]
 80a0a36:	4770      	bx	lr

080a0a38 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 80a0a38:	b538      	push	{r3, r4, r5, lr}
 80a0a3a:	460d      	mov	r5, r1
  String ret;
 80a0a3c:	4907      	ldr	r1, [pc, #28]	; (80a0a5c <_ZN6Stream10readStringEv+0x24>)
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 80a0a3e:	4604      	mov	r4, r0
  String ret;
 80a0a40:	f7ff ff41 	bl	80a08c6 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 80a0a44:	4628      	mov	r0, r5
 80a0a46:	f7ff ffe0 	bl	80a0a0a <_ZN6Stream9timedReadEv>
  while (c >= 0)
 80a0a4a:	2800      	cmp	r0, #0
 80a0a4c:	db04      	blt.n	80a0a58 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 80a0a4e:	b2c1      	uxtb	r1, r0
 80a0a50:	4620      	mov	r0, r4
 80a0a52:	f7ff ff62 	bl	80a091a <_ZN6String6concatEc>
 80a0a56:	e7f5      	b.n	80a0a44 <_ZN6Stream10readStringEv+0xc>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 80a0a58:	4620      	mov	r0, r4
 80a0a5a:	bd38      	pop	{r3, r4, r5, pc}
 80a0a5c:	080a2112 	.word	0x080a2112

080a0a60 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0a60:	2300      	movs	r3, #0
 80a0a62:	461a      	mov	r2, r3
 80a0a64:	4619      	mov	r1, r3
 80a0a66:	6840      	ldr	r0, [r0, #4]
 80a0a68:	f7ff be5a 	b.w	80a0720 <network_on>

080a0a6c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0a6c:	4a01      	ldr	r2, [pc, #4]	; (80a0a74 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0a6e:	4b02      	ldr	r3, [pc, #8]	; (80a0a78 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0a70:	601a      	str	r2, [r3, #0]
 80a0a72:	4770      	bx	lr
 80a0a74:	080a21b4 	.word	0x080a21b4
 80a0a78:	200003dc 	.word	0x200003dc

080a0a7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0a7c:	4b02      	ldr	r3, [pc, #8]	; (80a0a88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0a7e:	681a      	ldr	r2, [r3, #0]
 80a0a80:	4b02      	ldr	r3, [pc, #8]	; (80a0a8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0a82:	601a      	str	r2, [r3, #0]
 80a0a84:	4770      	bx	lr
 80a0a86:	bf00      	nop
 80a0a88:	20000300 	.word	0x20000300
 80a0a8c:	200003e0 	.word	0x200003e0

080a0a90 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0a90:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0a92:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0a94:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0a96:	b113      	cbz	r3, 80a0a9e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0a98:	2203      	movs	r2, #3
 80a0a9a:	4601      	mov	r1, r0
 80a0a9c:	4798      	blx	r3
    }
 80a0a9e:	4620      	mov	r0, r4
 80a0aa0:	bd10      	pop	{r4, pc}

080a0aa2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0aa2:	b510      	push	{r4, lr}
 80a0aa4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0aa6:	f7ff fff3 	bl	80a0a90 <_ZNSt14_Function_baseD1Ev>
 80a0aaa:	4620      	mov	r0, r4
 80a0aac:	bd10      	pop	{r4, pc}
	...

080a0ab0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0ab0:	4803      	ldr	r0, [pc, #12]	; (80a0ac0 <_GLOBAL__sub_I_RGB+0x10>)
 80a0ab2:	2300      	movs	r3, #0
 80a0ab4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0ab6:	4a03      	ldr	r2, [pc, #12]	; (80a0ac4 <_GLOBAL__sub_I_RGB+0x14>)
 80a0ab8:	4903      	ldr	r1, [pc, #12]	; (80a0ac8 <_GLOBAL__sub_I_RGB+0x18>)
 80a0aba:	f000 bc05 	b.w	80a12c8 <__aeabi_atexit>
 80a0abe:	bf00      	nop
 80a0ac0:	200003e4 	.word	0x200003e4
 80a0ac4:	20000370 	.word	0x20000370
 80a0ac8:	080a0aa3 	.word	0x080a0aa3

080a0acc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0acc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0ace:	4b14      	ldr	r3, [pc, #80]	; (80a0b20 <serialEventRun+0x54>)
 80a0ad0:	b133      	cbz	r3, 80a0ae0 <serialEventRun+0x14>
 80a0ad2:	f000 f96b 	bl	80a0dac <_Z16_fetch_usbserialv>
 80a0ad6:	6803      	ldr	r3, [r0, #0]
 80a0ad8:	691b      	ldr	r3, [r3, #16]
 80a0ada:	4798      	blx	r3
 80a0adc:	2800      	cmp	r0, #0
 80a0ade:	dc16      	bgt.n	80a0b0e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0ae0:	4b10      	ldr	r3, [pc, #64]	; (80a0b24 <serialEventRun+0x58>)
 80a0ae2:	b133      	cbz	r3, 80a0af2 <serialEventRun+0x26>
 80a0ae4:	f000 fa20 	bl	80a0f28 <_Z22__fetch_global_Serial1v>
 80a0ae8:	6803      	ldr	r3, [r0, #0]
 80a0aea:	691b      	ldr	r3, [r3, #16]
 80a0aec:	4798      	blx	r3
 80a0aee:	2800      	cmp	r0, #0
 80a0af0:	dc10      	bgt.n	80a0b14 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0af2:	4b0d      	ldr	r3, [pc, #52]	; (80a0b28 <serialEventRun+0x5c>)
 80a0af4:	b10b      	cbz	r3, 80a0afa <serialEventRun+0x2e>
 80a0af6:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0afa:	4b0c      	ldr	r3, [pc, #48]	; (80a0b2c <serialEventRun+0x60>)
 80a0afc:	b17b      	cbz	r3, 80a0b1e <serialEventRun+0x52>
 80a0afe:	f000 f991 	bl	80a0e24 <_Z17_fetch_usbserial1v>
 80a0b02:	6803      	ldr	r3, [r0, #0]
 80a0b04:	691b      	ldr	r3, [r3, #16]
 80a0b06:	4798      	blx	r3
 80a0b08:	2800      	cmp	r0, #0
 80a0b0a:	dc06      	bgt.n	80a0b1a <serialEventRun+0x4e>
 80a0b0c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0b0e:	f3af 8000 	nop.w
 80a0b12:	e7e5      	b.n	80a0ae0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0b14:	f3af 8000 	nop.w
 80a0b18:	e7eb      	b.n	80a0af2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0b1a:	f3af 8000 	nop.w
 80a0b1e:	bd08      	pop	{r3, pc}
	...

080a0b30 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0b30:	b508      	push	{r3, lr}
	serialEventRun();
 80a0b32:	f7ff ffcb 	bl	80a0acc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0b36:	f7ff fced 	bl	80a0514 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0b3a:	4b01      	ldr	r3, [pc, #4]	; (80a0b40 <_post_loop+0x10>)
 80a0b3c:	6018      	str	r0, [r3, #0]
 80a0b3e:	bd08      	pop	{r3, pc}
 80a0b40:	20000888 	.word	0x20000888

080a0b44 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0b44:	4802      	ldr	r0, [pc, #8]	; (80a0b50 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0b46:	4a03      	ldr	r2, [pc, #12]	; (80a0b54 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0b48:	4903      	ldr	r1, [pc, #12]	; (80a0b58 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0b4a:	1a12      	subs	r2, r2, r0
 80a0b4c:	f001 b99d 	b.w	80a1e8a <memcpy>
 80a0b50:	40024000 	.word	0x40024000
 80a0b54:	40024004 	.word	0x40024004
 80a0b58:	080a2768 	.word	0x080a2768

080a0b5c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0b5c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0b5e:	2300      	movs	r3, #0
 80a0b60:	9300      	str	r3, [sp, #0]
 80a0b62:	461a      	mov	r2, r3
 80a0b64:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0b68:	f7ff fdb0 	bl	80a06cc <system_ctrl_set_result>
}
 80a0b6c:	b003      	add	sp, #12
 80a0b6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0b74 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0b74:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0b76:	8843      	ldrh	r3, [r0, #2]
 80a0b78:	2b0a      	cmp	r3, #10
 80a0b7a:	d008      	beq.n	80a0b8e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0b7c:	2b50      	cmp	r3, #80	; 0x50
 80a0b7e:	d109      	bne.n	80a0b94 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0b80:	4b09      	ldr	r3, [pc, #36]	; (80a0ba8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0b82:	681b      	ldr	r3, [r3, #0]
 80a0b84:	b13b      	cbz	r3, 80a0b96 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0b86:	b003      	add	sp, #12
 80a0b88:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0b8c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0b8e:	f7ff ffe5 	bl	80a0b5c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0b92:	e006      	b.n	80a0ba2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0b94:	2300      	movs	r3, #0
 80a0b96:	9300      	str	r3, [sp, #0]
 80a0b98:	461a      	mov	r2, r3
 80a0b9a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0b9e:	f7ff fd95 	bl	80a06cc <system_ctrl_set_result>
        break;
    }
}
 80a0ba2:	b003      	add	sp, #12
 80a0ba4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0ba8:	200003f4 	.word	0x200003f4

080a0bac <module_user_init_hook>:

void module_user_init_hook()
{
 80a0bac:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0bae:	4c10      	ldr	r4, [pc, #64]	; (80a0bf0 <module_user_init_hook+0x44>)
 80a0bb0:	4d10      	ldr	r5, [pc, #64]	; (80a0bf4 <module_user_init_hook+0x48>)
 80a0bb2:	6823      	ldr	r3, [r4, #0]
 80a0bb4:	42ab      	cmp	r3, r5
 80a0bb6:	4b10      	ldr	r3, [pc, #64]	; (80a0bf8 <module_user_init_hook+0x4c>)
 80a0bb8:	bf0c      	ite	eq
 80a0bba:	2201      	moveq	r2, #1
 80a0bbc:	2200      	movne	r2, #0
 80a0bbe:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0bc0:	d002      	beq.n	80a0bc8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0bc2:	f7ff ffbf 	bl	80a0b44 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0bc6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0bc8:	f7ff fc94 	bl	80a04f4 <HAL_RNG_GetRandomNumber>
 80a0bcc:	4604      	mov	r4, r0
    srand(seed);
 80a0bce:	f001 f999 	bl	80a1f04 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0bd2:	4b0a      	ldr	r3, [pc, #40]	; (80a0bfc <module_user_init_hook+0x50>)
 80a0bd4:	b113      	cbz	r3, 80a0bdc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0bd6:	4620      	mov	r0, r4
 80a0bd8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0bdc:	2100      	movs	r1, #0
 80a0bde:	4807      	ldr	r0, [pc, #28]	; (80a0bfc <module_user_init_hook+0x50>)
 80a0be0:	f7ff fdce 	bl	80a0780 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0be8:	2100      	movs	r1, #0
 80a0bea:	4805      	ldr	r0, [pc, #20]	; (80a0c00 <module_user_init_hook+0x54>)
 80a0bec:	f7ff bd64 	b.w	80a06b8 <system_ctrl_set_app_request_handler>
 80a0bf0:	40024000 	.word	0x40024000
 80a0bf4:	9a271c1e 	.word	0x9a271c1e
 80a0bf8:	200003f8 	.word	0x200003f8
 80a0bfc:	00000000 	.word	0x00000000
 80a0c00:	080a0b75 	.word	0x080a0b75

080a0c04 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0c04:	4770      	bx	lr

080a0c06 <_ZN9IPAddressD0Ev>:
 80a0c06:	b510      	push	{r4, lr}
 80a0c08:	4604      	mov	r4, r0
 80a0c0a:	2118      	movs	r1, #24
 80a0c0c:	f000 fb61 	bl	80a12d2 <_ZdlPvj>
 80a0c10:	4620      	mov	r0, r4
 80a0c12:	bd10      	pop	{r4, pc}

080a0c14 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c16:	460f      	mov	r7, r1
 80a0c18:	f100 0608 	add.w	r6, r0, #8
 80a0c1c:	1d05      	adds	r5, r0, #4
 80a0c1e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0c20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0c24:	220a      	movs	r2, #10
 80a0c26:	4638      	mov	r0, r7
 80a0c28:	f7ff feed 	bl	80a0a06 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0c2c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0c2e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0c30:	d007      	beq.n	80a0c42 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0c32:	2c00      	cmp	r4, #0
 80a0c34:	d0f4      	beq.n	80a0c20 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0c36:	212e      	movs	r1, #46	; 0x2e
 80a0c38:	4638      	mov	r0, r7
 80a0c3a:	f7ff fea1 	bl	80a0980 <_ZN5Print5printEc>
 80a0c3e:	4404      	add	r4, r0
 80a0c40:	e7ee      	b.n	80a0c20 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0c42:	4620      	mov	r0, r4
 80a0c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0c48 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0c48:	b510      	push	{r4, lr}
 80a0c4a:	4604      	mov	r4, r0
 80a0c4c:	4b04      	ldr	r3, [pc, #16]	; (80a0c60 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0c4e:	2211      	movs	r2, #17
 80a0c50:	f840 3b04 	str.w	r3, [r0], #4
 80a0c54:	2100      	movs	r1, #0
 80a0c56:	f001 f93e 	bl	80a1ed6 <memset>
{
    clear();
}
 80a0c5a:	4620      	mov	r0, r4
 80a0c5c:	bd10      	pop	{r4, pc}
 80a0c5e:	bf00      	nop
 80a0c60:	080a2210 	.word	0x080a2210

080a0c64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0c64:	4603      	mov	r3, r0
 80a0c66:	4a07      	ldr	r2, [pc, #28]	; (80a0c84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0c68:	b510      	push	{r4, lr}
 80a0c6a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0c6e:	f101 0210 	add.w	r2, r1, #16
 80a0c72:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0c76:	4291      	cmp	r1, r2
 80a0c78:	f843 4b04 	str.w	r4, [r3], #4
 80a0c7c:	d1f9      	bne.n	80a0c72 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0c7e:	780a      	ldrb	r2, [r1, #0]
 80a0c80:	701a      	strb	r2, [r3, #0]
}
 80a0c82:	bd10      	pop	{r4, pc}
 80a0c84:	080a2210 	.word	0x080a2210

080a0c88 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0c88:	4a02      	ldr	r2, [pc, #8]	; (80a0c94 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0c8a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0c8c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0c8e:	2204      	movs	r2, #4
 80a0c90:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0c92:	4770      	bx	lr
 80a0c94:	080a2210 	.word	0x080a2210

080a0c98 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0c98:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0c9a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0c9e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0ca2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0ca6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0caa:	2304      	movs	r3, #4
 80a0cac:	6041      	str	r1, [r0, #4]
 80a0cae:	7503      	strb	r3, [r0, #20]
 80a0cb0:	bd10      	pop	{r4, pc}
	...

080a0cb4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0cb6:	4d04      	ldr	r5, [pc, #16]	; (80a0cc8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0cb8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0cba:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0cbe:	9500      	str	r5, [sp, #0]
 80a0cc0:	f7ff ffea 	bl	80a0c98 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0cc4:	b003      	add	sp, #12
 80a0cc6:	bd30      	pop	{r4, r5, pc}
 80a0cc8:	080a2210 	.word	0x080a2210

080a0ccc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0ccc:	7441      	strb	r1, [r0, #17]
 80a0cce:	4770      	bx	lr

080a0cd0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0cd0:	4770      	bx	lr

080a0cd2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a0cd2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0cd4:	2100      	movs	r1, #0
 80a0cd6:	7c00      	ldrb	r0, [r0, #16]
 80a0cd8:	f7ff fcc6 	bl	80a0668 <HAL_USB_USART_Receive_Data>
}
 80a0cdc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0ce0:	bf28      	it	cs
 80a0ce2:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0ce6:	bd08      	pop	{r3, pc}

080a0ce8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0ce8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0cea:	2101      	movs	r1, #1
 80a0cec:	7c00      	ldrb	r0, [r0, #16]
 80a0cee:	f7ff fcbb 	bl	80a0668 <HAL_USB_USART_Receive_Data>
}
 80a0cf2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0cf6:	bf28      	it	cs
 80a0cf8:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0cfc:	bd08      	pop	{r3, pc}

080a0cfe <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a0cfe:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a0d00:	7c00      	ldrb	r0, [r0, #16]
 80a0d02:	f7ff fca9 	bl	80a0658 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0d06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0d0a:	bd08      	pop	{r3, pc}

080a0d0c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0d0c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a0d0e:	7c00      	ldrb	r0, [r0, #16]
 80a0d10:	f7ff fc9a 	bl	80a0648 <HAL_USB_USART_Available_Data>
}
 80a0d14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0d18:	bd08      	pop	{r3, pc}

080a0d1a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0d1a:	7c00      	ldrb	r0, [r0, #16]
 80a0d1c:	f7ff bcb4 	b.w	80a0688 <HAL_USB_USART_Flush_Data>

080a0d20 <_ZN9USBSerialD0Ev>:
 80a0d20:	b510      	push	{r4, lr}
 80a0d22:	4604      	mov	r4, r0
 80a0d24:	2114      	movs	r1, #20
 80a0d26:	f000 fad4 	bl	80a12d2 <_ZdlPvj>
 80a0d2a:	4620      	mov	r0, r4
 80a0d2c:	bd10      	pop	{r4, pc}

080a0d2e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0d2e:	b538      	push	{r3, r4, r5, lr}
 80a0d30:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0d32:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0d34:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0d36:	f7ff fc8f 	bl	80a0658 <HAL_USB_USART_Available_Data_For_Write>
 80a0d3a:	2800      	cmp	r0, #0
 80a0d3c:	dc01      	bgt.n	80a0d42 <_ZN9USBSerial5writeEh+0x14>
 80a0d3e:	7c60      	ldrb	r0, [r4, #17]
 80a0d40:	b128      	cbz	r0, 80a0d4e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a0d42:	4629      	mov	r1, r5
 80a0d44:	7c20      	ldrb	r0, [r4, #16]
 80a0d46:	f7ff fc97 	bl	80a0678 <HAL_USB_USART_Send_Data>
 80a0d4a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a0d4e:	bd38      	pop	{r3, r4, r5, pc}

080a0d50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0d50:	b510      	push	{r4, lr}
 80a0d52:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0d54:	2300      	movs	r3, #0
 80a0d56:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0d58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0d5c:	60a3      	str	r3, [r4, #8]
 80a0d5e:	4b05      	ldr	r3, [pc, #20]	; (80a0d74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0d60:	4608      	mov	r0, r1
 80a0d62:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0d64:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0d66:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0d68:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0d6a:	4611      	mov	r1, r2
 80a0d6c:	f7ff fc5c 	bl	80a0628 <HAL_USB_USART_Init>
}
 80a0d70:	4620      	mov	r0, r4
 80a0d72:	bd10      	pop	{r4, pc}
 80a0d74:	080a2224 	.word	0x080a2224

080a0d78 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0d78:	2200      	movs	r2, #0
 80a0d7a:	7c00      	ldrb	r0, [r0, #16]
 80a0d7c:	f7ff bc5c 	b.w	80a0638 <HAL_USB_USART_Begin>

080a0d80 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0d80:	b510      	push	{r4, lr}
 80a0d82:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0d84:	2214      	movs	r2, #20
 80a0d86:	2100      	movs	r1, #0
 80a0d88:	f001 f8a5 	bl	80a1ed6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0d8c:	4b05      	ldr	r3, [pc, #20]	; (80a0da4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0d8e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0d90:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0d92:	4b05      	ldr	r3, [pc, #20]	; (80a0da8 <_Z19acquireSerialBufferv+0x28>)
 80a0d94:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0d96:	f240 1301 	movw	r3, #257	; 0x101
 80a0d9a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0d9c:	2381      	movs	r3, #129	; 0x81
 80a0d9e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0da0:	bd10      	pop	{r4, pc}
 80a0da2:	bf00      	nop
 80a0da4:	20000481 	.word	0x20000481
 80a0da8:	20000400 	.word	0x20000400

080a0dac <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0dac:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0dae:	4d0e      	ldr	r5, [pc, #56]	; (80a0de8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0db0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0db2:	a801      	add	r0, sp, #4
 80a0db4:	f7ff ffe4 	bl	80a0d80 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0db8:	6829      	ldr	r1, [r5, #0]
 80a0dba:	f011 0401 	ands.w	r4, r1, #1
 80a0dbe:	d110      	bne.n	80a0de2 <_Z16_fetch_usbserialv+0x36>
 80a0dc0:	4628      	mov	r0, r5
 80a0dc2:	f7ff f96e 	bl	80a00a2 <__cxa_guard_acquire>
 80a0dc6:	b160      	cbz	r0, 80a0de2 <_Z16_fetch_usbserialv+0x36>
 80a0dc8:	aa01      	add	r2, sp, #4
 80a0dca:	4621      	mov	r1, r4
 80a0dcc:	4807      	ldr	r0, [pc, #28]	; (80a0dec <_Z16_fetch_usbserialv+0x40>)
 80a0dce:	f7ff ffbf 	bl	80a0d50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0dd2:	4628      	mov	r0, r5
 80a0dd4:	f7ff f96a 	bl	80a00ac <__cxa_guard_release>
 80a0dd8:	4a05      	ldr	r2, [pc, #20]	; (80a0df0 <_Z16_fetch_usbserialv+0x44>)
 80a0dda:	4906      	ldr	r1, [pc, #24]	; (80a0df4 <_Z16_fetch_usbserialv+0x48>)
 80a0ddc:	4803      	ldr	r0, [pc, #12]	; (80a0dec <_Z16_fetch_usbserialv+0x40>)
 80a0dde:	f000 fa73 	bl	80a12c8 <__aeabi_atexit>
	return _usbserial;
}
 80a0de2:	4802      	ldr	r0, [pc, #8]	; (80a0dec <_Z16_fetch_usbserialv+0x40>)
 80a0de4:	b007      	add	sp, #28
 80a0de6:	bd30      	pop	{r4, r5, pc}
 80a0de8:	200003fc 	.word	0x200003fc
 80a0dec:	20000584 	.word	0x20000584
 80a0df0:	20000370 	.word	0x20000370
 80a0df4:	080a0cd1 	.word	0x080a0cd1

080a0df8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0df8:	b510      	push	{r4, lr}
 80a0dfa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0dfc:	2214      	movs	r2, #20
 80a0dfe:	2100      	movs	r1, #0
 80a0e00:	f001 f869 	bl	80a1ed6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0e04:	4b05      	ldr	r3, [pc, #20]	; (80a0e1c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0e06:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0e08:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0e0a:	4b05      	ldr	r3, [pc, #20]	; (80a0e20 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0e0c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0e0e:	f240 1301 	movw	r3, #257	; 0x101
 80a0e12:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0e14:	2381      	movs	r3, #129	; 0x81
 80a0e16:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0e18:	bd10      	pop	{r4, pc}
 80a0e1a:	bf00      	nop
 80a0e1c:	20000634 	.word	0x20000634
 80a0e20:	2000059c 	.word	0x2000059c

080a0e24 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0e24:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0e26:	4c0e      	ldr	r4, [pc, #56]	; (80a0e60 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0e28:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0e2a:	a801      	add	r0, sp, #4
 80a0e2c:	f7ff ffe4 	bl	80a0df8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0e30:	6823      	ldr	r3, [r4, #0]
 80a0e32:	07db      	lsls	r3, r3, #31
 80a0e34:	d410      	bmi.n	80a0e58 <_Z17_fetch_usbserial1v+0x34>
 80a0e36:	4620      	mov	r0, r4
 80a0e38:	f7ff f933 	bl	80a00a2 <__cxa_guard_acquire>
 80a0e3c:	b160      	cbz	r0, 80a0e58 <_Z17_fetch_usbserial1v+0x34>
 80a0e3e:	aa01      	add	r2, sp, #4
 80a0e40:	2101      	movs	r1, #1
 80a0e42:	4808      	ldr	r0, [pc, #32]	; (80a0e64 <_Z17_fetch_usbserial1v+0x40>)
 80a0e44:	f7ff ff84 	bl	80a0d50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0e48:	4620      	mov	r0, r4
 80a0e4a:	f7ff f92f 	bl	80a00ac <__cxa_guard_release>
 80a0e4e:	4a06      	ldr	r2, [pc, #24]	; (80a0e68 <_Z17_fetch_usbserial1v+0x44>)
 80a0e50:	4906      	ldr	r1, [pc, #24]	; (80a0e6c <_Z17_fetch_usbserial1v+0x48>)
 80a0e52:	4804      	ldr	r0, [pc, #16]	; (80a0e64 <_Z17_fetch_usbserial1v+0x40>)
 80a0e54:	f000 fa38 	bl	80a12c8 <__aeabi_atexit>
  return _usbserial1;
}
 80a0e58:	4802      	ldr	r0, [pc, #8]	; (80a0e64 <_Z17_fetch_usbserial1v+0x40>)
 80a0e5a:	b006      	add	sp, #24
 80a0e5c:	bd10      	pop	{r4, pc}
 80a0e5e:	bf00      	nop
 80a0e60:	20000598 	.word	0x20000598
 80a0e64:	20000620 	.word	0x20000620
 80a0e68:	20000370 	.word	0x20000370
 80a0e6c:	080a0cd1 	.word	0x080a0cd1

080a0e70 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0e70:	4770      	bx	lr

080a0e72 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0e72:	7441      	strb	r1, [r0, #17]
 80a0e74:	4770      	bx	lr

080a0e76 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0e76:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0e78:	7c00      	ldrb	r0, [r0, #16]
 80a0e7a:	f7ff fb93 	bl	80a05a4 <HAL_USART_Available_Data_For_Write>
}
 80a0e7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0e82:	bd08      	pop	{r3, pc}

080a0e84 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0e84:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0e86:	7c00      	ldrb	r0, [r0, #16]
 80a0e88:	f7ff fb64 	bl	80a0554 <HAL_USART_Available_Data>
}
 80a0e8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0e90:	bd08      	pop	{r3, pc}

080a0e92 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0e92:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0e94:	7c00      	ldrb	r0, [r0, #16]
 80a0e96:	f7ff fb6d 	bl	80a0574 <HAL_USART_Peek_Data>
}
 80a0e9a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0e9e:	bf28      	it	cs
 80a0ea0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0ea4:	bd08      	pop	{r3, pc}

080a0ea6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0ea6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0ea8:	7c00      	ldrb	r0, [r0, #16]
 80a0eaa:	f7ff fb5b 	bl	80a0564 <HAL_USART_Read_Data>
}
 80a0eae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0eb2:	bf28      	it	cs
 80a0eb4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0eb8:	bd08      	pop	{r3, pc}

080a0eba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0eba:	7c00      	ldrb	r0, [r0, #16]
 80a0ebc:	f7ff bb62 	b.w	80a0584 <HAL_USART_Flush_Data>

080a0ec0 <_ZN11USARTSerialD0Ev>:
 80a0ec0:	b510      	push	{r4, lr}
 80a0ec2:	4604      	mov	r4, r0
 80a0ec4:	2114      	movs	r1, #20
 80a0ec6:	f000 fa04 	bl	80a12d2 <_ZdlPvj>
 80a0eca:	4620      	mov	r0, r4
 80a0ecc:	bd10      	pop	{r4, pc}

080a0ece <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0ece:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0ed0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0ed2:	4604      	mov	r4, r0
 80a0ed4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0ed6:	b925      	cbnz	r5, 80a0ee2 <_ZN11USARTSerial5writeEh+0x14>
 80a0ed8:	7c00      	ldrb	r0, [r0, #16]
 80a0eda:	f7ff fb63 	bl	80a05a4 <HAL_USART_Available_Data_For_Write>
 80a0ede:	2800      	cmp	r0, #0
 80a0ee0:	dd05      	ble.n	80a0eee <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0ee2:	4631      	mov	r1, r6
 80a0ee4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0eea:	f7ff bb2b 	b.w	80a0544 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0eee:	4628      	mov	r0, r5
 80a0ef0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0ef4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0ef4:	b510      	push	{r4, lr}
 80a0ef6:	4604      	mov	r4, r0
 80a0ef8:	4608      	mov	r0, r1
 80a0efa:	4611      	mov	r1, r2
 80a0efc:	2200      	movs	r2, #0
 80a0efe:	6062      	str	r2, [r4, #4]
 80a0f00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0f04:	60a2      	str	r2, [r4, #8]
 80a0f06:	4a05      	ldr	r2, [pc, #20]	; (80a0f1c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0f08:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0f0a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0f0c:	2201      	movs	r2, #1
 80a0f0e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0f10:	461a      	mov	r2, r3
 80a0f12:	f7ff fb0f 	bl	80a0534 <HAL_USART_Init>
}
 80a0f16:	4620      	mov	r0, r4
 80a0f18:	bd10      	pop	{r4, pc}
 80a0f1a:	bf00      	nop
 80a0f1c:	080a2254 	.word	0x080a2254

080a0f20 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0f20:	7c00      	ldrb	r0, [r0, #16]
 80a0f22:	f7ff bb37 	b.w	80a0594 <HAL_USART_Is_Enabled>
	...

080a0f28 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0f28:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0f2a:	4d0c      	ldr	r5, [pc, #48]	; (80a0f5c <_Z22__fetch_global_Serial1v+0x34>)
 80a0f2c:	6829      	ldr	r1, [r5, #0]
 80a0f2e:	f011 0401 	ands.w	r4, r1, #1
 80a0f32:	d111      	bne.n	80a0f58 <_Z22__fetch_global_Serial1v+0x30>
 80a0f34:	4628      	mov	r0, r5
 80a0f36:	f7ff f8b4 	bl	80a00a2 <__cxa_guard_acquire>
 80a0f3a:	b168      	cbz	r0, 80a0f58 <_Z22__fetch_global_Serial1v+0x30>
 80a0f3c:	4a08      	ldr	r2, [pc, #32]	; (80a0f60 <_Z22__fetch_global_Serial1v+0x38>)
 80a0f3e:	4621      	mov	r1, r4
 80a0f40:	4b08      	ldr	r3, [pc, #32]	; (80a0f64 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0f42:	4809      	ldr	r0, [pc, #36]	; (80a0f68 <_Z22__fetch_global_Serial1v+0x40>)
 80a0f44:	f7ff ffd6 	bl	80a0ef4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0f48:	4628      	mov	r0, r5
 80a0f4a:	f7ff f8af 	bl	80a00ac <__cxa_guard_release>
 80a0f4e:	4a07      	ldr	r2, [pc, #28]	; (80a0f6c <_Z22__fetch_global_Serial1v+0x44>)
 80a0f50:	4907      	ldr	r1, [pc, #28]	; (80a0f70 <_Z22__fetch_global_Serial1v+0x48>)
 80a0f52:	4805      	ldr	r0, [pc, #20]	; (80a0f68 <_Z22__fetch_global_Serial1v+0x40>)
 80a0f54:	f000 f9b8 	bl	80a12c8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0f58:	4803      	ldr	r0, [pc, #12]	; (80a0f68 <_Z22__fetch_global_Serial1v+0x40>)
 80a0f5a:	bd38      	pop	{r3, r4, r5, pc}
 80a0f5c:	200007d0 	.word	0x200007d0
 80a0f60:	200007d4 	.word	0x200007d4
 80a0f64:	2000074c 	.word	0x2000074c
 80a0f68:	20000738 	.word	0x20000738
 80a0f6c:	20000370 	.word	0x20000370
 80a0f70:	080a0e71 	.word	0x080a0e71

080a0f74 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0f74:	4770      	bx	lr

080a0f76 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0f78:	4606      	mov	r6, r0
 80a0f7a:	4615      	mov	r5, r2
 80a0f7c:	460c      	mov	r4, r1
 80a0f7e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0f80:	42bc      	cmp	r4, r7
 80a0f82:	d006      	beq.n	80a0f92 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0f84:	6833      	ldr	r3, [r6, #0]
 80a0f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0f8a:	689b      	ldr	r3, [r3, #8]
 80a0f8c:	4630      	mov	r0, r6
 80a0f8e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0f90:	e7f6      	b.n	80a0f80 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0f92:	4628      	mov	r0, r5
 80a0f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0f96 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0f96:	2200      	movs	r2, #0
 80a0f98:	7c00      	ldrb	r0, [r0, #16]
 80a0f9a:	f7ff bb0b 	b.w	80a05b4 <HAL_I2C_Write_Data>

080a0f9e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0f9e:	2100      	movs	r1, #0
 80a0fa0:	7c00      	ldrb	r0, [r0, #16]
 80a0fa2:	f7ff bb0f 	b.w	80a05c4 <HAL_I2C_Available_Data>

080a0fa6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0fa6:	2100      	movs	r1, #0
 80a0fa8:	7c00      	ldrb	r0, [r0, #16]
 80a0faa:	f7ff bb13 	b.w	80a05d4 <HAL_I2C_Read_Data>

080a0fae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0fae:	2100      	movs	r1, #0
 80a0fb0:	7c00      	ldrb	r0, [r0, #16]
 80a0fb2:	f7ff bb17 	b.w	80a05e4 <HAL_I2C_Peek_Data>

080a0fb6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0fb6:	2100      	movs	r1, #0
 80a0fb8:	7c00      	ldrb	r0, [r0, #16]
 80a0fba:	f7ff bb1b 	b.w	80a05f4 <HAL_I2C_Flush_Data>

080a0fbe <_ZN7TwoWireD0Ev>:
 80a0fbe:	b510      	push	{r4, lr}
 80a0fc0:	4604      	mov	r4, r0
 80a0fc2:	2114      	movs	r1, #20
 80a0fc4:	f000 f985 	bl	80a12d2 <_ZdlPvj>
 80a0fc8:	4620      	mov	r0, r4
 80a0fca:	bd10      	pop	{r4, pc}

080a0fcc <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0fcc:	b510      	push	{r4, lr}
 80a0fce:	4604      	mov	r4, r0
 80a0fd0:	4608      	mov	r0, r1
 80a0fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0fd6:	60a3      	str	r3, [r4, #8]
 80a0fd8:	4b04      	ldr	r3, [pc, #16]	; (80a0fec <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a0fda:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0fdc:	7420      	strb	r0, [r4, #16]
 80a0fde:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0fe0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a0fe2:	f7ff fb17 	bl	80a0614 <HAL_I2C_Init>

}
 80a0fe6:	4620      	mov	r0, r4
 80a0fe8:	bd10      	pop	{r4, pc}
 80a0fea:	bf00      	nop
 80a0fec:	080a2284 	.word	0x080a2284

080a0ff0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0ff0:	2100      	movs	r1, #0
 80a0ff2:	7c00      	ldrb	r0, [r0, #16]
 80a0ff4:	f7ff bb06 	b.w	80a0604 <HAL_I2C_Is_Enabled>

080a0ff8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0ff8:	2200      	movs	r2, #0
 80a0ffa:	4611      	mov	r1, r2
 80a0ffc:	6840      	ldr	r0, [r0, #4]
 80a0ffe:	f7ff bb87 	b.w	80a0710 <network_ready>

080a1002 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1002:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1004:	4616      	mov	r6, r2
 80a1006:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1008:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a100a:	460f      	mov	r7, r1
 80a100c:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a100e:	2100      	movs	r1, #0
 80a1010:	a803      	add	r0, sp, #12
 80a1012:	f000 ff60 	bl	80a1ed6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1016:	4630      	mov	r0, r6
 80a1018:	f000 ffa4 	bl	80a1f64 <strlen>
 80a101c:	2500      	movs	r5, #0
 80a101e:	9500      	str	r5, [sp, #0]
 80a1020:	b281      	uxth	r1, r0
 80a1022:	687b      	ldr	r3, [r7, #4]
 80a1024:	aa03      	add	r2, sp, #12
 80a1026:	4630      	mov	r0, r6
 80a1028:	f7ff fb36 	bl	80a0698 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a102c:	b120      	cbz	r0, 80a1038 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a102e:	4629      	mov	r1, r5
 80a1030:	4620      	mov	r0, r4
 80a1032:	f7ff fe29 	bl	80a0c88 <_ZN9IPAddressC1Em>
 80a1036:	e003      	b.n	80a1040 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1038:	a903      	add	r1, sp, #12
 80a103a:	4620      	mov	r0, r4
 80a103c:	f7ff fe12 	bl	80a0c64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1040:	4620      	mov	r0, r4
 80a1042:	b009      	add	sp, #36	; 0x24
 80a1044:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1046 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1046:	2200      	movs	r2, #0
 80a1048:	4611      	mov	r1, r2
 80a104a:	6840      	ldr	r0, [r0, #4]
 80a104c:	f7ff bb80 	b.w	80a0750 <network_listening>

080a1050 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1050:	2200      	movs	r2, #0
 80a1052:	4611      	mov	r1, r2
 80a1054:	6840      	ldr	r0, [r0, #4]
 80a1056:	f7ff bb8b 	b.w	80a0770 <network_get_listen_timeout>

080a105a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a105a:	2200      	movs	r2, #0
 80a105c:	6840      	ldr	r0, [r0, #4]
 80a105e:	f7ff bb7f 	b.w	80a0760 <network_set_listen_timeout>

080a1062 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1062:	2200      	movs	r2, #0
 80a1064:	f081 0101 	eor.w	r1, r1, #1
 80a1068:	6840      	ldr	r0, [r0, #4]
 80a106a:	f7ff bb69 	b.w	80a0740 <network_listen>

080a106e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a106e:	2300      	movs	r3, #0
 80a1070:	461a      	mov	r2, r3
 80a1072:	4619      	mov	r1, r3
 80a1074:	6840      	ldr	r0, [r0, #4]
 80a1076:	f7ff bb5b 	b.w	80a0730 <network_off>

080a107a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a107a:	2200      	movs	r2, #0
 80a107c:	4611      	mov	r1, r2
 80a107e:	6840      	ldr	r0, [r0, #4]
 80a1080:	f7ff bb36 	b.w	80a06f0 <network_connecting>

080a1084 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1084:	2200      	movs	r2, #0
 80a1086:	2102      	movs	r1, #2
 80a1088:	6840      	ldr	r0, [r0, #4]
 80a108a:	f7ff bb39 	b.w	80a0700 <network_disconnect>

080a108e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a108e:	2300      	movs	r3, #0
 80a1090:	461a      	mov	r2, r3
 80a1092:	6840      	ldr	r0, [r0, #4]
 80a1094:	f7ff bb24 	b.w	80a06e0 <network_connect>

080a1098 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1098:	4b02      	ldr	r3, [pc, #8]	; (80a10a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a109a:	2204      	movs	r2, #4
 80a109c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a109e:	4a02      	ldr	r2, [pc, #8]	; (80a10a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a10a0:	601a      	str	r2, [r3, #0]
 80a10a2:	4770      	bx	lr
 80a10a4:	20000858 	.word	0x20000858
 80a10a8:	080a22ac 	.word	0x080a22ac

080a10ac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a10ac:	2300      	movs	r3, #0
 80a10ae:	461a      	mov	r2, r3
 80a10b0:	6840      	ldr	r0, [r0, #4]
 80a10b2:	f7ff bb15 	b.w	80a06e0 <network_connect>

080a10b6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a10b6:	2200      	movs	r2, #0
 80a10b8:	2102      	movs	r1, #2
 80a10ba:	6840      	ldr	r0, [r0, #4]
 80a10bc:	f7ff bb20 	b.w	80a0700 <network_disconnect>

080a10c0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a10c0:	2200      	movs	r2, #0
 80a10c2:	4611      	mov	r1, r2
 80a10c4:	6840      	ldr	r0, [r0, #4]
 80a10c6:	f7ff bb13 	b.w	80a06f0 <network_connecting>

080a10ca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a10ca:	2200      	movs	r2, #0
 80a10cc:	4611      	mov	r1, r2
 80a10ce:	6840      	ldr	r0, [r0, #4]
 80a10d0:	f7ff bb1e 	b.w	80a0710 <network_ready>

080a10d4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a10d4:	2300      	movs	r3, #0
 80a10d6:	461a      	mov	r2, r3
 80a10d8:	4619      	mov	r1, r3
 80a10da:	6840      	ldr	r0, [r0, #4]
 80a10dc:	f7ff bb20 	b.w	80a0720 <network_on>

080a10e0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a10e0:	2300      	movs	r3, #0
 80a10e2:	461a      	mov	r2, r3
 80a10e4:	4619      	mov	r1, r3
 80a10e6:	6840      	ldr	r0, [r0, #4]
 80a10e8:	f7ff bb22 	b.w	80a0730 <network_off>

080a10ec <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a10ec:	2200      	movs	r2, #0
 80a10ee:	f081 0101 	eor.w	r1, r1, #1
 80a10f2:	6840      	ldr	r0, [r0, #4]
 80a10f4:	f7ff bb24 	b.w	80a0740 <network_listen>

080a10f8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a10f8:	2200      	movs	r2, #0
 80a10fa:	6840      	ldr	r0, [r0, #4]
 80a10fc:	f7ff bb30 	b.w	80a0760 <network_set_listen_timeout>

080a1100 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1100:	2200      	movs	r2, #0
 80a1102:	4611      	mov	r1, r2
 80a1104:	6840      	ldr	r0, [r0, #4]
 80a1106:	f7ff bb33 	b.w	80a0770 <network_get_listen_timeout>

080a110a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a110a:	2200      	movs	r2, #0
 80a110c:	4611      	mov	r1, r2
 80a110e:	6840      	ldr	r0, [r0, #4]
 80a1110:	f7ff bb1e 	b.w	80a0750 <network_listening>

080a1114 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1114:	b570      	push	{r4, r5, r6, lr}
 80a1116:	4616      	mov	r6, r2
 80a1118:	b08e      	sub	sp, #56	; 0x38
 80a111a:	4604      	mov	r4, r0
    IPAddress addr;
 80a111c:	a808      	add	r0, sp, #32
 80a111e:	f7ff fd93 	bl	80a0c48 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1122:	2211      	movs	r2, #17
 80a1124:	2100      	movs	r1, #0
 80a1126:	a803      	add	r0, sp, #12
 80a1128:	f000 fed5 	bl	80a1ed6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a112c:	4630      	mov	r0, r6
 80a112e:	f000 ff19 	bl	80a1f64 <strlen>
 80a1132:	2500      	movs	r5, #0
 80a1134:	4b0a      	ldr	r3, [pc, #40]	; (80a1160 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1136:	9500      	str	r5, [sp, #0]
 80a1138:	b281      	uxth	r1, r0
 80a113a:	685b      	ldr	r3, [r3, #4]
 80a113c:	aa03      	add	r2, sp, #12
 80a113e:	4630      	mov	r0, r6
 80a1140:	f7ff faaa 	bl	80a0698 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1144:	b120      	cbz	r0, 80a1150 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1146:	4629      	mov	r1, r5
 80a1148:	4620      	mov	r0, r4
 80a114a:	f7ff fd9d 	bl	80a0c88 <_ZN9IPAddressC1Em>
 80a114e:	e003      	b.n	80a1158 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1150:	a903      	add	r1, sp, #12
 80a1152:	4620      	mov	r0, r4
 80a1154:	f7ff fd86 	bl	80a0c64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1158:	4620      	mov	r0, r4
 80a115a:	b00e      	add	sp, #56	; 0x38
 80a115c:	bd70      	pop	{r4, r5, r6, pc}
 80a115e:	bf00      	nop
 80a1160:	20000858 	.word	0x20000858

080a1164 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1164:	4b02      	ldr	r3, [pc, #8]	; (80a1170 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1166:	4a03      	ldr	r2, [pc, #12]	; (80a1174 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1168:	601a      	str	r2, [r3, #0]
 80a116a:	2200      	movs	r2, #0
 80a116c:	605a      	str	r2, [r3, #4]
 80a116e:	4770      	bx	lr
 80a1170:	20000860 	.word	0x20000860
 80a1174:	080a22e0 	.word	0x080a22e0

080a1178 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1178:	b510      	push	{r4, lr}
 80a117a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a117c:	480f      	ldr	r0, [pc, #60]	; (80a11bc <pinAvailable+0x44>)
 80a117e:	f7ff fb4b 	bl	80a0818 <_ZN8SPIClass9isEnabledEv>
 80a1182:	b128      	cbz	r0, 80a1190 <pinAvailable+0x18>
 80a1184:	f1a4 030d 	sub.w	r3, r4, #13
 80a1188:	2b02      	cmp	r3, #2
 80a118a:	d801      	bhi.n	80a1190 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a118c:	2000      	movs	r0, #0
 80a118e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1190:	f000 f87a 	bl	80a1288 <_Z19__fetch_global_Wirev>
 80a1194:	f7ff ff2c 	bl	80a0ff0 <_ZN7TwoWire9isEnabledEv>
 80a1198:	b108      	cbz	r0, 80a119e <pinAvailable+0x26>
 80a119a:	2c01      	cmp	r4, #1
 80a119c:	d9f6      	bls.n	80a118c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a119e:	f7ff fec3 	bl	80a0f28 <_Z22__fetch_global_Serial1v>
 80a11a2:	f7ff febd 	bl	80a0f20 <_ZN11USARTSerial9isEnabledEv>
 80a11a6:	b118      	cbz	r0, 80a11b0 <pinAvailable+0x38>
 80a11a8:	f1a4 0312 	sub.w	r3, r4, #18
 80a11ac:	2b01      	cmp	r3, #1
 80a11ae:	d9ed      	bls.n	80a118c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a11b0:	2c17      	cmp	r4, #23
 80a11b2:	bf8c      	ite	hi
 80a11b4:	2000      	movhi	r0, #0
 80a11b6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a11b8:	bd10      	pop	{r4, pc}
 80a11ba:	bf00      	nop
 80a11bc:	20000868 	.word	0x20000868

080a11c0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a11c0:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a11c2:	b538      	push	{r3, r4, r5, lr}
 80a11c4:	4604      	mov	r4, r0
 80a11c6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a11c8:	d80a      	bhi.n	80a11e0 <pinMode+0x20>
 80a11ca:	29ff      	cmp	r1, #255	; 0xff
 80a11cc:	d008      	beq.n	80a11e0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a11ce:	f7ff ffd3 	bl	80a1178 <pinAvailable>
 80a11d2:	b128      	cbz	r0, 80a11e0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a11d4:	4629      	mov	r1, r5
 80a11d6:	4620      	mov	r0, r4
}
 80a11d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a11dc:	f7ff b962 	b.w	80a04a4 <HAL_Pin_Mode>
 80a11e0:	bd38      	pop	{r3, r4, r5, pc}

080a11e2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a11e2:	b538      	push	{r3, r4, r5, lr}
 80a11e4:	4604      	mov	r4, r0
 80a11e6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a11e8:	f7ff f964 	bl	80a04b4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a11ec:	28ff      	cmp	r0, #255	; 0xff
 80a11ee:	d010      	beq.n	80a1212 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a11f0:	2806      	cmp	r0, #6
 80a11f2:	d804      	bhi.n	80a11fe <digitalWrite+0x1c>
 80a11f4:	234d      	movs	r3, #77	; 0x4d
 80a11f6:	fa23 f000 	lsr.w	r0, r3, r0
 80a11fa:	07c3      	lsls	r3, r0, #31
 80a11fc:	d409      	bmi.n	80a1212 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a11fe:	4620      	mov	r0, r4
 80a1200:	f7ff ffba 	bl	80a1178 <pinAvailable>
 80a1204:	b128      	cbz	r0, 80a1212 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1206:	4629      	mov	r1, r5
 80a1208:	4620      	mov	r0, r4
}
 80a120a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a120e:	f7ff b959 	b.w	80a04c4 <HAL_GPIO_Write>
 80a1212:	bd38      	pop	{r3, r4, r5, pc}

080a1214 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1214:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1216:	4c0c      	ldr	r4, [pc, #48]	; (80a1248 <_GLOBAL__sub_I_SPI+0x34>)
 80a1218:	4e0c      	ldr	r6, [pc, #48]	; (80a124c <_GLOBAL__sub_I_SPI+0x38>)
 80a121a:	4d0d      	ldr	r5, [pc, #52]	; (80a1250 <_GLOBAL__sub_I_SPI+0x3c>)
 80a121c:	2100      	movs	r1, #0
 80a121e:	4620      	mov	r0, r4
 80a1220:	f7ff fae6 	bl	80a07f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1224:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1226:	4c0b      	ldr	r4, [pc, #44]	; (80a1254 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1228:	4632      	mov	r2, r6
 80a122a:	4629      	mov	r1, r5
 80a122c:	f000 f84c 	bl	80a12c8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1230:	2101      	movs	r1, #1
 80a1232:	4620      	mov	r0, r4
 80a1234:	f7ff fadc 	bl	80a07f0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1238:	4632      	mov	r2, r6
 80a123a:	4629      	mov	r1, r5
 80a123c:	4620      	mov	r0, r4
 80a123e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1242:	f000 b841 	b.w	80a12c8 <__aeabi_atexit>
 80a1246:	bf00      	nop
 80a1248:	20000868 	.word	0x20000868
 80a124c:	20000370 	.word	0x20000370
 80a1250:	080a07e1 	.word	0x080a07e1
 80a1254:	20000878 	.word	0x20000878

080a1258 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1258:	b513      	push	{r0, r1, r4, lr}
 80a125a:	4c08      	ldr	r4, [pc, #32]	; (80a127c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a125c:	2300      	movs	r3, #0
 80a125e:	461a      	mov	r2, r3
 80a1260:	4619      	mov	r1, r3
 80a1262:	9300      	str	r3, [sp, #0]
 80a1264:	4620      	mov	r0, r4
 80a1266:	f7ff fd25 	bl	80a0cb4 <_ZN9IPAddressC1Ehhhh>
 80a126a:	4620      	mov	r0, r4
 80a126c:	4a04      	ldr	r2, [pc, #16]	; (80a1280 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a126e:	4905      	ldr	r1, [pc, #20]	; (80a1284 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1270:	b002      	add	sp, #8
 80a1272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1276:	f000 b827 	b.w	80a12c8 <__aeabi_atexit>
 80a127a:	bf00      	nop
 80a127c:	2000088c 	.word	0x2000088c
 80a1280:	20000370 	.word	0x20000370
 80a1284:	080a0c05 	.word	0x080a0c05

080a1288 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1288:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a128a:	4d0b      	ldr	r5, [pc, #44]	; (80a12b8 <_Z19__fetch_global_Wirev+0x30>)
 80a128c:	6829      	ldr	r1, [r5, #0]
 80a128e:	f011 0401 	ands.w	r4, r1, #1
 80a1292:	d10f      	bne.n	80a12b4 <_Z19__fetch_global_Wirev+0x2c>
 80a1294:	4628      	mov	r0, r5
 80a1296:	f7fe ff04 	bl	80a00a2 <__cxa_guard_acquire>
 80a129a:	b158      	cbz	r0, 80a12b4 <_Z19__fetch_global_Wirev+0x2c>
 80a129c:	4621      	mov	r1, r4
 80a129e:	4807      	ldr	r0, [pc, #28]	; (80a12bc <_Z19__fetch_global_Wirev+0x34>)
 80a12a0:	f7ff fe94 	bl	80a0fcc <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a12a4:	4628      	mov	r0, r5
 80a12a6:	f7fe ff01 	bl	80a00ac <__cxa_guard_release>
 80a12aa:	4a05      	ldr	r2, [pc, #20]	; (80a12c0 <_Z19__fetch_global_Wirev+0x38>)
 80a12ac:	4905      	ldr	r1, [pc, #20]	; (80a12c4 <_Z19__fetch_global_Wirev+0x3c>)
 80a12ae:	4803      	ldr	r0, [pc, #12]	; (80a12bc <_Z19__fetch_global_Wirev+0x34>)
 80a12b0:	f000 f80a 	bl	80a12c8 <__aeabi_atexit>
	return wire;
}
 80a12b4:	4801      	ldr	r0, [pc, #4]	; (80a12bc <_Z19__fetch_global_Wirev+0x34>)
 80a12b6:	bd38      	pop	{r3, r4, r5, pc}
 80a12b8:	200008a4 	.word	0x200008a4
 80a12bc:	200008a8 	.word	0x200008a8
 80a12c0:	20000370 	.word	0x20000370
 80a12c4:	080a0f75 	.word	0x080a0f75

080a12c8 <__aeabi_atexit>:
 80a12c8:	460b      	mov	r3, r1
 80a12ca:	4601      	mov	r1, r0
 80a12cc:	4618      	mov	r0, r3
 80a12ce:	f000 bdbf 	b.w	80a1e50 <__cxa_atexit>

080a12d2 <_ZdlPvj>:
 80a12d2:	f7fe bee4 	b.w	80a009e <_ZdlPv>

080a12d6 <_ZSt19__throw_logic_errorPKc>:
 80a12d6:	b508      	push	{r3, lr}
 80a12d8:	f7ff fa72 	bl	80a07c0 <abort>

080a12dc <_ZSt20__throw_length_errorPKc>:
 80a12dc:	b508      	push	{r3, lr}
 80a12de:	f7ff fa6f 	bl	80a07c0 <abort>

080a12e2 <_ZSt24__throw_out_of_range_fmtPKcz>:
 80a12e2:	b40f      	push	{r0, r1, r2, r3}
 80a12e4:	b580      	push	{r7, lr}
 80a12e6:	b082      	sub	sp, #8
 80a12e8:	af00      	add	r7, sp, #0
 80a12ea:	f107 0410 	add.w	r4, r7, #16
 80a12ee:	f854 5b04 	ldr.w	r5, [r4], #4
 80a12f2:	4628      	mov	r0, r5
 80a12f4:	f000 fe36 	bl	80a1f64 <strlen>
 80a12f8:	f200 230e 	addw	r3, r0, #526	; 0x20e
 80a12fc:	f023 0307 	bic.w	r3, r3, #7
 80a1300:	ebad 0d03 	sub.w	sp, sp, r3
 80a1304:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80a1308:	4623      	mov	r3, r4
 80a130a:	462a      	mov	r2, r5
 80a130c:	4668      	mov	r0, sp
 80a130e:	607c      	str	r4, [r7, #4]
 80a1310:	f000 fa28 	bl	80a1764 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80a1314:	f7ff fa54 	bl	80a07c0 <abort>

080a1318 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 80a1318:	b10a      	cbz	r2, 80a131e <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 80a131a:	f000 bda7 	b.w	80a1e6c <memcmp>
 80a131e:	4610      	mov	r0, r2
 80a1320:	4770      	bx	lr

080a1322 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80a1322:	b10a      	cbz	r2, 80a1328 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80a1324:	f000 bdb1 	b.w	80a1e8a <memcpy>
 80a1328:	4770      	bx	lr
	...

080a132c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80a132c:	b508      	push	{r3, lr}
 80a132e:	680b      	ldr	r3, [r1, #0]
 80a1330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a1334:	d302      	bcc.n	80a133c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80a1336:	480a      	ldr	r0, [pc, #40]	; (80a1360 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x34>)
 80a1338:	f7ff ffd0 	bl	80a12dc <_ZSt20__throw_length_errorPKc>
 80a133c:	4293      	cmp	r3, r2
 80a133e:	d909      	bls.n	80a1354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x28>
 80a1340:	0052      	lsls	r2, r2, #1
 80a1342:	4293      	cmp	r3, r2
 80a1344:	d206      	bcs.n	80a1354 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x28>
 80a1346:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a134a:	bf2a      	itet	cs
 80a134c:	f06f 4300 	mvncs.w	r3, #2147483648	; 0x80000000
 80a1350:	600a      	strcc	r2, [r1, #0]
 80a1352:	600b      	strcs	r3, [r1, #0]
 80a1354:	6808      	ldr	r0, [r1, #0]
 80a1356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a135a:	3001      	adds	r0, #1
 80a135c:	f7fe be9d 	b.w	80a009a <_Znwj>
 80a1360:	080a230c 	.word	0x080a230c

080a1364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80a1364:	4603      	mov	r3, r0
 80a1366:	f853 0b08 	ldr.w	r0, [r3], #8
 80a136a:	4298      	cmp	r0, r3
 80a136c:	d001      	beq.n	80a1372 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80a136e:	f7fe be96 	b.w	80a009e <_ZdlPv>
 80a1372:	4770      	bx	lr

080a1374 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80a1374:	6843      	ldr	r3, [r0, #4]
 80a1376:	b510      	push	{r4, lr}
 80a1378:	4299      	cmp	r1, r3
 80a137a:	4614      	mov	r4, r2
 80a137c:	d904      	bls.n	80a1388 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 80a137e:	460a      	mov	r2, r1
 80a1380:	4802      	ldr	r0, [pc, #8]	; (80a138c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80a1382:	4621      	mov	r1, r4
 80a1384:	f7ff ffad 	bl	80a12e2 <_ZSt24__throw_out_of_range_fmtPKcz>
 80a1388:	4608      	mov	r0, r1
 80a138a:	bd10      	pop	{r4, pc}
 80a138c:	080a2324 	.word	0x080a2324

080a1390 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80a1390:	b510      	push	{r4, lr}
 80a1392:	6844      	ldr	r4, [r0, #4]
 80a1394:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80a1398:	1b00      	subs	r0, r0, r4
 80a139a:	4401      	add	r1, r0
 80a139c:	4291      	cmp	r1, r2
 80a139e:	d202      	bcs.n	80a13a6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 80a13a0:	4618      	mov	r0, r3
 80a13a2:	f7ff ff9b 	bl	80a12dc <_ZSt20__throw_length_errorPKc>
 80a13a6:	bd10      	pop	{r4, pc}

080a13a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 80a13a8:	6802      	ldr	r2, [r0, #0]
 80a13aa:	428a      	cmp	r2, r1
 80a13ac:	d806      	bhi.n	80a13bc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 80a13ae:	6843      	ldr	r3, [r0, #4]
 80a13b0:	18d0      	adds	r0, r2, r3
 80a13b2:	4281      	cmp	r1, r0
 80a13b4:	bf94      	ite	ls
 80a13b6:	2000      	movls	r0, #0
 80a13b8:	2001      	movhi	r0, #1
 80a13ba:	4770      	bx	lr
 80a13bc:	2001      	movs	r0, #1
 80a13be:	4770      	bx	lr

080a13c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80a13c0:	2a01      	cmp	r2, #1
 80a13c2:	b510      	push	{r4, lr}
 80a13c4:	d102      	bne.n	80a13cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80a13c6:	780a      	ldrb	r2, [r1, #0]
 80a13c8:	7002      	strb	r2, [r0, #0]
 80a13ca:	bd10      	pop	{r4, pc}
 80a13cc:	f7ff ffa9 	bl	80a1322 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80a13d0:	bd10      	pop	{r4, pc}

080a13d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 80a13d2:	2a01      	cmp	r2, #1
 80a13d4:	b430      	push	{r4, r5}
 80a13d6:	d102      	bne.n	80a13de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xc>
 80a13d8:	780b      	ldrb	r3, [r1, #0]
 80a13da:	7003      	strb	r3, [r0, #0]
 80a13dc:	e003      	b.n	80a13e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0x14>
 80a13de:	b112      	cbz	r2, 80a13e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0x14>
 80a13e0:	bc30      	pop	{r4, r5}
 80a13e2:	f000 bd5d 	b.w	80a1ea0 <memmove>
 80a13e6:	bc30      	pop	{r4, r5}
 80a13e8:	4770      	bx	lr

080a13ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80a13ea:	b508      	push	{r3, lr}
 80a13ec:	1a52      	subs	r2, r2, r1
 80a13ee:	f7ff ffe7 	bl	80a13c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80a13f2:	bd08      	pop	{r3, pc}

080a13f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80a13f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a13f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a13fa:	4699      	mov	r9, r3
 80a13fc:	6843      	ldr	r3, [r0, #4]
 80a13fe:	4617      	mov	r7, r2
 80a1400:	ebc1 0803 	rsb	r8, r1, r3
 80a1404:	442b      	add	r3, r5
 80a1406:	1a9b      	subs	r3, r3, r2
 80a1408:	ebc2 0808 	rsb	r8, r2, r8
 80a140c:	6802      	ldr	r2, [r0, #0]
 80a140e:	9301      	str	r3, [sp, #4]
 80a1410:	f100 0308 	add.w	r3, r0, #8
 80a1414:	429a      	cmp	r2, r3
 80a1416:	460e      	mov	r6, r1
 80a1418:	bf14      	ite	ne
 80a141a:	6882      	ldrne	r2, [r0, #8]
 80a141c:	220f      	moveq	r2, #15
 80a141e:	a901      	add	r1, sp, #4
 80a1420:	4604      	mov	r4, r0
 80a1422:	f7ff ff83 	bl	80a132c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80a1426:	4682      	mov	sl, r0
 80a1428:	b11e      	cbz	r6, 80a1432 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80a142a:	4632      	mov	r2, r6
 80a142c:	6821      	ldr	r1, [r4, #0]
 80a142e:	f7ff ffc7 	bl	80a13c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80a1432:	f1b9 0f00 	cmp.w	r9, #0
 80a1436:	d006      	beq.n	80a1446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x52>
 80a1438:	b12d      	cbz	r5, 80a1446 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x52>
 80a143a:	462a      	mov	r2, r5
 80a143c:	4649      	mov	r1, r9
 80a143e:	eb0a 0006 	add.w	r0, sl, r6
 80a1442:	f7ff ffbd 	bl	80a13c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80a1446:	f1b8 0f00 	cmp.w	r8, #0
 80a144a:	d007      	beq.n	80a145c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x68>
 80a144c:	6821      	ldr	r1, [r4, #0]
 80a144e:	4437      	add	r7, r6
 80a1450:	1970      	adds	r0, r6, r5
 80a1452:	4642      	mov	r2, r8
 80a1454:	4439      	add	r1, r7
 80a1456:	4450      	add	r0, sl
 80a1458:	f7ff ffb2 	bl	80a13c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80a145c:	4620      	mov	r0, r4
 80a145e:	f7ff ff81 	bl	80a1364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80a1462:	9b01      	ldr	r3, [sp, #4]
 80a1464:	f8c4 a000 	str.w	sl, [r4]
 80a1468:	60a3      	str	r3, [r4, #8]
 80a146a:	b002      	add	sp, #8
 80a146c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a1470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80a1470:	b510      	push	{r4, lr}
 80a1472:	4604      	mov	r4, r0
 80a1474:	f7ff ff76 	bl	80a1364 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80a1478:	4620      	mov	r0, r4
 80a147a:	bd10      	pop	{r4, pc}

080a147c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 80a147c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a1480:	4616      	mov	r6, r2
 80a1482:	4681      	mov	r9, r0
 80a1484:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a1486:	460f      	mov	r7, r1
 80a1488:	4698      	mov	r8, r3
 80a148a:	4631      	mov	r1, r6
 80a148c:	4b37      	ldr	r3, [pc, #220]	; (80a156c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 80a148e:	4622      	mov	r2, r4
 80a1490:	f7ff ff7e 	bl	80a1390 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80a1494:	464b      	mov	r3, r9
 80a1496:	f853 5b08 	ldr.w	r5, [r3], #8
 80a149a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a149e:	429d      	cmp	r5, r3
 80a14a0:	eb04 0a01 	add.w	sl, r4, r1
 80a14a4:	bf18      	it	ne
 80a14a6:	f8d9 3008 	ldrne.w	r3, [r9, #8]
 80a14aa:	ebc6 0a0a 	rsb	sl, r6, sl
 80a14ae:	bf08      	it	eq
 80a14b0:	230f      	moveq	r3, #15
 80a14b2:	4553      	cmp	r3, sl
 80a14b4:	d330      	bcc.n	80a1518 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x9c>
 80a14b6:	1bc9      	subs	r1, r1, r7
 80a14b8:	443d      	add	r5, r7
 80a14ba:	4648      	mov	r0, r9
 80a14bc:	1b8f      	subs	r7, r1, r6
 80a14be:	4641      	mov	r1, r8
 80a14c0:	f7ff ff72 	bl	80a13a8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80a14c4:	b158      	cbz	r0, 80a14de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 80a14c6:	b137      	cbz	r7, 80a14d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80a14c8:	42a6      	cmp	r6, r4
 80a14ca:	d004      	beq.n	80a14d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80a14cc:	463a      	mov	r2, r7
 80a14ce:	19a9      	adds	r1, r5, r6
 80a14d0:	1928      	adds	r0, r5, r4
 80a14d2:	f7ff ff7e 	bl	80a13d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80a14d6:	b3ec      	cbz	r4, 80a1554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80a14d8:	4622      	mov	r2, r4
 80a14da:	4641      	mov	r1, r8
 80a14dc:	e00d      	b.n	80a14fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 80a14de:	b3b4      	cbz	r4, 80a154e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd2>
 80a14e0:	42a6      	cmp	r6, r4
 80a14e2:	d321      	bcc.n	80a1528 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xac>
 80a14e4:	4622      	mov	r2, r4
 80a14e6:	4641      	mov	r1, r8
 80a14e8:	4628      	mov	r0, r5
 80a14ea:	f7ff ff72 	bl	80a13d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80a14ee:	e02e      	b.n	80a154e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd2>
 80a14f0:	4598      	cmp	r8, r3
 80a14f2:	d304      	bcc.n	80a14fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x82>
 80a14f4:	4622      	mov	r2, r4
 80a14f6:	1ba1      	subs	r1, r4, r6
 80a14f8:	4441      	add	r1, r8
 80a14fa:	4628      	mov	r0, r5
 80a14fc:	e009      	b.n	80a1512 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 80a14fe:	ebc8 0603 	rsb	r6, r8, r3
 80a1502:	4632      	mov	r2, r6
 80a1504:	4641      	mov	r1, r8
 80a1506:	4628      	mov	r0, r5
 80a1508:	f7ff ff63 	bl	80a13d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80a150c:	1ba2      	subs	r2, r4, r6
 80a150e:	1929      	adds	r1, r5, r4
 80a1510:	19a8      	adds	r0, r5, r6
 80a1512:	f7ff ff55 	bl	80a13c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80a1516:	e01d      	b.n	80a1554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80a1518:	9400      	str	r4, [sp, #0]
 80a151a:	4643      	mov	r3, r8
 80a151c:	4632      	mov	r2, r6
 80a151e:	4639      	mov	r1, r7
 80a1520:	4648      	mov	r0, r9
 80a1522:	f7ff ff67 	bl	80a13f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 80a1526:	e015      	b.n	80a1554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80a1528:	b137      	cbz	r7, 80a1538 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 80a152a:	463a      	mov	r2, r7
 80a152c:	19a9      	adds	r1, r5, r6
 80a152e:	1928      	adds	r0, r5, r4
 80a1530:	f7ff ff4f 	bl	80a13d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80a1534:	42a6      	cmp	r6, r4
 80a1536:	d20d      	bcs.n	80a1554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80a1538:	19ab      	adds	r3, r5, r6
 80a153a:	eb08 0204 	add.w	r2, r8, r4
 80a153e:	4293      	cmp	r3, r2
 80a1540:	d3d6      	bcc.n	80a14f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x74>
 80a1542:	4622      	mov	r2, r4
 80a1544:	4641      	mov	r1, r8
 80a1546:	4628      	mov	r0, r5
 80a1548:	f7ff ff43 	bl	80a13d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80a154c:	e002      	b.n	80a1554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80a154e:	b10f      	cbz	r7, 80a1554 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 80a1550:	42a6      	cmp	r6, r4
 80a1552:	d1ea      	bne.n	80a152a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xae>
 80a1554:	4648      	mov	r0, r9
 80a1556:	f8d9 3000 	ldr.w	r3, [r9]
 80a155a:	2200      	movs	r2, #0
 80a155c:	f8c9 a004 	str.w	sl, [r9, #4]
 80a1560:	f803 200a 	strb.w	r2, [r3, sl]
 80a1564:	b002      	add	sp, #8
 80a1566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a156a:	bf00      	nop
 80a156c:	080a23fb 	.word	0x080a23fb

080a1570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 80a1570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1572:	4604      	mov	r4, r0
 80a1574:	4608      	mov	r0, r1
 80a1576:	460d      	mov	r5, r1
 80a1578:	f000 fcf4 	bl	80a1f64 <strlen>
 80a157c:	462b      	mov	r3, r5
 80a157e:	9000      	str	r0, [sp, #0]
 80a1580:	6862      	ldr	r2, [r4, #4]
 80a1582:	2100      	movs	r1, #0
 80a1584:	4620      	mov	r0, r4
 80a1586:	f7ff ff79 	bl	80a147c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 80a158a:	b003      	add	sp, #12
 80a158c:	bd30      	pop	{r4, r5, pc}

080a158e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80a158e:	b508      	push	{r3, lr}
 80a1590:	f7ff ffee 	bl	80a1570 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80a1594:	bd08      	pop	{r3, pc}

080a1596 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>:
 80a1596:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a159a:	4614      	mov	r4, r2
 80a159c:	4688      	mov	r8, r1
 80a159e:	6842      	ldr	r2, [r0, #4]
 80a15a0:	b933      	cbnz	r3, 80a15b0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x1a>
 80a15a2:	42a2      	cmp	r2, r4
 80a15a4:	bf2c      	ite	cs
 80a15a6:	4620      	movcs	r0, r4
 80a15a8:	f04f 30ff 	movcc.w	r0, #4294967295
 80a15ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a15b0:	4293      	cmp	r3, r2
 80a15b2:	d816      	bhi.n	80a15e2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x4c>
 80a15b4:	6806      	ldr	r6, [r0, #0]
 80a15b6:	1ad7      	subs	r7, r2, r3
 80a15b8:	4426      	add	r6, r4
 80a15ba:	1e5d      	subs	r5, r3, #1
 80a15bc:	f101 0901 	add.w	r9, r1, #1
 80a15c0:	42a7      	cmp	r7, r4
 80a15c2:	d30e      	bcc.n	80a15e2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x4c>
 80a15c4:	f816 3b01 	ldrb.w	r3, [r6], #1
 80a15c8:	f898 2000 	ldrb.w	r2, [r8]
 80a15cc:	429a      	cmp	r2, r3
 80a15ce:	d10c      	bne.n	80a15ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
 80a15d0:	462a      	mov	r2, r5
 80a15d2:	4649      	mov	r1, r9
 80a15d4:	4630      	mov	r0, r6
 80a15d6:	f7ff fe9f 	bl	80a1318 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80a15da:	b930      	cbnz	r0, 80a15ea <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x54>
 80a15dc:	4620      	mov	r0, r4
 80a15de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a15e2:	f04f 30ff 	mov.w	r0, #4294967295
 80a15e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a15ea:	3401      	adds	r4, #1
 80a15ec:	e7e8      	b.n	80a15c0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj+0x2a>

080a15ee <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findERKS4_j>:
 80a15ee:	b508      	push	{r3, lr}
 80a15f0:	c90a      	ldmia	r1, {r1, r3}
 80a15f2:	f7ff ffd0 	bl	80a1596 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEPKcjj>
 80a15f6:	bd08      	pop	{r3, pc}

080a15f8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 80a15f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a15fa:	6845      	ldr	r5, [r0, #4]
 80a15fc:	4606      	mov	r6, r0
 80a15fe:	4608      	mov	r0, r1
 80a1600:	460f      	mov	r7, r1
 80a1602:	f000 fcaf 	bl	80a1f64 <strlen>
 80a1606:	4285      	cmp	r5, r0
 80a1608:	4604      	mov	r4, r0
 80a160a:	462a      	mov	r2, r5
 80a160c:	4639      	mov	r1, r7
 80a160e:	bf28      	it	cs
 80a1610:	4602      	movcs	r2, r0
 80a1612:	6830      	ldr	r0, [r6, #0]
 80a1614:	f7ff fe80 	bl	80a1318 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80a1618:	b900      	cbnz	r0, 80a161c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 80a161a:	1b28      	subs	r0, r5, r4
 80a161c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1620 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80a1620:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a1622:	4604      	mov	r4, r0
 80a1624:	4616      	mov	r6, r2
 80a1626:	460d      	mov	r5, r1
 80a1628:	b901      	cbnz	r1, 80a162c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc>
 80a162a:	b9ba      	cbnz	r2, 80a165c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x3c>
 80a162c:	1b73      	subs	r3, r6, r5
 80a162e:	2b0f      	cmp	r3, #15
 80a1630:	9301      	str	r3, [sp, #4]
 80a1632:	d907      	bls.n	80a1644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x24>
 80a1634:	2200      	movs	r2, #0
 80a1636:	a901      	add	r1, sp, #4
 80a1638:	4620      	mov	r0, r4
 80a163a:	f7ff fe77 	bl	80a132c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80a163e:	9b01      	ldr	r3, [sp, #4]
 80a1640:	6020      	str	r0, [r4, #0]
 80a1642:	60a3      	str	r3, [r4, #8]
 80a1644:	4632      	mov	r2, r6
 80a1646:	4629      	mov	r1, r5
 80a1648:	6820      	ldr	r0, [r4, #0]
 80a164a:	f7ff fece 	bl	80a13ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80a164e:	9b01      	ldr	r3, [sp, #4]
 80a1650:	6822      	ldr	r2, [r4, #0]
 80a1652:	2100      	movs	r1, #0
 80a1654:	6063      	str	r3, [r4, #4]
 80a1656:	54d1      	strb	r1, [r2, r3]
 80a1658:	b002      	add	sp, #8
 80a165a:	bd70      	pop	{r4, r5, r6, pc}
 80a165c:	4801      	ldr	r0, [pc, #4]	; (80a1664 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80a165e:	f7ff fe3a 	bl	80a12d6 <_ZSt19__throw_logic_errorPKc>
 80a1662:	bf00      	nop
 80a1664:	080a2467 	.word	0x080a2467

080a1668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 80a1668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a166a:	460d      	mov	r5, r1
 80a166c:	4616      	mov	r6, r2
 80a166e:	461f      	mov	r7, r3
 80a1670:	f100 0308 	add.w	r3, r0, #8
 80a1674:	4604      	mov	r4, r0
 80a1676:	6003      	str	r3, [r0, #0]
 80a1678:	4631      	mov	r1, r6
 80a167a:	4a09      	ldr	r2, [pc, #36]	; (80a16a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x38>)
 80a167c:	4628      	mov	r0, r5
 80a167e:	f7ff fe79 	bl	80a1374 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80a1682:	6829      	ldr	r1, [r5, #0]
 80a1684:	686a      	ldr	r2, [r5, #4]
 80a1686:	4401      	add	r1, r0
 80a1688:	1b92      	subs	r2, r2, r6
 80a168a:	4620      	mov	r0, r4
 80a168c:	f04f 0300 	mov.w	r3, #0
 80a1690:	42ba      	cmp	r2, r7
 80a1692:	bf94      	ite	ls
 80a1694:	188a      	addls	r2, r1, r2
 80a1696:	19ca      	addhi	r2, r1, r7
 80a1698:	f7ff ffc2 	bl	80a1620 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80a169c:	4620      	mov	r0, r4
 80a169e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a16a0:	080a2491 	.word	0x080a2491

080a16a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 80a16a4:	b570      	push	{r4, r5, r6, lr}
 80a16a6:	460d      	mov	r5, r1
 80a16a8:	4604      	mov	r4, r0
 80a16aa:	4611      	mov	r1, r2
 80a16ac:	4628      	mov	r0, r5
 80a16ae:	4a06      	ldr	r2, [pc, #24]	; (80a16c8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 80a16b0:	461e      	mov	r6, r3
 80a16b2:	f7ff fe5f 	bl	80a1374 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80a16b6:	4633      	mov	r3, r6
 80a16b8:	4602      	mov	r2, r0
 80a16ba:	4629      	mov	r1, r5
 80a16bc:	4620      	mov	r0, r4
 80a16be:	f7ff ffd3 	bl	80a1668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 80a16c2:	4620      	mov	r0, r4
 80a16c4:	bd70      	pop	{r4, r5, r6, pc}
 80a16c6:	bf00      	nop
 80a16c8:	080a24ac 	.word	0x080a24ac

080a16cc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80a16cc:	4680      	mov	r8, r0
 80a16ce:	b580      	push	{r7, lr}
 80a16d0:	b09c      	sub	sp, #112	; 0x70
 80a16d2:	af00      	add	r7, sp, #0
 80a16d4:	1a0e      	subs	r6, r1, r0
 80a16d6:	226c      	movs	r2, #108	; 0x6c
 80a16d8:	490e      	ldr	r1, [pc, #56]	; (80a1714 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80a16da:	1d38      	adds	r0, r7, #4
 80a16dc:	f000 fbd5 	bl	80a1e8a <memcpy>
 80a16e0:	f106 037a 	add.w	r3, r6, #122	; 0x7a
 80a16e4:	f023 0307 	bic.w	r3, r3, #7
 80a16e8:	ebad 0d03 	sub.w	sp, sp, r3
 80a16ec:	226b      	movs	r2, #107	; 0x6b
 80a16ee:	1d39      	adds	r1, r7, #4
 80a16f0:	4668      	mov	r0, sp
 80a16f2:	f000 fbca 	bl	80a1e8a <memcpy>
 80a16f6:	1c75      	adds	r5, r6, #1
 80a16f8:	4632      	mov	r2, r6
 80a16fa:	4641      	mov	r1, r8
 80a16fc:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
 80a1700:	f000 fbc3 	bl	80a1e8a <memcpy>
 80a1704:	446d      	add	r5, sp
 80a1706:	2300      	movs	r3, #0
 80a1708:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
 80a170c:	4668      	mov	r0, sp
 80a170e:	f7ff fde2 	bl	80a12d6 <_ZSt19__throw_logic_errorPKc>
 80a1712:	bf00      	nop
 80a1714:	080a24d0 	.word	0x080a24d0

080a1718 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80a1718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a171c:	b084      	sub	sp, #16
 80a171e:	2301      	movs	r3, #1
 80a1720:	af04      	add	r7, sp, #16
 80a1722:	b088      	sub	sp, #32
 80a1724:	9302      	str	r3, [sp, #8]
 80a1726:	2302      	movs	r3, #2
 80a1728:	9301      	str	r3, [sp, #4]
 80a172a:	4b0d      	ldr	r3, [pc, #52]	; (80a1760 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x48>)
 80a172c:	4606      	mov	r6, r0
 80a172e:	681b      	ldr	r3, [r3, #0]
 80a1730:	a80a      	add	r0, sp, #40	; 0x28
 80a1732:	9300      	str	r3, [sp, #0]
 80a1734:	2300      	movs	r3, #0
 80a1736:	4688      	mov	r8, r1
 80a1738:	f000 f8fa 	bl	80a1930 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb>
 80a173c:	4540      	cmp	r0, r8
 80a173e:	ad04      	add	r5, sp, #16
 80a1740:	4604      	mov	r4, r0
 80a1742:	d807      	bhi.n	80a1754 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3c>
 80a1744:	f1c0 0118 	rsb	r1, r0, #24
 80a1748:	4602      	mov	r2, r0
 80a174a:	4429      	add	r1, r5
 80a174c:	4630      	mov	r0, r6
 80a174e:	f000 fb9c 	bl	80a1e8a <memcpy>
 80a1752:	e001      	b.n	80a1758 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x40>
 80a1754:	f04f 34ff 	mov.w	r4, #4294967295
 80a1758:	4620      	mov	r0, r4
 80a175a:	46bd      	mov	sp, r7
 80a175c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1760:	20000304 	.word	0x20000304

080a1764 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80a1764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1768:	4606      	mov	r6, r0
 80a176a:	4615      	mov	r5, r2
 80a176c:	4604      	mov	r4, r0
 80a176e:	3901      	subs	r1, #1
 80a1770:	1847      	adds	r7, r0, r1
 80a1772:	782a      	ldrb	r2, [r5, #0]
 80a1774:	b3a2      	cbz	r2, 80a17e0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7c>
 80a1776:	42bc      	cmp	r4, r7
 80a1778:	d22e      	bcs.n	80a17d8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 80a177a:	2a25      	cmp	r2, #37	; 0x25
 80a177c:	d123      	bne.n	80a17c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
 80a177e:	786a      	ldrb	r2, [r5, #1]
 80a1780:	2a73      	cmp	r2, #115	; 0x73
 80a1782:	d005      	beq.n	80a1790 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80a1784:	2a7a      	cmp	r2, #122	; 0x7a
 80a1786:	d00e      	beq.n	80a17a6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x42>
 80a1788:	2a25      	cmp	r2, #37	; 0x25
 80a178a:	d11c      	bne.n	80a17c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
 80a178c:	3501      	adds	r5, #1
 80a178e:	e01a      	b.n	80a17c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
 80a1790:	1d19      	adds	r1, r3, #4
 80a1792:	681b      	ldr	r3, [r3, #0]
 80a1794:	3b01      	subs	r3, #1
 80a1796:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80a179a:	b1d2      	cbz	r2, 80a17d2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80a179c:	42bc      	cmp	r4, r7
 80a179e:	d01b      	beq.n	80a17d8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 80a17a0:	f804 2b01 	strb.w	r2, [r4], #1
 80a17a4:	e7f7      	b.n	80a1796 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x32>
 80a17a6:	78aa      	ldrb	r2, [r5, #2]
 80a17a8:	2a75      	cmp	r2, #117	; 0x75
 80a17aa:	d10c      	bne.n	80a17c6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
 80a17ac:	681a      	ldr	r2, [r3, #0]
 80a17ae:	1b39      	subs	r1, r7, r4
 80a17b0:	4620      	mov	r0, r4
 80a17b2:	f103 0804 	add.w	r8, r3, #4
 80a17b6:	f7ff ffaf 	bl	80a1718 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80a17ba:	2800      	cmp	r0, #0
 80a17bc:	dd0c      	ble.n	80a17d8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 80a17be:	4404      	add	r4, r0
 80a17c0:	3503      	adds	r5, #3
 80a17c2:	4643      	mov	r3, r8
 80a17c4:	e7d5      	b.n	80a1772 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80a17c6:	782a      	ldrb	r2, [r5, #0]
 80a17c8:	3401      	adds	r4, #1
 80a17ca:	f804 2c01 	strb.w	r2, [r4, #-1]
 80a17ce:	3501      	adds	r5, #1
 80a17d0:	e7cf      	b.n	80a1772 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80a17d2:	3502      	adds	r5, #2
 80a17d4:	460b      	mov	r3, r1
 80a17d6:	e7cc      	b.n	80a1772 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80a17d8:	4621      	mov	r1, r4
 80a17da:	4630      	mov	r0, r6
 80a17dc:	f7ff ff76 	bl	80a16cc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80a17e0:	7022      	strb	r2, [r4, #0]
 80a17e2:	1ba0      	subs	r0, r4, r6
 80a17e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a17e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a17e8:	4b18      	ldr	r3, [pc, #96]	; (80a184c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a17ea:	681a      	ldr	r2, [r3, #0]
 80a17ec:	07d1      	lsls	r1, r2, #31
 80a17ee:	bf5c      	itt	pl
 80a17f0:	2201      	movpl	r2, #1
 80a17f2:	601a      	strpl	r2, [r3, #0]
 80a17f4:	4b16      	ldr	r3, [pc, #88]	; (80a1850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a17f6:	681a      	ldr	r2, [r3, #0]
 80a17f8:	07d2      	lsls	r2, r2, #31
 80a17fa:	bf5c      	itt	pl
 80a17fc:	2201      	movpl	r2, #1
 80a17fe:	601a      	strpl	r2, [r3, #0]
 80a1800:	4b14      	ldr	r3, [pc, #80]	; (80a1854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1802:	681a      	ldr	r2, [r3, #0]
 80a1804:	07d0      	lsls	r0, r2, #31
 80a1806:	bf5c      	itt	pl
 80a1808:	2201      	movpl	r2, #1
 80a180a:	601a      	strpl	r2, [r3, #0]
 80a180c:	4b12      	ldr	r3, [pc, #72]	; (80a1858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a180e:	681a      	ldr	r2, [r3, #0]
 80a1810:	07d1      	lsls	r1, r2, #31
 80a1812:	bf5c      	itt	pl
 80a1814:	2201      	movpl	r2, #1
 80a1816:	601a      	strpl	r2, [r3, #0]
 80a1818:	4b10      	ldr	r3, [pc, #64]	; (80a185c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a181a:	681a      	ldr	r2, [r3, #0]
 80a181c:	07d2      	lsls	r2, r2, #31
 80a181e:	bf5c      	itt	pl
 80a1820:	2201      	movpl	r2, #1
 80a1822:	601a      	strpl	r2, [r3, #0]
 80a1824:	4b0e      	ldr	r3, [pc, #56]	; (80a1860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1826:	681a      	ldr	r2, [r3, #0]
 80a1828:	07d0      	lsls	r0, r2, #31
 80a182a:	bf5c      	itt	pl
 80a182c:	2201      	movpl	r2, #1
 80a182e:	601a      	strpl	r2, [r3, #0]
 80a1830:	4b0c      	ldr	r3, [pc, #48]	; (80a1864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1832:	681a      	ldr	r2, [r3, #0]
 80a1834:	07d1      	lsls	r1, r2, #31
 80a1836:	bf5c      	itt	pl
 80a1838:	2201      	movpl	r2, #1
 80a183a:	601a      	strpl	r2, [r3, #0]
 80a183c:	4b0a      	ldr	r3, [pc, #40]	; (80a1868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a183e:	681a      	ldr	r2, [r3, #0]
 80a1840:	07d2      	lsls	r2, r2, #31
 80a1842:	bf5c      	itt	pl
 80a1844:	2201      	movpl	r2, #1
 80a1846:	601a      	strpl	r2, [r3, #0]
 80a1848:	4770      	bx	lr
 80a184a:	bf00      	nop
 80a184c:	200008d8 	.word	0x200008d8
 80a1850:	200008d4 	.word	0x200008d4
 80a1854:	200008d0 	.word	0x200008d0
 80a1858:	200008cc 	.word	0x200008cc
 80a185c:	200008c8 	.word	0x200008c8
 80a1860:	200008c4 	.word	0x200008c4
 80a1864:	200008c0 	.word	0x200008c0
 80a1868:	200008bc 	.word	0x200008bc

080a186c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a186c:	4b24      	ldr	r3, [pc, #144]	; (80a1900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a186e:	681a      	ldr	r2, [r3, #0]
 80a1870:	07d0      	lsls	r0, r2, #31
 80a1872:	bf5c      	itt	pl
 80a1874:	2201      	movpl	r2, #1
 80a1876:	601a      	strpl	r2, [r3, #0]
 80a1878:	4b22      	ldr	r3, [pc, #136]	; (80a1904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a187a:	681a      	ldr	r2, [r3, #0]
 80a187c:	07d1      	lsls	r1, r2, #31
 80a187e:	bf5c      	itt	pl
 80a1880:	2201      	movpl	r2, #1
 80a1882:	601a      	strpl	r2, [r3, #0]
 80a1884:	4b20      	ldr	r3, [pc, #128]	; (80a1908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1886:	681a      	ldr	r2, [r3, #0]
 80a1888:	07d2      	lsls	r2, r2, #31
 80a188a:	bf5c      	itt	pl
 80a188c:	2201      	movpl	r2, #1
 80a188e:	601a      	strpl	r2, [r3, #0]
 80a1890:	4b1e      	ldr	r3, [pc, #120]	; (80a190c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1892:	681a      	ldr	r2, [r3, #0]
 80a1894:	07d0      	lsls	r0, r2, #31
 80a1896:	bf5c      	itt	pl
 80a1898:	2201      	movpl	r2, #1
 80a189a:	601a      	strpl	r2, [r3, #0]
 80a189c:	4b1c      	ldr	r3, [pc, #112]	; (80a1910 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a189e:	681a      	ldr	r2, [r3, #0]
 80a18a0:	07d1      	lsls	r1, r2, #31
 80a18a2:	bf5c      	itt	pl
 80a18a4:	2201      	movpl	r2, #1
 80a18a6:	601a      	strpl	r2, [r3, #0]
 80a18a8:	4b1a      	ldr	r3, [pc, #104]	; (80a1914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a18aa:	681a      	ldr	r2, [r3, #0]
 80a18ac:	07d2      	lsls	r2, r2, #31
 80a18ae:	bf5c      	itt	pl
 80a18b0:	2201      	movpl	r2, #1
 80a18b2:	601a      	strpl	r2, [r3, #0]
 80a18b4:	4b18      	ldr	r3, [pc, #96]	; (80a1918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a18b6:	681a      	ldr	r2, [r3, #0]
 80a18b8:	07d0      	lsls	r0, r2, #31
 80a18ba:	bf5c      	itt	pl
 80a18bc:	2201      	movpl	r2, #1
 80a18be:	601a      	strpl	r2, [r3, #0]
 80a18c0:	4b16      	ldr	r3, [pc, #88]	; (80a191c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a18c2:	681a      	ldr	r2, [r3, #0]
 80a18c4:	07d1      	lsls	r1, r2, #31
 80a18c6:	bf5c      	itt	pl
 80a18c8:	2201      	movpl	r2, #1
 80a18ca:	601a      	strpl	r2, [r3, #0]
 80a18cc:	4b14      	ldr	r3, [pc, #80]	; (80a1920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a18ce:	681a      	ldr	r2, [r3, #0]
 80a18d0:	07d2      	lsls	r2, r2, #31
 80a18d2:	bf5c      	itt	pl
 80a18d4:	2201      	movpl	r2, #1
 80a18d6:	601a      	strpl	r2, [r3, #0]
 80a18d8:	4b12      	ldr	r3, [pc, #72]	; (80a1924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a18da:	681a      	ldr	r2, [r3, #0]
 80a18dc:	07d0      	lsls	r0, r2, #31
 80a18de:	bf5c      	itt	pl
 80a18e0:	2201      	movpl	r2, #1
 80a18e2:	601a      	strpl	r2, [r3, #0]
 80a18e4:	4b10      	ldr	r3, [pc, #64]	; (80a1928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a18e6:	681a      	ldr	r2, [r3, #0]
 80a18e8:	07d1      	lsls	r1, r2, #31
 80a18ea:	bf5c      	itt	pl
 80a18ec:	2201      	movpl	r2, #1
 80a18ee:	601a      	strpl	r2, [r3, #0]
 80a18f0:	4b0e      	ldr	r3, [pc, #56]	; (80a192c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a18f2:	681a      	ldr	r2, [r3, #0]
 80a18f4:	07d2      	lsls	r2, r2, #31
 80a18f6:	bf5c      	itt	pl
 80a18f8:	2201      	movpl	r2, #1
 80a18fa:	601a      	strpl	r2, [r3, #0]
 80a18fc:	4770      	bx	lr
 80a18fe:	bf00      	nop
 80a1900:	20000908 	.word	0x20000908
 80a1904:	20000904 	.word	0x20000904
 80a1908:	20000900 	.word	0x20000900
 80a190c:	200008fc 	.word	0x200008fc
 80a1910:	200008f8 	.word	0x200008f8
 80a1914:	200008f4 	.word	0x200008f4
 80a1918:	200008f0 	.word	0x200008f0
 80a191c:	200008ec 	.word	0x200008ec
 80a1920:	200008e8 	.word	0x200008e8
 80a1924:	200008e4 	.word	0x200008e4
 80a1928:	200008e0 	.word	0x200008e0
 80a192c:	200008dc 	.word	0x200008dc

080a1930 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb>:
 80a1930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1934:	4614      	mov	r4, r2
 80a1936:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80a193a:	461d      	mov	r5, r3
 80a193c:	4607      	mov	r7, r0
 80a193e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a1942:	9b07      	ldr	r3, [sp, #28]
 80a1944:	b1b2      	cbz	r2, 80a1974 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x44>
 80a1946:	4606      	mov	r6, r0
 80a1948:	4620      	mov	r0, r4
 80a194a:	4629      	mov	r1, r5
 80a194c:	220a      	movs	r2, #10
 80a194e:	2300      	movs	r3, #0
 80a1950:	f000 f8e2 	bl	80a1b18 <__aeabi_uldivmod>
 80a1954:	4442      	add	r2, r8
 80a1956:	7913      	ldrb	r3, [r2, #4]
 80a1958:	4620      	mov	r0, r4
 80a195a:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80a195e:	4629      	mov	r1, r5
 80a1960:	2300      	movs	r3, #0
 80a1962:	220a      	movs	r2, #10
 80a1964:	f000 f8d8 	bl	80a1b18 <__aeabi_uldivmod>
 80a1968:	4604      	mov	r4, r0
 80a196a:	460d      	mov	r5, r1
 80a196c:	ea54 0305 	orrs.w	r3, r4, r5
 80a1970:	d1ea      	bne.n	80a1948 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x18>
 80a1972:	e029      	b.n	80a19c8 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x98>
 80a1974:	f003 024a 	and.w	r2, r3, #74	; 0x4a
 80a1978:	2a40      	cmp	r2, #64	; 0x40
 80a197a:	d110      	bne.n	80a199e <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x6e>
 80a197c:	4606      	mov	r6, r0
 80a197e:	f004 0307 	and.w	r3, r4, #7
 80a1982:	4443      	add	r3, r8
 80a1984:	791b      	ldrb	r3, [r3, #4]
 80a1986:	08ea      	lsrs	r2, r5, #3
 80a1988:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80a198c:	08e3      	lsrs	r3, r4, #3
 80a198e:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
 80a1992:	461c      	mov	r4, r3
 80a1994:	4615      	mov	r5, r2
 80a1996:	ea54 0305 	orrs.w	r3, r4, r5
 80a199a:	d1f0      	bne.n	80a197e <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x4e>
 80a199c:	e014      	b.n	80a19c8 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x98>
 80a199e:	4606      	mov	r6, r0
 80a19a0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80a19a4:	bf14      	ite	ne
 80a19a6:	2214      	movne	r2, #20
 80a19a8:	2204      	moveq	r2, #4
 80a19aa:	4442      	add	r2, r8
 80a19ac:	f004 030f 	and.w	r3, r4, #15
 80a19b0:	5cd3      	ldrb	r3, [r2, r3]
 80a19b2:	0929      	lsrs	r1, r5, #4
 80a19b4:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80a19b8:	0923      	lsrs	r3, r4, #4
 80a19ba:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80a19be:	461c      	mov	r4, r3
 80a19c0:	460d      	mov	r5, r1
 80a19c2:	ea54 0305 	orrs.w	r3, r4, r5
 80a19c6:	d1f1      	bne.n	80a19ac <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x7c>
 80a19c8:	1bb8      	subs	r0, r7, r6
 80a19ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a19d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a19d0:	4b24      	ldr	r3, [pc, #144]	; (80a1a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a19d2:	681a      	ldr	r2, [r3, #0]
 80a19d4:	07d0      	lsls	r0, r2, #31
 80a19d6:	bf5c      	itt	pl
 80a19d8:	2201      	movpl	r2, #1
 80a19da:	601a      	strpl	r2, [r3, #0]
 80a19dc:	4b22      	ldr	r3, [pc, #136]	; (80a1a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a19de:	681a      	ldr	r2, [r3, #0]
 80a19e0:	07d1      	lsls	r1, r2, #31
 80a19e2:	bf5c      	itt	pl
 80a19e4:	2201      	movpl	r2, #1
 80a19e6:	601a      	strpl	r2, [r3, #0]
 80a19e8:	4b20      	ldr	r3, [pc, #128]	; (80a1a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a19ea:	681a      	ldr	r2, [r3, #0]
 80a19ec:	07d2      	lsls	r2, r2, #31
 80a19ee:	bf5c      	itt	pl
 80a19f0:	2201      	movpl	r2, #1
 80a19f2:	601a      	strpl	r2, [r3, #0]
 80a19f4:	4b1e      	ldr	r3, [pc, #120]	; (80a1a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a19f6:	681a      	ldr	r2, [r3, #0]
 80a19f8:	07d0      	lsls	r0, r2, #31
 80a19fa:	bf5c      	itt	pl
 80a19fc:	2201      	movpl	r2, #1
 80a19fe:	601a      	strpl	r2, [r3, #0]
 80a1a00:	4b1c      	ldr	r3, [pc, #112]	; (80a1a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1a02:	681a      	ldr	r2, [r3, #0]
 80a1a04:	07d1      	lsls	r1, r2, #31
 80a1a06:	bf5c      	itt	pl
 80a1a08:	2201      	movpl	r2, #1
 80a1a0a:	601a      	strpl	r2, [r3, #0]
 80a1a0c:	4b1a      	ldr	r3, [pc, #104]	; (80a1a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1a0e:	681a      	ldr	r2, [r3, #0]
 80a1a10:	07d2      	lsls	r2, r2, #31
 80a1a12:	bf5c      	itt	pl
 80a1a14:	2201      	movpl	r2, #1
 80a1a16:	601a      	strpl	r2, [r3, #0]
 80a1a18:	4b18      	ldr	r3, [pc, #96]	; (80a1a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1a1a:	681a      	ldr	r2, [r3, #0]
 80a1a1c:	07d0      	lsls	r0, r2, #31
 80a1a1e:	bf5c      	itt	pl
 80a1a20:	2201      	movpl	r2, #1
 80a1a22:	601a      	strpl	r2, [r3, #0]
 80a1a24:	4b16      	ldr	r3, [pc, #88]	; (80a1a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1a26:	681a      	ldr	r2, [r3, #0]
 80a1a28:	07d1      	lsls	r1, r2, #31
 80a1a2a:	bf5c      	itt	pl
 80a1a2c:	2201      	movpl	r2, #1
 80a1a2e:	601a      	strpl	r2, [r3, #0]
 80a1a30:	4b14      	ldr	r3, [pc, #80]	; (80a1a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1a32:	681a      	ldr	r2, [r3, #0]
 80a1a34:	07d2      	lsls	r2, r2, #31
 80a1a36:	bf5c      	itt	pl
 80a1a38:	2201      	movpl	r2, #1
 80a1a3a:	601a      	strpl	r2, [r3, #0]
 80a1a3c:	4b12      	ldr	r3, [pc, #72]	; (80a1a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1a3e:	681a      	ldr	r2, [r3, #0]
 80a1a40:	07d0      	lsls	r0, r2, #31
 80a1a42:	bf5c      	itt	pl
 80a1a44:	2201      	movpl	r2, #1
 80a1a46:	601a      	strpl	r2, [r3, #0]
 80a1a48:	4b10      	ldr	r3, [pc, #64]	; (80a1a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1a4a:	681a      	ldr	r2, [r3, #0]
 80a1a4c:	07d1      	lsls	r1, r2, #31
 80a1a4e:	bf5c      	itt	pl
 80a1a50:	2201      	movpl	r2, #1
 80a1a52:	601a      	strpl	r2, [r3, #0]
 80a1a54:	4b0e      	ldr	r3, [pc, #56]	; (80a1a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1a56:	681a      	ldr	r2, [r3, #0]
 80a1a58:	07d2      	lsls	r2, r2, #31
 80a1a5a:	bf5c      	itt	pl
 80a1a5c:	2201      	movpl	r2, #1
 80a1a5e:	601a      	strpl	r2, [r3, #0]
 80a1a60:	4770      	bx	lr
 80a1a62:	bf00      	nop
 80a1a64:	20000938 	.word	0x20000938
 80a1a68:	20000934 	.word	0x20000934
 80a1a6c:	20000930 	.word	0x20000930
 80a1a70:	2000092c 	.word	0x2000092c
 80a1a74:	20000928 	.word	0x20000928
 80a1a78:	20000924 	.word	0x20000924
 80a1a7c:	20000920 	.word	0x20000920
 80a1a80:	2000091c 	.word	0x2000091c
 80a1a84:	20000918 	.word	0x20000918
 80a1a88:	20000914 	.word	0x20000914
 80a1a8c:	20000910 	.word	0x20000910
 80a1a90:	2000090c 	.word	0x2000090c

080a1a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1a94:	4b18      	ldr	r3, [pc, #96]	; (80a1af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1a96:	681a      	ldr	r2, [r3, #0]
 80a1a98:	07d1      	lsls	r1, r2, #31
 80a1a9a:	bf5c      	itt	pl
 80a1a9c:	2201      	movpl	r2, #1
 80a1a9e:	601a      	strpl	r2, [r3, #0]
 80a1aa0:	4b16      	ldr	r3, [pc, #88]	; (80a1afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1aa2:	681a      	ldr	r2, [r3, #0]
 80a1aa4:	07d2      	lsls	r2, r2, #31
 80a1aa6:	bf5c      	itt	pl
 80a1aa8:	2201      	movpl	r2, #1
 80a1aaa:	601a      	strpl	r2, [r3, #0]
 80a1aac:	4b14      	ldr	r3, [pc, #80]	; (80a1b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1aae:	681a      	ldr	r2, [r3, #0]
 80a1ab0:	07d0      	lsls	r0, r2, #31
 80a1ab2:	bf5c      	itt	pl
 80a1ab4:	2201      	movpl	r2, #1
 80a1ab6:	601a      	strpl	r2, [r3, #0]
 80a1ab8:	4b12      	ldr	r3, [pc, #72]	; (80a1b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1aba:	681a      	ldr	r2, [r3, #0]
 80a1abc:	07d1      	lsls	r1, r2, #31
 80a1abe:	bf5c      	itt	pl
 80a1ac0:	2201      	movpl	r2, #1
 80a1ac2:	601a      	strpl	r2, [r3, #0]
 80a1ac4:	4b10      	ldr	r3, [pc, #64]	; (80a1b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1ac6:	681a      	ldr	r2, [r3, #0]
 80a1ac8:	07d2      	lsls	r2, r2, #31
 80a1aca:	bf5c      	itt	pl
 80a1acc:	2201      	movpl	r2, #1
 80a1ace:	601a      	strpl	r2, [r3, #0]
 80a1ad0:	4b0e      	ldr	r3, [pc, #56]	; (80a1b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1ad2:	681a      	ldr	r2, [r3, #0]
 80a1ad4:	07d0      	lsls	r0, r2, #31
 80a1ad6:	bf5c      	itt	pl
 80a1ad8:	2201      	movpl	r2, #1
 80a1ada:	601a      	strpl	r2, [r3, #0]
 80a1adc:	4b0c      	ldr	r3, [pc, #48]	; (80a1b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1ade:	681a      	ldr	r2, [r3, #0]
 80a1ae0:	07d1      	lsls	r1, r2, #31
 80a1ae2:	bf5c      	itt	pl
 80a1ae4:	2201      	movpl	r2, #1
 80a1ae6:	601a      	strpl	r2, [r3, #0]
 80a1ae8:	4b0a      	ldr	r3, [pc, #40]	; (80a1b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1aea:	681a      	ldr	r2, [r3, #0]
 80a1aec:	07d2      	lsls	r2, r2, #31
 80a1aee:	bf5c      	itt	pl
 80a1af0:	2201      	movpl	r2, #1
 80a1af2:	601a      	strpl	r2, [r3, #0]
 80a1af4:	4770      	bx	lr
 80a1af6:	bf00      	nop
 80a1af8:	20000958 	.word	0x20000958
 80a1afc:	20000954 	.word	0x20000954
 80a1b00:	20000950 	.word	0x20000950
 80a1b04:	2000094c 	.word	0x2000094c
 80a1b08:	20000948 	.word	0x20000948
 80a1b0c:	20000944 	.word	0x20000944
 80a1b10:	20000940 	.word	0x20000940
 80a1b14:	2000093c 	.word	0x2000093c

080a1b18 <__aeabi_uldivmod>:
 80a1b18:	b953      	cbnz	r3, 80a1b30 <__aeabi_uldivmod+0x18>
 80a1b1a:	b94a      	cbnz	r2, 80a1b30 <__aeabi_uldivmod+0x18>
 80a1b1c:	2900      	cmp	r1, #0
 80a1b1e:	bf08      	it	eq
 80a1b20:	2800      	cmpeq	r0, #0
 80a1b22:	bf1c      	itt	ne
 80a1b24:	f04f 31ff 	movne.w	r1, #4294967295
 80a1b28:	f04f 30ff 	movne.w	r0, #4294967295
 80a1b2c:	f000 b982 	b.w	80a1e34 <__aeabi_idiv0>
 80a1b30:	f1ad 0c08 	sub.w	ip, sp, #8
 80a1b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a1b38:	f000 f806 	bl	80a1b48 <__udivmoddi4>
 80a1b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a1b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a1b44:	b004      	add	sp, #16
 80a1b46:	4770      	bx	lr

080a1b48 <__udivmoddi4>:
 80a1b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1b4c:	468c      	mov	ip, r1
 80a1b4e:	460c      	mov	r4, r1
 80a1b50:	4605      	mov	r5, r0
 80a1b52:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a1b54:	2b00      	cmp	r3, #0
 80a1b56:	d14f      	bne.n	80a1bf8 <__udivmoddi4+0xb0>
 80a1b58:	428a      	cmp	r2, r1
 80a1b5a:	4617      	mov	r7, r2
 80a1b5c:	d96b      	bls.n	80a1c36 <__udivmoddi4+0xee>
 80a1b5e:	fab2 fe82 	clz	lr, r2
 80a1b62:	f1be 0f00 	cmp.w	lr, #0
 80a1b66:	d00b      	beq.n	80a1b80 <__udivmoddi4+0x38>
 80a1b68:	f1ce 0520 	rsb	r5, lr, #32
 80a1b6c:	fa20 f505 	lsr.w	r5, r0, r5
 80a1b70:	fa01 f30e 	lsl.w	r3, r1, lr
 80a1b74:	ea45 0c03 	orr.w	ip, r5, r3
 80a1b78:	fa02 f70e 	lsl.w	r7, r2, lr
 80a1b7c:	fa00 f50e 	lsl.w	r5, r0, lr
 80a1b80:	0c39      	lsrs	r1, r7, #16
 80a1b82:	fbbc f0f1 	udiv	r0, ip, r1
 80a1b86:	b2ba      	uxth	r2, r7
 80a1b88:	fb01 c310 	mls	r3, r1, r0, ip
 80a1b8c:	fb00 f802 	mul.w	r8, r0, r2
 80a1b90:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a1b94:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a1b98:	45a0      	cmp	r8, r4
 80a1b9a:	d909      	bls.n	80a1bb0 <__udivmoddi4+0x68>
 80a1b9c:	19e4      	adds	r4, r4, r7
 80a1b9e:	f100 33ff 	add.w	r3, r0, #4294967295
 80a1ba2:	f080 8128 	bcs.w	80a1df6 <__udivmoddi4+0x2ae>
 80a1ba6:	45a0      	cmp	r8, r4
 80a1ba8:	f240 8125 	bls.w	80a1df6 <__udivmoddi4+0x2ae>
 80a1bac:	3802      	subs	r0, #2
 80a1bae:	443c      	add	r4, r7
 80a1bb0:	ebc8 0404 	rsb	r4, r8, r4
 80a1bb4:	fbb4 f3f1 	udiv	r3, r4, r1
 80a1bb8:	fb01 4c13 	mls	ip, r1, r3, r4
 80a1bbc:	fb03 f202 	mul.w	r2, r3, r2
 80a1bc0:	b2ac      	uxth	r4, r5
 80a1bc2:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a1bc6:	428a      	cmp	r2, r1
 80a1bc8:	d909      	bls.n	80a1bde <__udivmoddi4+0x96>
 80a1bca:	19c9      	adds	r1, r1, r7
 80a1bcc:	f103 34ff 	add.w	r4, r3, #4294967295
 80a1bd0:	f080 810f 	bcs.w	80a1df2 <__udivmoddi4+0x2aa>
 80a1bd4:	428a      	cmp	r2, r1
 80a1bd6:	f240 810c 	bls.w	80a1df2 <__udivmoddi4+0x2aa>
 80a1bda:	3b02      	subs	r3, #2
 80a1bdc:	4439      	add	r1, r7
 80a1bde:	1a8a      	subs	r2, r1, r2
 80a1be0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a1be4:	2100      	movs	r1, #0
 80a1be6:	2e00      	cmp	r6, #0
 80a1be8:	d063      	beq.n	80a1cb2 <__udivmoddi4+0x16a>
 80a1bea:	fa22 f20e 	lsr.w	r2, r2, lr
 80a1bee:	2300      	movs	r3, #0
 80a1bf0:	e886 000c 	stmia.w	r6, {r2, r3}
 80a1bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1bf8:	428b      	cmp	r3, r1
 80a1bfa:	d907      	bls.n	80a1c0c <__udivmoddi4+0xc4>
 80a1bfc:	2e00      	cmp	r6, #0
 80a1bfe:	d056      	beq.n	80a1cae <__udivmoddi4+0x166>
 80a1c00:	2100      	movs	r1, #0
 80a1c02:	e886 0011 	stmia.w	r6, {r0, r4}
 80a1c06:	4608      	mov	r0, r1
 80a1c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1c0c:	fab3 f183 	clz	r1, r3
 80a1c10:	2900      	cmp	r1, #0
 80a1c12:	f040 8093 	bne.w	80a1d3c <__udivmoddi4+0x1f4>
 80a1c16:	42a3      	cmp	r3, r4
 80a1c18:	d302      	bcc.n	80a1c20 <__udivmoddi4+0xd8>
 80a1c1a:	4282      	cmp	r2, r0
 80a1c1c:	f200 80fe 	bhi.w	80a1e1c <__udivmoddi4+0x2d4>
 80a1c20:	1a85      	subs	r5, r0, r2
 80a1c22:	eb64 0303 	sbc.w	r3, r4, r3
 80a1c26:	469c      	mov	ip, r3
 80a1c28:	2001      	movs	r0, #1
 80a1c2a:	2e00      	cmp	r6, #0
 80a1c2c:	d041      	beq.n	80a1cb2 <__udivmoddi4+0x16a>
 80a1c2e:	e886 1020 	stmia.w	r6, {r5, ip}
 80a1c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1c36:	b912      	cbnz	r2, 80a1c3e <__udivmoddi4+0xf6>
 80a1c38:	2701      	movs	r7, #1
 80a1c3a:	fbb7 f7f2 	udiv	r7, r7, r2
 80a1c3e:	fab7 fe87 	clz	lr, r7
 80a1c42:	f1be 0f00 	cmp.w	lr, #0
 80a1c46:	d136      	bne.n	80a1cb6 <__udivmoddi4+0x16e>
 80a1c48:	1be4      	subs	r4, r4, r7
 80a1c4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a1c4e:	fa1f f987 	uxth.w	r9, r7
 80a1c52:	2101      	movs	r1, #1
 80a1c54:	fbb4 f3f8 	udiv	r3, r4, r8
 80a1c58:	fb08 4413 	mls	r4, r8, r3, r4
 80a1c5c:	fb09 f203 	mul.w	r2, r9, r3
 80a1c60:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a1c64:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a1c68:	42a2      	cmp	r2, r4
 80a1c6a:	d907      	bls.n	80a1c7c <__udivmoddi4+0x134>
 80a1c6c:	19e4      	adds	r4, r4, r7
 80a1c6e:	f103 30ff 	add.w	r0, r3, #4294967295
 80a1c72:	d202      	bcs.n	80a1c7a <__udivmoddi4+0x132>
 80a1c74:	42a2      	cmp	r2, r4
 80a1c76:	f200 80d3 	bhi.w	80a1e20 <__udivmoddi4+0x2d8>
 80a1c7a:	4603      	mov	r3, r0
 80a1c7c:	1aa4      	subs	r4, r4, r2
 80a1c7e:	fbb4 f0f8 	udiv	r0, r4, r8
 80a1c82:	fb08 4810 	mls	r8, r8, r0, r4
 80a1c86:	fb09 f900 	mul.w	r9, r9, r0
 80a1c8a:	b2ac      	uxth	r4, r5
 80a1c8c:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a1c90:	4591      	cmp	r9, r2
 80a1c92:	d907      	bls.n	80a1ca4 <__udivmoddi4+0x15c>
 80a1c94:	19d2      	adds	r2, r2, r7
 80a1c96:	f100 34ff 	add.w	r4, r0, #4294967295
 80a1c9a:	d202      	bcs.n	80a1ca2 <__udivmoddi4+0x15a>
 80a1c9c:	4591      	cmp	r9, r2
 80a1c9e:	f200 80ba 	bhi.w	80a1e16 <__udivmoddi4+0x2ce>
 80a1ca2:	4620      	mov	r0, r4
 80a1ca4:	ebc9 0202 	rsb	r2, r9, r2
 80a1ca8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a1cac:	e79b      	b.n	80a1be6 <__udivmoddi4+0x9e>
 80a1cae:	4631      	mov	r1, r6
 80a1cb0:	4630      	mov	r0, r6
 80a1cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1cb6:	fa07 f70e 	lsl.w	r7, r7, lr
 80a1cba:	f1ce 0c20 	rsb	ip, lr, #32
 80a1cbe:	fa24 f30c 	lsr.w	r3, r4, ip
 80a1cc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a1cc6:	fbb3 faf8 	udiv	sl, r3, r8
 80a1cca:	fa1f f987 	uxth.w	r9, r7
 80a1cce:	fb08 351a 	mls	r5, r8, sl, r3
 80a1cd2:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1cd6:	fa04 f40e 	lsl.w	r4, r4, lr
 80a1cda:	fb0a fb09 	mul.w	fp, sl, r9
 80a1cde:	ea4c 0c04 	orr.w	ip, ip, r4
 80a1ce2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a1ce6:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a1cea:	459b      	cmp	fp, r3
 80a1cec:	fa00 f50e 	lsl.w	r5, r0, lr
 80a1cf0:	d90a      	bls.n	80a1d08 <__udivmoddi4+0x1c0>
 80a1cf2:	19db      	adds	r3, r3, r7
 80a1cf4:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a1cf8:	f080 808b 	bcs.w	80a1e12 <__udivmoddi4+0x2ca>
 80a1cfc:	459b      	cmp	fp, r3
 80a1cfe:	f240 8088 	bls.w	80a1e12 <__udivmoddi4+0x2ca>
 80a1d02:	f1aa 0a02 	sub.w	sl, sl, #2
 80a1d06:	443b      	add	r3, r7
 80a1d08:	ebcb 0303 	rsb	r3, fp, r3
 80a1d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 80a1d10:	fb08 3310 	mls	r3, r8, r0, r3
 80a1d14:	fb00 f409 	mul.w	r4, r0, r9
 80a1d18:	fa1f fc8c 	uxth.w	ip, ip
 80a1d1c:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a1d20:	429c      	cmp	r4, r3
 80a1d22:	d907      	bls.n	80a1d34 <__udivmoddi4+0x1ec>
 80a1d24:	19db      	adds	r3, r3, r7
 80a1d26:	f100 32ff 	add.w	r2, r0, #4294967295
 80a1d2a:	d26e      	bcs.n	80a1e0a <__udivmoddi4+0x2c2>
 80a1d2c:	429c      	cmp	r4, r3
 80a1d2e:	d96c      	bls.n	80a1e0a <__udivmoddi4+0x2c2>
 80a1d30:	3802      	subs	r0, #2
 80a1d32:	443b      	add	r3, r7
 80a1d34:	1b1c      	subs	r4, r3, r4
 80a1d36:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a1d3a:	e78b      	b.n	80a1c54 <__udivmoddi4+0x10c>
 80a1d3c:	f1c1 0e20 	rsb	lr, r1, #32
 80a1d40:	408b      	lsls	r3, r1
 80a1d42:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a1d46:	ea4c 0c03 	orr.w	ip, ip, r3
 80a1d4a:	fa24 f70e 	lsr.w	r7, r4, lr
 80a1d4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a1d52:	fbb7 faf9 	udiv	sl, r7, r9
 80a1d56:	fa1f f38c 	uxth.w	r3, ip
 80a1d5a:	fb09 771a 	mls	r7, r9, sl, r7
 80a1d5e:	fa20 f80e 	lsr.w	r8, r0, lr
 80a1d62:	408c      	lsls	r4, r1
 80a1d64:	fb0a f503 	mul.w	r5, sl, r3
 80a1d68:	ea48 0404 	orr.w	r4, r8, r4
 80a1d6c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a1d70:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a1d74:	42bd      	cmp	r5, r7
 80a1d76:	fa02 f201 	lsl.w	r2, r2, r1
 80a1d7a:	fa00 fb01 	lsl.w	fp, r0, r1
 80a1d7e:	d909      	bls.n	80a1d94 <__udivmoddi4+0x24c>
 80a1d80:	eb17 070c 	adds.w	r7, r7, ip
 80a1d84:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a1d88:	d241      	bcs.n	80a1e0e <__udivmoddi4+0x2c6>
 80a1d8a:	42bd      	cmp	r5, r7
 80a1d8c:	d93f      	bls.n	80a1e0e <__udivmoddi4+0x2c6>
 80a1d8e:	f1aa 0a02 	sub.w	sl, sl, #2
 80a1d92:	4467      	add	r7, ip
 80a1d94:	1b7f      	subs	r7, r7, r5
 80a1d96:	fbb7 f5f9 	udiv	r5, r7, r9
 80a1d9a:	fb09 7715 	mls	r7, r9, r5, r7
 80a1d9e:	fb05 f303 	mul.w	r3, r5, r3
 80a1da2:	b2a4      	uxth	r4, r4
 80a1da4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a1da8:	42bb      	cmp	r3, r7
 80a1daa:	d908      	bls.n	80a1dbe <__udivmoddi4+0x276>
 80a1dac:	eb17 070c 	adds.w	r7, r7, ip
 80a1db0:	f105 30ff 	add.w	r0, r5, #4294967295
 80a1db4:	d227      	bcs.n	80a1e06 <__udivmoddi4+0x2be>
 80a1db6:	42bb      	cmp	r3, r7
 80a1db8:	d925      	bls.n	80a1e06 <__udivmoddi4+0x2be>
 80a1dba:	3d02      	subs	r5, #2
 80a1dbc:	4467      	add	r7, ip
 80a1dbe:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a1dc2:	fba0 8902 	umull	r8, r9, r0, r2
 80a1dc6:	1aff      	subs	r7, r7, r3
 80a1dc8:	454f      	cmp	r7, r9
 80a1dca:	4645      	mov	r5, r8
 80a1dcc:	464c      	mov	r4, r9
 80a1dce:	d314      	bcc.n	80a1dfa <__udivmoddi4+0x2b2>
 80a1dd0:	d029      	beq.n	80a1e26 <__udivmoddi4+0x2de>
 80a1dd2:	b366      	cbz	r6, 80a1e2e <__udivmoddi4+0x2e6>
 80a1dd4:	ebbb 0305 	subs.w	r3, fp, r5
 80a1dd8:	eb67 0704 	sbc.w	r7, r7, r4
 80a1ddc:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a1de0:	40cb      	lsrs	r3, r1
 80a1de2:	40cf      	lsrs	r7, r1
 80a1de4:	ea4e 0303 	orr.w	r3, lr, r3
 80a1de8:	e886 0088 	stmia.w	r6, {r3, r7}
 80a1dec:	2100      	movs	r1, #0
 80a1dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1df2:	4623      	mov	r3, r4
 80a1df4:	e6f3      	b.n	80a1bde <__udivmoddi4+0x96>
 80a1df6:	4618      	mov	r0, r3
 80a1df8:	e6da      	b.n	80a1bb0 <__udivmoddi4+0x68>
 80a1dfa:	ebb8 0502 	subs.w	r5, r8, r2
 80a1dfe:	eb69 040c 	sbc.w	r4, r9, ip
 80a1e02:	3801      	subs	r0, #1
 80a1e04:	e7e5      	b.n	80a1dd2 <__udivmoddi4+0x28a>
 80a1e06:	4605      	mov	r5, r0
 80a1e08:	e7d9      	b.n	80a1dbe <__udivmoddi4+0x276>
 80a1e0a:	4610      	mov	r0, r2
 80a1e0c:	e792      	b.n	80a1d34 <__udivmoddi4+0x1ec>
 80a1e0e:	4682      	mov	sl, r0
 80a1e10:	e7c0      	b.n	80a1d94 <__udivmoddi4+0x24c>
 80a1e12:	4692      	mov	sl, r2
 80a1e14:	e778      	b.n	80a1d08 <__udivmoddi4+0x1c0>
 80a1e16:	3802      	subs	r0, #2
 80a1e18:	443a      	add	r2, r7
 80a1e1a:	e743      	b.n	80a1ca4 <__udivmoddi4+0x15c>
 80a1e1c:	4608      	mov	r0, r1
 80a1e1e:	e704      	b.n	80a1c2a <__udivmoddi4+0xe2>
 80a1e20:	3b02      	subs	r3, #2
 80a1e22:	443c      	add	r4, r7
 80a1e24:	e72a      	b.n	80a1c7c <__udivmoddi4+0x134>
 80a1e26:	45c3      	cmp	fp, r8
 80a1e28:	d3e7      	bcc.n	80a1dfa <__udivmoddi4+0x2b2>
 80a1e2a:	463c      	mov	r4, r7
 80a1e2c:	e7d1      	b.n	80a1dd2 <__udivmoddi4+0x28a>
 80a1e2e:	4631      	mov	r1, r6
 80a1e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1e34 <__aeabi_idiv0>:
 80a1e34:	4770      	bx	lr
 80a1e36:	bf00      	nop

080a1e38 <atoi>:
 80a1e38:	220a      	movs	r2, #10
 80a1e3a:	2100      	movs	r1, #0
 80a1e3c:	f000 b920 	b.w	80a2080 <strtol>

080a1e40 <calloc>:
 80a1e40:	4b02      	ldr	r3, [pc, #8]	; (80a1e4c <calloc+0xc>)
 80a1e42:	460a      	mov	r2, r1
 80a1e44:	4601      	mov	r1, r0
 80a1e46:	6818      	ldr	r0, [r3, #0]
 80a1e48:	f000 b84d 	b.w	80a1ee6 <_calloc_r>
 80a1e4c:	2000036c 	.word	0x2000036c

080a1e50 <__cxa_atexit>:
 80a1e50:	b510      	push	{r4, lr}
 80a1e52:	4c05      	ldr	r4, [pc, #20]	; (80a1e68 <__cxa_atexit+0x18>)
 80a1e54:	4613      	mov	r3, r2
 80a1e56:	b12c      	cbz	r4, 80a1e64 <__cxa_atexit+0x14>
 80a1e58:	460a      	mov	r2, r1
 80a1e5a:	4601      	mov	r1, r0
 80a1e5c:	2002      	movs	r0, #2
 80a1e5e:	f3af 8000 	nop.w
 80a1e62:	bd10      	pop	{r4, pc}
 80a1e64:	4620      	mov	r0, r4
 80a1e66:	bd10      	pop	{r4, pc}
 80a1e68:	00000000 	.word	0x00000000

080a1e6c <memcmp>:
 80a1e6c:	b510      	push	{r4, lr}
 80a1e6e:	3901      	subs	r1, #1
 80a1e70:	4402      	add	r2, r0
 80a1e72:	4290      	cmp	r0, r2
 80a1e74:	d007      	beq.n	80a1e86 <memcmp+0x1a>
 80a1e76:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a1e7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a1e7e:	42a3      	cmp	r3, r4
 80a1e80:	d0f7      	beq.n	80a1e72 <memcmp+0x6>
 80a1e82:	1b18      	subs	r0, r3, r4
 80a1e84:	bd10      	pop	{r4, pc}
 80a1e86:	2000      	movs	r0, #0
 80a1e88:	bd10      	pop	{r4, pc}

080a1e8a <memcpy>:
 80a1e8a:	b510      	push	{r4, lr}
 80a1e8c:	1e43      	subs	r3, r0, #1
 80a1e8e:	440a      	add	r2, r1
 80a1e90:	4291      	cmp	r1, r2
 80a1e92:	d004      	beq.n	80a1e9e <memcpy+0x14>
 80a1e94:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1e9c:	e7f8      	b.n	80a1e90 <memcpy+0x6>
 80a1e9e:	bd10      	pop	{r4, pc}

080a1ea0 <memmove>:
 80a1ea0:	4288      	cmp	r0, r1
 80a1ea2:	b510      	push	{r4, lr}
 80a1ea4:	eb01 0302 	add.w	r3, r1, r2
 80a1ea8:	d801      	bhi.n	80a1eae <memmove+0xe>
 80a1eaa:	1e42      	subs	r2, r0, #1
 80a1eac:	e00b      	b.n	80a1ec6 <memmove+0x26>
 80a1eae:	4298      	cmp	r0, r3
 80a1eb0:	d2fb      	bcs.n	80a1eaa <memmove+0xa>
 80a1eb2:	1881      	adds	r1, r0, r2
 80a1eb4:	1ad2      	subs	r2, r2, r3
 80a1eb6:	42d3      	cmn	r3, r2
 80a1eb8:	d004      	beq.n	80a1ec4 <memmove+0x24>
 80a1eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a1ebe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80a1ec2:	e7f8      	b.n	80a1eb6 <memmove+0x16>
 80a1ec4:	bd10      	pop	{r4, pc}
 80a1ec6:	4299      	cmp	r1, r3
 80a1ec8:	d004      	beq.n	80a1ed4 <memmove+0x34>
 80a1eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1ece:	f802 4f01 	strb.w	r4, [r2, #1]!
 80a1ed2:	e7f8      	b.n	80a1ec6 <memmove+0x26>
 80a1ed4:	bd10      	pop	{r4, pc}

080a1ed6 <memset>:
 80a1ed6:	4603      	mov	r3, r0
 80a1ed8:	4402      	add	r2, r0
 80a1eda:	4293      	cmp	r3, r2
 80a1edc:	d002      	beq.n	80a1ee4 <memset+0xe>
 80a1ede:	f803 1b01 	strb.w	r1, [r3], #1
 80a1ee2:	e7fa      	b.n	80a1eda <memset+0x4>
 80a1ee4:	4770      	bx	lr

080a1ee6 <_calloc_r>:
 80a1ee6:	b538      	push	{r3, r4, r5, lr}
 80a1ee8:	fb02 f401 	mul.w	r4, r2, r1
 80a1eec:	4621      	mov	r1, r4
 80a1eee:	f7fe fc6f 	bl	80a07d0 <_malloc_r>
 80a1ef2:	4605      	mov	r5, r0
 80a1ef4:	b118      	cbz	r0, 80a1efe <_calloc_r+0x18>
 80a1ef6:	4622      	mov	r2, r4
 80a1ef8:	2100      	movs	r1, #0
 80a1efa:	f7ff ffec 	bl	80a1ed6 <memset>
 80a1efe:	4628      	mov	r0, r5
 80a1f00:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1f04 <srand>:
 80a1f04:	b538      	push	{r3, r4, r5, lr}
 80a1f06:	4b12      	ldr	r3, [pc, #72]	; (80a1f50 <srand+0x4c>)
 80a1f08:	4605      	mov	r5, r0
 80a1f0a:	681c      	ldr	r4, [r3, #0]
 80a1f0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1f0e:	b9d3      	cbnz	r3, 80a1f46 <srand+0x42>
 80a1f10:	2018      	movs	r0, #24
 80a1f12:	f7fe fc3d 	bl	80a0790 <malloc>
 80a1f16:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1f1a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1f1c:	8003      	strh	r3, [r0, #0]
 80a1f1e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1f22:	8043      	strh	r3, [r0, #2]
 80a1f24:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1f28:	8083      	strh	r3, [r0, #4]
 80a1f2a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1f2e:	80c3      	strh	r3, [r0, #6]
 80a1f30:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1f34:	8103      	strh	r3, [r0, #8]
 80a1f36:	2305      	movs	r3, #5
 80a1f38:	8143      	strh	r3, [r0, #10]
 80a1f3a:	230b      	movs	r3, #11
 80a1f3c:	8183      	strh	r3, [r0, #12]
 80a1f3e:	2201      	movs	r2, #1
 80a1f40:	2300      	movs	r3, #0
 80a1f42:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1f46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1f48:	2200      	movs	r2, #0
 80a1f4a:	611d      	str	r5, [r3, #16]
 80a1f4c:	615a      	str	r2, [r3, #20]
 80a1f4e:	bd38      	pop	{r3, r4, r5, pc}
 80a1f50:	2000036c 	.word	0x2000036c

080a1f54 <strcpy>:
 80a1f54:	4603      	mov	r3, r0
 80a1f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a1f5a:	f803 2b01 	strb.w	r2, [r3], #1
 80a1f5e:	2a00      	cmp	r2, #0
 80a1f60:	d1f9      	bne.n	80a1f56 <strcpy+0x2>
 80a1f62:	4770      	bx	lr

080a1f64 <strlen>:
 80a1f64:	4603      	mov	r3, r0
 80a1f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1f6a:	2a00      	cmp	r2, #0
 80a1f6c:	d1fb      	bne.n	80a1f66 <strlen+0x2>
 80a1f6e:	1a18      	subs	r0, r3, r0
 80a1f70:	3801      	subs	r0, #1
 80a1f72:	4770      	bx	lr

080a1f74 <_strtol_r>:
 80a1f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1f78:	460f      	mov	r7, r1
 80a1f7a:	4680      	mov	r8, r0
 80a1f7c:	483f      	ldr	r0, [pc, #252]	; (80a207c <_strtol_r+0x108>)
 80a1f7e:	f8d0 9000 	ldr.w	r9, [r0]
 80a1f82:	463d      	mov	r5, r7
 80a1f84:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1f88:	eb09 0004 	add.w	r0, r9, r4
 80a1f8c:	7840      	ldrb	r0, [r0, #1]
 80a1f8e:	f000 0008 	and.w	r0, r0, #8
 80a1f92:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a1f96:	b108      	cbz	r0, 80a1f9c <_strtol_r+0x28>
 80a1f98:	462f      	mov	r7, r5
 80a1f9a:	e7f2      	b.n	80a1f82 <_strtol_r+0xe>
 80a1f9c:	2c2d      	cmp	r4, #45	; 0x2d
 80a1f9e:	d103      	bne.n	80a1fa8 <_strtol_r+0x34>
 80a1fa0:	1cbd      	adds	r5, r7, #2
 80a1fa2:	787c      	ldrb	r4, [r7, #1]
 80a1fa4:	2601      	movs	r6, #1
 80a1fa6:	e003      	b.n	80a1fb0 <_strtol_r+0x3c>
 80a1fa8:	2c2b      	cmp	r4, #43	; 0x2b
 80a1faa:	bf04      	itt	eq
 80a1fac:	787c      	ldrbeq	r4, [r7, #1]
 80a1fae:	1cbd      	addeq	r5, r7, #2
 80a1fb0:	b113      	cbz	r3, 80a1fb8 <_strtol_r+0x44>
 80a1fb2:	2b10      	cmp	r3, #16
 80a1fb4:	d10a      	bne.n	80a1fcc <_strtol_r+0x58>
 80a1fb6:	e05b      	b.n	80a2070 <_strtol_r+0xfc>
 80a1fb8:	2c30      	cmp	r4, #48	; 0x30
 80a1fba:	d157      	bne.n	80a206c <_strtol_r+0xf8>
 80a1fbc:	7828      	ldrb	r0, [r5, #0]
 80a1fbe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a1fc2:	2858      	cmp	r0, #88	; 0x58
 80a1fc4:	d14d      	bne.n	80a2062 <_strtol_r+0xee>
 80a1fc6:	786c      	ldrb	r4, [r5, #1]
 80a1fc8:	2310      	movs	r3, #16
 80a1fca:	3502      	adds	r5, #2
 80a1fcc:	2e00      	cmp	r6, #0
 80a1fce:	bf14      	ite	ne
 80a1fd0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a1fd4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a1fd8:	fbbc faf3 	udiv	sl, ip, r3
 80a1fdc:	2700      	movs	r7, #0
 80a1fde:	4638      	mov	r0, r7
 80a1fe0:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a1fe4:	eb09 0e04 	add.w	lr, r9, r4
 80a1fe8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a1fec:	f01e 0f04 	tst.w	lr, #4
 80a1ff0:	d001      	beq.n	80a1ff6 <_strtol_r+0x82>
 80a1ff2:	3c30      	subs	r4, #48	; 0x30
 80a1ff4:	e00b      	b.n	80a200e <_strtol_r+0x9a>
 80a1ff6:	f01e 0e03 	ands.w	lr, lr, #3
 80a1ffa:	d01b      	beq.n	80a2034 <_strtol_r+0xc0>
 80a1ffc:	f1be 0f01 	cmp.w	lr, #1
 80a2000:	bf0c      	ite	eq
 80a2002:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a2006:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a200a:	ebce 0404 	rsb	r4, lr, r4
 80a200e:	42a3      	cmp	r3, r4
 80a2010:	dd10      	ble.n	80a2034 <_strtol_r+0xc0>
 80a2012:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a2016:	d00a      	beq.n	80a202e <_strtol_r+0xba>
 80a2018:	4550      	cmp	r0, sl
 80a201a:	d806      	bhi.n	80a202a <_strtol_r+0xb6>
 80a201c:	d101      	bne.n	80a2022 <_strtol_r+0xae>
 80a201e:	4564      	cmp	r4, ip
 80a2020:	dc03      	bgt.n	80a202a <_strtol_r+0xb6>
 80a2022:	fb03 4000 	mla	r0, r3, r0, r4
 80a2026:	2701      	movs	r7, #1
 80a2028:	e001      	b.n	80a202e <_strtol_r+0xba>
 80a202a:	f04f 37ff 	mov.w	r7, #4294967295
 80a202e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a2032:	e7d7      	b.n	80a1fe4 <_strtol_r+0x70>
 80a2034:	1c7b      	adds	r3, r7, #1
 80a2036:	d10c      	bne.n	80a2052 <_strtol_r+0xde>
 80a2038:	2e00      	cmp	r6, #0
 80a203a:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a203e:	bf14      	ite	ne
 80a2040:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a2044:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a2048:	f8c8 3000 	str.w	r3, [r8]
 80a204c:	b92a      	cbnz	r2, 80a205a <_strtol_r+0xe6>
 80a204e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2052:	b106      	cbz	r6, 80a2056 <_strtol_r+0xe2>
 80a2054:	4240      	negs	r0, r0
 80a2056:	b172      	cbz	r2, 80a2076 <_strtol_r+0x102>
 80a2058:	b107      	cbz	r7, 80a205c <_strtol_r+0xe8>
 80a205a:	1e69      	subs	r1, r5, #1
 80a205c:	6011      	str	r1, [r2, #0]
 80a205e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2062:	2430      	movs	r4, #48	; 0x30
 80a2064:	2b00      	cmp	r3, #0
 80a2066:	d1b1      	bne.n	80a1fcc <_strtol_r+0x58>
 80a2068:	2308      	movs	r3, #8
 80a206a:	e7af      	b.n	80a1fcc <_strtol_r+0x58>
 80a206c:	230a      	movs	r3, #10
 80a206e:	e7ad      	b.n	80a1fcc <_strtol_r+0x58>
 80a2070:	2c30      	cmp	r4, #48	; 0x30
 80a2072:	d0a3      	beq.n	80a1fbc <_strtol_r+0x48>
 80a2074:	e7aa      	b.n	80a1fcc <_strtol_r+0x58>
 80a2076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a207a:	bf00      	nop
 80a207c:	20000308 	.word	0x20000308

080a2080 <strtol>:
 80a2080:	4613      	mov	r3, r2
 80a2082:	460a      	mov	r2, r1
 80a2084:	4601      	mov	r1, r0
 80a2086:	4802      	ldr	r0, [pc, #8]	; (80a2090 <strtol+0x10>)
 80a2088:	6800      	ldr	r0, [r0, #0]
 80a208a:	f7ff bf73 	b.w	80a1f74 <_strtol_r>
 80a208e:	bf00      	nop
 80a2090:	2000036c 	.word	0x2000036c

080a2094 <dynalib_user>:
 80a2094:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a20a4:	00000000 0062003d 6f727245 202c6572     ....=.b.Errore, 
 80a20b4:	616d6f63 2069646e 70736964 62696e6f     comandi disponib
 80a20c4:	3a696c69 20720020 53534f52 62202c4f     ili: .r ROSSO, b
 80a20d4:	554c4220 2067202c 44524556 6f202c45      BLU, g VERDE, o
 80a20e4:	45505320 00494e47                        SPEGNI.

080a20ec <_ZTV8SPIClass>:
	...
 80a20f4:	080a07e1 080a07e3 6e6c0066 006e6600     ........f.ln.fn.
 80a2104:	65646f63 74656400 006c6961 25000a0d     code.detail....%
 80a2114:	75303130 205d0020 00642500 2800202c     010u .] .%d., .(
 80a2124:	00203a29 63005b20 2065646f 2500203d     ): . [.code = .%
 80a2134:	65640069 6c696174 203d2073 75616200     i.details = .bau
 80a2144:	65530064 6c616972 42535500 69726553     d.Serial.USBSeri
 80a2154:	00316c61 65707974 72617000 63006d61     al1.type.param.c
 80a2164:	6800646d 7300646e 006d7274 746c6966     md.hnd.strm.filt
 80a2174:	6c766c00 64646100 646e6148 0072656c     .lvl.addHandler.
 80a2184:	6f6d6572 61486576 656c646e 6e650072     removeHandler.en
 80a2194:	61486d75 656c646e 4a007372 534e4f53     umHandlers.JSONS
 80a21a4:	61657274 676f4c6d 646e6148 0072656c     treamLogHandler.
 80a21b4:	00707061 656e6f6e 61727400 69006563     app.none.trace.i
 80a21c4:	006f666e 6e726177 72726500 7000726f     nfo.warn.error.p
 80a21d4:	63696e61 6c6c6100 25005a00 6433302b     anic.all.Z.%+03d
 80a21e4:	3230253a 59250075 2d6d252d 25546425     :%02u.%Y-%m-%dT%
 80a21f4:	4d253a48 2553253a 7361007a 6d697463     H:%M:%S%z.asctim
 80a2204:	00000065                                e...

080a2208 <_ZTV9IPAddress>:
	...
 80a2210:	080a0c15 080a0c05 080a0c07              ............

080a221c <_ZTV9USBSerial>:
	...
 80a2224:	080a0cd1 080a0d21 080a0d2f 080a0935     ....!.../...5...
 80a2234:	080a0d0d 080a0cd3 080a0ce9 080a0d1b     ................
 80a2244:	080a0cff 080a0ccd                       ........

080a224c <_ZTV11USARTSerial>:
	...
 80a2254:	080a0e71 080a0ec1 080a0ecf 080a0935     q...........5...
 80a2264:	080a0e85 080a0ea7 080a0e93 080a0ebb     ................
 80a2274:	080a0e73 080a0e77                       s...w...

080a227c <_ZTV7TwoWire>:
	...
 80a2284:	080a0f75 080a0fbf 080a0f97 080a0f77     u...........w...
 80a2294:	080a0f9f 080a0fa7 080a0faf 080a0fb7     ................

080a22a4 <_ZTVN5spark9WiFiClassE>:
	...
 80a22ac:	080a108f 080a1085 080a107b 080a0ff9     ........{.......
 80a22bc:	080a0a61 080a106f 080a1063 080a105b     a...o...c...[...
 80a22cc:	080a1051 080a1047 080a1003              Q...G.......

080a22d8 <_ZTVN5spark12NetworkClassE>:
	...
 80a22e0:	080a10ad 080a10b7 080a10c1 080a10cb     ................
 80a22f0:	080a10d5 080a10e1 080a10ed 080a10f9     ................
 80a2300:	080a1101 080a110b 080a1115 69736162     ............basi
 80a2310:	74735f63 676e6972 4d5f3a3a 6572635f     c_string::_M_cre
 80a2320:	00657461 203a7325 6f705f5f 77282073     ate.%s: __pos (w
 80a2330:	68636968 20736920 29757a25 74203e20     hich is %zu) > t
 80a2340:	2d736968 7a69733e 20292865 69687728     his->size() (whi
 80a2350:	69206863 7a252073 62002975 63697361     ch is %zu).basic
 80a2360:	7274735f 3a676e69 3a74613a 6e5f5f20     _string::at: __n
 80a2370:	68772820 20686369 25207369 2029757a      (which is %zu) 
 80a2380:	74203d3e 2d736968 7a69733e 20292865     >= this->size() 
 80a2390:	69687728 69206863 7a252073 62002975     (which is %zu).b
 80a23a0:	63697361 7274735f 3a676e69 6172653a     asic_string::era
 80a23b0:	62006573 63697361 7274735f 3a676e69     se.basic_string:
 80a23c0:	5f4d5f3a 6c706572 5f656361 00787561     :_M_replace_aux.
 80a23d0:	69736162 74735f63 676e6972 6e693a3a     basic_string::in
 80a23e0:	74726573 73616200 735f6369 6e697274     sert.basic_strin
 80a23f0:	723a3a67 616c7065 62006563 63697361     g::replace.basic
 80a2400:	7274735f 3a676e69 5f4d5f3a 6c706572     _string::_M_repl
 80a2410:	00656361 69736162 74735f63 676e6972     ace.basic_string
 80a2420:	73613a3a 6e676973 73616200 735f6369     ::assign.basic_s
 80a2430:	6e697274 613a3a67 6e657070 61620064     tring::append.ba
 80a2440:	5f636973 69727473 3a3a676e 79706f63     sic_string::copy
 80a2450:	73616200 735f6369 6e697274 633a3a67     .basic_string::c
 80a2460:	61706d6f 62006572 63697361 7274735f     ompare.basic_str
 80a2470:	3a676e69 5f4d5f3a 736e6f63 63757274     ing::_M_construc
 80a2480:	756e2074 6e206c6c 7620746f 64696c61     t null not valid
 80a2490:	73616200 735f6369 6e697274 623a3a67     .basic_string::b
 80a24a0:	63697361 7274735f 00676e69 69736162     asic_string.basi
 80a24b0:	74735f63 676e6972 75733a3a 72747362     c_string::substr
 80a24c0:	72747300 3a676e69 7274733a 00676e69     .string::string.
 80a24d0:	20746f6e 756f6e65 73206867 65636170     not enough space
 80a24e0:	726f6620 726f6620 2074616d 61707865      for format expa
 80a24f0:	6f69736e 5028206e 7361656c 75732065     nsion (Please su
 80a2500:	74696d62 6c756620 7562206c 65722067     bmit full bug re
 80a2510:	74726f70 20746120 70747468 672f2f3a     port at http://g
 80a2520:	672e6363 6f2e756e 622f6772 2e736775     cc.gnu.org/bugs.
 80a2530:	6c6d7468 200a3a29 00202020 58782b2d     html):.    .-+xX
 80a2540:	33323130 37363534 62613938 66656463     0123456789abcdef
 80a2550:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 80a2560:	782b2d00 32313058 36353433 61393837     .-+xX0123456789a
 80a2570:	65646362 43424166 00464544 3231302d     bcdefABCDEF.-012
 80a2580:	36353433 00393837 00544d47 00545348     3456789.GMT.HST.
 80a2590:	54534b41 54535000 54534d00 54534300     AKST.PST.MST.CST
 80a25a0:	54534500 54534100 54534e00 54454300     .EST.AST.NST.CET
 80a25b0:	54534900 54454500 54534a00 20200000              .IST.EET.JST.

080a25bd <_ctype_>:
 80a25bd:	20202000 20202020 28282020 20282828     .         ((((( 
 80a25cd:	20202020 20202020 20202020 20202020                     
 80a25dd:	10108820 10101010 10101010 10101010      ...............
 80a25ed:	04040410 04040404 10040404 10101010     ................
 80a25fd:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a260d:	01010101 01010101 01010101 10101010     ................
 80a261d:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a262d:	02020202 02020202 02020202 10101010     ................
 80a263d:	00000020 00000000 00000000 00000000      ...............
	...

080a26c0 <__sf_fake_stdin>:
	...

080a26e0 <__sf_fake_stdout>:
	...

080a2700 <__sf_fake_stderr>:
	...
 80a2720:	00000043                                         C.

080a2722 <link_const_variable_data_end>:
	...

080a2724 <link_constructors_location>:
 80a2724:	080a024d 	.word	0x080a024d
 80a2728:	080a048f 	.word	0x080a048f
 80a272c:	080a0821 	.word	0x080a0821
 80a2730:	080a0a6d 	.word	0x080a0a6d
 80a2734:	080a0a7d 	.word	0x080a0a7d
 80a2738:	080a0ab1 	.word	0x080a0ab1
 80a273c:	080a1099 	.word	0x080a1099
 80a2740:	080a1165 	.word	0x080a1165
 80a2744:	080a1215 	.word	0x080a1215
 80a2748:	080a1259 	.word	0x080a1259
 80a274c:	080a17e9 	.word	0x080a17e9
 80a2750:	080a186d 	.word	0x080a186d
 80a2754:	080a19d1 	.word	0x080a19d1
 80a2758:	080a1a95 	.word	0x080a1a95

080a275c <link_constructors_end>:
 80a275c:	00000000 	.word	0x00000000
